{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/home/logs-options-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/home/logs-options-home.controller.js","mtime":1539717142134},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsOptionsCtrl =\n/*#__PURE__*/\nfunction () {\n  LogsOptionsCtrl.$inject = [\"$state\", \"$stateParams\", \"$window\", \"ControllerHelper\", \"LogsConstants\", \"LogsOfferService\", \"LogsOptionsService\", \"CurrencyService\", \"OrderHelperService\", \"LogsDetailService\"];\n\n  function LogsOptionsCtrl($state, $stateParams, $window, ControllerHelper, LogsConstants, LogsOfferService, LogsOptionsService, CurrencyService, OrderHelperService, LogsDetailService) {\n    _classCallCheck(this, LogsOptionsCtrl);\n\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$window = $window;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsOptionsService = LogsOptionsService;\n    this.CurrencyService = CurrencyService;\n    this.OrderHelperService = OrderHelperService;\n    this.LogsDetailService = LogsDetailService;\n    this.LogsConstants = LogsConstants;\n    this.serviceName = this.$stateParams.serviceName;\n    this.messages = {};\n    this.initLoaders();\n  }\n  /**\n   * initializes the options and currentOptions loaders\n   *\n   * @memberof LogsOptionsCtrl\n   */\n\n\n  _createClass(LogsOptionsCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.options = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsService.getOptions(_this.serviceName);\n        }\n      });\n      this.currentOptions = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsService.getSubscribedOptionsMapGrouped(_this.serviceName);\n        }\n      });\n      this.selectedOffer = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsService.getOffer(_this.serviceName);\n        }\n      });\n      this.service = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsDetailService.getServiceDetails(_this.serviceName).then(function (service) {\n            if (service.state !== _this.LogsConstants.SERVICE_STATE_ENABLED) {\n              _this.goToHomePage();\n            } else {\n              _this.options.load();\n\n              _this.currentOptions.load();\n\n              _this.selectedOffer.load();\n            }\n\n            return service;\n          });\n        }\n      });\n      this.service.load();\n    }\n    /**\n     * returns the total price for all the selected options\n     *\n     * @returns the total price\n     * @memberof LogsOptionsCtrl\n     */\n\n  }, {\n    key: \"getTotalPrice\",\n    value: function getTotalPrice() {\n      return _.reduce(this.options.data, function (total, option) {\n        return total + option.quantity * option.price;\n      }, 0).toFixed(2);\n    }\n    /**\n     * returns the list of selected options\n     *\n     * @returns the list of options selected for order\n     * @memberof LogsOptionsCtrl\n     */\n\n  }, {\n    key: \"getSelectedOptions\",\n    value: function getSelectedOptions() {\n      return this.LogsOptionsService.constructor.getOptionsToOrder(this.options.data);\n    }\n  }, {\n    key: \"updateOptionToOrder\",\n    value: function updateOptionToOrder(newValue, selectedOption) {\n      var option = _.find(this.options.data, {\n        planCode: selectedOption.planCode\n      });\n\n      if (!_.isEmpty(option)) {\n        _.set(option, 'quantity', newValue);\n      }\n    }\n    /**\n     * returns the current currency symbol being used\n     *\n     * @returns the symbol for the current currency\n     * @memberof LogsOptionsCtrl\n     */\n\n  }, {\n    key: \"getCurrentCurrency\",\n    value: function getCurrentCurrency() {\n      return this.CurrencyService.getCurrentCurrency();\n    }\n    /**\n     * Checks if the user has a basic offer\n     *\n     * @returns true if the user is subscribed to a basic offer\n     * @memberof LogsOptionsCtrl\n     */\n\n  }, {\n    key: \"isBasicOffer\",\n    value: function isBasicOffer() {\n      return this.selectedOffer.data.reference === this.LogsConstants.basicOffer;\n    }\n    /**\n     * takes the browser to the previously visited page\n     *\n     * @memberof LogsOptionsCtrl\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.$window.history.back();\n    }\n    /**\n     * opens the order page for the selected options\n     *\n     * @memberof LogsOptionsCtrl\n     */\n\n  }, {\n    key: \"order\",\n    value: function order() {\n      this.OrderHelperService.openExpressOrderUrl(this.LogsOptionsService.getOrderConfiguration(this.options.data, this.serviceName));\n    }\n  }, {\n    key: \"goToHomePage\",\n    value: function goToHomePage() {\n      this.$state.go('dbaas.logs.detail.home');\n    }\n  }]);\n\n  return LogsOptionsCtrl;\n}();\n\nangular.module('managerApp').controller('LogsOptionsCtrl', LogsOptionsCtrl);",null]}