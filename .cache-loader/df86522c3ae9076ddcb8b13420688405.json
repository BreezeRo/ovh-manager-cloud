{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/message/message-container.component.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/message/message-container.component.js","mtime":1539717142268},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var UniqueMessageComposite =\n  /*#__PURE__*/\n  function () {\n    function UniqueMessageComposite(messageList) {\n      _classCallCheck(this, UniqueMessageComposite);\n\n      this.messageList = messageList;\n      this.text = messageList[0].text;\n      this.textHtml = messageList[0].textHtml;\n      this.messageOrder = messageList[0].messageOrder;\n      this.type = messageList[0].type;\n      this.link = messageList[0].link;\n      this.dismissable = messageList[0].dismissable;\n      this.dismissed = !_.some(this.messageList, function (message) {\n        return !message.dismissed;\n      });\n    }\n\n    _createClass(UniqueMessageComposite, [{\n      key: \"dismiss\",\n      value: function dismiss() {\n        this.dismissed = true;\n\n        _.forEach(this.messageList, function (message) {\n          _.set(message, 'dismissed', true);\n\n          if (_.isFunction(message.dismiss)) {\n            message.dismiss();\n          }\n        });\n      }\n    }]);\n\n    return UniqueMessageComposite;\n  }();\n\n  var CuiMessageContainerCtrl =\n  /*#__PURE__*/\n  function () {\n    CuiMessageContainerCtrl.$inject = [\"$scope\"];\n\n    function CuiMessageContainerCtrl($scope) {\n      _classCallCheck(this, CuiMessageContainerCtrl);\n\n      this.$scope = $scope;\n    }\n\n    _createClass(CuiMessageContainerCtrl, [{\n      key: \"$onInit\",\n      value: function $onInit() {\n        var _this = this;\n\n        this.messages = this.messages || [];\n        this.dismissableTypes = this.dismissableTypes || ['info', 'success'];\n        this.groupedTypes = this.groupedTypes || ['error'];\n        this.$scope.$watchCollection(function () {\n          return _this.messages;\n        }, function () {\n          _this.refreshValues();\n\n          _this.groupedMessages = _this.getGroupedMessages();\n        });\n      }\n    }, {\n      key: \"hasMessageToDisplay\",\n      value: function hasMessageToDisplay() {\n        return this.messages.length;\n      }\n    }, {\n      key: \"hasGroupMessageToDisplay\",\n      value: function hasGroupMessageToDisplay(type) {\n        var messageGroup = _.find(this.groupedMessages, function (group) {\n          return group.key === type;\n        });\n\n        return _.some(messageGroup.values, function (value) {\n          return !value.dismissed;\n        });\n      }\n    }, {\n      key: \"refreshValues\",\n      value: function refreshValues() {\n        var _this2 = this;\n\n        var messageOrder = 0;\n\n        _.forEachRight(this.messages, function (message) {\n          if (!_.contains([true, false], message.dismissed)) {\n            _.set(message, 'dismissed', false);\n          }\n\n          _.set(message, 'dismissable', _this2.isDismissable(message.type));\n\n          _.set(message, 'messageOrder', messageOrder += 1);\n        });\n      }\n    }, {\n      key: \"getGroupedMessages\",\n      value: function getGroupedMessages() {\n        var _this3 = this;\n\n        var groupedMessages = _.groupBy(this.messages, 'type');\n\n        var messagePriorities = {\n          error: 1,\n          warning: 2,\n          info: 3,\n          success: 4\n        };\n        return _.map(_.keys(groupedMessages), function (key) {\n          return {\n            key: key,\n            values: _this3.constructor.extractUniqueMessage(groupedMessages[key]),\n            isGroupable: _this3.isGroupable(key),\n            priority: messagePriorities[key],\n            dismissable: _this3.isDismissable(key)\n          };\n        });\n      }\n    }, {\n      key: \"isGroupable\",\n      value: function isGroupable(type) {\n        return _.contains(this.groupedTypes, type);\n      }\n    }, {\n      key: \"isDismissable\",\n      value: function isDismissable(type) {\n        return _.contains(this.dismissableTypes, type);\n      }\n    }], [{\n      key: \"shouldDisplayGroupedMessages\",\n      value: function shouldDisplayGroupedMessages(messageCategory) {\n        return _.filter(messageCategory.values, function (value) {\n          return !value.dismissed;\n        }).length !== 1 && messageCategory.isGroupable;\n      }\n    }, {\n      key: \"extractUniqueMessage\",\n      value: function extractUniqueMessage(messageList) {\n        var groupedMessages = _.groupBy(messageList, function (message) {\n          return message.text || message.textHtml;\n        });\n\n        var groupedMessagesHash = _.map(_.keys(groupedMessages), function (key) {\n          return new UniqueMessageComposite(groupedMessages[key]);\n        });\n\n        return groupedMessagesHash;\n      }\n    }, {\n      key: \"onDismiss\",\n      value: function onDismiss(message) {\n        message.dismiss();\n      }\n    }, {\n      key: \"onGroupDismiss\",\n      value: function onGroupDismiss(groupedMessages) {\n        _.forEach(groupedMessages.values, function (message) {\n          return message.dismiss();\n        });\n      }\n    }]);\n\n    return CuiMessageContainerCtrl;\n  }();\n\n  angular.module('managerApp').component('cuiMessageContainer', {\n    templateUrl: 'app/ui-components/message/message-container.html',\n    controller: CuiMessageContainerCtrl,\n    bindings: {\n      messages: '<',\n      groupedTypes: '<',\n      dismissableTypes: '<'\n    }\n  });\n  angular.module('managerApp').controller('CuiMessageContainerCtrl', CuiMessageContainerCtrl);\n})();",null]}