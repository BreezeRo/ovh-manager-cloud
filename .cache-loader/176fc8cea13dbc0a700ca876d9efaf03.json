{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/snapshot/cloud-project-compute-snapshot.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/snapshot/cloud-project-compute-snapshot.controller.js","mtime":1539717142033},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["\n\nangular.module('managerApp')\n  .controller('CloudProjectComputeSnapshotCtrl',\n    function CloudProjectComputeSnapshotCtrl($uibModal, OvhCloudPriceHelper,\n      OvhApiCloudProjectSnapshot, OvhApiCloudProjectInstance, OvhApiCloudProjectVolume,\n      OvhApiCloudProjectVolumeSnapshot, OvhApiCloudProjectImage, $translate, CloudMessage, $scope,\n      $filter, $q, $timeout, CloudProjectOrchestrator, $state,\n      $stateParams, Poller, RegionService, CLOUD_UNIT_CONVERSION) {\n      const self = this;\n      const serviceName = $stateParams.projectId;\n\n      let instances = [];\n      let images = [];\n\n      const orderBy = $filter('orderBy');\n\n      self.regionService = RegionService;\n      // Datas\n      self.table = {\n        snapshot: [],\n        snapshotFilter: [],\n        snapshotFilterCheckbox: [],\n        snapshotFilterCheckboxPage: [],\n        selected: {},\n        autoSelected: [],\n      };\n\n      self.toggle = {\n        snapshotDeleteId: null, // Curent snapshot to delete\n        openDeleteMultiConfirm: false,\n      };\n\n      // Loader during Datas requests\n      self.loaders = {\n        table: {\n          snapshot: false,\n        },\n        remove: {\n          snapshot: false,\n          snapshotMulti: false,\n        },\n      };\n\n      self.order = {\n        by: 'creationDate',\n        reverse: true,\n      };\n\n      self.GIBIBYTE_TO_BYTE = CLOUD_UNIT_CONVERSION.GIBIBYTE_TO_BYTE;\n\n      function initSearchBar() {\n        self.search = {\n          name: null,\n          size: null,\n          creationStart: null,\n          creationEnd: null,\n        };\n      }\n\n      function init() {\n        self.getSnapshot(true); // set clear cache to true because we need fresh data\n        initSearchBar();\n      }\n\n      self.snapshotPriceStruct = {\n        prices: null,\n        size: 0,\n        total: {},\n      };\n\n      function getMonthlyPrice(size, planCode) {\n        // get the price for first location comming\n        const price = self.snapshotPriceStruct.prices[planCode];\n        if (!price) {\n          return { value: 0, text: '?' };\n        }\n        const priceStruct = angular.copy(price.price);\n        // price for all size\n        priceStruct.value = price.priceInUcents * moment.duration(1, 'months').asHours() * size / 100000000;\n\n        priceStruct.text = priceStruct.text.replace(/\\d+(?:[.,]\\d+)?/, `${priceStruct.value.toFixed(2)}`);\n\n        return priceStruct;\n      }\n\n      function setPrice() {\n        let totalSize = 0;\n        let totalPrice = 0;\n        if (!self.table.snapshot.length) {\n          return;\n        }\n        angular.forEach(self.table.snapshot, (snapshot) => {\n          totalSize += snapshot.size;\n          _.set(snapshot, 'price', getMonthlyPrice(snapshot.size, snapshot.planCode));\n          if (snapshot.price) {\n            totalPrice += snapshot.price.value;\n          }\n        });\n        self.snapshotPriceStruct.size = totalSize;\n        // Copy from formatted price to keep currencyCode\n        self.snapshotPriceStruct.total = angular.copy(self.table.snapshot[0].price);\n        self.snapshotPriceStruct.total.value = totalPrice;\n        self.snapshotPriceStruct.total.text = self.snapshotPriceStruct\n          .total\n          .text\n          .replace(/\\d+(?:[.,]\\d+)?/, `${totalPrice.toFixed(2)}`);\n      }\n\n      // ---------TOOLS---------\n\n      self.getSelectedCount = function () {\n        return Object.keys(self.table.selected).length;\n      };\n\n      $scope.$watch('CloudProjectComputeSnapshotCtrl.table.snapshotFilterPage', (pageSnapshots) => {\n        self.table.snapshotFilterCheckboxPage = _.filter(pageSnapshots, snapshot => (snapshot.status === 'active' || snapshot.status === 'available') && !snapshot.isInstalledOnVm);\n      });\n\n      $scope.$watch('CloudProjectComputeSnapshotCtrl.table.selected', () => {\n        // if some line were not removed => recheck\n        self.toggle.openDeleteMultiConfirm = false;\n        if (self.table.autoSelected.length) {\n          angular.forEach(self.table.autoSelected, (snapshotId) => {\n            const isInSnapshotTable = _.findIndex(\n              self.table.snapshot,\n              snapshot => snapshot.id === snapshotId,\n            );\n            if (isInSnapshotTable >= 0) {\n              self.table.selected[snapshotId] = true;\n            }\n          });\n          self.table.autoSelected = [];\n        } else {\n          self.toggle.openDeleteMultiConfirm = false;\n        }\n      }, true);\n\n      self.toggleDeleteMultiConfirm = function () {\n        if (self.toggle.openDeleteMultiConfirm) {\n          self.table.selected = {};\n        }\n        self.toggle.snapshotDeleteId = null;\n        self.toggle.openDeleteMultiConfirm = !self.toggle.openDeleteMultiConfirm;\n      };\n\n      // ---------SEARCH BAR---------\n\n      function filterSnapshot() {\n        if ($scope.searchSnapshotForm && $scope.searchSnapshotForm.$valid) {\n          let tab = self.table.snapshot;\n          tab = _.filter(self.table.snapshot, (snapshot) => {\n            let result = true;\n\n            if (self.search.name && snapshot.name) {\n              const index = snapshot.name.toLowerCase().indexOf(self.search.name.toLowerCase());\n              result = result && index !== -1;\n            }\n            if (self.search.size) {\n              result = result && self.search.size >= Math.round(snapshot.size * 100) / 100;\n            }\n            if (self.search.creationStart) {\n              result = result && moment(self.search.creationStart) <= moment(snapshot.creationDate);\n            }\n            if (self.search.creationEnd) {\n              result = result && moment(self.search.creationEnd) > moment(snapshot.creationDate);\n            }\n\n            return result;\n          });\n\n          self.table.snapshotFilter = tab;\n          self.table.snapshotFilterCheckbox = _.filter(\n            tab,\n            snapshot => (\n              snapshot.status === 'active' || snapshot.status === 'available'\n            )\n            && !snapshot.isInstalledOnVm,\n          );\n\n\n          if (self.table.snapshotFilter.length) {\n            self.orderBy();\n          }\n        }\n      }\n\n      $scope.$watch('CloudProjectComputeSnapshotCtrl.search', () => {\n        // otherwise filterSnapshot launched before form validation\n        $timeout(() => {\n          filterSnapshot();\n        }, 0);\n      }, true);\n\n      // ---------ORDER---------\n\n      self.orderBy = function (by) {\n        if (by) {\n          if (self.order.by === by) {\n            self.order.reverse = !self.order.reverse;\n          } else {\n            self.order.by = by;\n          }\n        }\n        self.table.snapshotFilter = orderBy(\n          self.table.snapshotFilter,\n          self.order.by,\n          self.order.reverse,\n        );\n        self.table.snapshotFilterCheckbox = orderBy(\n          self.table.snapshotFilterCheckbox,\n          self.order.by,\n          self.order.reverse,\n        );\n      };\n\n      function snapshotStateChange(oldSnapshots, newSnapshots) {\n        let stateChanged = false;\n        _.forEach(newSnapshots, (snapshot) => {\n          const old = _.find(oldSnapshots, { id: snapshot.id });\n          stateChanged = stateChanged || !old || old.status !== snapshot.status;\n        });\n        return stateChanged;\n      }\n\n      // transform snapshot type > snapshot is an image custom if this present in image as private\n      function checkImagesCustom(snapshots) {\n        return _.map(snapshots, snapshot => _.assign(snapshot, {\n          type: (_.find(images, { id: snapshot.id, visibility: 'private' }) ? 'image' : '') + snapshot.type,\n        }));\n      }\n\n      function checkImageInstalled() {\n        angular.forEach(self.table.snapshot, (snapshot) => {\n          _.set(snapshot, 'isInstalledOnVm', !!_.find(instances, { imageId: snapshot.id }));\n          _.set(snapshot, 'installedVm', _.filter(instances, { imageId: snapshot.id }));\n          _.set(snapshot, 'installedVmNames', _.pluck(snapshot.installedVm, 'name'));\n        });\n      }\n\n      function pollSnapshots() {\n        Poller.poll(`/cloud/project/${serviceName}/snapshot`,\n          null,\n          {\n            successRule(snapshots) {\n              return _.every(snapshots, snapshot => snapshot.status === 'active');\n            },\n            namespace: 'cloud.snapshots',\n            notifyOnError: false,\n          }).then((snapshotList) => {\n          OvhApiCloudProjectSnapshot.v6().resetQueryCache();\n          // get volume snapshots and concat new state instance snapshots\n          const volumeSnapshots = _.filter(self.table.snapshot, { type: 'volume' });\n          self.table.snapshot = snapshotList.concat(volumeSnapshots);\n          checkImageInstalled();\n          filterSnapshot(); // orderBy is call by filterSnapshot();\n          setPrice();\n        }, (err) => {\n          if (err && err.status) {\n            self.table.snapshot = _.filter(self.table.snapshot, { type: 'volume' });\n            CloudMessage.error([\n              $translate.instant('cpc_snapshot_error'),\n              (err.data && err.data.message) || '',\n            ].join(' '));\n          }\n        }, (snapshotList) => {\n          const currentImageSnapshots = _.filter(self.table.snapshot, snapshot => snapshot.type !== 'volume');\n          if (currentImageSnapshots.length !== snapshotList.length || snapshotStateChange(\n            self.table.snapshot,\n            snapshotList,\n          )) {\n            OvhApiCloudProjectSnapshot.v6().resetQueryCache();\n            const volumeSnapshots = _.filter(self.table.snapshot, { type: 'volume' });\n            self.table.snapshot = snapshotList.concat(volumeSnapshots);\n            checkImageInstalled();\n            filterSnapshot(); // orderBy is call by filterSnapshot();\n            setPrice();\n          }\n        });\n      }\n\n      function mapVolumeSnapshots(snapshots) {\n        return _.map(snapshots, volumeSnapshot => _.assign(volumeSnapshot, {\n          visibility: 'private',\n          size: volumeSnapshot.size,\n          type: 'volume',\n        }));\n      }\n\n      function pollVolumeSnapshots() {\n        Poller.poll(`/cloud/project/${serviceName}/volume/snapshot`,\n          null,\n          {\n            successRule(snapshots) {\n              return _.every(snapshots, snapshot => snapshot.status === 'available');\n            },\n            namespace: 'cloud.snapshots',\n            notifyOnError: false,\n          }).then((snapshotList) => {\n          OvhApiCloudProjectVolumeSnapshot.v6().resetAllCache();\n          // get instance snapshots and concat new state volume snapshots\n          const imageSnapshots = _.filter(self.table.snapshot, snapshot => snapshot.type !== 'volume');\n          const snapshots = checkImagesCustom(snapshotList);\n          self.table.snapshot = imageSnapshots.concat(mapVolumeSnapshots(snapshots));\n          filterSnapshot(); // orderBy is call by filterSnapshot();\n          setPrice();\n        }, (err) => {\n          if (err && err.status) {\n            self.table.snapshot = _.filter(self.table.snapshot, snapshot => snapshot.type !== 'volume');\n            CloudMessage.error([$translate.instant('cpc_snapshot_error'), (err.data && err.data.message) || ''].join(' '));\n          }\n        }, (snapshotList) => {\n          const currentVolumeSnapshots = _.filter(self.table.snapshot, { type: 'volume' });\n          if (\n            currentVolumeSnapshots.length !== snapshotList.length\n            || snapshotStateChange(self.table.snapshot, snapshotList)\n          ) {\n            OvhApiCloudProjectVolumeSnapshot.v6().resetAllCache();\n            const imageSnapshots = _.filter(self.table.snapshot, snapshot => snapshot.type !== 'volume');\n            const snapshots = checkImagesCustom(snapshotList);\n            self.table.snapshot = imageSnapshots.concat(mapVolumeSnapshots(snapshots));\n            filterSnapshot(); // orderBy is call by filterSnapshot();\n            setPrice();\n          }\n        });\n      }\n\n      $scope.$on('$destroy', () => {\n        Poller.kill({ namespace: 'cloud.snapshots' });\n      });\n\n      // ---------SNAPSHOT---------\n\n      function getInstancePromise() {\n        return OvhApiCloudProjectInstance.v6().query({\n          serviceName,\n        }).$promise;\n      }\n\n      function getSnapshotPromise() {\n        return OvhApiCloudProjectSnapshot.v6().query({\n          serviceName,\n        }).$promise;\n      }\n\n      function getImagePromise() {\n        return OvhApiCloudProjectImage.v6().query({\n          serviceName,\n        }).$promise;\n      }\n\n      function getPricesPromise() {\n        return OvhCloudPriceHelper.getPrices(serviceName);\n      }\n\n      function getVolumeSnapshotPromise() {\n        return OvhApiCloudProjectVolumeSnapshot.v6().query({\n          serviceName,\n        }).$promise.then(result => mapVolumeSnapshots(result)); // transform\n      }\n\n      self.getSnapshot = function getSnapshot(clearCache) {\n        if (!self.loaders.table.snapshot) {\n          self.table.snapshot = [];\n          self.toggle.snapshotDeleteId = null;\n          self.loaders.table.snapshot = true;\n          if (clearCache) {\n            OvhApiCloudProjectSnapshot.v6().resetQueryCache();\n            OvhApiCloudProjectInstance.v6().resetQueryCache();\n            // because with check if snapshot is installed on instances\n            OvhApiCloudProjectVolume.v6().resetAllCache();\n          }\n\n          $q.all([\n            getInstancePromise(),\n            getSnapshotPromise(),\n            getPricesPromise(),\n            getVolumeSnapshotPromise(),\n            getImagePromise(),\n          ]).then(([instancesParam, snapShots, prices, volumes, imagesParam]) => {\n            instances = instancesParam;\n            images = imagesParam;\n\n            const snapshots = checkImagesCustom(snapShots);\n            self.table.snapshot = snapshots.concat(volumes);\n            checkImageInstalled();\n            filterSnapshot(); // orderBy is call by filterSnapshot();\n            const instanceSnapshotsToPoll = _.filter(\n              self.table.snapshot,\n              snapshot => snapshot.type !== 'volume' && snapshot.status !== 'active',\n            );\n\n\n            const volumeSnapshotsToPoll = _.filter(\n              self.table.snapshot,\n              snapshot => snapshot.type === 'volume' && snapshot.status !== 'available',\n            );\n            if (instanceSnapshotsToPoll) {\n              pollSnapshots();\n            }\n            if (volumeSnapshotsToPoll) {\n              pollVolumeSnapshots();\n            }\n            self.snapshotPriceStruct.prices = prices;\n            setPrice();\n          }, (err) => {\n            self.table.snapshot = null;\n            CloudMessage.error([\n              $translate.instant('cpc_snapshot_error'),\n              (err.data && err.data.message) || '',\n            ].join(' '));\n          }).finally(() => {\n            self.loaders.table.snapshot = false;\n          });\n        }\n      };\n\n      self.createVmBySnapshot = function (snapshot) {\n        CloudMessage.info($translate.instant('cpc_snapshot_create_vm_button_info'));\n        CloudProjectOrchestrator.askToCreateInstanceFromSnapshot(snapshot);\n        $state.go('iaas.pci-project.compute.infrastructure.diagram');\n      };\n\n      self.createVolumeBySnapshot = function (snapshot) {\n        CloudMessage.info($translate.instant('cpc_snapshot_create_volume_button_info'));\n        $timeout(() => {\n          $state.go('iaas.pci-project.compute.infrastructure.diagram', {\n            createNewVolumeFromSnapshot: {\n              snapshot,\n            },\n          });\n        }, 99);\n      };\n\n      self.openDeleteSnapshot = function (snapshot) {\n        $uibModal.open({\n          windowTopClass: 'cui-modal',\n          templateUrl: 'app/cloud/project/compute/snapshot/delete/compute-snapshot-delete.html',\n          controller: 'CloudProjectComputeSnapshotDeleteCtrl',\n          controllerAs: 'CloudProjectComputeSnapshotDeleteCtrl',\n          resolve: {\n            serviceName: () => serviceName,\n            snapshot: () => snapshot,\n          },\n          successHandler: () => {\n            self.getSnapshot(true);\n            CloudMessage.success($translate.instant('cpc_snapshot_delete_success'));\n            pollSnapshots();\n            pollVolumeSnapshots();\n          },\n          errorHandler: err => CloudMessage.error([\n            $translate.instant('cpc_snapshot_delete_error'),\n            (err.data && err.data.message) || '',\n          ].join(' ')),\n        });\n      };\n\n      init();\n    });\n"]}