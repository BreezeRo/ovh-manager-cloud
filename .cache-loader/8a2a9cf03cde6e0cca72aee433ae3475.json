{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/add/edit/logs-inputs-add-edit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/add/edit/logs-inputs-add-edit.controller.js","mtime":1539717142087},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsInputsAddEditCtrl {\n  constructor($q, $state, $stateParams, CloudMessage, ControllerHelper, LogsConstants,\n    LogsInputsService, LogsStreamsService) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.inputId = this.$stateParams.inputId;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsInputsService = LogsInputsService;\n    this.LogsStreamsService = LogsStreamsService;\n\n    this.editMode = Boolean(this.inputId);\n    this.availableEngines = [];\n    this.initLoaders();\n  }\n\n  $onInit() {\n    if (this.editMode) {\n      this.input.load();\n    } else {\n      this.input = this.LogsInputsService.getNewInput();\n    }\n    this.details.load()\n      .then((details) => {\n        this.availableEngines = details.engines.reduce((enginesList, engine) => {\n          if (!engine.isDeprecated) {\n            enginesList.push(engine);\n          }\n          return enginesList;\n        }, []);\n      });\n    this.streams.load();\n    this.options.load();\n    this.mainOffer.load();\n  }\n\n  /**\n   * initializes the input log url\n   *\n   * @memberof LogsInputsAddEditCtrl\n   */\n  initLoaders() {\n    if (this.editMode) {\n      this.input = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.LogsInputsService.getInput(this.serviceName, this.inputId)\n          .then(input => this.LogsInputsService.transformInput(input)),\n      });\n    }\n    this.details = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService.getDetails(this.serviceName),\n    });\n    this.streams = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsStreamsService.getStreams(this.serviceName),\n    });\n    this.options = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsInputsService.getSubscribedOptions(this.serviceName),\n    });\n    this.mainOffer = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsInputsService.getMainOffer(this.serviceName),\n    });\n  }\n\n  addEditInput() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    } if (!this.form.$dirty) {\n      return this.gotToNextStep(this.inputId);\n    }\n    this.CloudMessage.flushChildMessage();\n    this.inputAddEdit = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => (this.editMode\n        ? this.LogsInputsService.updateInput(this.serviceName, this.input.data)\n        : this.LogsInputsService.addInput(this.serviceName, this.input.data)),\n    });\n    return this.inputAddEdit.load()\n      .then((successData) => {\n        this.gotToNextStep(this.inputId || successData[0].item.inputId);\n      })\n      .catch(() => this.ControllerHelper.scrollPageToTop());\n  }\n\n  gotToNextStep(inputId) {\n    this.$state.go('dbaas.logs.detail.inputs.editwizard.configure', {\n      serviceName: this.serviceName,\n      inputId,\n    });\n    return this.$q.resolve();\n  }\n}\n\nangular.module('managerApp').controller('LogsInputsAddEditCtrl', LogsInputsAddEditCtrl);\n"]}