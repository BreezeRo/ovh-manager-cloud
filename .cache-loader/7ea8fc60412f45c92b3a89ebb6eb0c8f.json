{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/orderedHash/orderedHash.factory.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/orderedHash/orderedHash.factory.js","mtime":1539717142408},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["/**\n *  @name OrderedHashFactory\n *  @type factory\n *  @description\n *  This factory implement a kind of [HashTable](http://en.wikipedia.org/wiki/Hash_table). This implementation enable to keep items ordered.\n *  A small history :\n *  In /cloud infrastructure, it began to be overkill to always make a _.find to get a VM or an IP.\n *  So to keep sorted items we decide to create a object with this structure :\n *  ```javascript\n *  {\n *      sortedKeys : [],\n *      items : {}\n *  }\n *  ```\n *  So it's more easy to get an item by getting it by its id.\n *\n *  @usage\n *  ```javascript\n *  // inject OrderedHashFactory as a dependency of your controller/factory/service/...\n *  angular.module('myApp').controller('myController', function (OrderedHashFactory) {\n *      // init OrderedHashFactory object\n *      this.myHash = new OrderedHashFactory();\n *      // push an object\n *      // the myHash object will look like :\n *      // {\n *      //   sortedKeys: [7712],\n *      //   items: { 7712: { id: 7712, firstname: 'Boris', name: 'Yeltsin', country: 'Russia' } }\n *      // }\n *      this.myHash.push({ id: 7712, firstname: 'Boris', name: 'Yeltsin', country: 'Russia' });\n *      // get an item\n *      // will return: { id: 7712, firstname: 'Boris', name: 'Yeltsin', country: 'Russia' }\n *      var myItem = this.myHash.get(7712);\n *      // get all items\n *      // will return: [{ id: 7712, firstname: 'Boris', name: 'Yeltsin', country: 'Russia' }]\n *      var myItems = this.getItems();\n *  });\n *  ```\n */\n\nangular.module('managerApp').factory('OrderedHashFactory',\n  () => {\n    // /////////////////////////\n    //      CONSTRUCTOR      //\n    // /////////////////////////\n\n    const OrderedHash = (function () {\n      return function OrderedHashFactory(optionsParam) {\n        let options = optionsParam;\n        if (!options) {\n          options = {};\n        }\n\n        this.accessKey = options.accessKey || 'id';\n        this.sortedKeys = [];\n        this.items = {};\n      };\n    }());\n\n    // /////////////////////\n    //      METHODS      //\n    // /////////////////////\n\n    OrderedHash.prototype.push = function (item) {\n      const itemKey = item[this.accessKey];\n\n      if (!item[this.accessKey]) {\n        return;\n      }\n\n      this.items[itemKey] = item;\n      this.sortedKeys.push(itemKey);\n    };\n\n    OrderedHash.prototype.getItems = function () {\n      const self = this;\n      return _.map(this.sortedKeys, itemKey => self.items[itemKey]);\n    };\n\n    OrderedHash.prototype.removeItem = function (item) {\n      const itemKey = typeof item === 'object' ? item[this.accessKey] : item;\n      delete this.items[itemKey];\n      _.remove(this.sortedKeys, key => key === itemKey);\n    };\n\n    OrderedHash.prototype.get = function (item) {\n      return this.items[this.checkItemKey(item)];\n    };\n\n    OrderedHash.prototype.length = function () {\n      return this.sortedKeys.length;\n    };\n\n    OrderedHash.prototype.checkItemKey = function (item) {\n      return typeof item === 'object' ? item[this.accessKey] : item;\n    };\n\n    OrderedHash.prototype.replaceItem = function (oldItem, newItem) {\n      const oldItemKey = typeof oldItem === 'object' ? oldItem[this.accessKey] : oldItem;\n\n\n      const oldKeyIndex = _.indexOf(this.sortedKeys, oldItemKey);\n\n\n      const newItemKey = typeof newItem === 'object' ? newItem[this.accessKey] : newItem;\n\n\n      const newItemKeyIndex = _.indexOf(this.sortedKeys, newItemKey);\n\n      if (oldKeyIndex > -1) {\n        // if new item is already in the list, we first remove it\n        // then it will be added in place of oldItem (it's basically \"move item\" to oldItem place)\n        if (newItemKeyIndex > -1) {\n          this.removeItem(newItem);\n        }\n        this.sortedKeys[oldKeyIndex] = newItemKey;\n        delete this.items[oldItemKey];\n        this.items[newItemKey] = newItem;\n      }\n    };\n\n    return OrderedHash;\n  });\n"]}