{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack.controller.js","mtime":1539717142225},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerVrackCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerVrackCtrl.$inject = [\"$state\", \"$stateParams\", \"$translate\", \"ControllerHelper\", \"IpLoadBalancerVrackService\", \"IpLoadBalancerVrackHelper\", \"VrackService\", \"OvhApiIpLoadBalancing\"];\n\n  function IpLoadBalancerVrackCtrl($state, $stateParams, $translate, ControllerHelper, IpLoadBalancerVrackService, IpLoadBalancerVrackHelper, VrackService, OvhApiIpLoadBalancing) {\n    _classCallCheck(this, IpLoadBalancerVrackCtrl);\n\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerVrackService = IpLoadBalancerVrackService;\n    this.IpLoadBalancerVrackHelper = IpLoadBalancerVrackHelper;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.VrackService = VrackService;\n    this.serviceName = $stateParams.serviceName;\n    this.initLoaders();\n    this.initActions();\n  }\n\n  _createClass(IpLoadBalancerVrackCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.creationRules.load().then(function (creationRules) {\n        if (creationRules.tasks.length) {\n          _this.IpLoadBalancerVrackService.pollNetworkTask(_this.serviceName, creationRules.tasks).$promise.then(function () {\n            _this.OvhApiIpLoadBalancing.Vrack().v6().resetCache();\n\n            _this.creationRules.load();\n          });\n        }\n      });\n      this.privateNetworks.load();\n    }\n  }, {\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this2 = this;\n\n      this.creationRules = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerVrackService.getNetworkCreationRules(_this2.serviceName);\n        }\n      });\n      this.privateNetworks = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerVrackService.getPrivateNetworks(_this2.serviceName);\n        }\n      });\n    }\n  }, {\n    key: \"initActions\",\n    value: function initActions() {\n      var _this3 = this;\n\n      this.actions = {\n        activateVrack: {\n          text: this.$translate.instant('common_activate'),\n          callback: function callback() {\n            return _this3.VrackService.selectVrack().then(function (result) {\n              return _this3.IpLoadBalancerVrackHelper.associateVrack(_this3.serviceName, result.serviceName, _this3.creationRules.data);\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.creationRules.loading && !_this3.creationRules.hasErrors && _this3.creationRules.data.vrackEligibility && _this3.creationRules.data.status === 'inactive' && _.isEmpty(_this3.creationRules.data.tasks);\n          }\n        },\n        deActivateVrack: {\n          text: this.$translate.instant('common_deactivate'),\n          callback: function callback() {\n            return _this3.VrackService.unlinkVrackModal().then(function () {\n              return _this3.IpLoadBalancerVrackHelper.deAssociateVrack(_this3.serviceName, _this3.creationRules.data);\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.creationRules.loading && !_this3.creationRules.hasErrors && _this3.creationRules.data.status === 'active' && _.isEmpty(_this3.creationRules.data.tasks);\n          }\n        },\n        addPrivateNetwork: {\n          text: this.$translate.instant('iplb_vrack_private_network_add'),\n          callback: function callback() {\n            return _this3.$state.go('network.iplb.detail.vrack.add', {\n              serviceName: _this3.$stateParams.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.creationRules.loading && _this3.creationRules.data.status === 'active' && _this3.creationRules.data.remainingNetworks;\n          }\n        },\n        editPrivateNetwork: {\n          text: this.$translate.instant('common_modify'),\n          callback: function callback(network) {\n            return _this3.$state.go('network.iplb.detail.vrack.edit', {\n              serviceName: _this3.serviceName,\n              networkId: network.vrackNetworkId\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.creationRules.loading && _.includes(['active', 'inactive'], _this3.creationRules.data.status);\n          }\n        },\n        deletePrivateNetwork: {\n          text: this.$translate.instant('common_delete'),\n          callback: function callback(network) {\n            return _this3.ControllerHelper.modal.showDeleteModal({\n              titleText: _this3.$translate.instant('iplb_vrack_private_network_delete_title'),\n              text: _this3.$translate.instant('iplb_vrack_private_network_delete_text', {\n                network: network.displayName\n              })\n            }).then(function () {\n              return _this3.deletePrivateNetwork(network);\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.creationRules.loading && _.includes(['active', 'inactive'], _this3.creationRules.data.status);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"deletePrivateNetwork\",\n    value: function deletePrivateNetwork(network) {\n      var _this4 = this;\n\n      return this.IpLoadBalancerVrackService.deletePrivateNetwork(this.serviceName, network.vrackNetworkId).then(function () {\n        _this4.creationRules.load();\n\n        _this4.privateNetworks.load();\n      });\n    }\n  }]);\n\n  return IpLoadBalancerVrackCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerVrackCtrl', IpLoadBalancerVrackCtrl);",null]}