{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/modal/shortcut/kvm/kvm.directive.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/modal/shortcut/kvm/kvm.directive.js","mtime":1539717142295},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["/**\n * @ngdoc directive\n * @name directives.directive:kvm\n * @element ANY\n * @requires noVNC\n *\n * @decription\n * Provide a noVNC (KVM) console.\n */\nangular.module('managerApp').directive('kvm', () => ({\n  restrict: 'E',\n  replace: true,\n  scope: {\n    kvmData: '=',\n  },\n  template: `<div id=\"noVNC_screen\">\n    <div id=\"noVNC_status_bar\" class=\"noVNC_status_bar\">\n      <table border=\"0\" width=\"100%\">\n        <tr>\n          <td>\n            <div id=\"noVNC_status\">Loading</div>\n          </td>\n          <td style=\"width:1%\">\n            <div id=\"noVNC_buttons\">\n              <input type=button value=\"Ctrl+Alt+Del\" id=\"sendCtrlAltDelButton\">\n            </div>\n          </td>\n        </tr>\n      </table>\n      <br/>\n    </div>\n    <canvas id=\"noVNC_canvas\" width=\"480px\" height=\"20px\" data-ng-hide=\"rfbLoading\">\n      'Error: Canvas not supported.'\n    </canvas>\n    <div class=\"text-center\" data-ng-if=\"rfbLoading\">\n      <oui-spinner></oui-spinner>\n    </div>\n   </div>`,\n  link($scope, element) {\n    let unregisterSizeChangedWatch; let\n      unregisterInterval;\n    $scope.rfb = null;\n    $scope.rfbLoading = true;\n\n    /**\n     * @doc method\n     * @methodOf directives.directive:kvm\n     * @name directives.directive:kvm#updateState\n     * @description\n     * Update the DOM, depending of the KVM state.\n     */\n    function updateState(rfb, state, oldstate, msg) {\n      const s = document.getElementById('noVNC_status');\n      const sb = document.getElementById('noVNC_status_bar');\n      const cad = document.getElementById('sendCtrlAltDelButton');\n      let level;\n\n      $scope.rfbLoading = true;\n\n      switch (state) {\n        case 'failed':\n        case 'fatal':\n          level = 'error';\n          break;\n        case 'normal':\n        case 'disconnected':\n          level = 'normal';\n          $scope.$apply(() => {\n            $scope.rfbLoading = false;\n          });\n          break;\n        case 'loaded':\n          level = 'normal';\n          break;\n        default:\n          level = 'warn';\n      }\n\n      if (state === 'normal') {\n        cad.disabled = false;\n      } else {\n        cad.disabled = true;\n      }\n\n      if (typeof (msg) !== 'undefined') {\n        sb.setAttribute('class', `noVNC_status_${level}`);\n        s.innerHTML = msg;\n      }\n    }\n\n    function fn(canvaElement) {\n      if (unregisterSizeChangedWatch) {\n        unregisterSizeChangedWatch();\n        unregisterSizeChangedWatch = false;\n      }\n      if (canvaElement.is(':visible')) {\n        angular.element($('.modal-dialog')).css({\n          width: `${canvaElement.width() + 80}px`,\n          height: `${canvaElement.height() + 150}px`,\n        });\n      }\n    }\n\n    /**\n     * @doc method\n     * @methodOf directives.directive:kvm\n     * @name directives.directive:kvm#sendCtrlAltDel\n     * @description\n     * Send CTRL+ALT+DEL to KVM.\n     */\n    function sendCtrlAltDel() {\n      $scope.rfb.sendCtrlAltDel();\n      return false;\n    }\n\n    /**\n     * @doc method\n     * @methodOf directives.directive:kvm\n     * @name directives.directive:kvm#launchKVM\n     * @description\n     * Create a new noVNC instance.\n     */\n    function launchKVM() {\n      // noVNC logs\n      WebUtil.init_logging(WebUtil.getQueryVar('logging', 'none'));\n\n      if (!$scope.kvmData.host || !$scope.kvmData.port) {\n        updateState($scope.rfb, 'failed', 'Must specify host and port in URL');\n        return;\n      }\n\n      $scope.rfb = new RFB({\n        target: document.getElementById('noVNC_canvas'),\n        encrypt: WebUtil.getQueryVar('encrypt', true),\n        repeaterID: WebUtil.getQueryVar('repeaterID', ''),\n        true_color: WebUtil.getQueryVar('true_color', true),\n        local_cursor: WebUtil.getQueryVar('cursor', true),\n        shared: WebUtil.getQueryVar('shared', true),\n        view_only: WebUtil.getQueryVar('view_only', false),\n        updateState,\n      });\n\n      $scope.rfb.connect($scope.kvmData.host, $scope.kvmData.port, $scope.kvmData.password, '');\n\n      const canvaElement = $('#noVNC_canvas');\n      unregisterSizeChangedWatch = $scope.$watch(() => ({\n        w: canvaElement.width(),\n        h: canvaElement.height(),\n      }), () => {\n        fn(canvaElement);\n        unregisterInterval = window.setInterval(() => {\n          const phase = $scope.$root.$$phase;\n          if (phase === '$apply' || phase === '$digest') {\n            if (fn && (typeof (fn) === 'function')) {\n              fn(canvaElement);\n            }\n          } else {\n            $scope.$apply(() => {\n              fn(canvaElement);\n            });\n          }\n        }, 2000);\n      }, true);\n      element.find('#sendCtrlAltDelButton').bind('click', sendCtrlAltDel);\n    }\n\n    /**\n     * @doc method\n     * @methodOf directives.directive:kvm\n     * @name directives.directive:kvm#init\n     * @description\n     * Initialization of the module.\n     */\n    function init() {\n      if ($scope.rfb) {\n        launchKVM();\n      } else {\n        // Load supporting scripts\n        window.INCLUDE_URI = 'assets/noVNC/include/';\n        Util.load_scripts(['webutil.js', 'base64.js', 'websock.js', 'des.js',\n          'keysymdef.js', 'keyboard.js', 'input.js', 'display.js',\n          'jsunzip.js', 'rfb.js']);\n        window.onscriptsload = function () {\n          launchKVM();\n        };\n      }\n    }\n\n    /**\n     * @doc method\n     * @methodOf directives.directive:kvm\n     * @name directives.directive:kvm#closeConnection\n     * @description\n     * Says to KVM to disconnect.\n     */\n    function closeConnection() {\n      if ($scope.rfb) {\n        if (unregisterSizeChangedWatch) {\n          unregisterSizeChangedWatch();\n          unregisterSizeChangedWatch = false;\n        }\n        if (unregisterInterval) {\n          window.clearInterval(unregisterInterval);\n        }\n        $scope.rfb.disconnect();\n        angular.element($('#currentAction .modal-dialog')).css({\n          width: '',\n          height: '',\n        });\n      }\n    }\n\n    $scope.$watch('kvmData', (value) => {\n      if (!('WebSocket' in window || 'MozWebSocket' in window)) {\n        updateState($scope.rfb, 'failed', 'failed', 'Your browser does not support WebSockets.');\n        return;\n      }\n\n      if (value) {\n        init();\n      } else {\n        closeConnection();\n      }\n    });\n  },\n}));\n"]}