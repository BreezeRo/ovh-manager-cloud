{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/toaster/toaster.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/toaster/toaster.service.js","mtime":1539717142431},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["/**\n * @ngdoc service\n * @name managerApp.service:Toaster\n * @description Manage Toast notifications\n */\nangular.module('managerApp')\n  .service('Toaster', function Toaster($translate, Toast) {\n    /**\n     * @ngdoc function\n     * @methodOf managerApp.service:Toaster\n     * @name success\n     * @description Calls the Toast.success service\n     * @param  {string} translationId     - Translation ID\n     * @param  {object} translationParams - (Optional) Translation params\n     * @return {function}                 - The Toast instance\n     *\n     * @example\n     *   ```Toaster.success(\"translation_id\", { param: \"optional\" });```\n     */\n    this.success = function success(translationId, translationParams) {\n      return Toast.success($translate.instant(translationId, translationParams));\n    };\n\n    /**\n     * @ngdoc function\n     * @methodOf managerApp.service:Toaster\n     * @name info\n     * @description Calls the Toast.info service\n     * @param  {string} translationId     - Translation ID\n     * @param  {object} translationParams - (Optional) Translation params\n     * @return {function}                 - The Toast instance\n     *\n     * @example\n     *   ```Toaster.info(\"translation_id\", { param: \"optional\" });```\n     */\n    this.info = function info(translationId, translationParams) {\n      return Toast.info($translate.instant(translationId, translationParams));\n    };\n\n    /**\n     * @ngdoc function\n     * @methodOf managerApp.service:Toaster\n     * @name error\n     * @description Calls the Toast.error service\n     * @param  {string|object} translationIdOrHttpError\n     *                         Translation ID or HTTP error object\n     * @param  {string|object} translationParamsOrTranslationId\n     *                         (Optional) Translation params or Translation ID\n     *                         (if 1st param is the HTTP error object)\n     * @return {function}      The Toast instance\n     *\n     * @example\n     * You have 2 possibilities:\n     *   - A simple error message:\n     *     ```Toaster.error(\"translation_id\", { param: \"optional\" });```\n     *   - An HTTP error message:\n     *     ```Toaster.error(err, \"custom_translation_id\");```\n     */\n    this.error = function error(translationIdOrHttpError, translationParamsOrTranslationId) {\n      if (angular.isString(translationIdOrHttpError)) {\n        return Toast.error($translate.instant(\n          translationIdOrHttpError,\n          translationParamsOrTranslationId,\n        ));\n      } if (angular.isObject(translationIdOrHttpError)) {\n        return Toast.error([\n          $translate.instant(translationParamsOrTranslationId || 'an_error_occurred'),\n          `<br/>[${translationIdOrHttpError.status}]`,\n          (translationIdOrHttpError.data && translationIdOrHttpError.data.message) || translationIdOrHttpError.statusText || '',\n        ].join(' '));\n      }\n      return null;\n    };\n  });\n"]}