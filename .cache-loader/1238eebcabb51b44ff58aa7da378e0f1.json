{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/modal/shortcut/reinstall/vps-reinstall.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/modal/shortcut/reinstall/vps-reinstall.controller.js","mtime":1539717142297},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsReinstallCtrl =\n/*#__PURE__*/\nfunction () {\n  VpsReinstallCtrl.$inject = [\"$scope\", \"$translate\", \"$uibModalInstance\", \"CloudMessage\", \"serviceName\", \"SidebarMenu\", \"VpsReinstallService\", \"VpsService\"];\n\n  function VpsReinstallCtrl($scope, $translate, $uibModalInstance, CloudMessage, serviceName, SidebarMenu, VpsReinstallService, VpsService) {\n    _classCallCheck(this, VpsReinstallCtrl);\n\n    this.$scope = $scope;\n    this.$translate = $translate;\n    this.$uibModalInstance = $uibModalInstance;\n    this.CloudMessage = CloudMessage;\n    this.serviceName = serviceName;\n    this.SidebarMenu = SidebarMenu;\n    this.VpsReinstallService = VpsReinstallService;\n    this.VpsService = VpsService;\n    this.loaders = {\n      save: false,\n      sshKeys: false,\n      summary: false,\n      template: false,\n      packages: false\n    };\n    this.summary = {};\n    this.template = {\n      value: null,\n      language: null,\n      softwares: [],\n      sshKeys: [],\n      sendPassword: true\n    };\n    this.templates = [];\n    this.userSshKeys = null;\n  }\n\n  _createClass(VpsReinstallCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.loaders.init = true;\n      this.VpsService.getTaskInError(this.serviceName).then(function (tasks) {\n        return _this.loadTemplate(tasks);\n      }).catch(function (err) {\n        return _this.loadTemplate(err);\n      }).finally(function () {\n        _this.loaders.init = false;\n      });\n      this.loadSshKeys();\n      this.loadSummary();\n    }\n  }, {\n    key: \"loadTemplate\",\n    value: function loadTemplate(tasks) {\n      var _this2 = this;\n\n      this.template.language = null;\n      this.loaders.template = true;\n\n      if (!tasks || !tasks.length) {\n        this.VpsService.getTemplates(this.serviceName).then(function (data) {\n          _this2.templates = data.results;\n        }).catch(function (err) {\n          return _this2.$uibModalInstance.dismiss(_this2.CloudMessage.error(err.message || _this2.$translate.instant('vps_configuration_polling_fail')));\n        }).finally(function () {\n          _this2.loaders.template = false;\n        });\n      }\n    }\n  }, {\n    key: \"loadSshKeys\",\n    value: function loadSshKeys() {\n      var _this3 = this;\n\n      this.loaders.sshKeys = true;\n      this.VpsReinstallService.getSshKeys().then(function (data) {\n        _this3.userSshKeys = data;\n        return _this3.userSshKeys;\n      }).catch(function () {\n        return _this3.CloudMessage.error(_this3.$translate.instant('vps_configuration_reinstall_loading_sshKeys_error'));\n      }).finally(function () {\n        _this3.loaders.sshKeys = false;\n      });\n    }\n  }, {\n    key: \"loadSummary\",\n    value: function loadSummary() {\n      var _this4 = this;\n\n      this.loaders.summary = true;\n      this.VpsService.getTabSummary(this.serviceName, true).then(function (data) {\n        _this4.summary = data;\n      }).catch(function () {\n        return _this4.CloudMessage.error(_this4.$translate.instant('vps_configuration_reinstall_loading_summary_error'));\n      }).finally(function () {\n        _this4.loaders.summary = false;\n      });\n    }\n  }, {\n    key: \"loadPackages\",\n    value: function loadPackages(distribution) {\n      var _this5 = this;\n\n      this.loaders.packages = true;\n      this.template.packages = [];\n      this.VpsReinstallService.getPackages(distribution).then(function (data) {\n        _this5.template.packages = data;\n      }).finally(function () {\n        _this5.loaders.packages = false;\n      });\n    }\n  }, {\n    key: \"getSoftwareLabel\",\n    value: function getSoftwareLabel(soft) {\n      var result = soft.name;\n\n      if (soft.status !== 'STABLE') {\n        result += \" (\".concat(this.$translate.instant(\"vps_configuration_reinstall_step2_software_status_\".concat(soft.status)), \")\");\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getSoftwareSummaryList\",\n    value: function getSoftwareSummaryList() {\n      var names = [];\n\n      if (this.template.database) {\n        names.push(this.$scope.selectedTemplate.database.name);\n      }\n\n      if (this.template.webserver) {\n        names.push(this.$scope.selectedTemplate.webserver.name);\n      }\n\n      if (this.template.environment) {\n        names.push(this.$scope.selectedTemplate.environment.name);\n      }\n\n      return names.join(', ');\n    }\n  }, {\n    key: \"getSelectedLanguage\",\n    value: function getSelectedLanguage() {\n      if (this.template.value) {\n        return this.template.value.availableLanguage.length > 1 ? this.template.language : this.template.value.locale;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getLanguageTraduction\",\n    value: function getLanguageTraduction(language) {\n      return this.$translate.instant(\"language_\".concat(language));\n    }\n  }, {\n    key: \"confirm\",\n    value: function confirm() {\n      var _this6 = this;\n\n      this.loaders.save = true;\n      var softIds = [];\n\n      if (this.template.database) {\n        softIds.push(this.$scope.selectedTemplate.database.id);\n      }\n\n      if (this.template.webserver) {\n        softIds.push(this.$scope.selectedTemplate.webserver.id);\n      }\n\n      if (this.template.environment) {\n        softIds.push(this.$scope.selectedTemplate.environment.id);\n      }\n\n      this.VpsService.reinstall(this.serviceName, this.template.value.idTemplate, this.getSelectedLanguage(), softIds, this.template.sshKeys, this.template.sendPassword ? 0 : 1).then(function () {\n        return _this6.$uibModalInstance.close();\n      }).catch(function () {\n        return _this6.$uibModalInstance.dismiss();\n      }).finally(function () {\n        _this6.loaders.save = false;\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.$uibModalInstance.dismiss();\n    }\n  }], [{\n    key: \"isWindows\",\n    value: function isWindows(os) {\n      return os && /Windows/.test(os.name);\n    }\n  }]);\n\n  return VpsReinstallCtrl;\n}();\n\nangular.module('managerApp').controller('VpsReinstallCtrl', VpsReinstallCtrl);",null]}