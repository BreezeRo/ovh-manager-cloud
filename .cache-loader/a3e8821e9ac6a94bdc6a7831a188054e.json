{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/privateNetwork/cloud-project-compute-infrastructure-privateNetwork-list.directive.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/privateNetwork/cloud-project-compute-infrastructure-privateNetwork-list.directive.js","mtime":1539717141990},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PrivateNetworkListCtrl =\n/*#__PURE__*/\nfunction () {\n  PrivateNetworkListCtrl.$inject = [\"$window\", \"$rootScope\", \"$translate\", \"$stateParams\", \"$state\", \"$q\", \"$uibModal\", \"CloudProjectComputeInfrastructurePrivateNetworkService\", \"OvhApiCloudProjectNetworkPrivate\", \"OvhApiCloudProject\", \"REDIRECT_URLS\", \"CloudMessage\", \"OvhApiMe\", \"URLS\", \"OvhApiVrack\", \"VrackSectionSidebarService\", \"VrackService\", \"CloudPoll\", \"ControllerHelper\"];\n\n  function PrivateNetworkListCtrl($window, $rootScope, $translate, $stateParams, $state, $q, $uibModal, CloudProjectComputeInfrastructurePrivateNetworkService, OvhApiCloudProjectNetworkPrivate, OvhApiCloudProject, REDIRECT_URLS, CloudMessage, OvhApiMe, URLS, OvhApiVrack, VrackSectionSidebarService, VrackService, CloudPoll, ControllerHelper) {\n    var _this = this;\n\n    _classCallCheck(this, PrivateNetworkListCtrl);\n\n    this.resources = {\n      privateNetwork: OvhApiCloudProjectNetworkPrivate.v6(),\n      project: OvhApiCloudProject.v6(),\n      aapi: OvhApiVrack.Aapi(),\n      modal: $uibModal\n    };\n    this.CloudMessage = CloudMessage;\n    this.$translate = $translate;\n    this.serviceName = null;\n    this.service = CloudProjectComputeInfrastructurePrivateNetworkService;\n    this.$rootScope = $rootScope;\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.User = OvhApiMe;\n    this.URLS = URLS;\n    this.CloudPoll = CloudPoll;\n    this.VrackService = VrackService;\n    this.ControllerHelper = ControllerHelper;\n    this.loaders = {\n      privateNetworks: {\n        query: false,\n        delete: false,\n        activate: false\n      },\n      vrack: {\n        get: false,\n        link: false,\n        unlink: false\n      },\n      vracks: {\n        get: true\n      }\n    };\n    this.urls = {\n      vrack: REDIRECT_URLS.vRack\n    };\n    this.models = {\n      vrack: null\n    };\n    this.collections = {\n      privateNetworks: []\n    };\n    this.states = {\n      dialog: {\n        visible: false\n      }\n    };\n    this.$window = $window; // get vRacks for current user, shown in left side bar\n\n    this.vRacks = [];\n    VrackSectionSidebarService.getVracks().then(function (vRacks) {\n      _this.vRacks = vRacks;\n    }).finally(function () {\n      _this.loaders.vracks.get = false;\n    });\n  }\n\n  _createClass(PrivateNetworkListCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this2 = this;\n\n      this.resources.privateNetwork.resetAllCache();\n\n      if (angular.isUndefined(this.$stateParams.projectId)) {\n        this.CloudMessage.error(this.$translate.instant('cpci_private_network_list_context_error'));\n      } else {\n        this.serviceName = this.$stateParams.projectId;\n      }\n\n      this.$rootScope.$on('private-network-dialog:hide', this.hideDialog.bind(this));\n      this.$rootScope.$on('private-networks:create', this.createPrivateNetworks.bind(this)); // Loading privateNetwork first because vrack can fallback to privateNetworkList\n      // to find it's ID.\n\n      this.fetchPrivateNetworks().then(function () {\n        return _this2.fetchVrack();\n      });\n      this.User.v6().get().$promise.then(function (user) {\n        _this2.orderUrl = _.get(_this2.URLS.website_order, \"vrack.\".concat(user.ovhSubsidiary));\n      });\n    }\n  }, {\n    key: \"fetchVrack\",\n    value: function fetchVrack() {\n      var _this3 = this;\n\n      if (this.loaders.vrack.get) {\n        return this.$q.when();\n      }\n\n      this.loaders.vrack.get = true;\n      return this.resources.project.vrack({\n        serviceName: this.serviceName\n      }).$promise.then(function (vrack) {\n        _this3.models.vrack = vrack;\n      }).then(function () {\n        return _this3.getVrackId();\n      }).then(function (id) {\n        _this3.models.vrack.id = id;\n      }).catch(function () {\n        _this3.models.vrack = null;\n      }).finally(function () {\n        _this3.loaders.vrack.get = false;\n      });\n    }\n    /**\n       * open UI activate private network modal\n       *\n       * @memberof PrivateNetworkListCtrl\n       */\n\n  }, {\n    key: \"addVRack\",\n    value: function addVRack() {\n      var _this4 = this;\n\n      this.VrackService.selectVrack().then(function (selectedVrack) {\n        _this4.loaders.vrack.link = true;\n        _this4.models.vrack = {\n          id: selectedVrack.serviceName,\n          name: selectedVrack.name\n        };\n        return _this4.VrackService.linkCloudProjectToVrack(selectedVrack.serviceName, _this4.serviceName);\n      }).then(function (vrackTaskId) {\n        return _this4.startVrackTaskPolling(_this4.models.vrack.id, vrackTaskId).$promise;\n      }).then(function () {\n        _this4.CloudMessage.success(_this4.$translate.instant('cpci_private_network_add_vrack_success'));\n      }).catch(function (err) {\n        if (err === 'cancel') {\n          return;\n        }\n\n        _this4.CloudMessage.error(_this4.$translate.instant('cpci_private_network_add_vrack_error'));\n      }).finally(function () {\n        _this4.loaders.vrack.link = false;\n      });\n    }\n  }, {\n    key: \"unlinkVrack\",\n    value: function unlinkVrack() {\n      var _this5 = this;\n\n      var hasVlansText = this.$translate.instant('private_network_deactivate_confirmation');\n\n      if (this.collections.privateNetworks.length > 0) {\n        hasVlansText += \" \".concat(this.$translate.instant('private_network_deactivate_confirmation_vlans'));\n      }\n\n      this.VrackService.unlinkVrackModal(hasVlansText).then(function () {\n        _this5.loaders.vrack.unlink = true;\n        return _this5.VrackService.unlinkCloudProjectFromVrack(_this5.models.vrack.id, _this5.serviceName);\n      }).then(function (vrackTaskId) {\n        return _this5.startVrackTaskPolling(_this5.models.vrack.id, vrackTaskId).$promise;\n      }).then(function () {\n        _this5.models.vrack = null;\n        _this5.collections.privateNetworks = [];\n\n        _this5.CloudMessage.success(_this5.$translate.instant('cpci_private_network_remove_vrack_success'));\n      }).catch(function (err) {\n        if (err === 'cancel') {\n          return;\n        }\n\n        _this5.CloudMessage.error(_this5.$translate.instant('cpci_private_network_remove_vrack_error'));\n      }).finally(function () {\n        _this5.loaders.vrack.unlink = false;\n      });\n    }\n  }, {\n    key: \"startVrackTaskPolling\",\n    value: function startVrackTaskPolling(vrack, taskId) {\n      var _this6 = this;\n\n      this.stopTaskPolling();\n      var taskToPoll = {\n        id: taskId\n      };\n      this.poller = this.CloudPoll.poll({\n        item: taskToPoll,\n        pollFunction: function pollFunction(task) {\n          return _this6.VrackService.getTask(vrack, task.id);\n        },\n        stopCondition: function stopCondition(task) {\n          return !task || _.includes(['done', 'error'], task.status);\n        }\n      });\n      return this.poller;\n    }\n  }, {\n    key: \"stopTaskPolling\",\n    value: function stopTaskPolling() {\n      if (this.poller) {\n        this.poller.kill();\n      }\n    }\n  }, {\n    key: \"deletePrivateNetwork\",\n    value: function deletePrivateNetwork(privateNetwork) {\n      var _this7 = this;\n\n      var modal = this.resources.modal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/infrastructure/privateNetwork/delete/cloud-project-compute-infrastructure-privateNetwork-delete.html',\n        controller: 'CloudprojectcomputeinfrastructureprivatenetworkdeleteCtrl',\n        controllerAs: 'CloudprojectcomputeinfrastructureprivatenetworkdeleteCtrl',\n        resolve: {\n          params: function params() {\n            return privateNetwork;\n          }\n        }\n      });\n      modal.result.then(function () {\n        _this7.loaders.privateNetworks.delete = true;\n      }).finally(function () {\n        _this7.loaders.privateNetworks.delete = false;\n\n        _this7.deletePrivateNetworkFromList(privateNetwork);\n      });\n    }\n  }, {\n    key: \"deletePrivateNetworkFromList\",\n    value: function deletePrivateNetworkFromList(privateNetwork) {\n      var newPrivateNetworks = this.collections.privateNetworks.filter(function (el) {\n        return el.id !== privateNetwork;\n      });\n      this.collections.privateNetworks = newPrivateNetworks;\n      return this.collections;\n    }\n  }, {\n    key: \"createPrivateNetworks\",\n    value: function createPrivateNetworks(event, args) {\n      this.hideDialog();\n\n      var subnets = _.chain(args.subnets).values().filter(function (subnet) {\n        return _.contains(args.privateNetwork.regions, subnet.region);\n      }).map(function (subnet) {\n        return _.assign(subnet, {\n          dhcp: args.isDHCPEnabled,\n          network: args.globalNetwork\n        });\n      }).value();\n\n      var onNetworkCreated = function (network) {\n        var _this8 = this;\n\n        var promises = _.map(subnets, function (subnet) {\n          return _this8.service.saveSubnet(args.projectId, network.id, subnet).$promise;\n        }, this);\n\n        return this.$q.all(promises).then(function () {\n          return _this8.fetchPrivateNetworks();\n        });\n      }.bind(this);\n\n      this.service.savePrivateNetwork(args.projectId, args.privateNetwork, onNetworkCreated);\n    }\n  }, {\n    key: \"fetchPrivateNetworks\",\n    value: function fetchPrivateNetworks() {\n      var _this9 = this;\n\n      if (this.loaders.privateNetworks.query) {\n        return this.$q.when(null);\n      }\n\n      this.loaders.privateNetworks.query = true;\n      return this.resources.privateNetwork.query({\n        serviceName: this.serviceName\n      }).$promise.then(function (networks) {\n        _this9.collections.privateNetworks = networks;\n\n        _.forEach(_this9.collections.privateNetworks, function (network) {\n          if (network.id) {\n            _.set(network, 'shortVlanId', _.last(network.id.split('_')));\n          }\n        });\n      }).catch(function () {\n        _this9.collections.privateNetworks = [];\n\n        _this9.CloudMessage.error(_this9.$translate.instant('cpci_private_network_list_private_network_query_error'));\n      }).finally(function () {\n        _this9.loaders.privateNetworks.query = false;\n      });\n    }\n  }, {\n    key: \"getPrivateNetworks\",\n    value: function getPrivateNetworks() {\n      return _.sortBy(this.collections.privateNetworks, 'vlanId');\n    }\n  }, {\n    key: \"getVrackName\",\n    value: function getVrackName() {\n      if (_.has(this.models.vrack, 'name') && !_.isEmpty(this.models.vrack.name)) {\n        return this.models.vrack.name;\n      }\n\n      if (_.has(this.models.vrack, 'id') && !_.isEmpty(this.models.vrack.id)) {\n        return this.models.vrack.id;\n      }\n\n      return this.$translate.instant('cpci_private_network_list_vrack_unnamed');\n    }\n  }, {\n    key: \"getVrackId\",\n    value: function getVrackId() {\n      var _this10 = this;\n\n      if (_.has(this.models.vrack, 'id') && !_.isEmpty(this.models.vrack.id)) {\n        return this.$q.when(this.models.vrack.id);\n      }\n\n      if (_.isEmpty(this.models.vrack.name)) {\n        return this.fetchPrivateNetworks().then(function () {\n          if (_.any(_this10.collections.privateNetworks)) {\n            return _.first(_.first(_this10.collections.privateNetworks).id.split('_'));\n          }\n\n          return _this10.$q.when(null);\n        });\n      }\n\n      return this.resources.aapi.query().$promise.then(function (vracks) {\n        var vrack = _.find(vracks, {\n          name: _this10.models.vrack.name\n        });\n\n        return _.get(vrack, 'id', null);\n      }).catch(function () {\n        return null;\n      });\n    }\n  }, {\n    key: \"gotoVrack\",\n    value: function gotoVrack() {\n      var _this11 = this;\n\n      this.getVrackId().then(function (id) {\n        return _this11.$state.go('vrack', {\n          vrackId: id\n        });\n      });\n    }\n  }, {\n    key: \"canGotoVrack\",\n    value: function canGotoVrack() {\n      return this.hasVrack() && !_.isNull(this.models.vrack.id);\n    }\n  }, {\n    key: \"hasVrack\",\n    value: function hasVrack() {\n      return this.loaders.vrack.get === false && !_.isNull(this.models.vrack);\n    }\n  }, {\n    key: \"showDialog\",\n    value: function showDialog() {\n      this.states.dialog.visible = true;\n    }\n  }, {\n    key: \"hideDialog\",\n    value: function hideDialog() {\n      this.states.dialog.visible = false;\n      this.$rootScope.$broadcast('highlighed-element.hide', 'compute');\n    }\n  }, {\n    key: \"toggleDialog\",\n    value: function toggleDialog() {\n      this.states.dialog.visible = !this.states.dialog.visible;\n    }\n  }, {\n    key: \"hasVisibleDialog\",\n    value: function hasVisibleDialog() {\n      return this.states.dialog.visible;\n    }\n  }, {\n    key: \"hasPendingLoaders\",\n    value: function hasPendingLoaders() {\n      return _.some(this.loaders, 'query', true) || _.some(this.loaders, 'get', true) || _.some(this.loaders, 'link', true) || _.some(this.loaders, 'unlink', true) || this.isVrackCreating();\n    }\n  }, {\n    key: \"isVrackCreating\",\n    value: function isVrackCreating() {\n      return this.service.isSavePending();\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown($event) {\n      switch ($event.which) {\n        case 27:\n          // Important not to put $event.preventDefault(); before the switch statement\n          // since it will catch and prevent default\n          // behavior on keyDown everywhere in the directive, inputs included.\n          $event.preventDefault();\n          this.hideDialog();\n          break;\n\n        default:\n          break;\n      }\n    }\n  }]);\n\n  return PrivateNetworkListCtrl;\n}();\n\nangular.module('managerApp').directive('privateNetworkList', function () {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/cloud/project/compute/infrastructure/privateNetwork/cloud-project-compute-infrastructure-privateNetwork-list.html',\n    controller: PrivateNetworkListCtrl,\n    controllerAs: '$ctrl',\n    bindToController: true,\n    replace: false\n  };\n});",null]}