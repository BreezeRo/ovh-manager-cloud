{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack.controller.js","mtime":1539717142225},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerVrackCtrl {\n  constructor($state, $stateParams, $translate, ControllerHelper, IpLoadBalancerVrackService,\n    IpLoadBalancerVrackHelper, VrackService, OvhApiIpLoadBalancing) {\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerVrackService = IpLoadBalancerVrackService;\n    this.IpLoadBalancerVrackHelper = IpLoadBalancerVrackHelper;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.VrackService = VrackService;\n\n    this.serviceName = $stateParams.serviceName;\n\n    this.initLoaders();\n    this.initActions();\n  }\n\n  $onInit() {\n    this.creationRules.load()\n      .then((creationRules) => {\n        if (creationRules.tasks.length) {\n          this.IpLoadBalancerVrackService\n            .pollNetworkTask(this.serviceName, creationRules.tasks).$promise\n            .then(() => {\n              this.OvhApiIpLoadBalancing.Vrack().v6().resetCache();\n              this.creationRules.load();\n            });\n        }\n      });\n    this.privateNetworks.load();\n  }\n\n  initLoaders() {\n    this.creationRules = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerVrackService\n        .getNetworkCreationRules(this.serviceName),\n    });\n\n    this.privateNetworks = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerVrackService.getPrivateNetworks(this.serviceName),\n    });\n  }\n\n  initActions() {\n    this.actions = {\n      activateVrack: {\n        text: this.$translate.instant('common_activate'),\n        callback: () => this.VrackService.selectVrack()\n          .then(result => this.IpLoadBalancerVrackHelper\n            .associateVrack(this.serviceName, result.serviceName, this.creationRules.data)),\n        isAvailable: () => !this.creationRules.loading\n          && !this.creationRules.hasErrors\n          && this.creationRules.data.vrackEligibility\n          && this.creationRules.data.status === 'inactive'\n          && _.isEmpty(this.creationRules.data.tasks),\n      },\n      deActivateVrack: {\n        text: this.$translate.instant('common_deactivate'),\n        callback: () => this.VrackService.unlinkVrackModal()\n          .then(() => this.IpLoadBalancerVrackHelper\n            .deAssociateVrack(this.serviceName, this.creationRules.data)),\n        isAvailable: () => !this.creationRules.loading && !this.creationRules.hasErrors && this.creationRules.data.status === 'active'\n                    && _.isEmpty(this.creationRules.data.tasks),\n      },\n      addPrivateNetwork: {\n        text: this.$translate.instant('iplb_vrack_private_network_add'),\n        callback: () => this.$state.go('network.iplb.detail.vrack.add', { serviceName: this.$stateParams.serviceName }),\n        isAvailable: () => !this.creationRules.loading && this.creationRules.data.status === 'active' && this.creationRules.data.remainingNetworks,\n      },\n      editPrivateNetwork: {\n        text: this.$translate.instant('common_modify'),\n        callback: network => this.$state.go('network.iplb.detail.vrack.edit', { serviceName: this.serviceName, networkId: network.vrackNetworkId }),\n        isAvailable: () => !this.creationRules.loading && _.includes(['active', 'inactive'], this.creationRules.data.status),\n      },\n      deletePrivateNetwork: {\n        text: this.$translate.instant('common_delete'),\n        callback: network => this.ControllerHelper.modal.showDeleteModal({\n          titleText: this.$translate.instant('iplb_vrack_private_network_delete_title'),\n          text: this.$translate.instant('iplb_vrack_private_network_delete_text', { network: network.displayName }),\n        })\n          .then(() => this.deletePrivateNetwork(network)),\n        isAvailable: () => !this.creationRules.loading && _.includes(['active', 'inactive'], this.creationRules.data.status),\n      },\n    };\n  }\n\n  deletePrivateNetwork(network) {\n    return this.IpLoadBalancerVrackService\n      .deletePrivateNetwork(this.serviceName, network.vrackNetworkId)\n      .then(() => {\n        this.creationRules.load();\n        this.privateNetworks.load();\n      });\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerVrackCtrl', IpLoadBalancerVrackCtrl);\n"]}