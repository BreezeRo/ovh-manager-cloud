{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/volume/cloud-project-compute-volume.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/volume/cloud-project-compute-volume.controller.js","mtime":1539717142039},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["\n\nangular.module('managerApp')\n  .controller('CloudProjectComputeVolumeCtrl', function CloudProjectComputeVolumeCtrl($scope, $filter, $q, $timeout, $stateParams, $translate, $state, ControllerHelper,\n    CloudProjectOrchestrator, OvhApiCloudProjectVolume, OvhApiCloudProjectVolumeSnapshot,\n    OvhApiCloudProjectInstance, CloudMessage, RegionService, CLOUD_UNIT_CONVERSION) {\n    const self = this;\n\n\n    const serviceName = $stateParams.projectId;\n\n\n    const orderBy = $filter('orderBy');\n    self.regionService = RegionService;\n    // Datas\n    self.table = {\n      volume: [],\n      volumeFilter: [],\n      groupVolume: {},\n      selected: {},\n      autoSelected: [],\n      instance: [],\n      volumeFilterCheckbox: [],\n      volumeFilterCheckboxPage: [],\n    };\n\n    self.toggle = {\n      volumeDeleteId: null, // Curent volume to delete\n      openDeleteMultiConfirm: false,\n    };\n\n    // Loader during Datas requests\n    self.loaders = {\n      table: {\n        volume: false,\n      },\n      remove: {\n        volume: false,\n        volumeMulti: false,\n      },\n    };\n\n    self.order = {\n      by: 'creationDate',\n      reverse: true,\n    };\n\n    self.totalResume = {\n      capacity: 0,\n      price: {\n        value: 0,\n        text: null,\n        currencyCode: null,\n      },\n    };\n\n    self.GIBIBYTE_TO_BYTE = CLOUD_UNIT_CONVERSION.GIBIBYTE_TO_BYTE;\n\n    function initSearchBar() {\n      self.search = {\n        name: null,\n        minDisk: null,\n        creationStart: null,\n        creationEnd: null,\n      };\n    }\n\n    function init() {\n      self.getVolume();\n      initSearchBar();\n    }\n\n    // ---------TOOLS---------\n\n    self.getSelectedCount = function () {\n      return Object.keys(self.table.selected).length;\n    };\n\n    $scope.$watch('CloudProjectComputeVolumeCtrl.table.selected', () => {\n      // if some line were not removed => recheck\n      self.toggle.openDeleteMultiConfirm = false;\n      if (self.table.autoSelected.length) {\n        angular.forEach(Object.keys(self.table.selected), (volumeId) => {\n          if (self.table.selected[volumeId] === false) {\n            delete self.table.selected[volumeId];\n          } else {\n            const isInVolumeTable = _.find(self.table.volume, volume => volume.id === volumeId && volume.status === 'active');\n            if (isInVolumeTable && self.table.selected[volumeId]) {\n              self.table.selected[volumeId] = true;\n            }\n          }\n        });\n        self.table.autoSelected = [];\n      } else {\n        self.toggle.openDeleteMultiConfirm = false;\n      }\n    }, true);\n\n    self.toggleDeleteMultiConfirm = function () {\n      if (self.toggle.openDeleteMultiConfirm) {\n        self.table.selected = {};\n      }\n      self.toggle.volumeDeleteId = null;\n      self.toggle.openDeleteMultiConfirm = !self.toggle.openDeleteMultiConfirm;\n    };\n\n    $scope.$watch('CloudProjectComputeVolumeCtrl.table.volumeFilterPage', (pageVolumes) => {\n      self.table.volumeFilterCheckboxPage = _.filter(pageVolumes, volume => volume.getStatusGroup() === 'ACTIVE' && !volume.snapshotted);\n    });\n\n    // ---------SEARCH BAR---------\n\n    function filterVolume() {\n      if ($scope.searchVolumeForm && $scope.searchVolumeForm.$valid) {\n        let tab = self.table.volume;\n        tab = _.filter(self.table.volume, (volume) => {\n          let result = true;\n\n          if (self.search.name && volume.name) {\n            const index = volume.name.toLowerCase().indexOf(self.search.name.toLowerCase());\n            result = result && index !== -1;\n          }\n          if (self.search.minDisk) {\n            result = result && self.search.minDisk <= volume.size;\n          }\n          if (self.search.creationStart) {\n            result = result && moment(self.search.creationStart) <= moment(volume.creationDate);\n          }\n          if (self.search.creationEnd) {\n            result = result && moment(self.search.creationEnd) > moment(volume.creationDate);\n          }\n\n          return result;\n        });\n\n        self.table.volumeFilter = tab;\n        self.table.volumeFilterCheckbox = _.filter(tab, volume => volume.getStatusGroup() === 'ACTIVE' && !volume.snapshotted);\n\n        if (self.table.volumeFilter.length) {\n          self.orderBy();\n        }\n      }\n    }\n\n    $scope.$watch('CloudProjectComputeVolumeCtrl.search', () => {\n      // otherwise filterVolume launched before form validation\n      $timeout(() => {\n        filterVolume();\n      }, 0);\n    }, true);\n\n    // ---------ORDER---------\n\n    self.orderBy = function order(by) {\n      if (by) {\n        if (self.order.by === by) {\n          self.order.reverse = !self.order.reverse;\n        } else {\n          self.order.by = by;\n        }\n      }\n      const orderByExpression = self.order.by !== 'price' ? self.order.by : function (volume) {\n        return volume.calculatePrice().monthlyPrice.value;\n      };\n\n      self.table.volumeFilter = orderBy(\n        self.table.volumeFilter,\n        orderByExpression,\n        self.order.reverse,\n      );\n      self.table.volumeFilterCheckbox = _.filter(self.table.volumeFilter, volume => volume.getStatusGroup() === 'ACTIVE' && !volume.snapshotted);\n    };\n\n    // ---------VOLUME---------\n\n    function getVolumeListDetailed(volumeList) {\n      const tab = [];\n      angular.forEach(volumeList.volumes, (vols) => {\n        angular.forEach(vols, (vol) => {\n          tab.push(vol);\n        });\n      });\n      return tab;\n    }\n\n    function setDetails() {\n      const fullInfosQueue = []; let tmpInstanceDetail; let\n        firstVolumePrice;\n      angular.forEach(self.table.volume, (volume) => {\n        fullInfosQueue.push(volume.getFullInformations());\n      });\n\n      return $q.all(fullInfosQueue).then(() => {\n        // reset total resume\n        self.totalResume.capacity = 0;\n        self.totalResume.price.value = 0;\n        self.totalResume.price.text = 0;\n        self.totalResume.price.currencyCode = 0;\n\n        angular.forEach(self.table.volume, (volume) => {\n          _.set(volume, 'attachedToDetails', []);\n          // calculate total capacity\n          self.totalResume.capacity += volume.size;\n          // calculate total price value\n          self.totalResume.price.value += volume.calculatePrice().monthlyPrice.value;\n\n          angular.forEach(volume.attachedTo, (instanceId) => {\n            tmpInstanceDetail = _.find(self.table.instance, { id: instanceId });\n            if (tmpInstanceDetail) {\n              volume.attachedToDetails.push(tmpInstanceDetail.name);\n            }\n          });\n\n          // check if the volume is linked to one or more snapshots\n          _.set(volume, 'snapshotted', !!_.find(self.table.snapshots, { volumeId: volume.id }));\n        });\n\n        if (self.table.volume.length) {\n          firstVolumePrice = self.table.volume[0].calculatePrice();\n          // set good total price\n          self.totalResume.price.text = firstVolumePrice.monthlyPrice.text.replace(/\\d+(?:[.,]\\d+)?/, `${self.totalResume.price.value.toFixed(2)}`);\n          self.totalResume.price.currencyCode = firstVolumePrice.monthlyPrice.currencyCode;\n        }\n      });\n    }\n\n    self.getVolume = function getVolume(clearCache) {\n      if (!self.loaders.table.volume) {\n        self.table.volume = [];\n        self.table.instance = [];\n        self.toggle.volumeDeleteId = null;\n        self.loaders.table.volume = true;\n        if (clearCache) {\n          OvhApiCloudProjectVolume.v6().resetQueryCache();\n        }\n\n        $q.all([\n          // GET INSTANCES DETAILS\n          OvhApiCloudProjectInstance.v6().query({\n            serviceName,\n          }).$promise.then((instanceList) => {\n            self.table.instance = instanceList;\n          }),\n          // GET VOLUMES DETAILS\n          CloudProjectOrchestrator.initVolumes({\n            serviceName,\n          }).then((volumeList) => {\n            self.table.volume = getVolumeListDetailed(volumeList);\n            self.table.groupVolume = volumeList;\n          }),\n          OvhApiCloudProjectVolumeSnapshot.v6().query({\n            serviceName,\n          }).$promise.then((snapshotList) => {\n            self.table.snapshots = snapshotList;\n          }),\n        ]).then(() => setDetails().then(() => {\n          filterVolume(); // orderBy is call by filterVolume();\n        }), (err) => {\n          self.table.volume = null;\n          self.table.instance = null;\n          self.table.snapshots = null;\n          CloudMessage.error([$translate.instant('cpc_volume_error'), (err.data && err.data.message) || ''].join(' '));\n        }).finally(() => {\n          self.loaders.table.volume = false;\n        });\n      }\n    };\n\n    // need to watch grouped volume by instance change\n    // because volume tabs use an array of volume and not object...\n    $scope.$watch('CloudProjectComputeVolumeCtrl.table.groupVolume', (newVal, oldVal) => {\n      if (oldVal && newVal) {\n        self.table.volume = getVolumeListDetailed(newVal);\n        // to update total price and volume\n        setDetails().then(() => {\n          filterVolume(); // orderBy is call by filterVolume();\n        });\n      }\n    }, true);\n\n    self.createNewVolume = function () {\n      CloudMessage.info($translate.instant('cpc_volume_create_volume_button_info'));\n      $timeout(() => {\n        $state.go('iaas.pci-project.compute.infrastructure.diagram', {\n          createNewVolume: true,\n        });\n      }, 99);\n    };\n\n    self.openDeleteVolume = function (volume) {\n      ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/cloud/project/compute/volume/delete/cloud-project-compute-volume-delete.html',\n          controller: 'CloudProjectComputeVolumeDeleteCtrl',\n          controllerAs: '$ctrl',\n          resolve: {\n            serviceName: () => serviceName,\n            volume: () => volume,\n          },\n        },\n        successHandler: () => {\n          self.getVolume(true);\n          CloudMessage.success($translate.instant('cpc_volume_delete_success'));\n        },\n        errorHandler: err => CloudMessage.error([$translate.instant('cpc_volume_delete_error'), (err.data && err.data.message) || ''].join(' ')),\n      });\n    };\n\n    init();\n  });\n"]}