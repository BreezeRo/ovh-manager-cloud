{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/logs-streams.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/logs-streams.service.js","mtime":1539717142153},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsStreamsService {\n  constructor($q, $translate, CloudMessage, ControllerHelper, LogsHomeService, LogsOptionsService,\n    LogsStreamsAlertsService, LogsStreamsArchivesService, LogsOrderService, LogsConstants,\n    OvhApiDbaas, UrlHelper, LogsHelperService) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.LogsApiService = OvhApiDbaas.Logs().v6();\n    this.StreamsApiService = OvhApiDbaas.Logs().Stream().v6();\n    this.StreamsAapiService = OvhApiDbaas.Logs().Stream().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.LogsHomeService = LogsHomeService;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsStreamsAlertsService = LogsStreamsAlertsService;\n    this.LogsStreamsArchivesService = LogsStreamsArchivesService;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsOrderService = LogsOrderService;\n    this.UrlHelper = UrlHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsConstants = LogsConstants;\n    this.LogsHelperService = LogsHelperService;\n\n    this.initializeData();\n  }\n\n  initializeData() {\n    this.compressionAlgorithms = [\n      {\n        value: this.LogsConstants.GZIP,\n        name: this.$translate.instant('logs_stream_compression_gzip'),\n      },\n      {\n        value: this.LogsConstants.DEFLATED,\n        name: this.$translate.instant('logs_stream_compression_zip'),\n      },\n      {\n        value: this.LogsConstants.LZMA,\n        name: this.$translate.instant('logs_stream_compression_lzma'),\n      },\n      {\n        value: this.LogsConstants.ZSTD,\n        name: this.$translate.instant('logs_stream_compression_zstd'),\n      },\n    ];\n\n    this.storageDurations = [\n      {\n        value: 1,\n        name: this.$translate.instant('logs_stream_retention_1y'),\n      },\n      {\n        value: 2,\n        name: this.$translate.instant('logs_stream_retention_2y'),\n      },\n      {\n        value: 5,\n        name: this.$translate.instant('logs_stream_retention_5y'),\n      },\n      {\n        value: 10,\n        name: this.$translate.instant('logs_stream_retention_10y'),\n      },\n    ];\n  }\n\n  /**\n   * returns array of streams with details of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of streams.\n   *          each stream will have all details populated.\n   * @memberof LogsStreamsService\n   */\n  getStreams(serviceName) {\n    return this.getStreamDetails(serviceName)\n      .then(streams => streams.map(stream => this.transformStream(serviceName, stream)))\n      .catch(err => this.LogsHelperService.handleError('logs_streams_get_error', err, {}));\n  }\n\n  /**\n   * returns array of owned streams with details of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of streams.\n   *          each stream will have all details populated.\n   * @memberof LogsStreamsService\n   */\n  getOwnStreams(serviceName) {\n    return this.getStreamDetails(serviceName)\n      .then(streams => streams.filter(aapiStream => aapiStream.info.isEditable))\n      .catch(err => this.LogsHelperService.handleError('logs_streams_get_error', err, {}));\n  }\n\n  /**\n   * returns array of shareable streams with details of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of streams.\n   *          each stream will have all details populated.\n   * @memberof LogsStreamsService\n   */\n  getShareableStreams(serviceName) {\n    return this.getStreamDetails(serviceName)\n      .then(streams => streams.filter(aapiStream => aapiStream.info.isShareable))\n      .catch(err => this.LogsHelperService.handleError('logs_streams_get_error', err, {}));\n  }\n\n  /**\n   * gets stream details for each stream in array\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of streams\n   * @memberof LogsStreamsService\n   */\n  getStreamDetails(serviceName) {\n    return this.getAllStreams(serviceName)\n      .then((streams) => {\n        const promises = streams.map(stream => this.getAapiStream(serviceName, stream));\n        return this.$q.all(promises);\n      });\n  }\n\n  /**\n   * returns details of a stream\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @returns promise which will be resolve to stream object\n   * @memberof LogsStreamsService\n   */\n  getStream(serviceName, streamId) {\n    return this.StreamsApiService.get({ serviceName, streamId })\n      .$promise\n      .catch(err => this.LogsHelperService.handleError('logs_stream_get_error', err, {}));\n  }\n\n  /**\n   * returns details of a stream making call to Aapi (2api) service\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @returns promise which will be resolve to stream object\n   * @memberof LogsStreamsService\n   */\n  getAapiStream(serviceName, streamId) {\n    return this.StreamsAapiService.get({ serviceName, streamId })\n      .$promise\n      .catch(err => this.LogsHelperService.handleError('logs_stream_get_error', err, {}));\n  }\n\n  /**\n   * delete stream\n   *\n   * @param {any} serviceName\n   * @param {any} stream, stream object to be deleted\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsStreamsService\n   */\n  deleteStream(serviceName, stream) {\n    return this.StreamsApiService.delete({ serviceName, streamId: stream.streamId }, stream)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_stream_delete_success', { streamName: stream.title });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_stream_delete_error', err, { streamName: stream.title }));\n  }\n\n  /**\n   * create new stream\n   *\n   * @param {any} serviceName\n   * @param {any} stream, stream object to be created\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsStreamsService\n   */\n  createStream(serviceName, stream) {\n    return this.StreamsApiService.create({ serviceName }, stream)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_stream_create_success', { streamName: stream.title });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_stream_create_error', err, { streamName: stream.title }));\n  }\n\n  /**\n   * update stream\n   *\n   * @param {any} serviceName\n   * @param {any} stream, stream object to be updated\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsStreamsService\n   */\n  updateStream(serviceName, stream) {\n    return this.StreamsApiService.update({ serviceName, streamId: stream.streamId }, stream)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_stream_update_success', { streamName: stream.title });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_stream_update_error', err, { streamName: stream.title }));\n  }\n\n  /**\n   * returns array of stream id's of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of stream id's\n   * @memberof LogsStreamsService\n   */\n  getAllStreams(serviceName) {\n    return this.LogsApiService.streams({ serviceName }).$promise;\n  }\n\n  /**\n   * returns objecy containing total number of streams and total number of streams used\n   *\n   * @param {any} serviceName\n   * @returns quota object containing V (total number streams)\n   *          and configured (number of streams used)\n   * @memberof LogsStreamsService\n   */\n  getQuota(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then((me) => {\n        const quota = {\n          max: me.total.maxNbStream,\n          configured: me.total.curNbStream,\n          currentUsage: me.total.curNbStream * 100 / me.total.maxNbStream,\n        };\n        return quota;\n      }).catch(err => this.LogsHelperService.handleError('logs_streams_quota_get_error', err, {}));\n  }\n\n  getMainOffer(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then(me => ({\n        max: me.offer.maxNbStream,\n        current: me.offer.curNbStream,\n        planCode: me.offer.reference,\n      })).catch(err => this.LogsHelperService.handleError('logs_main_offer_get_error', err, {}));\n  }\n\n  getCompressionAlgorithms() {\n    return this.compressionAlgorithms;\n  }\n\n  getStorageDurations() {\n    return this.storageDurations;\n  }\n\n  getSubscribedOptions(serviceName) {\n    return this.LogsOptionsService.getSubscribedOptionsByType(\n      serviceName,\n      this.LogsConstants.STREAM_OPTION_REFERENCE,\n    );\n  }\n\n  /**\n   * creates new stream with default values\n   *\n   * @returns stream object with default values\n   * @memberof LogsStreamsService\n   */\n  getNewStream() {\n    return {\n      data: {\n        coldStorageCompression: this.compressionAlgorithms[0].value,\n        coldStorageRetention: this.storageDurations[0].value,\n        coldStorageNotifyEnabled: true,\n        coldStorageEnabled: false,\n        webSocketEnabled: true,\n      },\n      loading: false,\n    };\n  }\n\n  /**\n   * extracts graylog URL from stream. Shows error message on UI if no graylog URL is found.\n   *\n   * @param {any} stream\n   * @returns {string} graylog url, if not found empty string\n   * @memberof LogsStreamsService\n   */\n  getStreamGraylogUrl(stream) {\n    const url = this.UrlHelper.constructor.findUrl(stream, this.LogsConstants.GRAYLOG_WEBUI);\n    if (!url) {\n      this.CloudMessage.error(this.$translate.instant('logs_streams_get_graylog_url_error', { stream: stream.info.title }));\n    }\n    return url;\n  }\n\n  /**\n   * extracts and copies stream token to clipboard.\n   * Shows error message on UI if no no token found or browser does not support clipboard copy.\n   *\n   * @param {any} stream\n   * @memberof LogsStreamsService\n   */\n  copyStreamToken(stream) {\n    const token = this.getStreamToken(stream);\n    if (token) {\n      const error = this.ControllerHelper.constructor.copyToClipboard(token);\n      if (error) {\n        this.CloudMessage.error(this.$translate.instant('logs_streams_copy_token_error', {\n          stream: stream.info.title,\n          token_value: token,\n        }));\n      } else {\n        this.CloudMessage.info(this.$translate.instant('logs_streams_copy_token_success'));\n      }\n    }\n  }\n\n  /**\n   * Extracts X-OVH-TOKEN token from given stream.\n   * Throws exception on UI if token was not found.\n   * @param {object} stream\n   * @return {string} stream token if found, empty string otherwise\n   */\n  getStreamToken(stream) {\n    const token = this.findStreamTokenValue(stream);\n    if (!token) {\n      this.CloudMessage.error(this.$translate.instant('logs_streams_find_token_error', { stream: stream.info.title }));\n    }\n    return token;\n  }\n\n  /**\n   * extracts X-OVH-TOKEN token from given stream\n   * @param {object} stream\n   * @return {string} stream token if found, empty string otherwise\n   */\n  findStreamTokenValue(stream) {\n    const ruleObj = _.find(stream.rules, rule => rule.field === this.LogsConstants.X_OVH_TOKEN);\n    return _.get(ruleObj, 'value');\n  }\n\n  getOrderCatalog(ovhSubsidiary) {\n    return this.LogsOrderService.getOrderCatalog(ovhSubsidiary);\n  }\n\n  getAccountDetails(serviceName) {\n    return this.LogsHomeService.getAccountDetails(serviceName);\n  }\n\n  /**\n   * add additional data to stream before sending back to controller\n   * 1. asynchronously gets notifications of a stream\n   * 2. asynchronously gets archives of a stream\n   * 3. updates operationStreamMap to get number of streams assigned to each operation\n   *\n   * @param {any} serviceName\n   * @param {any} stream\n   * @returns stream object after adding notifications\n   * @memberof LogsStreamsService\n   */\n  transformStream(serviceName, stream) {\n    _.set(stream, 'info.notifications', []);\n    _.set(stream, 'info.archives', []);\n    // asynchronously fetch all notification of a stream\n    this.LogsStreamsAlertsService.getAlertIds(serviceName, stream.info.streamId)\n      .then((notifications) => {\n        _.set(stream, 'info.notifications', notifications);\n      });\n    // asynchronously fetch all archives of a stream\n    this.LogsStreamsArchivesService.getArchiveIds(serviceName, stream.info.streamId)\n      .then((archives) => {\n        _.set(stream, 'info.archives', archives);\n      });\n    return stream;\n  }\n\n  resetAllCache() {\n    this.LogsApiService.resetAllCache();\n    this.StreamsApiService.resetAllCache();\n    this.StreamsAapiService.resetAllCache();\n    this.AccountingAapiService.resetAllCache();\n    // refresh home page last modified stream\n    this.DetailsAapiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsStreamsService', LogsStreamsService);\n"]}