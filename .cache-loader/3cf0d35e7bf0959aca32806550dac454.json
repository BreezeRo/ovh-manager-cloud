{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/import/vps.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/import/vps.service.js","mtime":1539717374626},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').service('VpsService', [\n  '$http',\n  '$q',\n  '$timeout',\n  '$cacheFactory',\n  '$rootScope',\n  'additionalDisk.capacities',\n  'additionalDisk.hasNoOption',\n  'VpsTaskService',\n  'ServiceHelper',\n  '$translate',\n  function VpsService($http, $q, $timeout, cache, $rootScope, additionalDiskCapacities,\n    additionalDiskHasNoOption, VpsTaskService, ServiceHelper, $translate) {\n    const aapiRootPath = '/sws/vps';\n\n\n    const swsVpsProxypass = '/vps';\n\n\n    const swsOrderProxypass = '/order/vps';\n\n\n    const swsPriceProxypass = '/price/vps';\n\n\n    const vpsCache = cache('UNIVERS_WEB_VPS');\n\n\n    const vpsInfoCache = cache('VPS_INFO_CACHE');\n\n\n    const vpsTabVeeamCache = cache('UNIVERS_WEB_VPS_TABS_VEEAM');\n\n\n    const vpsTabBackupStorageCache = cache('UNIVERS_WEB_VPS_TABS_BACKUP_STORAGE');\n\n\n    const requests = {\n      vpsDetails: null,\n    };\n\n\n    const self = this;\n\n    this.events = {\n      tabVeeamChanged: 'vps.tabs.veeam.changed',\n    };\n\n    this.getTaskInProgress = function (serviceName, type) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          return $http.get([aapiRootPath, vps.name, 'tasks/uncompleted'].join('/'), {\n            serviceType: 'aapi',\n            params: {\n              type,\n            },\n          }).then((data) => {\n            result = data.data;\n          });\n        }\n        return $q.reject(vps);\n      }).then(() => result, http => $q.reject(http.data));\n    };\n\n    this.getTaskInError = function (serviceName) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          return $http.get([aapiRootPath, vps.name, 'tasks/error'].join('/'), { serviceType: 'aapi' }).then((data) => {\n            result = data.data;\n          });\n        }\n        return $q.reject(vps);\n      }).then(() => result, http => $q.reject(http.data));\n    };\n\n    function resetTabVeeam() {\n      vpsTabVeeamCache.removeAll();\n      $rootScope.$broadcast(self.events.tabVeeamChanged);\n    }\n\n    /*\n     * Private function to reset the cache\n     *\n     */\n    function resetCache(key) {\n      if (key !== undefined) {\n        if (requests[key] !== undefined) {\n          requests[key] = null;\n        }\n        vpsCache.remove(key);\n      } else {\n        vpsCache.removeAll();\n        vpsInfoCache.removeAll();\n        /* eslint-disable no-restricted-syntax, no-prototype-builtins */\n        for (const request in requests) {\n          if (requests.hasOwnProperty(request)) {\n            requests[request] = null;\n          }\n        }\n        /* eslint-enable no-restricted-syntax, no-prototype-builtins */\n      }\n    }\n\n    /*\n     * same as getSelected without using Products (it causes problem when changing vps\n     * using sidebar)\n     */\n    this.getSelectedVps = function (serviceName) {\n      return $http.get([aapiRootPath, serviceName, 'info'].join('/'), {\n        serviceType: 'aapi',\n        cache: vpsInfoCache,\n      })\n        .then((result) => {\n          _.set(result, 'data.secondaryDns', (result.data.secondaryDns === 0)\n            ? $translate.instant('vps_dashboard_secondary_dns_count_0')\n            : $translate.instant('vps_dashboard_secondary_dns_count_x', {\n              count: result.data.secondaryDns,\n            }));\n          return result.data;\n        })\n        .catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n    };\n\n    /*\n         * Get monitoring data\n         */\n    this.getMonitoring = function (serviceName, period) {\n      let monitoring = null;\n\n\n      const p = period != null ? period : 'lastday';\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          return $http.get([aapiRootPath, vps.name, 'monitoring'].join('/'), { serviceType: 'aapi', params: { period: p } })\n            .then((data) => {\n              if (data) {\n                monitoring = data.data;\n              } else {\n                $q.reject(`${aapiRootPath + vps.name}/monitoring?period=${p} : No data`);\n              }\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        if (monitoring !== null) {\n          return monitoring;\n        }\n        return null;\n      }).catch(ServiceHelper.errorHandler('vps_configuration_monitoring_fail'));\n    };\n\n    /*\n         * reset VPS password\n         */\n    this.resetPassword = function (serviceName) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          return $http.post([swsVpsProxypass, vps.name, 'setPassword'].join('/'))\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return result;\n      }, http => $q.reject(http.data));\n    };\n\n    /*\n         * Reboot the VPS\n         */\n    this.reboot = function (serviceName, rescueMode) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          const netbootMode = rescueMode ? 'rescue' : 'local';\n          if (vps.netbootMode === netbootMode.toUpperCase()) {\n            return $http.post([swsVpsProxypass, vps.name, 'reboot'].join('/'))\n              .then((data) => {\n                result = data.data;\n              });\n          }\n\n          // The modification of netbootMode for a vps other than CLOUD 2014v1 model will make\n          // the VPS reboot. So ask an explicit reboot only if the VPS is a CLOUD 2014v1\n          if ((vps.offerType === 'CLOUD' && vps.version === '_2014_V_1')) {\n            // Sleep for 40 seconds because the netboot change take some seconds to apply.\n            // It's not a good solution, it's like that since the begin\n            return $http.put([swsVpsProxypass, vps.name].join('/'), { netbootMode })\n              .then(() => $timeout(() => $http.post([swsVpsProxypass, vps.name, 'reboot'].join('/')).then((data) => {\n                result = data.data;\n              }), 40000));\n          }\n          return $http.put([swsVpsProxypass, vps.name].join('/'), { netbootMode });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return result;\n      }, http => $q.reject(http.data));\n    };\n\n    /*\n         * Get a KVM access for the VPS\n         */\n    this.getKVMAccess = function (serviceName) {\n      return $http.post([swsVpsProxypass, serviceName, 'openConsoleAccess'].join('/'), { protocol: 'VNCOverWebSocket' })\n        .then(data => data.data)\n        .catch(ServiceHelper.errorHandler());\n    };\n\n    this.getKVMConsoleUrl = function (serviceName) {\n      let result = null;\n      return $http.post([swsVpsProxypass, serviceName, 'getConsoleUrl'].join('/')).then((response) => {\n        result = response.data;\n      },\n      err => $q.reject(err.data)).then(() => {\n        resetCache();\n        $rootScope.$broadcast('vps.dashboard.refresh');\n        return result;\n      }, http => $q.reject(http.data));\n    };\n\n    /*\n         * return the templates list available for this VPS\n         */\n    this.getTemplates = function (serviceName) {\n      return $http.get([aapiRootPath, serviceName, 'templates'].join('/'), { serviceType: 'aapi' })\n        .then(response => response.data)\n        .catch(ServiceHelper.errorHandler('vps_configuration_polling_fail'));\n    };\n\n    /*\n         * Reinstall the VPS using the template identified by templateId\n         */\n    this.reinstall = function (serviceName, templateId, language, softIds, sshKeys,\n      doNotSendPassword) {\n      if (!templateId) {\n        return $q.reject('No templateId');\n      }\n      return $http.post([swsVpsProxypass, serviceName, 'reinstall'].join('/'), {\n        language,\n        softwareId: softIds,\n        sshKey: sshKeys,\n        doNotSendPassword: Boolean(doNotSendPassword),\n        templateId,\n      })\n        .then((response) => {\n          resetCache();\n          VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n          return response.data;\n        })\n        .catch(ServiceHelper.errorHandler('vps_configuration_reinstall_fail'))\n        .finally(() => this.CloudMessage.success(this.$translate.instant('vps_configuration_reinstall_success', { serviceName: this.serviceName })));\n    };\n\n    /*\n         * return the ip list for this VPS\n         */\n    this.getIps = function (serviceName) {\n      return $http.get([aapiRootPath, serviceName, 'ips'].join('/'), { serviceType: 'aapi' })\n        .then(data => data.data)\n        .catch(ServiceHelper.errorHandler());\n    };\n\n    /*\n         * Reinstall the VPS using the template identified by templateId\n         */\n    this.setReversesDns = function (serviceName, ips) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (!ips) {\n          return $q.reject('No ips');\n        } if (vps && vps.name) {\n          return $http.post([aapiRootPath, vps.name, 'ips', 'reverse'].join('/'), ips, { serviceType: 'aapi' })\n            .then((data) => { result = data.data; });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache();\n        $rootScope.$broadcast('vps.dashboard.refresh');\n        return result;\n      }, http => $q.reject(http.data));\n    };\n\n    /*\n         * Get content of summary tabs\n         */\n    this.getTabSummary = function (serviceName, forceRefresh) {\n      let vpsName = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name && !vps.isExpired) {\n          vpsName = vps.name;\n          if (forceRefresh) {\n            resetCache(`tabSummary_${vpsName}`);\n          }\n          const tabSummary = vpsCache.get(`tabSummary_${vpsName}`);\n          if (!tabSummary) {\n            vpsCache.put(`tabSummary_${vps.name}`, true);\n            return $http.get([aapiRootPath, vps.name, 'tabsummary'].join('/'), { serviceType: 'aapi' })\n              .then((response) => {\n                if (response.status < 300) {\n                  vpsCache.put(`tabSummary_${vpsName}`, response.data);\n                  return vpsCache.get(`tabSummary_${vpsName}`);\n                }\n                return $q.reject(response);\n              });\n          }\n          return tabSummary;\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        const result = vpsCache.get(`tabSummary_${vpsName}`);\n        if (result && (!result.messages\n          || (angular.isArray(result.messages) && result.messages.length === 0))) {\n          return result;\n        } if (result && result.messages.length !== 0) {\n          return $q.reject(result.messages);\n        }\n        return $q.reject(result);\n      }).catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n    };\n\n    /*\n         * Get content of ips tabs\n         */\n    this.getTabIps = function (serviceName) {\n      let vpsName = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          vpsName = vps.name;\n          const tabSummary = vpsCache.get(`tabIps_${vpsName}`);\n          if (!tabSummary) {\n            vpsCache.put(`tabIps_${vps.name}`, true);\n            return $http.get([aapiRootPath, vps.name, 'tabips'].join('/'), { serviceType: 'aapi' })\n              .then((response) => {\n                if (response.status < 300) {\n                  vpsCache.put(`tabIps_${vpsName}`, response.data);\n                  return vpsCache.get(`tabIps_${vpsName}`);\n                }\n                return $q.reject(response);\n              });\n          }\n          return tabSummary;\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        const result = vpsCache.get(`tabIps_${vpsName}`);\n        if (result && (!result.messages\n          || (angular.isArray(result.messages) && result.messages.length === 0))) {\n          return result;\n        } if (result && result.messages.length !== 0) {\n          return $q.reject(result.messages);\n        }\n        return $q.reject(result);\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * Get content of secondary DNS tab\n         */\n    this.getTabSecondaryDns = function (serviceName, count, offset) {\n      let vpsName = null;\n\n\n      let offsetFinal = offset;\n\n\n      let countFinal = count;\n\n\n      let cacheKey = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          vpsName = vps.name;\n          if (!count) {\n            countFinal = 0;\n          }\n          if (!offset) {\n            offsetFinal = 0;\n          }\n          cacheKey = `tabSecondaryDNS_${vpsName}_count=${countFinal}_offset=${offsetFinal}`;\n          const tabSummary = vpsCache.get(cacheKey);\n          if (!tabSummary) {\n            vpsCache.put(cacheKey, true);\n            return $http.get([aapiRootPath, vps.name, 'tabsecondarydns'].join('/'), { serviceType: 'aapi' })\n              .then((response) => {\n                if (response.status < 300) {\n                  vpsCache.put(cacheKey, response.data);\n                  return vpsCache.get(cacheKey);\n                }\n                return $q.reject(response);\n              });\n          }\n          return tabSummary;\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        const result = vpsCache.get(cacheKey);\n        if (result && (!result.messages\n          || (angular.isArray(result.messages) && result.messages.length === 0))) {\n          return result;\n        } if (result && result.messages.length !== 0) {\n          return $q.reject(result.messages);\n        }\n        return $q.reject(result);\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * Get the secondary DNS available for this VPS\n         */\n    this.getSecondaryDNSAvailable = function (serviceName) {\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          const tabSummary = vpsCache.get('tabSecondaryDNS_dns_available');\n          if (!tabSummary) {\n            vpsCache.put('tabSecondaryDNS_dns_available', true);\n            return $http.get([swsVpsProxypass, vps.name, 'secondaryDnsNameServerAvailable'].join('/'))\n              .then((response) => {\n                if (response.status < 300) {\n                  vpsCache.put('tabSecondaryDNS_dns_available', response.data);\n                  return vpsCache.get('tabSecondaryDNS_dns_available');\n                }\n                return $q.reject(response);\n              });\n          }\n          return tabSummary;\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        const result = vpsCache.get('tabSecondaryDNS_dns_available');\n        if (result && (!result.messages\n          || (angular.isArray(result.messages) && result.messages.length === 0))) {\n          return result;\n        } if (result && result.messages.length !== 0) {\n          return $q.reject(result.messages);\n        }\n        return $q.reject(result);\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * Add a domain to the secondary DNS for the VPS\n         *\n         */\n    this.addSecondaryDnsDomain = function (serviceName, domain) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          return $http.post([swsVpsProxypass, vps.name, 'secondaryDnsDomains'].join('/'), { domain })\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache();\n        $rootScope.$broadcast('vps.tabs.secondarydns.refresh');\n        $rootScope.$broadcast('vps.dashboard.vpsonly.refresh');\n        return result;\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * delete the domain from secondary DNS\n         */\n    this.deleteSecondaryDnsDomain = function (serviceName, domain) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name && domain) {\n          return $http.delete([swsVpsProxypass, vps.name, 'secondaryDnsDomains', domain].join('/'))\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache();\n        $rootScope.$broadcast('vps.tabs.secondarydns.refresh');\n        $rootScope.$broadcast('vps.dashboard.vpsonly.refresh');\n        return result;\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * create a snapshot for the VPS\n         */\n    this.takeSnapshot = function (serviceName, description) {\n      let result = null; let\n        vpsName = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          vpsName = vps.name;\n          return $http.post([swsVpsProxypass, vps.name, 'createSnapshot'].join('/'), description)\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache(`tabSummary_${vpsName}`);\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return result;\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * restore a snapshot for the VPS\n         */\n    this.restoreSnapshot = function (serviceName) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          return $http.post([swsVpsProxypass, vps.name, 'snapshot/revert'].join('/'))\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return result;\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * delete the snapshot for the VPS\n         */\n    this.deleteSnapshot = function (serviceName) {\n      let result = null; let\n        vpsName = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          vpsName = vps.name;\n          return $http.delete([swsVpsProxypass, vps.name, 'snapshot'].join('/'))\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache(`tabSummary_${vpsName}`);\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return result;\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * order an option for the VPS\n         */\n    this.orderOption = function (serviceName, option, duration) {\n      let result = null; let\n        vpsName = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name && option && duration) {\n          vpsName = vps.name;\n          return $http.post([aapiRootPath, vps.name, 'order', 'options'].join('/'), { option, duration }, { serviceType: 'aapi' })\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache(`tabSummary_${vpsName}`);\n        return result;\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * get details for an option for the VPS\n         */\n    this.getOptionDetails = function (serviceName, option) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name && option) {\n          return $http.get([aapiRootPath, vps.name, 'options', option].join('/'), { serviceType: 'aapi' })\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => result, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    this.getOptionSnapshotFormated = function (serviceName) {\n      return this.getOptionDetails(serviceName, 'snapshot').then(optionDetails => _.first(optionDetails.results));\n    };\n\n    this.getPriceOptions = function (vps) {\n      return $http.get(['/price/vps', vps.version.toLowerCase().replace(/_/g, ''), vps.offerType.toLowerCase(), 'option/automatedBackup'].join('/'));\n    };\n\n    this.cancelOption = function (serviceName, option) {\n      return this.getSelectedVps(serviceName).then(vps => $http.delete([swsVpsProxypass, vps.name, 'option', option].join('/'))\n        .catch(err => (err && err.data ? $q.reject(err.data) : $q.reject(err))));\n    };\n\n    this.getOptionStatus = function (serviceName, option) {\n      return this.getSelectedVps(serviceName).then(vps => $http.get([swsVpsProxypass, vps.name, 'option', option].join('/'))\n        .then(response => response.data));\n    };\n\n    /*\n         * upgrade the VPS tothe specified model\n         */\n    this.upgrade = function (serviceName, model, duration) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name && model && duration) {\n          return $http.post([swsOrderProxypass, vps.name, 'upgrade', duration].join('/'), { model })\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => {\n        resetCache();\n        return result;\n      }, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * get details for an option for the VPS\n         */\n    this.upgradesList = function (serviceName) {\n      let result = null;\n      return this.getSelectedVps(serviceName).then((vps) => {\n        if (vps && vps.name) {\n          return $http.get([aapiRootPath, vps.name, 'upgrade'].join('/'), { serviceType: 'aapi' })\n            .then((data) => {\n              result = data.data;\n            });\n        }\n        return $q.reject(vps);\n      }).then(() => result, (reason) => {\n        if (reason && reason.data !== undefined) {\n          return $q.reject(reason.data);\n        }\n        return $q.reject(reason);\n      });\n    };\n\n    /*\n         * Get content of veeam tab\n         */\n    this.getVeeamInfo = function (serviceName) {\n      return $http.get([swsVpsProxypass, serviceName, 'automatedBackup'].join('/'))\n        .then(response => response.data);\n    };\n\n    this.getVeeamAttachedBackup = function (serviceName) {\n      return $http.get([swsVpsProxypass, serviceName, 'automatedBackup/attachedBackup'].join('/'))\n        .then(response => response.data);\n    };\n\n    this.getVeeam = function (serviceName) {\n      let info;\n      return $q.all([self.getVeeamInfo(serviceName), self.getVeeamAttachedBackup(serviceName)])\n        .then((response) => {\n          if (response.length > 1) {\n            info = _.first(response);\n            info.accessInfos = _.first(response[1]);\n          }\n          return info;\n        })\n        .catch(() => ({ state: 'disabled' }));\n    };\n\n    this.getTabVeeam = function (serviceName, state, forceRefresh) {\n      if (forceRefresh) {\n        resetTabVeeam();\n      }\n      return $http.get([swsVpsProxypass, serviceName, 'automatedBackup/restorePoints'].join('/'), {\n        params: {\n          state,\n        },\n        cache: vpsTabVeeamCache,\n      }).then(response => response.data);\n    };\n\n    this.veeamRestorePointMount = function (serviceName, restorePoint) {\n      return this.getSelectedVps(serviceName).then(vps => $http.post([swsVpsProxypass, vps.name, 'automatedBackup/restore'].join('/'), {\n        changePassword: false,\n        restorePoint,\n        type: 'file',\n      }).then((response) => {\n        resetTabVeeam();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return response.data;\n      }));\n    };\n\n    this.veeamRestorePointRestore = function (serviceName, restorePoint, changePassword) {\n      return this.getSelectedVps(serviceName).then(vps => $http.post([swsVpsProxypass, vps.name, 'automatedBackup/restore'].join('/'), {\n        changePassword,\n        restorePoint,\n        type: 'full',\n      }).then((response) => {\n        resetTabVeeam();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return response.data;\n      }));\n    };\n\n    this.veeamRestorePointUmount = function (serviceName, restorePoint) {\n      return this.getSelectedVps(serviceName).then(vps => $http.post([swsVpsProxypass, vps.name, 'automatedBackup/detachBackup'].join('/'), {\n        restorePoint,\n      }).then((response) => {\n        resetTabVeeam();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return response.data;\n      }));\n    };\n\n    /**\n         * Get option veeam\n         */\n    this.getVeeamOption = function (serviceName) {\n      return this.getSelectedVps(serviceName).then(vps => $http.get([aapiRootPath, vps.name, 'automatedBackup'].join('/'), {\n        serviceType: 'aapi',\n        cache: vpsCache,\n      }).then(response => response.data).catch(error => error.data));\n    };\n\n    /**\n         * Order the option veeam\n         */\n    this.orderVeeamOption = (serviceName, duration) => this.getSelectedVps(serviceName)\n      .then(vps => $http.post([swsOrderProxypass, vps.name, 'automatedBackup', duration].join('/'), {}))\n      .then(response => response.data);\n    /**\n         * Update the VPS\n         */\n    this.update = function (serviceName, newValue) {\n      return this.getSelectedVps(serviceName).then(vps => $http.put([swsVpsProxypass, vps.name].join('/'), newValue)\n        .then((response) => {\n          resetCache();\n          VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n          return response.data;\n        }));\n    };\n\n    /**\n         * Update the VPS display name\n         */\n    this.updateDisplayName = function (serviceName, displayName) {\n      return $http.put([swsVpsProxypass, serviceName].join('/'), { displayName })\n        .then((response) => {\n          resetCache();\n          $rootScope.$broadcast('global_display_name_change', {\n            serviceName,\n            displayName,\n          });\n          return response.data;\n        });\n    };\n\n    // BackupStorage\n\n    this.getBackupStorageInformation = function (serviceName) {\n      return $http.get([aapiRootPath, serviceName, 'backupStorage'].join('/'), { serviceType: 'aapi' })\n        .then((response) => {\n          const backupInfo = response.data;\n          if (backupInfo.activated === true && backupInfo.quota) {\n            if (backupInfo.usage === 0) {\n              backupInfo.usage = {\n                unit: '%',\n                value: 0,\n              };\n            }\n          }\n          return backupInfo;\n        })\n        .catch(ServiceHelper.errorHandler());\n    };\n\n    this.getBackupStorageTab = function (serviceName, count, offset) {\n      vpsTabBackupStorageCache.removeAll();\n      return $http.get([aapiRootPath, serviceName, 'backupStorage/access'].join('/'), {\n        serviceType: 'aapi',\n        cache: vpsTabBackupStorageCache,\n        params: {\n          count,\n          offset,\n        },\n      })\n        .then(response => response.data);\n    };\n\n    this.getBackupStorageAuthorizableBlocks = function (serviceName) {\n      return this.getSelectedVps(serviceName).then(vps => $http.get([aapiRootPath, vps.name, 'backupStorage/access/authorizableBlocks'].join('/'), { serviceType: 'aapi' })\n        .then(response => response.data));\n    };\n\n    this.postBackupStorageAccess = function (serviceName, ipBlocksList, ftp, nfs, cifs) {\n      return this.getSelectedVps(serviceName).then(vps => $http.post([aapiRootPath, vps.name, 'backupStorage/access/add'].join('/'), {\n        ipBlocksList,\n        ftp,\n        nfs,\n        cifs,\n      }, { serviceType: 'aapi' }).then(response => response.data));\n    };\n\n    this.putBackupStorageAccess = function (serviceName, ipBlock, ftp, nfs, cifs) {\n      return this.getSelectedVps(serviceName).then(vps => $http.put([swsVpsProxypass, vps.name, 'backupftp', 'access', encodeURIComponent(ipBlock)].join('/'), {\n        ftp,\n        nfs,\n        cifs,\n      }).then(response => response.data));\n    };\n\n    this.deleteBackupStorageAccess = function (serviceName, ipBlock) {\n      return this.getSelectedVps(serviceName).then(vps => $http.delete([swsVpsProxypass, vps.name, 'backupftp', 'access', encodeURIComponent(ipBlock)].join('/'))\n        .then(response => response.data));\n    };\n\n    this.requestFtpBackupPassword = function (serviceName) {\n      return this.getSelectedVps(serviceName).then(vps => $http.post([swsVpsProxypass, vps.name, 'backupftp/password'].join('/'))\n        .then(response => response.data));\n    };\n\n    this.getWindowsOptionDurations = function (serviceName) {\n      return this.getSelectedVps(serviceName).then(vps => $http.get([swsOrderProxypass, vps.name, 'windows'].join('/'))\n        .then(response => response.data));\n    };\n\n    this.getWindowsOptionOrder = function (serviceName, duration) {\n      return this.getSelectedVps(serviceName).then(vps => $http.get([swsOrderProxypass, vps.name, 'windows', duration].join('/'))\n        .then(response => response.data));\n    };\n\n    this.postWindowsOptionOrder = function (serviceName, duration) {\n      return this.getSelectedVps(serviceName).then(vps => $http.post([swsOrderProxypass, vps.name, 'windows', duration].join('/'))\n        .then(response => response.data));\n    };\n\n    // Additional disks\n    this.hasAdditionalDiskOption = serviceName => this.getSelectedVps(serviceName).then((vps) => {\n      if (!_.include(vps.availableOptions, 'ADDITIONAL_DISK')) {\n        return $q.reject(additionalDiskHasNoOption);\n      }\n      return this.canOrderOption(serviceName, 'additionalDisk');\n    });\n\n    this.canOrderOption = (serviceName, optionName) => $http.get([swsOrderProxypass, serviceName].join('/')).then((response) => {\n      if (_.include(response.data, optionName)) {\n        return response.data;\n      }\n      return $q.reject(additionalDiskHasNoOption);\n    });\n\n    this.getAdditionalDiskPrices = function getAdditionalDiskPrices(serviceName) {\n      return this.getSelectedVps(serviceName).then(vps => $q.all([\n        $http.get([swsPriceProxypass, '2015v1', vps.offerType.toLowerCase(), 'option', additionalDiskCapacities[0].option].join('/')),\n        $http.get([swsPriceProxypass, '2015v1', vps.offerType.toLowerCase(), 'option', additionalDiskCapacities[1].option].join('/')),\n        $http.get([swsPriceProxypass, '2015v1', vps.offerType.toLowerCase(), 'option', additionalDiskCapacities[2].option].join('/')),\n        $http.get([swsPriceProxypass, '2015v1', vps.offerType.toLowerCase(), 'option', additionalDiskCapacities[3].option].join('/')),\n      ]).then((responses) => {\n        const prices = [];\n        let i = 0;\n        angular.forEach(responses, (capacity) => {\n          _.set(capacity, 'data.type', additionalDiskCapacities[i].option);\n          _.set(capacity, 'data.size', additionalDiskCapacities[i].size);\n          i += 1;\n          prices.push(capacity.data);\n        });\n        return prices;\n      }));\n    };\n\n    this.getAllowedDuration = function (serviceName, capacity) {\n      return this.getSelectedVps(serviceName).then((vps) => {\n        const url = [swsOrderProxypass, vps.name, 'additionalDisk'].join('/');\n        return $http\n          .get(url, { params: { additionalDiskSize: capacity } })\n          .then(duration => duration.data[0]);\n      });\n    };\n\n    this.getAdditionalDiskFinalPrice = function (serviceName, capacity, duration) {\n      return this.getSelectedVps(serviceName).then((vps) => {\n        const url = [swsOrderProxypass, vps.name, 'additionalDisk', duration].join('/');\n        return $http\n          .get(url, { params: { additionalDiskSize: capacity } })\n          .then(response => response.data);\n      });\n    };\n\n    this.postAdditionalDiskOrder = function (serviceName, capacity, duration) {\n      return this.getSelectedVps(serviceName).then((vps) => {\n        const url = [swsOrderProxypass, vps.name, 'additionalDisk', duration].join('/');\n        return $http.post(url, { additionalDiskSize: capacity }).then(response => response.data);\n      });\n    };\n\n    this.getDisks = function (serviceName) {\n      return $http.get([swsVpsProxypass, serviceName, 'disks'].join('/'))\n        .then(response => response.data)\n        .catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n    };\n\n    this.getDiskInfo = function (serviceName, id) {\n      return $http.get([swsVpsProxypass, serviceName, 'disks', id].join('/'))\n        .then(response => response.data)\n        .catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n    };\n\n    this.showOnlyAdditionalDisk = function (disks) {\n      _.remove(disks, currentObject => currentObject.type === 'primary');\n      return disks;\n    };\n\n    // Service info\n    this.getServiceInfos = function (serviceName) {\n      return this.getSelectedVps(serviceName).then(vps => $http.get([swsVpsProxypass, serviceName, 'serviceInfos'].join('/'))\n        .then((response) => {\n          response.data.offer = vps.model;\n          return response.data;\n        })\n        .catch(ServiceHelper.errorHandler('vps_dashboard_loading_error')));\n    };\n\n    this.isAutoRenewable = function (serviceName) {\n      return this.getSelectedVps(serviceName).then(vps => (moment(vps.expiration).diff(moment().date(), 'days') > 0));\n    };\n  },\n]);\n"]}