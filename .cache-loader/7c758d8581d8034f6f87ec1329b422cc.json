{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/details/cloud-project-details.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/details/cloud-project-details.controller.js","mtime":1539717374484},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectDetailsCtrl',\n  function CloudProjectDetailsCtrl($stateParams, $q, $state, $rootScope, $scope, $timeout,\n    ControllerModalHelper, OvhApiCloudProject, Poller, OvhApiMeOrder, CloudMessage, $translate,\n    $filter, REDIRECT_URLS) {\n    const self = this;\n\n    this.projectId = $stateParams.projectId;\n    this.project = null;\n    this.order = null;\n\n    this.supportUrl = REDIRECT_URLS.support;\n\n    self.loaders = {\n      cancelCreation: false,\n      init: true,\n    };\n\n    self.projectDeleteErrorsStatus = {\n      expired: 460,\n      ok: 401,\n    };\n\n    function showExpirationWarningMessage() {\n      if (!self.project.expiration) {\n        return;\n      }\n\n      $rootScope.$broadcast('CloudMainController:refresh');\n\n      ControllerModalHelper.showWarningModal({\n        title: $translate.instant('voucher_warning_title'),\n        message: $translate.instant('voucher_warning_description', {\n          expiration: $filter('date')(self.project.expiration, 'medium'),\n        }),\n      });\n    }\n\n    /**\n     * Poll project creating/deleting\n     */\n    function pollProject() {\n      Poller.poll(`/cloud/project/${self.projectId}`,\n        null,\n        {\n          successRule(project) {\n            return project.status !== 'creating' && project.status !== 'deleting';\n          },\n          namespace: 'iaas.pci-project.details',\n        }).then(project => handleProjectDetails(project), (err) => { // eslint-disable-line\n        if (err && err.status) {\n          // Error: goTo project creation\n          return $state.go('iaas.pci-project-new');\n        }\n      });\n    }\n\n    /**\n     * What to do with the API\"s return\n     */\n    function handleProjectDetails(project) {\n      self.project = project;\n\n      switch (project.status) {\n        case 'ok':\n          // If it\"s at initialization: go direct to the project,\n          // else, it\"s during the polling!\n          if (!$stateParams.fromProjectAdd) {\n            return $state.go('iaas.pci-project.compute', {\n              projectId: self.projectId,\n            });\n          }\n          self.loaders.init = false;\n          return $timeout(() => {\n            showExpirationWarningMessage();\n            $rootScope.$broadcast('CloudMainController:refresh');\n            return $state.go('iaas.pci-project.compute', {\n              projectId: self.projectId,\n              createNewVm: $stateParams.createNewVm,\n            });\n          }, 3000);\n        case 'suspended':\n          return null;\n        case 'creating':\n          if (project.orderId) {\n            OvhApiMeOrder.v6().get({\n              orderId: project.orderId,\n            }).$promise.then((result) => {\n              self.order = result;\n            });\n          }\n          pollProject();\n          return null;\n        case 'deleting':\n          pollProject();\n          return null;\n        default:\n          return null;\n      }\n    }\n\n    // And kill this polling on exit\n    $scope.$on('$destroy', () => {\n      Poller.kill({ namespace: 'iaas.pci-project.details' });\n    });\n\n    /**\n     * INIT: Get project details\n     */\n    function init() {\n      self.loaders.init = true;\n      return OvhApiCloudProject.v6().get({\n        serviceName: self.projectId,\n      }).$promise\n        .then(project => handleProjectDetails(project))\n        .catch(() => {\n          $state.go('iaas.pci-project-new');\n        })\n        .finally(() => {\n          self.loaders.init = false;\n        });\n    }\n\n    this.cancelProjectCreation = function () {\n      self.loaders.cancelCreation = true;\n\n      return OvhApiCloudProject.v6().cancelCreation({\n        serviceName: self.projectId,\n      }, {}).$promise.then((result) => {\n        CloudMessage.success($translate.instant('cpd_project_cancel_success'));\n        $rootScope.$broadcast('sidebar_refresh_cloud');\n        $state.go('home');\n        init();\n        return result;\n      }, (err) => {\n        switch (err) {\n          case self.projectDeleteErrorsStatus.expired:\n            CloudMessage.error($translate.instant('cpd_project_cancel_error_expired_status'));\n            $rootScope.$broadcast('sidebar_refresh_cloud');\n            init();\n            break;\n          case self.projectDeleteErrorsStatus.ok:\n            CloudMessage.error($translate.instant('cpd_project_cancel_error_ok_status'));\n            $rootScope.$broadcast('sidebar_refresh_cloud');\n            init();\n            break;\n          default:\n            CloudMessage.error($translate.instant('cpd_project_cancel_error'));\n        }\n        $q.reject(err);\n      }).finally(() => {\n        self.loaders.cancelCreation = false;\n      });\n    };\n\n    init();\n  });\n"]}