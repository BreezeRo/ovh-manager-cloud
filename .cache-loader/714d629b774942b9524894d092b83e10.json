{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/snapshot/nasha-partition-snapshot.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/snapshot/nasha-partition-snapshot.controller.js","mtime":1539717142249},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('NashaPartitionSnapshotCtrl', function ($stateParams, $scope, $uibModalInstance, $q, $translate, OvhApiDedicatedNasha, CloudMessage) {\n  const self = this;\n\n  self.snapshotEnum = null;\n  self.loading = false;\n  self.data = {\n    nashaId: $stateParams.nashaId,\n    partition: $scope.$resolve.items,\n  };\n\n  self.snapshots = {\n    before: [],\n    after: [],\n  };\n\n  self.isSelectionChanged = function () {\n    return !_.isEqual(self.snapshots.before, self.snapshots.after);\n  };\n\n  self.isScheduled = function (snapshot) {\n    return _.indexOf(self.snapshots.after, snapshot) > -1;\n  };\n\n  self.changeSchedule = function (snapshot, checked) {\n    if (checked) {\n      self.snapshots.after.push(snapshot);\n    } else {\n      _.remove(self.snapshots.after, item => item === snapshot);\n    }\n  };\n\n  self.applyScheduleChanges = function () {\n    self.loading = true;\n    const promises = [];\n    self.getAddSchedulesPromises(promises);\n    self.getDeleteSchedulesPromises(promises);\n    $q.all(promises)\n      .then((tasks) => {\n        CloudMessage.success($translate.instant('nasha_snapshot_set_success'));\n        $uibModalInstance.close({ partition: self.data.partition, tasks });\n      }).catch(() => {\n        CloudMessage.error($translate.instant('nasha_snapshot_set_success_fail'));\n        $uibModalInstance.dismiss();\n      }).finally(() => {\n        self.loading = false;\n      });\n  };\n\n  self.getAddSchedulesPromises = function (promises) {\n    const addToSchedule = _.difference(self.snapshots.after, self.snapshots.before);\n    _.forEach(addToSchedule, (schedule) => {\n      promises.push(OvhApiDedicatedNasha.Partition().Snapshot().v6().add({\n        serviceName: self.data.nashaId,\n        partitionName: self.data.partition.partitionName,\n      }, {\n        snapshotType: schedule,\n      }).$promise.then(result => result.data.taskId));\n    });\n  };\n\n  self.getDeleteSchedulesPromises = function (promises) {\n    const deleteFromSchedule = _.difference(self.snapshots.before, self.snapshots.after);\n    _.forEach(deleteFromSchedule, (schedule) => {\n      promises.push(OvhApiDedicatedNasha.Partition().Snapshot().v6().remove({\n        serviceName: self.data.nashaId,\n        partitionName: self.data.partition.partitionName,\n        snapshotType: schedule,\n      }).$promise.then(result => result.data.taskId));\n    });\n  };\n\n  self.dismiss = function () {\n    $uibModalInstance.dismiss();\n  };\n\n  function init() {\n    self.loading = true;\n    self.schedule = {};\n\n    OvhApiDedicatedNasha.v6().schema()\n      .$promise.then((data) => {\n        self.snapshotEnum = data.models['dedicated.storage.SnapshotEnum'].enum;\n      });\n\n    OvhApiDedicatedNasha.Partition().Snapshot().v6().query({\n      serviceName: self.data.nashaId,\n      partitionName: self.data.partition.partitionName,\n    }).$promise.then((data) => {\n      angular.copy(data, self.snapshots.before);\n      angular.copy(data, self.snapshots.after);\n    }).catch(() => {\n      CloudMessage.error($translate.instant('nasha_snapshot_loading_error'));\n    }).finally(() => {\n      self.loading = false;\n    });\n  }\n\n  init();\n});\n"]}