{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack.service.js","mtime":1539717142228},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerVrackService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerVrackService.$inject = [\"$q\", \"IpLoadBalancerServerFarmService\", \"OvhApiIpLoadBalancing\", \"IpLoadBalancerTaskService\", \"OvhApiVrack\", \"CloudPoll\", \"ServiceHelper\"];\n\n  function IpLoadBalancerVrackService($q, IpLoadBalancerServerFarmService, OvhApiIpLoadBalancing, IpLoadBalancerTaskService, OvhApiVrack, CloudPoll, ServiceHelper) {\n    _classCallCheck(this, IpLoadBalancerVrackService);\n\n    this.$q = $q;\n    this.IpLoadBalancerServerFarmService = IpLoadBalancerServerFarmService;\n    this.IpLoadBalancerTaskService = IpLoadBalancerTaskService;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.OvhApiVrack = OvhApiVrack;\n    this.CloudPoll = CloudPoll;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  _createClass(IpLoadBalancerVrackService, [{\n    key: \"associateVrack\",\n    value: function associateVrack(serviceName, vrackName) {\n      return this.OvhApiVrack.IpLoadBalancing().v6().create({\n        serviceName: vrackName\n      }, {\n        ipLoadbalancing: serviceName\n      }).$promise.then(function (task) {\n        return task.data;\n      }).catch(this.ServiceHelper.errorHandler('iplb_vrack_associate_vrack_error'));\n    }\n  }, {\n    key: \"deAssociateVrack\",\n    value: function deAssociateVrack(serviceName) {\n      var _this = this;\n\n      return this.OvhApiIpLoadBalancing.Vrack().v6().getCreationRules({\n        serviceName: serviceName\n      }, {}).$promise.then(function (response) {\n        return _this.OvhApiVrack.IpLoadBalancing().v6().delete({\n          serviceName: response.vrackName,\n          ipLoadbalancing: serviceName\n        }).$promise;\n      }).then(function (task) {\n        return task.data;\n      }).catch(this.ServiceHelper.errorHandler('iplb_vrack_deassociate_vrack_error'));\n    }\n  }, {\n    key: \"getNetworkCreationRules\",\n    value: function getNetworkCreationRules(serviceName) {\n      var _this2 = this;\n\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        resetCache: false\n      };\n\n      if (config.resetCache) {\n        this.OvhApiIpLoadBalancing.Vrack().v6().resetCache();\n      }\n\n      return this.OvhApiIpLoadBalancing.Vrack().v6().getStatus({\n        serviceName: serviceName\n      }, {}).$promise.then(function (response) {\n        var promises = {\n          vrackStatus: _this2.$q.when(response),\n          vrack: response.state === 'active' ? _this2.OvhApiVrack.v6().get({\n            serviceName: response.vrackName\n          }).$promise : _this2.$q.when({}),\n          iplb: _this2.OvhApiIpLoadBalancing.v6().get({\n            serviceName: serviceName\n          }).$promise,\n          rules: response.state === 'active' ? _this2.OvhApiIpLoadBalancing.Vrack().v6().getCreationRules({\n            serviceName: serviceName\n          }, {}).$promise : _this2.$q.when({})\n        };\n        return _this2.$q.all(promises);\n      }).then(function (response) {\n        return {\n          networkId: response.vrackStatus.vrackName,\n          remainingNetworks: response.rules.remainingNetworks,\n          minNatIps: response.rules.minNatIps,\n          status: response.vrackStatus.state,\n          displayName: response.vrack.name || response.vrackStatus.vrackName,\n          vrackEligibility: response.iplb.vrackEligibility,\n          tasks: response.vrackStatus.task\n        };\n      }).catch(this.ServiceHelper.errorHandler('iplb_vrack_rules_loading_error'));\n    }\n  }, {\n    key: \"pollNetworkTask\",\n    value: function pollNetworkTask(serviceName, tasks) {\n      var _this3 = this;\n\n      var tasksObject = _.map(tasks, function (task) {\n        return {\n          id: task\n        };\n      });\n\n      return this.CloudPoll.pollArray({\n        items: tasksObject,\n        pollFunction: function pollFunction(task) {\n          return _this3.IpLoadBalancerTaskService.getTask(serviceName, task.id).catch(function () {\n            return {\n              status: 'done'\n            };\n          });\n        },\n        stopCondition: function stopCondition(item) {\n          return item.status === 'done' || item.status === 'error';\n        }\n      });\n    }\n  }, {\n    key: \"getPrivateNetworks\",\n    value: function getPrivateNetworks(serviceName) {\n      var _this4 = this;\n\n      return this.OvhApiIpLoadBalancing.Vrack().v6().query({\n        serviceName: serviceName\n      }).$promise.then(function (response) {\n        var promises = _.map(response, function (networkId) {\n          return _this4.getPrivateNetwork(serviceName, networkId);\n        });\n\n        return _this4.$q.all(promises);\n      }).then(function (response) {\n        _.forEach(response, function (privateNetwork) {\n          _this4.IpLoadBalancerServerFarmService.getServerFarms(serviceName, privateNetwork.vrackNetworkId).then(function (farms) {\n            _.set(privateNetwork, 'farmId', farms);\n          });\n\n          _.set(privateNetwork, 'farmId', []);\n        });\n\n        return response;\n      }).catch(this.ServiceHelper.errorHandler('iplb_vrack_private_networks_loading_error'));\n    }\n  }, {\n    key: \"getPrivateNetworkFarms\",\n    value: function getPrivateNetworkFarms(serviceName, networkId) {\n      var _this5 = this;\n\n      return this.getPrivateNetwork(serviceName, networkId).then(function (privateNetwork) {\n        return _this5.IpLoadBalancerServerFarmService.getServerFarms(serviceName, privateNetwork.vrackNetworkId);\n      });\n    }\n  }, {\n    key: \"addPrivateNetwork\",\n    value: function addPrivateNetwork(serviceName, network) {\n      var _this6 = this;\n\n      return this.OvhApiIpLoadBalancing.Vrack().v6().post({\n        serviceName: serviceName\n      }, _.omit(network, ['vrackNetworkId', 'farmId'])).$promise.then(function (response) {\n        return _this6.OvhApiIpLoadBalancing.Vrack().v6().updateFarmId({\n          serviceName: serviceName,\n          vrackNetworkId: response.vrackNetworkId\n        }, {\n          farmId: network.farmId\n        }).$promise;\n      }).then(function (response) {\n        _this6.OvhApiIpLoadBalancing.Farm().v6().resetQueryCache();\n\n        _this6.OvhApiIpLoadBalancing.Farm().Tcp().v6().resetCache();\n\n        _this6.OvhApiIpLoadBalancing.Farm().Udp().v6().resetCache();\n\n        _this6.OvhApiIpLoadBalancing.Farm().Http().v6().resetCache();\n\n        return response;\n      }).then(this.ServiceHelper.successHandler('iplb_vrack_private_network_add_success')).catch(this.ServiceHelper.errorHandler('iplb_vrack_private_network_add_error'));\n    }\n  }, {\n    key: \"editPrivateNetwork\",\n    value: function editPrivateNetwork(serviceName, network) {\n      var _this7 = this;\n\n      return this.$q.all([this.OvhApiIpLoadBalancing.Vrack().v6().put({\n        serviceName: serviceName,\n        vrackNetworkId: network.vrackNetworkId\n      }, _.omit(network, ['vrackNetworkId', 'farmId'])).$promise, this.OvhApiIpLoadBalancing.Vrack().v6().updateFarmId({\n        serviceName: serviceName,\n        vrackNetworkId: network.vrackNetworkId\n      }, {\n        farmId: network.farmId\n      }).$promise]).then(function (response) {\n        _this7.OvhApiIpLoadBalancing.Farm().v6().resetQueryCache();\n\n        _this7.OvhApiIpLoadBalancing.Farm().Tcp().v6().resetCache();\n\n        _this7.OvhApiIpLoadBalancing.Farm().Udp().v6().resetCache();\n\n        _this7.OvhApiIpLoadBalancing.Farm().Http().v6().resetCache();\n\n        return response;\n      }).then(this.ServiceHelper.successHandler('iplb_vrack_private_network_edit_success')).catch(this.ServiceHelper.errorHandler('iplb_vrack_private_network_edit_error'));\n    }\n  }, {\n    key: \"deletePrivateNetwork\",\n    value: function deletePrivateNetwork(serviceName, networkId) {\n      var _this8 = this;\n\n      return this.OvhApiIpLoadBalancing.Vrack().v6().updateFarmId({\n        serviceName: serviceName,\n        vrackNetworkId: networkId\n      }, {\n        farmId: []\n      }).$promise.then(function () {\n        return _this8.OvhApiIpLoadBalancing.Vrack().v6().delete({\n          serviceName: serviceName,\n          vrackNetworkId: networkId\n        }).$promise;\n      }).then(this.ServiceHelper.successHandler('iplb_vrack_private_network_delete_success')).catch(this.ServiceHelper.errorHandler('iplb_vrack_private_network_delete_error'));\n    }\n  }, {\n    key: \"getPrivateNetwork\",\n    value: function getPrivateNetwork(serviceName, networkId) {\n      return this.OvhApiIpLoadBalancing.Vrack().v6().get({\n        serviceName: serviceName,\n        vrackNetworkId: networkId\n      }).$promise.then(function (response) {\n        response.displayName = response.displayName || response.vrackNetworkId;\n        return response;\n      }).catch(this.ServiceHelper.errorHandler('iplb_vrack_private_network_loading_error'));\n    }\n  }]);\n\n  return IpLoadBalancerVrackService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerVrackService', IpLoadBalancerVrackService);",null]}