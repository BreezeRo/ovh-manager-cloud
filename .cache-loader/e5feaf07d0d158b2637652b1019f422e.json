{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/upgradequotalink/logs-upgrade-quota-link.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/upgradequotalink/logs-upgrade-quota-link.controller.js","mtime":1539717142139},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar logsUpgradeQuotaLinkCtrl =\n/*#__PURE__*/\nfunction () {\n  logsUpgradeQuotaLinkCtrl.$inject = [\"$state\", \"$stateParams\", \"$translate\", \"ControllerHelper\", \"ControllerModalHelper\", \"LogsConstants\", \"LogsOfferService\", \"LogsHelperService\"];\n\n  function logsUpgradeQuotaLinkCtrl($state, $stateParams, $translate, ControllerHelper, ControllerModalHelper, LogsConstants, LogsOfferService, LogsHelperService) {\n    _classCallCheck(this, logsUpgradeQuotaLinkCtrl);\n\n    this.$state = $state;\n    this.$translate = $translate;\n    this.serviceName = $stateParams.serviceName;\n    this.ControllerHelper = ControllerHelper;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsOfferService = LogsOfferService;\n    this.LogsHelperService = LogsHelperService;\n    this.initLoaders();\n  }\n\n  _createClass(logsUpgradeQuotaLinkCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.text = this.text || this.$translate.instant('options_upgradequotalink_increase_quota');\n      this.selectedOffer.load();\n    }\n    /**\n     * loads the current offer information\n     *\n     * @memberof logsUpgradeQuotaLinkCtrl\n     */\n\n  }, {\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.selectedOffer = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOfferService.getOffer(_this.serviceName);\n        }\n      });\n    }\n    /**\n     * Checks if the user has a basic offer\n     *\n     * @returns true if the user is subscribed to a basic offer\n     * @memberof logsUpgradeQuotaLinkCtrl\n     */\n\n  }, {\n    key: \"isBasicOffer\",\n    value: function isBasicOffer(offerObj) {\n      return offerObj.reference === this.LogsConstants.basicOffer;\n    }\n    /**\n     * Checks if the user has a basic offer and if he/she does,\n     * pops up a modal dialog asking him/her to upgrade if\n     * he/she wants to purchase more options\n     *\n     * @memberof logsUpgradeQuotaLinkCtrl\n     */\n\n  }, {\n    key: \"purchaseOptions\",\n    value: function purchaseOptions() {\n      if (this.isBasicOffer(this.selectedOffer.data)) {\n        return this.LogsHelperService.showOfferUpgradeModal(this.serviceName);\n      }\n\n      return this.$state.go('dbaas.logs.detail.options', {\n        serviceName: this.serviceName\n      });\n    }\n  }]);\n\n  return logsUpgradeQuotaLinkCtrl;\n}();\n\nangular.module('managerApp').controller('logsUpgradeQuotaLinkCtrl', logsUpgradeQuotaLinkCtrl);",null]}