{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/products/products.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/products/products.service.js","mtime":1539717142413},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ProductsService =\n/*#__PURE__*/\nfunction () {\n  ProductsService.$inject = [\"$q\", \"OvhApiProducts\", \"OvhApiLicense\", \"OvhApiIp\"];\n\n  function ProductsService($q, OvhApiProducts, OvhApiLicense, OvhApiIp) {\n    _classCallCheck(this, ProductsService);\n\n    this.$q = $q;\n    this.OvhApiProducts = OvhApiProducts;\n    this.OvhApiLicense = OvhApiLicense;\n    this.OvhApiIp = OvhApiIp;\n    this.products = {};\n    this.productsDeferred = null;\n  }\n\n  _createClass(ProductsService, [{\n    key: \"getProducts\",\n    value: function getProducts(force) {\n      var _this = this;\n\n      if (!_.isEmpty(this.products)) {\n        return this.$q.when(this.products);\n      }\n\n      if (!_.isNull(this.productsDeferred) && !force) {\n        return this.productsDeferred.promise;\n      }\n\n      this.productsDeferred = this.$q.defer();\n      this.$q.all({\n        cloudProducts: this.OvhApiProducts.Aapi().get({\n          universe: 'cloud'\n        }).$promise,\n        licenses: this.OvhApiLicense.Aapi().get({\n          count: 1,\n          offset: 0\n        }).$promise,\n        ips: this.OvhApiIp.v6().query().$promise\n      }).then(function (products) {\n        _this.products = _this.constructor.mergeLicenseIntoProducts(products.licenses, products.cloudProducts);\n        _this.products = _this.constructor.mergeIpsIntoProducts(products.ips, _this.products);\n\n        _this.productsDeferred.resolve(_this.products);\n      });\n      return this.productsDeferred.promise;\n    }\n  }, {\n    key: \"getProductsOfType\",\n    value: function getProductsOfType(type) {\n      return _.result(_.find(this.products, function (service) {\n        return service.name === type;\n      }), 'services');\n    }\n  }, {\n    key: \"getDisplayName\",\n    value: function getDisplayName(type, serviceName) {\n      var services = this.getProductsOfType(type);\n      return _.result(_.find(services, function (service) {\n        return service.serviceName === serviceName;\n      }), 'displayName');\n    }\n  }], [{\n    key: \"mergeIpsIntoProducts\",\n    value: function mergeIpsIntoProducts(ips, allProducts) {\n      var allProductsMerged = _.clone(allProducts);\n\n      allProductsMerged.results.push({\n        name: 'IP',\n        services: _.map(ips, function (ip) {\n          return {\n            displayName: ip,\n            serviceName: ip\n          };\n        })\n      });\n      return allProductsMerged;\n    }\n  }, {\n    key: \"mergeLicenseIntoProducts\",\n    value: function mergeLicenseIntoProducts(licenses, allProducts) {\n      var _allProductsMerged$er;\n\n      var allProductsMerged = _.clone(allProducts);\n\n      (_allProductsMerged$er = allProductsMerged.errors).push.apply(_allProductsMerged$er, _toConsumableArray(licenses.list.messages));\n\n      allProductsMerged.results.push({\n        name: 'LICENSE',\n        services: _.map(licenses.list.results, function (license) {\n          return _.extend(license, {\n            displayName: license.id,\n            serviceName: license.id\n          });\n        })\n      });\n      return allProductsMerged;\n    }\n  }]);\n\n  return ProductsService;\n}();\n\nangular.module('managerApp').service('ProductsService', ProductsService);",null]}