{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/alerts/home/alerts-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/alerts/home/alerts-home.controller.js","mtime":1539717142146},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsStreamsAlertsHomeCtrl {\n  constructor($state, $stateParams, $translate, CloudMessage, ControllerHelper, LogsStreamsService,\n    LogsConstants, LogsStreamsAlertsService) {\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsStreamsService = LogsStreamsService;\n    this.LogsConstants = LogsConstants;\n    this.LogsStreamsAlertsService = LogsStreamsAlertsService;\n\n    this.serviceName = this.$stateParams.serviceName;\n    this.streamId = this.$stateParams.streamId;\n    this.initLoaders();\n  }\n\n  $onInit() {\n    this.runLoaders();\n  }\n\n  back() {\n    this.$state.go('dbaas.logs.detail.streams');\n  }\n\n  /**\n   * Runs all the loaders to fetch data from APIs\n   *\n   * @memberof LogsStreamsAlertsHomeCtrl\n   */\n  runLoaders() {\n    this.alertIds.load();\n    this.stream.load();\n  }\n\n  /**\n   * initializes the alertsIDs and current stream\n   *\n   * @memberof LogsStreamsAlertsHomeCtrl\n   */\n  initLoaders() {\n    this.alertIds = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsStreamsAlertsService\n        .getAlertIds(this.serviceName, this.streamId),\n    });\n    this.stream = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsStreamsService.getStream(this.serviceName, this.streamId),\n    });\n  }\n\n  /**\n     * Loads a number of alerts specified by the pageSize, starting from the specified offset\n     *\n     * @param {any} offset\n     * @param {any} pageSize\n     * @returns promise which will be resolve to the loaded alerts data\n     * @memberof LogsStreamsAlertsHomeCtrl\n     */\n  loadAlerts({ offset, pageSize }) {\n    this.alerts = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsStreamsAlertsService.getAlerts(\n        this.serviceName,\n        this.streamId,\n        this.alertIds.data.slice(offset - 1, offset + pageSize - 1),\n      ),\n    });\n\n    return this.alerts.load()\n      .then(alerts => ({\n        data: alerts,\n        meta: {\n          totalCount: this.alertIds.data.length,\n        },\n      }));\n  }\n\n  /**\n     * Shows the confirmation modal box for alert deletion confirmation\n     * and deletes the alert if the user confirms the deletion\n     *\n     * @param {any} alert - the alert object\n     * @memberof LogsStreamsAlertsHomeCtrl\n     */\n  showDeleteConfirm(alert) {\n    this.CloudMessage.flushChildMessage();\n    return this.ControllerHelper.modal.showDeleteModal({\n      titleText: this.$translate.instant('streams_alerts_delete'),\n      textHtml: this.$translate.instant('streams_alerts_delete_message', { alert: alert.title }),\n    }).then(() => this.remove(alert));\n  }\n\n  /**\n   * Deletes the alert\n   *\n   * @param {any} alert - the alert object\n   * @memberof LogsStreamsAlertsHomeCtrl\n   */\n  remove(alert) {\n    this.delete = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsStreamsAlertsService\n        .deleteAlert(this.serviceName, this.streamId, alert)\n        .then(() => this.runLoaders()),\n    });\n    this.alertIds.loading = true;\n    this.delete.load();\n  }\n\n  /**\n   * Redirects to the new alert add page\n   *\n   * @param {any} type - the type of the alert to add\n   * @memberof LogsStreamsAlertsHomeCtrl\n   */\n  addAlert(type) {\n    this.$state.go('dbaas.logs.detail.streams.alerts.add', {\n      serviceName: this.serviceName,\n      streamId: this.streamId,\n      type: this.LogsConstants.alertType[type],\n    });\n  }\n\n  /**\n   * Redirects to the alert edit page\n   *\n   * @param {any} alert\n   * @memberof LogsStreamsAlertsHomeCtrl\n   */\n  editAlert(alert) {\n    this.$state.go('dbaas.logs.detail.streams.alerts.edit', {\n      serviceName: this.serviceName,\n      streamId: this.streamId,\n      alertId: alert.alertId,\n    });\n  }\n}\n\nangular.module('managerApp').controller('LogsStreamsAlertsHomeCtrl', LogsStreamsAlertsHomeCtrl);\n"]}