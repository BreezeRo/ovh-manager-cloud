{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/snapshot/cloud-project-compute-snapshot.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/snapshot/cloud-project-compute-snapshot.js","mtime":1539717142033},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["\n\nangular.module('managerApp')\n  .config(($stateProvider) => {\n    $stateProvider\n      .state('iaas.pci-project.compute.snapshot', {\n        url: '/snapshot',\n        sticky: true,\n        views: {\n          cloudProjectCompute: {\n            templateUrl: 'app/cloud/project/compute/snapshot/cloud-project-compute-snapshot.html',\n            controller: 'CloudProjectComputeSnapshotCtrl',\n            controllerAs: 'CloudProjectComputeSnapshotCtrl',\n          },\n        },\n        translations: ['.'], \nresolve: {\ntranslations($q, $translate, asyncLoader) { const imports = [ import(`/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/snapshot/translations/Messages_${$translate.use()}.xml`)\n                    .catch(() => import(`/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/snapshot/translations/Messages_${$translate.fallbackLanguage()}.xml`))\n                    .then(i => i.default),\n                ]; imports.forEach(p => asyncLoader.addTranslations(p)); return $q.all(imports).then(() => $translate.refresh()); }},\n      });\n  });\n"]}