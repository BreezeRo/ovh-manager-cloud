{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/cloud-project-billing.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/cloud-project-billing.service.js","mtime":1539717141953},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').service('CloudProjectBillingService', [\"$q\", \"OvhApiMe\", function ($q, OvhApiMe) {\n  var self = this;\n\n  function roundNumber(number, decimals) {\n    return Number(\"\".concat(Math.round(\"\".concat(number, \"e\").concat(decimals)), \"e-\").concat(decimals));\n  }\n\n  function initHourlyInstanceList() {\n    if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n      return;\n    }\n\n    var hourlyInstances = _.flatten(_.map(self.data.hourlyBilling.hourlyUsage.instance, function (instance) {\n      return _.map(instance.details, function (detail) {\n        var newDetail = _.clone(detail);\n\n        newDetail.totalPrice = roundNumber(newDetail.totalPrice, 2);\n        return _.extend(newDetail, {\n          reference: instance.reference,\n          region: instance.region\n        });\n      });\n    }));\n\n    self.data.hourlyInstances = hourlyInstances;\n    self.data.totals.hourly.instance = _.reduce(self.data.hourlyBilling.hourlyUsage.instance, function (sum, instance) {\n      return sum + roundNumber(instance.totalPrice, 2);\n    }, 0);\n    self.data.totals.hourly.instance = roundNumber(self.data.totals.hourly.instance, 2);\n  }\n\n  function initMonthlyInstanceList() {\n    if (!self.data.monthlyBilling || !self.data.hourlyBilling.monthlyUsage) {\n      return;\n    }\n\n    var monthlyInstances = _.flatten(_.map(self.data.monthlyBilling.monthlyUsage.instance, function (instance) {\n      return _.map(instance.details, function (detail) {\n        var newDetail = _.clone(detail);\n\n        newDetail.totalPrice = roundNumber(newDetail.totalPrice, 2);\n        return _.extend(newDetail, {\n          reference: instance.reference,\n          region: instance.region\n        });\n      });\n    }));\n\n    self.data.monthlyInstances = monthlyInstances;\n    self.data.totals.monthly.instance = _.reduce(self.data.monthlyBilling.monthlyUsage.instance, function (sum, instance) {\n      return sum + roundNumber(instance.totalPrice, 2);\n    }, 0);\n    self.data.totals.monthly.instance = roundNumber(self.data.totals.monthly.instance, 2);\n  }\n\n  function initObjectStorageList() {\n    if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n      return;\n    }\n\n    _.each(self.data.hourlyBilling.hourlyUsage.objectStorage, function (objectStorage) {\n      _.set(objectStorage, 'totalPrice', roundNumber(objectStorage.totalPrice, 2));\n    });\n\n    self.data.objectStorages = _.reject(self.data.hourlyBilling.hourlyUsage.storage, {\n      type: 'pca'\n    });\n    self.data.totals.hourly.objectStorage = _.reduce(self.data.objectStorages, function (sum, storage) {\n      return sum + roundNumber(storage.totalPrice, 2);\n    }, 0);\n    self.data.totals.hourly.objectStorage = roundNumber(self.data.totals.hourly.objectStorage, 2);\n  }\n\n  function initArchiveStorageList() {\n    if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n      return;\n    }\n\n    _.each(self.data.hourlyBilling.hourlyUsage.archiveStorage, function (archiveStorage) {\n      _.set(archiveStorage, 'totalPrice', roundNumber(archiveStorage.totalPrice, 2));\n    });\n\n    self.data.archiveStorages = _.filter(self.data.hourlyBilling.hourlyUsage.storage, {\n      type: 'pca'\n    });\n    self.data.totals.hourly.archiveStorage = _.reduce(self.data.archiveStorages, function (sum, archiveStorage) {\n      return sum + roundNumber(archiveStorage.totalPrice, 2);\n    }, 0);\n    self.data.totals.hourly.archiveStorage = roundNumber(self.data.totals.hourly.archiveStorage, 2);\n  }\n\n  function initSnapshotList() {\n    if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n      return;\n    }\n\n    _.each(self.data.hourlyBilling.hourlyUsage.snapshot, function (snapshot) {\n      _.set(snapshot, 'totalPrice', roundNumber(snapshot.totalPrice, 2));\n    });\n\n    self.data.snapshots = self.data.hourlyBilling.hourlyUsage.snapshot;\n    self.data.totals.hourly.snapshot = _.reduce(self.data.hourlyBilling.hourlyUsage.snapshot, function (sum, snapshot) {\n      return sum + roundNumber(snapshot.totalPrice, 2);\n    }, 0);\n    self.data.totals.hourly.snapshot = roundNumber(self.data.totals.hourly.snapshot, 2);\n  }\n\n  function initVolumeList() {\n    if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n      return;\n    }\n\n    var volumes = _.flatten(_.map(self.data.hourlyBilling.hourlyUsage.volume, function (volume) {\n      return _.map(volume.details, function (detail) {\n        var newDetail = _.clone(detail);\n\n        newDetail.totalPrice = roundNumber(newDetail.totalPrice, 2);\n        return _.extend(newDetail, {\n          type: volume.type,\n          region: volume.region\n        });\n      });\n    }));\n\n    self.data.volumes = volumes;\n    self.data.totals.hourly.volume = _.reduce(self.data.hourlyBilling.hourlyUsage.volume, function (sum, volume) {\n      return sum + roundNumber(volume.totalPrice, 2);\n    }, 0);\n    self.data.totals.hourly.volume = roundNumber(self.data.totals.hourly.volume, 2);\n  }\n\n  self.getConsumptionDetails = function (hourlyBillingInfo, monthlyBillingInfo) {\n    return self.getDataInitialized().then(function () {\n      self.data.hourlyBilling = hourlyBillingInfo;\n      self.data.monthlyBilling = monthlyBillingInfo;\n      return $q.allSettled([initHourlyInstanceList(), initMonthlyInstanceList(), initObjectStorageList(), initArchiveStorageList(), initSnapshotList(), initVolumeList()]).then(function () {\n        self.data.totals.monthly.total = roundNumber(self.data.totals.monthly.instance, 2);\n        self.data.totals.hourly.total = roundNumber(self.data.totals.hourly.instance + self.data.totals.hourly.snapshot + self.data.totals.hourly.objectStorage + self.data.totals.hourly.archiveStorage + self.data.totals.hourly.volume, 2);\n        self.data.totals.total = roundNumber(self.data.totals.monthly.total + self.data.totals.hourly.total, 2);\n        return self.data;\n      });\n    });\n  };\n\n  self.getDataInitialized = function () {\n    self.data = {\n      hourlyInstances: [],\n      monthlyInstances: [],\n      objectStorages: [],\n      archiveStorages: [],\n      snapshots: [],\n      volumes: [],\n      billing: {},\n      totals: {\n        total: 0,\n        currencySymbol: '',\n        hourly: {\n          total: 0,\n          instance: 0,\n          objectStorage: 0,\n          archiveStorage: 0,\n          snapshot: 0,\n          volume: 0\n        },\n        monthly: {\n          total: 0,\n          instance: 0\n        }\n      }\n    };\n    return OvhApiMe.v6().get().$promise.then(function (me) {\n      self.data.totals.currencySymbol = me.currency.symbol;\n      return self.data;\n    });\n  };\n}]);",null]}