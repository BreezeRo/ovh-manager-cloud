{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/diagram/cloud-project-compute-infrastructure-diagram.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/diagram/cloud-project-compute-infrastructure-diagram.controller.js","mtime":1539717141975},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var CloudProjectComputeInfrastructureDiagramCtrl =\n  /*#__PURE__*/\n  function () {\n    CloudProjectComputeInfrastructureDiagramCtrl.$inject = [\"$rootScope\", \"$scope\", \"$document\", \"$filter\", \"$q\", \"$state\", \"$stateParams\", \"$timeout\", \"$transitions\", \"$translate\", \"$uibModal\", \"$window\", \"CloudMessage\", \"CloudNavigation\", \"CloudProjectComputeInfrastructureOrchestrator\", \"CloudProjectComputeInfrastructureService\", \"CloudProjectComputeVolumesOrchestrator\", \"CloudProjectOrchestrator\", \"CloudUserPref\", \"OvhApiCloud\", \"OvhApiCloudProject\", \"OvhApiCloudProjectFlavor\", \"OvhApiCloudProjectImage\", \"OvhApiCloudProjectNetworkPrivate\", \"OvhApiCloudProjectRegion\", \"OvhApiCloudProjectSnapshot\", \"OvhApiCloudProjectSshKey\", \"OvhApiCloudProjectVolumeSnapshot\", \"OvhApiIp\", \"OvhApiMe\", \"jsPlumbService\", \"Poller\", \"RegionService\", \"CLOUD_UNIT_CONVERSION\", \"CLOUD_MONITORING\", \"REDIRECT_URLS\", \"TARGET\", \"URLS\"];\n\n    function CloudProjectComputeInfrastructureDiagramCtrl($rootScope, $scope, $document, $filter, $q, $state, $stateParams, $timeout, $transitions, $translate, $uibModal, $window, CloudMessage, CloudNavigation, CloudProjectComputeInfrastructureOrchestrator, CloudProjectComputeInfrastructureService, CloudProjectComputeVolumesOrchestrator, CloudProjectOrchestrator, CloudUserPref, OvhApiCloud, OvhApiCloudProject, OvhApiCloudProjectFlavor, OvhApiCloudProjectImage, OvhApiCloudProjectNetworkPrivate, OvhApiCloudProjectRegion, OvhApiCloudProjectSnapshot, OvhApiCloudProjectSshKey, OvhApiCloudProjectVolumeSnapshot, OvhApiIp, OvhApiMe, jsPlumbService, Poller, RegionService, CLOUD_UNIT_CONVERSION, CLOUD_MONITORING, REDIRECT_URLS, TARGET, URLS) {\n      _classCallCheck(this, CloudProjectComputeInfrastructureDiagramCtrl);\n\n      this.$rootScope = $rootScope;\n      this.$scope = $scope;\n      this.$document = $document;\n      this.$filter = $filter;\n      this.$q = $q;\n      this.$state = $state;\n      this.$stateParams = $stateParams;\n      this.$timeout = $timeout;\n      this.$transitions = $transitions;\n      this.$translate = $translate;\n      this.$uibModal = $uibModal;\n      this.$window = $window;\n      this.CloudMessage = CloudMessage;\n      this.CloudNavigation = CloudNavigation;\n      this.CloudProjectComputeInfrastructureOrchestrator = CloudProjectComputeInfrastructureOrchestrator; // eslint-disable-line\n\n      this.InfrastructureService = CloudProjectComputeInfrastructureService;\n      this.CloudProjectComputeVolumesOrchestrator = CloudProjectComputeVolumesOrchestrator;\n      this.CloudProjectOrchestrator = CloudProjectOrchestrator;\n      this.CloudUserPref = CloudUserPref;\n      this.Cloud = OvhApiCloud;\n      this.OvhApiCloudProject = OvhApiCloudProject;\n      this.OvhApiCloudProjectFlavor = OvhApiCloudProjectFlavor;\n      this.OvhApiCloudProjectImage = OvhApiCloudProjectImage;\n      this.OvhApiCloudProjectNetworkPrivate = OvhApiCloudProjectNetworkPrivate;\n      this.OvhApiCloudProjectRegion = OvhApiCloudProjectRegion;\n      this.OvhApiCloudProjectSnapshot = OvhApiCloudProjectSnapshot;\n      this.OvhApiCloudProjectSshKey = OvhApiCloudProjectSshKey;\n      this.OvhApiCloudProjectVolumeSnapshot = OvhApiCloudProjectVolumeSnapshot;\n      this.OvhApiIp = OvhApiIp;\n      this.OvhApiMe = OvhApiMe;\n      this.jsPlumbService = jsPlumbService;\n      this.Poller = Poller;\n      this.RegionService = RegionService;\n      this.conversion = CLOUD_UNIT_CONVERSION;\n      this.CLOUD_MONITORING = CLOUD_MONITORING;\n      this.REDIRECT_URLS = REDIRECT_URLS;\n      this.TARGET = TARGET;\n      this.URLS = URLS;\n    }\n\n    _createClass(CloudProjectComputeInfrastructureDiagramCtrl, [{\n      key: \"$onInit\",\n      value: function $onInit() {\n        var _this = this;\n\n        this.serviceName = null;\n        this.sortInterval = null;\n        this.CloudNavigation.init({\n          state: 'iaas.pci-project.compute.infrastructure.diagram',\n          stateParams: {\n            serviceName: this.serviceName\n          }\n        });\n        this.collections = {\n          privateNetworks: []\n        };\n        this.errors = {\n          init: false\n        };\n        this.helpDisplay = {\n          openUnlinkVolume: false\n        };\n        this.openstackClientOpen = true;\n        this.importedIpFailoverPending = []; // List of pending import ipFO\n\n        this.infra = null;\n        this.jsplumbInstance = null;\n        this.loaders = {\n          init: true,\n          vRack: false,\n          vlans: false,\n          ips: false,\n          volumes: false,\n          jsPlumb: false,\n          linkActionConfirm: false,\n          volumeActionConfirm: false,\n          privateNetworks: {\n            query: false\n          }\n        };\n        this.model = {\n          currentLinkEdit: null\n        };\n        this.vlans = {\n          vRackStatus: null\n        };\n        this.regions = null;\n        this.sort = {\n          ipAutoSort: true,\n          ipNaturalSort: true\n        };\n        this.states = {\n          sorting: false\n        };\n        this.user = null;\n        this.volumes = null;\n        this.InfrastructureService.setPreferredView('diagram'); // Hide highlighted-element on change state\n\n        var hook = this.$transitions.onStart({\n          from: 'iaas.pci-project.compute.infrastructure.diagram'\n        }, function () {\n          _this.$rootScope.$broadcast('highlighed-element.hide');\n        });\n        this.$scope.$on('$destroy', hook);\n        this.$scope.$on('compute.infrastructure.vm.status-update', function (evt, newStatus, oldStatus, vm) {\n          if (oldStatus === 'BUILD' && newStatus === 'ACTIVE') {\n            _this.displayVmAuthInfo(vm);\n          }\n        });\n        this.$scope.$on('infra.refresh.links', function () {\n          _this.refreshLinks();\n        });\n        this.$scope.$on('infra.refresh.links.delayed', function () {\n          // delay the execution, on VM deletion, VMS need to be moved before we refresh or links\n          // aren't place properly\n          _this.$timeout(function () {\n            _this.refreshLinks();\n          }, 1000);\n        });\n        this.initIpEdit();\n        this.initVolumeEdit(); // ------- jsPLUMB EVENTS -------\n\n        this.initJsPlumb(); // what to do when instance is created\n\n        this.$scope.$on('jsplumb.instance.created', function (evt, instance) {\n          _this.jsplumbInstance = instance;\n          window.JSPLUMBINSTANCE = _this.jsplumbInstance;\n        }); // what to do when a connection is made\n\n        this.$scope.$on('jsplumb.instance.connection', function (evt, connection, source, target, instance, originalEvent) {\n          var isVmSource = _this.constructor.sourceIsVm(connection.source, connection.target);\n\n          var connectedIpId = isVmSource ? connection.targetId : connection.sourceId;\n          var connectedVmId = isVmSource ? connection.sourceId : connection.targetId;\n\n          var connectedIp = _this.infra.internet.getIpById(connectedIpId);\n\n          var connectedVm = _this.infra.vrack.getVmById(connectedVmId);\n\n          if (!connectedIp || !connectedVm) {\n            return;\n          } // Set connection style\n\n\n          connection.setPaintStyle({\n            strokeStyle: _this.constructor.getLinkColor(connectedIp.type),\n            lineWidth: 4\n          });\n          connection.addClass(\"_jsPlumb_connector_ip_\".concat(connectedIp.type || ''));\n          connection.addClass('fade-transition'); // Don't up the size when hover ip public\n\n          if (connectedIp.type === 'public') {\n            connection.setHoverPaintStyle({\n              lineWidth: 4\n            });\n          } // It's a connection drawn by the user (with its mouse)\n\n\n          if (originalEvent) {\n            var vmContinent = _this.getVmContinent(connectedVm);\n\n            var continentCode = _.get(connectedIp, 'continentCode');\n\n            var isValidLink = vmContinent && vmContinent === continentCode;\n\n            if (isValidLink && (!_this.model.currentLinkEdit || _this.model.currentLinkEdit.action === 'attach')) {\n              // set dotted line\n              connection.setPaintStyle({\n                strokeStyle: _this.constructor.getLinkColor(connectedIp.type),\n                lineWidth: 8,\n                dashstyle: '2 1'\n              });\n\n              if (connectedIp.type === 'failover') {\n                if (connectedIp.routedTo.length > 0) {\n                  // It's a \"move\" : show a confirmation\n                  var connectedVmCurrent = _this.infra.vrack.getVmById(connectedIp.routedTo[0]);\n\n                  _.set(_this.model, 'currentLinkEdit', {\n                    connection: connection,\n                    connectedIp: connectedIp,\n                    connectedVm: connectedVm,\n                    connectedVmCurrent: connectedVmCurrent,\n                    action: 'attach'\n                  });\n\n                  _this.$rootScope.$broadcast('highlighed-element.show', \"compute,\".concat(connectedIp.id, \",\").concat(connectedVmId));\n\n                  _this.model.currentLinkEdit.connection.addClass('highlighed-element highlighed-element-active');\n                } else {\n                  _this.ipEdit.attach.confirm(connectedVm, connectedIp).catch(function () {\n                    _this.jsplumbInstance.disconnectEndpoints(connection);\n                  });\n                }\n              }\n            } else {\n              _this.jsplumbInstance.disconnectEndpoints(connection);\n            }\n          }\n        }); // ------- END jsPLUMB EVENTS -------\n        // ------- JQUERY UI SORTABLE -------\n\n        this.initSortable(); // what to do when sort start\n\n        this.$scope.$on('ui.sortable.start', function () {\n          _this.states.sorting = true;\n\n          _this.initInterval();\n        }); // what to do when sort stop\n\n        this.$scope.$on('ui.sortable.stop', function () {\n          _this.states.sorting = false;\n\n          if (_this.sortInterval) {\n            clearInterval(_this.sortInterval); // redraw links for the last time and re-validate offset of non connected items\n\n            _this.redrawLinks(true);\n          }\n        }); // what to do when position has changed\n\n        this.$scope.$on('ui.sortable.update', function (ngEvent, jqEvent, ui) {\n          var $sortedElem = $(ui.item);\n\n          if ($sortedElem.hasClass('public-cloud-vm')) {\n            // ------ TODO: warning: ASYNC call!!!!!!\n            _this.CloudProjectComputeInfrastructureOrchestrator.saveToUserPref();\n          } else if ($sortedElem.hasClass('ip')) {\n            // ------ TODO: warning: ASYNC call!!!!!!\n            _this.CloudProjectComputeInfrastructureOrchestrator.saveToUserPref();\n          }\n        }); // Kill polling\n\n        this.$scope.$on('$destroy', function () {\n          _this.CloudProjectComputeInfrastructureOrchestrator.killPollVms();\n\n          _this.CloudProjectComputeInfrastructureOrchestrator.killPollIps();\n\n          _this.CloudProjectComputeVolumesOrchestrator.killPollVolumes();\n\n          _this.Poller.kill({\n            namespace: 'cloud.infra.ips.genericMoveFloatingIp'\n          });\n        }); // ------- JQUERY UI DRAGGABLE -------\n\n        this.initDraggable();\n        this.$scope.$on('draggable.start', function (event, obj) {\n          _this.dragDropHelper.currentDraggedVolume = obj.draggable;\n          _this.dragDropHelper.draggingIsDoing = true;\n          $('.tooltip').hide(); // force hide tooltip to avoid display bug when dragging\n        });\n        this.$scope.$on('draggable.stop', function () {\n          if (!_this.dragDropHelper.currentDroppableVmId) {\n            _this.dragDropHelper.currentDraggedVolume = null;\n\n            _this.refreshLinks();\n          }\n\n          _this.dragDropHelper.draggingIsDoing = false;\n        }); // ------- JQUERY UI DROPPABLE -------\n\n        this.initDroppable();\n        this.$scope.$on('droppable.over', function (event, obj) {\n          _this.dragDropHelper.currentDroppableVmId = obj.droppable.droppableId;\n\n          _this.refreshLinks();\n        });\n        this.$scope.$on('droppable.out', function () {\n          _this.dragDropHelper.currentDroppableVmId = null;\n\n          _this.refreshLinks();\n        });\n        this.$scope.$on('droppable.drop', function (event, obj) {\n          var srcVmId = _.get(_this.dragDropHelper, 'currentDraggedVolume.draggableInfo.srcVmId');\n\n          var targetVmId = obj.droppable.droppableId;\n\n          if (srcVmId === 'unlinked') {\n            // No Confirmation\n            // Is not Volume factory !\n            _this.volumeEdit.volume = _this.dragDropHelper.currentDraggedVolume.draggableInfo.volume;\n            _this.volumeEdit.targetVm = _this.infra.vrack.getVmById(targetVmId);\n\n            _this.volumeEdit.move.confirm();\n          } else {\n            _this.volumeEdit.move.launchConfirm( // Confirmation\n            // Is not Volume factory !\n            _this.dragDropHelper.currentDraggedVolume.draggableInfo.volume, _this.infra.vrack.getVmById(srcVmId), targetVmId !== 'unlinked' ? _this.infra.vrack.getVmById(targetVmId) : null);\n          }\n        });\n        return this.init();\n      }\n    }, {\n      key: \"init\",\n      value: function init() {\n        var _this2 = this;\n\n        this.loaders.init = true;\n        this.initDragDropHelper(); // Get type of project\n\n        this.getProjectContext();\n        this.getUser(); // @todo: reset cache\n        // Pre-load required data (all this data will be cached)\n\n        return this.$q.all([this.OvhApiCloudProjectRegion.v6().query({\n          serviceName: this.serviceName\n        }).$promise, this.OvhApiCloudProjectImage.v6().query({\n          serviceName: this.serviceName\n        }).$promise, this.OvhApiCloudProjectSnapshot.v6().query({\n          serviceName: this.serviceName\n        }).$promise, this.OvhApiCloudProjectFlavor.v6().query({\n          serviceName: this.serviceName\n        }).$promise, this.OvhApiCloudProjectSshKey.v6().query({\n          serviceName: this.serviceName\n        }).$promise, this.OvhApiCloudProjectVolumeSnapshot.v6().query({\n          serviceName: this.serviceName\n        }).$promise, this.initRegions(this.serviceName)]).then(function () {\n          return _this2.initInfra();\n        }).catch(function () {\n          _this2.errors.init = true;\n        }).finally(function () {\n          _this2.loaders.init = false;\n        });\n      }\n    }, {\n      key: \"initDragDropHelper\",\n      value: function initDragDropHelper() {\n        this.dragDropHelper = {\n          draggingIsDoing: false,\n          currentDraggedVolume: null,\n          currentDroppableVmId: null\n        };\n      }\n    }, {\n      key: \"getProjectContext\",\n      value: function getProjectContext() {\n        this.serviceName = this.$stateParams.projectId;\n        this.instanceId = this.$stateParams.projectId;\n      }\n    }, {\n      key: \"getUser\",\n      value: function getUser() {\n        var _this3 = this;\n\n        return this.OvhApiMe.v6().get().$promise.then(function (user) {\n          _this3.user = user;\n        });\n      }\n      /**\n           * Fetch all the regions\n           * @param {string} serviceName\n           */\n\n    }, {\n      key: \"initRegions\",\n      value: function initRegions(serviceName) {\n        var _this4 = this;\n\n        return this.OvhApiCloudProjectRegion.v6().query({\n          serviceName: serviceName\n        }).$promise.then(function (regionIds) {\n          return _this4.initRegionFromIds(serviceName, regionIds);\n        });\n      }\n      /**\n           * Build the list of GET region calls from region ids list\n           * @param {string} serviceName\n           * @param {array} regionIds\n           */\n\n    }, {\n      key: \"initRegionFromIds\",\n      value: function initRegionFromIds(serviceName, regionIds) {\n        var _this5 = this;\n\n        var getRegions = _.map(regionIds, function (regionId) {\n          return _this5.OvhApiCloudProjectRegion.v6().get({\n            serviceName: serviceName,\n            id: regionId\n          }).$promise;\n        });\n\n        return this.$q.all(getRegions).then(function (result) {\n          _this5.regions = result;\n        });\n      }\n    }, {\n      key: \"initInfra\",\n      value: function initInfra() {\n        var _this6 = this;\n\n        var initInfraQueue = [];\n        var serviceName = this.serviceName;\n        this.loaders.vRack = true;\n        this.loaders.ips = true;\n        this.loaders.jsPlumb = true;\n        this.loaders.vlans = true;\n        this.loaders.volumes = true;\n        this.errors.init = false;\n        this.importedIpFailoverPending = []; // Init jsPlumb\n\n        initInfraQueue.push(this.jsPlumbService.jsplumbInit().finally(function () {\n          _this6.loaders.jsPlumb = false;\n\n          _this6.jsPlumbService.importDefaults({\n            MaxConnections: -1\n          });\n        })); // Init Infra\n\n        initInfraQueue.push(this.CloudProjectOrchestrator.initInfrastructure({\n          serviceName: serviceName\n        }).then(function (infra) {\n          _this6.infra = infra; // check if there are IPFO import to poll\n\n          _this6.checkPendingImportIpFailOver(serviceName); // check if IPs auto sort is enabled\n\n\n          _this6.checkIpAutoSort(serviceName);\n        }).then(function () {\n          return _this6.updateReverseDns(_this6.infra.internet.ipList.getItems());\n        }).then(function () {\n          return _this6.shouldDisplayInstancesRetracted().then(function (retracted) {\n            if (retracted) {\n              _this6.CloudProjectComputeInfrastructureOrchestrator.collapseAllVm();\n            }\n          });\n        }).then(function () {\n          return _this6.initVlan();\n        })); // Init Volumes\n\n        initInfraQueue.push(this.CloudProjectOrchestrator.initVolumes({\n          serviceName: serviceName\n        }).then(function (volumes) {\n          _this6.volumes = _.get(volumes, 'volumes');\n        }));\n        return this.$q.all(initInfraQueue).catch(function () {\n          _this6.errors.init = true;\n        }).finally(function () {\n          _this6.loaders.vRack = false;\n          _this6.loaders.ips = false;\n          _this6.loaders.volumes = false;\n\n          if (_this6.$stateParams.openVncWithId) {\n            _this6.openVncWithId(_this6.$stateParams.openVncWithId);\n          }\n\n          if (_this6.$stateParams.createNewVm) {\n            _this6.addVirtualMachine();\n          } else if (_this6.$stateParams.createNewVolume) {\n            // check if we need to display the volume creation popup\n            _this6.addVolume();\n          } else if (_this6.$stateParams.createNewVolumeFromSnapshot.snapshot) {\n            _this6.addVolumeFromSnapshot(_this6.$stateParams.createNewVolumeFromSnapshot.snapshot);\n          } else if (_.isString(_this6.$stateParams.editVm) && !_.isEmpty(_this6.$stateParams.editVm)) {\n            _this6.toggleVmEditionState(_this6.infra.vrack.publicCloud.items[_this6.$stateParams.editVm]);\n          } else if (_.isString(_this6.$stateParams.monitorVm) && !_.isEmpty(_this6.$stateParams.monitorVm)) {\n            _this6.openVmMonitoringPanel(_this6.infra.vrack.publicCloud.items[_this6.$stateParams.monitorVm]);\n          }\n\n          if (_this6.CLOUD_MONITORING.alertingEnabled) {\n            // Monitoring loading must begin at the end\n            _this6.CloudProjectComputeInfrastructureOrchestrator.loadVmMonitoringData();\n          }\n        });\n      }\n    }, {\n      key: \"initVlan\",\n      value: function initVlan() {\n        var _this7 = this;\n\n        return this.CloudProjectComputeInfrastructureOrchestrator.hasVrack().then(function (hasVrack) {\n          _.set(_this7.vlans, 'vRackStatus', hasVrack ? 'activated' : 'none');\n        }).finally(function () {\n          _this7.loaders.vlans = false;\n        });\n      } // ------- END INIT -------\n\n      /**\n           * At init, check if there are IPFO importation to poll\n           * @param {string} serviceName\n           */\n\n    }, {\n      key: \"checkPendingImportIpFailOver\",\n      value: function checkPendingImportIpFailOver(serviceName) {\n        var _this8 = this;\n\n        // On page refresh, get pending IPFO import\n        return this.CloudUserPref.get(\"cloud_project_\".concat(serviceName, \"_infra_ipfo_import\")).then(function (ipfoToImportParam) {\n          var ipfoToImport = ipfoToImportParam;\n          ipfoToImport = _.get(ipfoToImport, 'ips', []);\n\n          if (_.isArray(ipfoToImport) && ipfoToImport.length > 0) {\n            _.forEach(ipfoToImport, function (ipfo) {\n              _this8.pollImportIpFailOver(serviceName, ipfo);\n            });\n          }\n        });\n      }\n      /**\n           * Poll a given IPFO address\n           * @param {string} serviceName\n           * @param {string} ip the ip object\n           * @param taskObj (optional) task to poll\n           */\n\n    }, {\n      key: \"pollImportIpFailOver\",\n      value: function pollImportIpFailOver(serviceName, ip) {\n        var _this9 = this;\n\n        var taskObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        // Already polling\n        if (~this.importedIpFailoverPending.indexOf(ip)) {\n          return;\n        }\n\n        var taskToPoll = taskObj ? taskObj.taskId : this.OvhApiIp.v6().getPendingTask(ip, 'genericMoveFloatingIp');\n        this.$q.when(taskToPoll).then(function (taskId) {\n          if (taskId) {\n            _this9.importedIpFailoverPending.push(ip);\n\n            _this9.CloudUserPref.set(\"cloud_project_\".concat(serviceName, \"_infra_ipfo_import\"), {\n              ips: _this9.importedIpFailoverPending\n            });\n\n            return _this9.Poller.poll(\"/ip/\".concat(encodeURIComponent(ip), \"/task/\").concat(taskId), null, {\n              namespace: 'cloud.infra.ips.genericMoveFloatingIp'\n            }).then(function () {\n              // On success: the IP should be in the /cloud/.../ip/failover list.\n              _this9.CloudProjectComputeInfrastructureOrchestrator.pollIps('failover');\n\n              _this9.CloudMessage.success(_this9.$translate.instant('cpci_ipfo_import_success', {\n                ip: ip\n              }));\n            }).catch(function (err) {\n              if (err && err.status) {\n                // On error: remove the IP from list\n                _this9.CloudMessage.error(_this9.$translate.instant('cpci_ipfo_import_error', {\n                  ip: ip\n                }));\n              }\n            });\n          }\n\n          return null;\n        }).then(function () {\n          _.pull(_this9.importedIpFailoverPending, ip);\n\n          _this9.CloudUserPref.set(\"cloud_project_\".concat(serviceName, \"_infra_ipfo_import\"), {\n            ips: _this9.importedIpFailoverPending\n          });\n        }).finally(function () {\n          _this9.refreshLinks();\n        });\n      }\n      /**\n           * Check in local storage if IPs auto sort is enabled\n           * @param {string} serviceName\n           */\n\n    }, {\n      key: \"checkIpAutoSort\",\n      value: function checkIpAutoSort(serviceName) {\n        var _this10 = this;\n\n        this.CloudUserPref.get(\"cloud_project_\".concat(serviceName, \"_infra_ip_autosort\")).then(function (ipAutoSort) {\n          if (ipAutoSort) {\n            _this10.sort.ipAutoSort = ipAutoSort.enabled; // activate naturalSort if autoSort is enabled\n\n            _this10.sort.ipNaturalSort = ipAutoSort.enabled;\n\n            _this10.refreshLinks();\n          }\n        });\n      }\n      /**\n           * Updates reverse dns of given ips.\n           */\n\n    }, {\n      key: \"updateReverseDns\",\n      value: function updateReverseDns(ips) {\n        var _this11 = this;\n\n        var reverseQueue = _.map(ips, function (ip) {\n          return _this11.OvhApiIp.Reverse().v6().getReverseDns(ip.ip, ip.block).then(function (dns) {\n            _.set(ip, 'reverse', dns);\n          }).catch(function () {\n            return _this11.$q.when(null);\n          });\n        } // ok we choose to ignore errors here, so the application can still be used,\n        // instead of displaying an ugly error message just because one reverse dns call failed\n        // let's assume the reverse dns is just null);\n        );\n\n        return this.$q.all(reverseQueue);\n      }\n    }, {\n      key: \"shouldDisplayInstancesRetracted\",\n      value: function shouldDisplayInstancesRetracted() {\n        return this.$q.all({\n          hasTooManyInstances: this.CloudProjectOrchestrator.hasTooManyInstances(this.$stateParams.projectId),\n          hasTooManyIps: this.CloudProjectOrchestrator.hasTooManyIps(this.$stateParams.projectId)\n        }).then(function (result) {\n          return result.hasTooManyInstances || result.hasTooManyIps;\n        });\n      }\n    }, {\n      key: \"refreshLinks\",\n      value: function refreshLinks() {\n        var _this12 = this;\n\n        this.$timeout(function () {\n          if (_this12.jsplumbInstance) {\n            _this12.jsplumbInstance.revalidateEverything();\n          }\n        }, 99);\n      }\n    }, {\n      key: \"openVncWithId\",\n      value: function openVncWithId(vmId) {\n        var completeVm = this.infra.vrack.publicCloud.get(vmId);\n\n        if (completeVm) {\n          this.InfrastructureService.openVnc(completeVm);\n        }\n      }\n    }, {\n      key: \"addVolume\",\n      value: function addVolume() {\n        var _this13 = this;\n\n        this.refreshLinks();\n        this.helpDisplay.openUnlinkVolume = true;\n        this.CloudProjectComputeVolumesOrchestrator.addNewVolumeToList('unlinked').then(function (volumeDraft) {\n          _this13.CloudProjectComputeVolumesOrchestrator.turnOnVolumeEdition(volumeDraft);\n        });\n      }\n    }, {\n      key: \"addVolumeFromSnapshot\",\n      value: function addVolumeFromSnapshot(snapshot) {\n        var _this14 = this;\n\n        this.refreshLinks();\n        this.helpDisplay.openUnlinkVolume = true;\n        this.CloudProjectComputeVolumesOrchestrator.addNewVolumeFromSnapshotToList('unlinked', snapshot).then(function (volumeDraft) {\n          _this14.CloudProjectComputeVolumesOrchestrator.turnOnVolumeEdition(volumeDraft);\n        }).catch(function (err) {\n          _this14.CloudMessage.error(\"\".concat(_this14.$translate.instant('cpci_volume_add_from_snapshot_error'), \" \").concat(_.get(err, 'data.message', '')));\n        });\n      }\n    }, {\n      key: \"addVirtualMachine\",\n      value: function addVirtualMachine() {\n        var _this15 = this;\n\n        this.CloudProjectComputeInfrastructureOrchestrator.addNewVmToList().then(function (vm) {\n          _this15.CloudProjectComputeInfrastructureOrchestrator.turnOnVmEdition(vm);\n        });\n      } // ------- REGION ACTIONS -------\n\n    }, {\n      key: \"getVmContinent\",\n      value: function getVmContinent(vm) {\n        var region = _.find(this.regions, {\n          name: vm.region\n        });\n\n        return _.get(region, 'continentCode', undefined);\n      } // ------- END REGION -------\n      // ------- VM ACTIONS -------\n\n    }, {\n      key: \"deleteConfirmPending\",\n      value: function deleteConfirmPending(vm) {\n        var _this16 = this;\n\n        // We display a popover warning in two cases :\n        //  - the vm is in monthly billing\n        //  - the vm is routed to failOver IPs\n        if (vm.monthlyBilling && vm.monthlyBilling.status === 'ok') {\n          this.$uibModal.open({\n            windowTopClass: 'cui-modal',\n            templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/delete/cloud-project-compute-infrastructure-virtual-machine-delete.html',\n            controller: 'CloudprojectcomputeinfrastructurevirtualmachinedeleteCtrl',\n            controllerAs: '$ctrl',\n            resolve: {\n              params: function params() {\n                return vm;\n              }\n            }\n          }).result.then(function () {\n            _this16.deleteVirtualMachine(vm);\n          });\n        } else {\n          this.InfrastructureService.deleteVirtualMachine(vm);\n        }\n      }\n    }, {\n      key: \"deleteVirtualMachine\",\n      value: function deleteVirtualMachine(vm) {\n        var _this17 = this;\n\n        _.set(vm, 'confirmLoading', true);\n\n        this.CloudProjectComputeInfrastructureOrchestrator.deleteVm(vm).catch(function (err) {\n          _this17.CloudMessage.error(\"\".concat(_this17.$translate.instant('cpci_vm_delete_submit_error'), \" \").concat(_.get(err, 'data.message', '')));\n        }).finally(function () {\n          _.set(vm, 'confirmLoading', false);\n        });\n      }\n    }, {\n      key: \"openVolumeSnapshotWizard\",\n      value: function openVolumeSnapshotWizard(volume) {\n        this.$uibModal.open({\n          templateUrl: 'app/cloud/project/compute/volume/snapshot/cloud-project-compute-volume-snapshot-add.html',\n          controller: 'CloudProjectComputeVolumeSnapshotAddCtrl',\n          controllerAs: 'CloudProjectComputeVolumeSnapshotAddCtrl',\n          resolve: {\n            params: function params() {\n              return volume;\n            }\n          }\n        });\n      } // ------- END VM -------\n      // ------- VM DISPLAY TOOLS -------\n\n    }, {\n      key: \"toggleVmEditionState\",\n      value: function toggleVmEditionState(vm, param) {\n        if (vm.openDetail) {\n          this.CloudProjectComputeInfrastructureOrchestrator.turnOffVmEdition(true);\n          this.$rootScope.$broadcast('highlighed-element.hide');\n        } else {\n          if (param) {\n            this.CloudProjectComputeInfrastructureOrchestrator.setEditVmParam(param);\n          }\n\n          this.CloudProjectComputeInfrastructureOrchestrator.turnOnVmEdition(vm);\n        }\n      }\n    }, {\n      key: \"openVmMonitoringPanel\",\n      value: function openVmMonitoringPanel(vm) {\n        this.CloudProjectComputeInfrastructureOrchestrator.openMonitoringPanel(vm);\n      }\n    }, {\n      key: \"displayVmAuthInfo\",\n      value: function displayVmAuthInfo(vm) {\n        var completeVm = this.infra.vrack.publicCloud.get(vm.id);\n        this.InfrastructureService.openLoginInformations(completeVm);\n      }\n    }, {\n      key: \"collapseAll\",\n      value: function collapseAll() {\n        this.CloudProjectComputeInfrastructureOrchestrator.collapseAllVm();\n        this.refreshLinks();\n      }\n    }, {\n      key: \"unCollapseAll\",\n      value: function unCollapseAll() {\n        this.CloudProjectComputeInfrastructureOrchestrator.uncollapseAllVm();\n        this.refreshLinks();\n      }\n    }, {\n      key: \"toggleCollapsedState\",\n      value: function toggleCollapsedState(vm) {\n        this.CloudProjectComputeInfrastructureOrchestrator.toggleVmCollapsedState(vm);\n        this.refreshLinks();\n      }\n    }, {\n      key: \"toggleCollapsedVolumes\",\n      value: function toggleCollapsedVolumes(vm) {\n        if (vm) {\n          this.CloudProjectComputeInfrastructureOrchestrator.toggleCollapsedVolumes(vm);\n        } else {\n          this.helpDisplay.openUnlinkVolume = !this.helpDisplay.openUnlinkVolume;\n        }\n\n        this.refreshLinks();\n\n        if (!vm && (!this.volumes.unlinked || !this.volumes.unlinked.length)) {\n          this.addVolume();\n        }\n      } // ------- END VM DISPLAY TOOLS -------\n      // ------- IPS ACTIONS -------\n\n    }, {\n      key: \"importIpFailover\",\n      value: function importIpFailover() {\n        var _this18 = this;\n\n        this.InfrastructureService.importIpFailOver(this.importedIpFailoverPending).then(function (listTasksListIpsWithTasks) {\n          // Launch polling\n          _.forEach(listTasksListIpsWithTasks, function (ipWithTask) {\n            _this18.pollImportIpFailOver(_this18.$stateParams.projectId, ipWithTask.ip, ipWithTask.task);\n          });\n\n          _this18.refreshLinks();\n        });\n      }\n      /**\n           * Toggle automatic sorting of ips\n           */\n\n    }, {\n      key: \"toggleIpSort\",\n      value: function toggleIpSort() {\n        var autoSortEnable = !this.sort.ipAutoSort;\n        this.sort.ipAutoSort = autoSortEnable;\n        this.sort.ipNaturalSort = autoSortEnable; // activate naturalSort if autoSort is enabled\n\n        this.refreshLinks();\n        this.CloudUserPref.set(\"cloud_project_\".concat(this.$stateParams.projectId, \"_infra_ip_autosort\"), {\n          enabled: autoSortEnable\n        });\n      }\n      /**\n           * Sort the ip in order to have the least crossing between links\n           */\n\n    }, {\n      key: \"ipAutoSort\",\n      value: function ipAutoSort() {\n        var ipAutoSort = _.get(this.sort, 'ipAutoSort', false);\n\n        var ipListSortedKeys = _.get(this.infra, 'internet.ipList.sortedKeys', []);\n\n        var publicCloudSortedKeys = _.get(this.infra, 'vrack.publicCloud.sortedKeys', []);\n\n        return function (ip) {\n          // only if autoSort is enabled ...\n          if (!ipAutoSort) {\n            return _.indexOf(ipListSortedKeys, ip.id);\n          }\n\n          var order = 0;\n          var routeCount = 0;\n\n          _.forEach(ip.routedTo, function (route) {\n            var vmPosition = _.indexOf(publicCloudSortedKeys, route);\n\n            if (vmPosition !== -1) {\n              order += vmPosition * 5; // arbitrary weight of 5 for a link with a vm\n\n              routeCount += 1;\n            }\n          });\n\n          if (routeCount > 0) {\n            order /= routeCount; // compute our position with average order\n\n            if (ip.type === 'failover') {\n              order += 1;\n            }\n\n            return order;\n          }\n\n          return Number.MAX_VALUE; // goes to the bottom\n        };\n      }\n      /**\n           * Sort IPs in their natural order\n           */\n\n    }, {\n      key: \"ipSortNatural\",\n      value: function ipSortNatural() {\n        var ipNaturalSort = _.get(this.sort, 'ipNaturalSort', false);\n\n        var ipListSortedKeys = _.get(this.infra, 'internet.ipList.sortedKeys', []);\n\n        return function (ip) {\n          // only if natural sort is activated ...\n          if (!ipNaturalSort) {\n            return _.indexOf(ipListSortedKeys, ip.id);\n          }\n\n          var ipRegex = new RegExp(/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/);\n\n          if (ip && ipRegex.test(ip.ip)) {\n            // IPv4 ...\n            var values = ipRegex.exec(ip.ip);\n            var score = 0;\n            score += parseInt(values[1], 10) * 1000000000;\n            score += parseInt(values[2], 10) * 1000000;\n            score += parseInt(values[3], 10) * 1000;\n            score += parseInt(values[4], 10);\n            return score;\n          }\n\n          return ip.ip;\n        };\n      }\n    }, {\n      key: \"ipReverse\",\n      value: function ipReverse(ip) {\n        return this.$translate.instant('cloud_public_ip_failover_reverse', {\n          ip: ip.reverse\n        });\n      } // ------- END IPS  -------\n      // ******* jsPLUMB *******\n      // ------- jsPLUMB TOOLS -------\n\n    }, {\n      key: \"redrawLinks\",\n      value: function redrawLinks(reValidateEmptyEndpoints) {\n        if (this.jsplumbInstance) {\n          this.jsplumbInstance.repaintEverything(reValidateEmptyEndpoints);\n        }\n      } // ------- JSPLUMB CONF -------\n\n    }, {\n      key: \"initJsPlumb\",\n      value: function initJsPlumb() {\n        var _this19 = this;\n\n        // Default options\n        this.srcDrawOptionsBase = {\n          connector: ['Bezier', {\n            curviness: 100\n          }],\n          connectorStyle: {\n            strokeStyle: this.constructor.getLinkColor(),\n            lineWidth: 4\n          }\n        }; // ------- JSPLUMB VM FUNCTION CONF -------\n\n        this.vmSourceDrawOptions = {\n          connector: this.srcDrawOptionsBase.connector,\n          connectorStyle: this.srcDrawOptionsBase.connectorStyle,\n          anchor: [0.5, 0.5, 1, 0],\n          endpoint: ['Blank', {\n            cssClass: 'vm-source'\n          }],\n          filter: '.port-inner',\n          dragOptions: {\n            start: function start() {\n              var id = $(_this19).attr('elid');\n\n              var vm = _this19.infra.vrack.getVmById(id);\n\n              if (vm) {\n                _this19.$rootScope.$broadcast('highlighed-element.show', \"compute,\".concat(vm.id, \",ip-failover-ok-\").concat(_this19.getVmContinent(vm)));\n              }\n            },\n            stop: function stop() {\n              var id = $(_this19).attr('elid');\n\n              var vm = _this19.infra.vrack.getVmById(id);\n\n              if (vm) {\n                _this19.$rootScope.$broadcast('highlighed-element.hide', \"compute,\".concat(vm.id, \",ip-failover-ok-\").concat(_this19.getVmContinent(vm)));\n              }\n            }\n          }\n        }; // ------- jsPLUMB VM FUNCTION CONF -------\n\n        this.vmTargetDrawOptions = {\n          anchor: [0.5, 0.5, 1, 0],\n          endpoint: ['Blank', {\n            cssClass: 'vm-target'\n          }],\n          dropOptions: {\n            accept: '.ip-source',\n            hoverClass: 'hover-port'\n          }\n        }; // ------- jsPLUMB IP FUNCTION CONF -------\n\n        this.ipTargetDrawOptions = {\n          anchor: [0.5, 0.5, -1, 0],\n          endpoint: ['Blank', {\n            cssClass: 'ip-target'\n          }],\n          dropOptions: {\n            accept: '.vm-source',\n            hoverClass: 'hover-port'\n          }\n        };\n        this.ipSourceDrawOptions = {\n          connector: this.srcDrawOptionsBase.connector,\n          connectorStyle: this.srcDrawOptionsBase.connectorStyle,\n          connectorHoverStyle: this.srcDrawOptionsBase.connectorHoverStyle,\n          // anchor: \"LeftMiddle\",\n          anchor: [0.5, 0.5, -1, 0],\n          endpoint: ['Blank', {\n            cssClass: 'ip-source'\n          }],\n          filter: '.port-inner',\n          dragOptions: {\n            start: function start() {\n              var id = $(_this19).attr('elid');\n\n              var ip = _this19.infra.internet.getIpById(id);\n\n              if (ip) {\n                _this19.$rootScope.$broadcast('highlighed-element.show', \"compute,\".concat(_.get(ip, 'id', ''), \",vm-ACTIVE-\").concat(_.get(ip, 'continentCode', '')));\n              }\n            },\n            stop: function stop() {\n              var id = $(_this19).attr('elid');\n\n              var ip = _this19.infra.internet.getIpById(id);\n\n              if (ip) {\n                _this19.$rootScope.$broadcast('highlighed-element.hide', \"compute,\".concat(_.get(ip, 'id', ''), \",vm-ACTIVE-\").concat(_.get(ip, 'continentCode', '')));\n              }\n            }\n          }\n        };\n      } // ******* END jsPLUMB *******\n\n    }, {\n      key: \"initIpEdit\",\n      value: function initIpEdit() {\n        var _this20 = this;\n\n        this.ipEdit = {\n          attach: {\n            confirm: function confirm(vm, ip) {\n              if (!_this20.loaders.linkActionConfirm) {\n                var connectedVm = vm || _this20.model.currentLinkEdit.connectedVm;\n                var connectedIp = ip || _this20.model.currentLinkEdit.connectedIp;\n                _this20.loaders.linkActionConfirm = true;\n                return _this20.CloudProjectComputeInfrastructureOrchestrator.attachIptoVm(connectedIp, connectedVm).then(function () {\n                  _this20.$rootScope.$broadcast('highlighed-element.hide');\n\n                  _this20.model.currentLinkEdit = null;\n                  var successMessage = {\n                    text: _this20.$translate.instant('cpci_ip_attach_success', {\n                      ip: connectedIp.ip,\n                      instance: connectedVm.name\n                    })\n                  };\n\n                  if (connectedIp.type === 'failover' && connectedVm.image) {\n                    var distribution = connectedVm.image.distribution || _this20.URLS.guides.ip_failover.defaultDistribution;\n                    successMessage = {\n                      textHtml: \"\".concat(successMessage.text, \" \").concat(_this20.$translate.instant('cpci_ip_attach_failover_help', {\n                        link: _this20.URLS.guides.ip_failover[_this20.user.ovhSubsidiary][distribution]\n                      }))\n                    };\n                  }\n\n                  _this20.CloudMessage.success(successMessage);\n                }).catch(function (err) {\n                  _this20.CloudMessage.error(\"\".concat(_this20.$translate.instant('cpci_ip_attach_error', {\n                    ip: connectedIp.ip,\n                    instance: connectedVm.name\n                  }), \" \").concat(_.get(err, 'data.message', '')));\n\n                  return _this20.$q.reject(err);\n                }).finally(function () {\n                  _this20.loaders.linkActionConfirm = false;\n                });\n              }\n\n              return null;\n            },\n            cancel: function cancel() {\n              if (!_this20.loaders.linkActionConfirm && _this20.model.currentLinkEdit) {\n                // if user drawn a line: delete it\n                if (_this20.model.currentLinkEdit.connection) {\n                  _this20.jsplumbInstance.disconnectEndpoints(_this20.model.currentLinkEdit.connection);\n                } // for manual attach\n\n\n                if (_this20.model.currentLinkEdit.connectionCurrent) {\n                  // this.model.currentLinkEdit.connectionCurrent\n                  //   .setHoverPaintStyle({ lineWidth : 8 });\n                  _this20.model.currentLinkEdit.connectionCurrent.removeClass('highlighed-element highlighed-element-active');\n                }\n\n                _this20.$rootScope.$broadcast('highlighed-element.hide');\n\n                _this20.model.currentLinkEdit = null;\n              }\n            },\n            button: function button(ip) {\n              // input radio\n              if (ip.type === 'failover') {\n                // list of compatible(s) vm(s) to attach the ip\n                var compatibleVms = _.filter(_this20.infra.vrack.publicCloud.items, function (vm) {\n                  return _this20.ipEdit.attach.canAttachIpToVm(ip, vm);\n                }); // do we have at least one compatible vm?\n\n\n                if (_.isArray(compatibleVms) && compatibleVms.length > 0) {\n                  _.set(_this20.model, 'currentLinkEdit', {\n                    connectionCurrentVmId: ip.routedTo.length > 0 ? ip.routedTo[0] : null,\n                    connectionVmId: ip.routedTo.length > 0 ? ip.routedTo[0] : null,\n                    connectionCurrent: ip.routedTo.length > 0 ? _this20.jsplumbInstance.getConnectionBySourceIdAndTargetId(ip.id, ip.routedTo[0]) : null,\n                    connection: null,\n                    connectedIp: ip,\n                    connectedVmCurrent: ip.routedTo.length > 0 ? _this20.infra.vrack.getVmById(ip.routedTo[0]) : null,\n                    action: 'attach',\n                    isManual: true\n                  }); // If there are a connection already, highlight it\n\n\n                  if (_this20.model.currentLinkEdit.connectionCurrent) {\n                    _this20.model.currentLinkEdit.connectionCurrent.setHoverPaintStyle({\n                      lineWidth: 4\n                    });\n\n                    _this20.model.currentLinkEdit.connectionCurrent.addClass('highlighed-element highlighed-element-active');\n                  }\n\n                  _this20.$rootScope.$broadcast('highlighed-element.show', \"compute,vm-ACTIVE-\".concat(_.get(_this20.model, 'currentLinkEdit.connectedIp.continentCode', '')));\n                } else {\n                  _this20.CloudMessage.error(_this20.$translate.instant('cpci_ipfo_attach_error'));\n                }\n              }\n            },\n            changeRadioConnection: function changeRadioConnection() {\n              // If there are already a link: detach it\n              if (_this20.model.currentLinkEdit.connection) {\n                _this20.jsplumbInstance.disconnectEndpoints(_this20.model.currentLinkEdit.connection);\n\n                _this20.model.currentLinkEdit.connection = null;\n                _this20.model.currentLinkEdit.connectedVm = null;\n              }\n\n              if (_this20.model.currentLinkEdit.connectionCurrentVmId !== _this20.model.currentLinkEdit.connectionVmId) {\n                // create connection\n                _this20.model.currentLinkEdit.connection = _this20.jsplumbInstance.connectEndpoints(_this20.model.currentLinkEdit.connectedIp.id, _this20.model.currentLinkEdit.connectionVmId);\n                _this20.model.currentLinkEdit.connectedVm = _this20.infra.vrack.getVmById(_this20.model.currentLinkEdit.connectionVmId); // set connection style\n\n                _this20.model.currentLinkEdit.connection.setPaintStyle({\n                  strokeStyle: _this20.constructor.getLinkColor(_this20.model.currentLinkEdit.connectedIp.type),\n                  lineWidth: 8,\n                  dashstyle: '2 1'\n                });\n\n                _this20.model.currentLinkEdit.connection.addClass('highlighed-element highlighed-element-active');\n              } else if (_this20.model.currentLinkEdit.connectionCurrent) {\n                _this20.model.currentLinkEdit.connectionCurrent.setPaintStyle({\n                  strokeStyle: _this20.constructor.getLinkColor(_this20.model.currentLinkEdit.connectedIp.type),\n                  lineWidth: 4\n                });\n              }\n            },\n            canAttachIpToVm: function canAttachIpToVm(ipSource, vmDest) {\n              var continentCode = _.get(ipSource, 'continentCode');\n\n              var attachable = true;\n              attachable = attachable && ipSource && vmDest;\n              attachable = attachable && vmDest.status === 'ACTIVE';\n              attachable = attachable && continentCode && continentCode === _this20.getVmContinent(vmDest);\n              return attachable;\n            }\n          }\n        };\n      } // ------- JQUERY UI SORTABLE -------\n\n    }, {\n      key: \"initInterval\",\n      value: function initInterval() {\n        // redraw jsPlumb after sort\n        this.sortInterval = setInterval(this.redrawLinks, 33);\n      }\n    }, {\n      key: \"initSortable\",\n      value: function initSortable() {\n        var _this21 = this;\n\n        this.sortableOptions = {\n          cancel: '.sortable-disabled',\n          axis: 'y',\n          start: function start() {\n            _this21.states.sorting = true;\n\n            _this21.initInterval();\n          },\n          stop: function stop() {\n            _this21.states.sorting = false;\n\n            if (_this21.sortInterval) {\n              clearInterval(_this21.sortInterval); // redraw links for the last time and re-validate offset of non connected items\n\n              _this21.redrawLinks(true);\n            }\n          },\n          update: function update() {\n            _this21.$timeout(function () {\n              // deffer save to let jqUI update the array\n              _this21.CloudProjectComputeInfrastructureOrchestrator.saveToUserPref();\n            });\n          }\n        }; // create vm sortable options by extending sortable options\n\n        this.vmSortableOptions = angular.extend({\n          handle: '.vm-grip'\n        }, this.sortableOptions); // create ip sortable options by extending sortable options\n\n        this.ipSortableOptions = angular.extend({\n          handle: '.ip-grip'\n        }, this.sortableOptions);\n      } // ------- END JQUERY UI SORTABLE -------\n      // ------- VOLUME DISPLAY TOOLS -------\n\n    }, {\n      key: \"initVolumeEdit\",\n      value: function initVolumeEdit() {\n        var _this22 = this;\n\n        this.volumeEdit = {\n          action: null,\n          volume: null,\n          // Can be factory or not !\n          srcVm: null,\n          targetVm: null,\n          targetVmId: null,\n          // use for checkbox vm\n          remove: {\n            launchConfirm: function launchConfirm(volume) {\n              _this22.OvhApiCloudProjectVolumeSnapshot.v6().query({\n                serviceName: _this22.serviceName\n              }).$promise.then(function (snapshots) {\n                if (_.find(snapshots, {\n                  volumeId: volume.id\n                })) {\n                  _this22.CloudMessage.error({\n                    textHtml: _this22.$translate.instant('cpci_volume_snapshotted_delete_info', {\n                      url: _this22.$state.href('iaas.pci-project.compute.snapshot')\n                    })\n                  });\n                } else {\n                  _this22.volumeEdit.action = 'remove';\n                  _this22.volumeEdit.volume = volume;\n\n                  _this22.$rootScope.$broadcast('highlighed-element.show', \"compute,\".concat(volume.id));\n                }\n              }).catch(function (err) {\n                _this22.CloudMessage.error(\"\".concat(_this22.$translate.instant('cpci_volume_snapshot_error'), \" \").concat(_.get(err, 'data.message', '')));\n              });\n            },\n            cancel: function cancel() {\n              _this22.volumeEdit.reInit();\n\n              _this22.$rootScope.$broadcast('highlighed-element.hide');\n            },\n            confirm: function confirm() {\n              _this22.loaders.volumeActionConfirm = true;\n\n              _this22.CloudProjectComputeVolumesOrchestrator.deleteVolume(_this22.volumeEdit.volume.id).then(function () {\n                _this22.volumeEdit.reInit();\n\n                _this22.$rootScope.$broadcast('highlighed-element.hide');\n              }).catch(function (err) {\n                _this22.CloudMessage.error(\"\".concat(_this22.$translate.instant('cpci_volume_delete_error'), \" \").concat(_.get(err, 'data.message', '')));\n              }).finally(function () {\n                _this22.loaders.volumeActionConfirm = false;\n              });\n            }\n          },\n          move: {\n            launchConfirm: function launchConfirm(volume, srcVm, targetVm) {\n              _this22.volumeEdit.action = 'move';\n              _this22.volumeEdit.volume = volume;\n              _this22.volumeEdit.srcVm = srcVm; // use in interface\n\n              _this22.volumeEdit.targetVm = targetVm; // set overlay\n\n              _this22.$timeout(function () {\n                // otherwise LAG\n                _this22.$rootScope.$broadcast('highlighed-element.show', \"compute,\".concat(targetVm ? targetVm.id : 'unlinked_volumes'));\n              }, 100);\n            },\n            cancel: function cancel() {\n              _this22.initDragDropHelper(); // :-/\n\n\n              _this22.volumeEdit.reInit();\n\n              _this22.$rootScope.$broadcast('highlighed-element.hide');\n            },\n            confirm: function confirm() {\n              // Open volumes of VM target\n              if (_this22.volumeEdit.targetVm && !_this22.volumeEdit.targetVm.collapsedVolumes) {\n                _this22.CloudProjectComputeInfrastructureOrchestrator.toggleCollapsedVolumes(_this22.volumeEdit.targetVm);\n\n                _this22.refreshLinks();\n              }\n\n              _this22.initDragDropHelper(); // :-/\n\n\n              _this22.loaders.volumeActionConfirm = true;\n\n              _this22.CloudProjectComputeVolumesOrchestrator.moveVolume(_this22.volumeEdit.volume.id, _this22.volumeEdit.targetVm ? _this22.volumeEdit.targetVm.id : 'unlinked').then(function () {\n                if (_this22.volumeEdit.targetVm && _this22.volumeEdit.targetVm.image && _this22.volumeEdit.targetVm.image.type === 'windows') {\n                  _this22.CloudMessage.info(_this22.$translate.instant('cpci_volume_confirm_attach_windows_info'));\n                }\n              }).catch(function (err) {\n                _this22.CloudMessage.error(\"\".concat(_this22.$translate.instant('cpci_volume_confirm_detach_error'), \" \").concat(_.get(err, 'data.message', '')));\n              }).finally(function () {\n                _this22.loaders.volumeActionConfirm = false;\n\n                _this22.volumeEdit.reInit();\n\n                _this22.$rootScope.$broadcast('highlighed-element.hide');\n              });\n            }\n          },\n          moveCheckbox: {\n            launchConfirm: function launchConfirm(volume, srcVm) {\n              // list of compatible(s) vm(s) to attach the volume\n              var compatibleVms = _.filter(_this22.infra.vrack.publicCloud.items, function (vm) {\n                return _this22.volumeEdit.canAttachVolumeToVm(volume, vm);\n              }); // do we have at least one compatible vm?\n\n\n              if (_.isArray(compatibleVms) && compatibleVms.length > 0) {\n                _this22.volumeEdit.action = 'moveCheckbox';\n                _this22.volumeEdit.volume = volume;\n                _this22.volumeEdit.srcVm = srcVm; // use in interface\n                // set overlay\n\n                _this22.$timeout(function () {\n                  // otherwise LAG\n                  _this22.$rootScope.$broadcast('highlighed-element.show', \"compute,vm-ACTIVE-\".concat(volume.region));\n                }, 100);\n              } else {\n                _this22.CloudMessage.error(_this22.$translate.instant('cpci_volume_attach_error'));\n              }\n            },\n            cancel: function cancel() {\n              _this22.volumeEdit.move.cancel();\n            },\n            confirm: function confirm() {\n              _this22.volumeEdit.move.confirm();\n            },\n            isInvalid: function isInvalid() {\n              return !_this22.volumeEdit.targetVm;\n            },\n            checkboxChange: function checkboxChange(targetVm) {\n              _this22.volumeEdit.targetVm = targetVm;\n            }\n          },\n          reInit: function reInit() {\n            _this22.volumeEdit.action = null;\n            _this22.volumeEdit.volume = null;\n            _this22.volumeEdit.srcVm = null;\n            _this22.volumeEdit.targetVm = null;\n          },\n          canAttachVolumeToVm: function canAttachVolumeToVm(volumeSource, vmDest) {\n            var attachable = true;\n            attachable = attachable && volumeSource && vmDest;\n            attachable = attachable && vmDest.status === 'ACTIVE';\n            attachable = attachable && volumeSource.region === vmDest.region;\n            attachable = attachable && _.first(volumeSource.attachedTo) !== vmDest.id;\n            return attachable;\n          }\n        };\n      }\n    }, {\n      key: \"toggleVolumeEditionState\",\n      value: function toggleVolumeEditionState(volume, param) {\n        if (!volume.openDetail) {\n          if (param) {\n            this.CloudProjectComputeVolumesOrchestrator.setEditVolumeParam(param);\n          }\n\n          this.CloudProjectComputeVolumesOrchestrator.turnOnVolumeEdition(volume);\n        } else {\n          this.CloudProjectComputeVolumesOrchestrator.turnOffVolumeEdition(true);\n          this.$rootScope.$broadcast('highlighed-element.hide');\n        }\n      }\n      /**\n           * return the list of regions in which there is at least one unlinked volume\n           * @returns {Array}\n           */\n\n    }, {\n      key: \"getUnlinkedVolumesRegions\",\n      value: function getUnlinkedVolumesRegions() {\n        var regions = _.map(this.volumes.unlinked, function (volume) {\n          return volume.region;\n        }); // if we are doing a drag & drop, we add the dragged volume region to the list\n        // so it will be displayed as a droppable target in the region list\n\n\n        if (this.dragDropHelper.currentDraggedVolume) {\n          regions.push(this.dragDropHelper.currentDraggedVolume.draggableInfo.volume.region);\n        }\n\n        return _.uniq(regions);\n      }\n    }, {\n      key: \"getTranslatedRegion\",\n      value: function getTranslatedRegion(region) {\n        return region ? this.RegionService.getTranslatedMicroRegion(region) : '';\n      } // ------- JQUERY UI DRAGGABLE -------\n\n    }, {\n      key: \"initDraggable\",\n      value: function initDraggable() {\n        this.draggableOptions = {\n          unlinked: {\n            revert: 'invalid',\n            // when not dropped, the item will revert back to its initial position\n            containment: '#cloud-project-compute-infrastructure',\n            scroll: true,\n            scrollSensitivity: 100,\n            appendTo: '#cloud-project-compute-infrastructure',\n            helper: 'clone' // !important\n\n          },\n          linked: {\n            revert: 'invalid',\n            // when not dropped, the item will revert back to its initial position\n            containment: '#cloud-project-compute-infrastructure',\n            scroll: true,\n            scrollSensitivity: 100,\n            appendTo: '#cloud-project-compute-infrastructure',\n            helper: 'clone' // !important\n\n          }\n        };\n      } // ------- JQUERY UI DROPPABLE -------\n\n    }, {\n      key: \"initDroppable\",\n      value: function initDroppable() {\n        this.droppableOptions = {\n          unlinked: {\n            accept: '.volume-content-linked-items > li'\n          },\n          vmUnlinked: function vmUnlinked(vm) {\n            return \".volume-content-unlinked-items > li.volume-detail-item-\".concat(vm.region, \",\\n                    .volume-content-linked-items:not('.volume-content-linked-items-\").concat(vm.id, \"') > li.volume-detail-item-\").concat(vm.region);\n          } // , linked: { } // Specific of region\n\n        };\n      } // ------- END VOLUME DISPLAY TOOLS -------\n      // ------- PRIVATE NETWORKS -------\n\n    }, {\n      key: \"fetchPrivateNetworks\",\n      value: function fetchPrivateNetworks() {\n        var _this23 = this;\n\n        if (this.loaders.privateNetworks.query) {\n          return;\n        }\n\n        this.loaders.privateNetworks.query = true;\n        this.OvhApiCloudProjectNetworkPrivate.v6().query({\n          serviceName: this.serviceName\n        }).$promise.then(function (networks) {\n          _this23.collections.privateNetworks = networks;\n        }).catch(function (err) {\n          _this23.collections.privateNetwork = [];\n\n          _this23.CloudMessage.error(_this23.$translate.instant('cpci_private_network_query_error', {\n            message: _.get(err, 'data.message', '')\n          }));\n        }).finally(function () {\n          _this23.loaders.privateNetworks.query = false;\n        });\n      }\n    }, {\n      key: \"hasPrivateIp\",\n      value: function hasPrivateIp(vm) {\n        if (!this.vlans.vRackStatus) {\n          return false;\n        }\n\n        return !!this.constructor.getVirtualMachinePrivateAddresses(vm).length;\n      }\n    }, {\n      key: \"anyVmEditMenuOpen\",\n      value: function anyVmEditMenuOpen() {\n        return _.any(this.$document.find('.vm-actions-dropdown.open'));\n      }\n    }, {\n      key: \"removeAllFades\",\n      value: function removeAllFades() {\n        var _this24 = this;\n\n        if (this.anyVmEditMenuOpen()) {\n          // disable the action when editing a VM.\n          return;\n        }\n\n        var selectors = ['.faded-out', '.faded-path'];\n\n        _.each(selectors, function (selector) {\n          var nodes = _this24.$document.find(selector);\n\n          _.each(nodes, function (node) {\n            $(node).toggleClass(_.rest(selector).join(''));\n          });\n        });\n\n        this.jsplumbInstance.select().removeClass('faded-path');\n      }\n    }, {\n      key: \"highlightInstanceAndPublicIP\",\n      value: function highlightInstanceAndPublicIP(e) {\n        if (this.anyVmEditMenuOpen()) {\n          // disable the action when editing a VM.\n          return;\n        } // instanceId can be a string of an id or an array of id.\n\n\n        var currentInstanceId = $(e.currentTarget).data().instanceId; // always work with an array for uniformity\n\n        if (_.isString(currentInstanceId)) {\n          currentInstanceId = [currentInstanceId];\n        }\n\n        var instancesBox = this.$document.find('.public-cloud-vm');\n        var publicIPs = this.$document.find('.ip');\n        var plumbLink = this.jsplumbInstance.select({\n          target: currentInstanceId\n        }); // instanceBox is the currently highlighted instance\n\n        var instanceBox = _.find(instancesBox, function (box) {\n          return _.includes(currentInstanceId, $(box).data().instanceId);\n        }); // ips linked to the currently highlighted instance\n\n\n        var currentIps = _.filter(publicIPs, function (ip) {\n          var _$$data = $(ip).data(),\n              instanceId = _$$data.instanceId;\n\n          return _.any(_.intersection(instanceId, currentInstanceId));\n        }); // fade everything\n        // put fade on vm-infos, does not work directly on .public-cloud-vm\n        // because of css conflicts I guess...\n\n\n        instancesBox.find('.vm-infos').addClass('faded-out');\n        publicIPs.addClass('faded-out');\n        this.jsplumbInstance.select().addClass('faded-path'); // remove faded for current instance/ip/instance->ip link\n\n        plumbLink.removeClass('faded-path');\n        $(instanceBox).find('.vm-infos').removeClass('faded-out');\n        $(currentIps).removeClass('faded-out');\n      } // ------- END PRIVATE NETWORKS -------\n\n    }], [{\n      key: \"sourceIsVm\",\n      value: function sourceIsVm(source, target) {\n        return $(source).hasClass('vm-port') && $(target).hasClass('ip-port');\n      }\n    }, {\n      key: \"getLinkColor\",\n      value: function getLinkColor(type) {\n        var defaultColor = '#a8e0d5';\n\n        switch (type) {\n          case 'disabled':\n            return '#bbdcd5';\n\n          case 'public':\n            return '#444444';\n\n          case 'failover':\n            return defaultColor;\n\n          default:\n            return defaultColor;\n        }\n      }\n    }, {\n      key: \"getVirtualMachinePrivateAddresses\",\n      value: function getVirtualMachinePrivateAddresses(vm) {\n        if (!vm || !vm.ipAddresses) {\n          return false;\n        }\n\n        return _.chain(vm.ipAddresses).filter(function (ip) {\n          return ip.type === 'private';\n        }).map(function (ip) {\n          return ip.ip;\n        }).value();\n      }\n    }]);\n\n    return CloudProjectComputeInfrastructureDiagramCtrl;\n  }();\n\n  angular.module('managerApp').controller('CloudProjectComputeInfrastructureDiagramCtrl', CloudProjectComputeInfrastructureDiagramCtrl);\n})();",null]}