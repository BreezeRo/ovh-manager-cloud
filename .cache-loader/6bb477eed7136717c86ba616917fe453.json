{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/order/iplb-ssl-certificate-order.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/order/iplb-ssl-certificate-order.controller.js","mtime":1539717142221},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerSslCertificateOrderCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerSslCertificateOrderCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"$location\", \"CloudMessage\", \"ControllerHelper\", \"IpLoadBalancerConstant\", \"IpLoadBalancerSslCertificateService\"];\n\n  function IpLoadBalancerSslCertificateOrderCtrl($q, $state, $stateParams, $location, CloudMessage, ControllerHelper, IpLoadBalancerConstant, IpLoadBalancerSslCertificateService) {\n    _classCallCheck(this, IpLoadBalancerSslCertificateOrderCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$location = $location;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerSslCertificateService = IpLoadBalancerSslCertificateService;\n  }\n\n  _createClass(IpLoadBalancerSslCertificateOrderCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.paidOffers = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerSslCertificateService.getCertificateProducts(_this.$stateParams.serviceName).then(function (offers) {\n            _this.offers = offers;\n            _this.sslTypes = _.map(offers, 'planCode').map(function (planCode) {\n              return planCode.replace(/-/g, '_');\n            }); // Add separate free certificate in first position.\n\n            _this.sslTypes.unshift('free'); // Select first by default\n\n\n            _this.newSsl.type = _.first(_this.sslTypes);\n          });\n        }\n      });\n      this.organizationTypes = this.IpLoadBalancerConstant.organisationTypes;\n      this.newSsl = {};\n      this.saving = false;\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.paidOffers.load();\n    }\n  }, {\n    key: \"order\",\n    value: function order() {\n      var _this2 = this;\n\n      if (this.form.$invalid) {\n        return this.$q.reject();\n      }\n\n      this.planCode = this.newSsl.type.replace(/_/g, '-');\n\n      if (this.planCode === 'free') {\n        return this.orderFreeCertificate();\n      }\n\n      var sslOffer = this.offers.find(function (offer) {\n        return offer.planCode === _this2.planCode;\n      });\n\n      if (!sslOffer) {\n        return null;\n      }\n\n      var options = Object.assign(_.pick(sslOffer.prices[0], ['duration', 'pricingMode']), {\n        planCode: this.planCode,\n        quantity: 1\n      });\n      return this.orderPaidCertificate(options);\n    }\n  }, {\n    key: \"orderFreeCertificate\",\n    value: function orderFreeCertificate() {\n      var _this3 = this;\n\n      var fqdn = this.newSsl.fqdn.split(',').map(function (item) {\n        return item.trim();\n      });\n      this.saving = true;\n      this.IpLoadBalancerSslCertificateService.orderFreeCertificate(this.$stateParams.serviceName, fqdn).then(function () {\n        return _this3.$state.go('network.iplb.detail.ssl-certificate.home');\n      }).finally(function () {\n        _this3.saving = false;\n      });\n    }\n  }, {\n    key: \"orderPaidCertificate\",\n    value: function orderPaidCertificate(options) {\n      var _this4 = this;\n\n      var configuration = Object.assign({}, this.newSsl);\n\n      if (this.planCode === 'iplb-ssl-ev-single') {\n        configuration.commonName = configuration.fqdn;\n        configuration.dcv_email = configuration.email;\n        configuration.country = configuration.countryName;\n        delete configuration.fqdn;\n      }\n\n      delete configuration.type;\n      this.saving = true;\n      this.IpLoadBalancerSslCertificateService.orderPaidCertificate(this.$stateParams.serviceName, options, configuration).then(function (result) {\n        _this4.$location.href = result.url;\n      }).catch(function () {\n        _this4.saving = false;\n      });\n    }\n  }]);\n\n  return IpLoadBalancerSslCertificateOrderCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerSslCertificateOrderCtrl', IpLoadBalancerSslCertificateOrderCtrl);",null]}