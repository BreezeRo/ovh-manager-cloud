{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/openstackClient/cloud-project-compute-infrastructure-openstack-client.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/openstackClient/cloud-project-compute-infrastructure-openstack-client.controller.js","mtime":1539717374455},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeInfrastructureOpenstackClientCtrl =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeInfrastructureOpenstackClientCtrl.$inject = [\"$interval\", \"$q\", \"$stateParams\", \"$translate\", \"CloudMessage\", \"CloudProjectComputeInfrastructureOpenstackClientService\", \"ControllerHelper\", \"OvhApiCloudProjectOpenstackClient\", \"OvhApiCloudProjectRegion\"];\n\n  function CloudProjectComputeInfrastructureOpenstackClientCtrl($interval, $q, $stateParams, $translate, CloudMessage, CloudProjectComputeInfrastructureOpenstackClientService, ControllerHelper, OvhApiCloudProjectOpenstackClient, OvhApiCloudProjectRegion) {\n    _classCallCheck(this, CloudProjectComputeInfrastructureOpenstackClientCtrl);\n\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.Service = CloudProjectComputeInfrastructureOpenstackClientService;\n    this.ControllerHelper = ControllerHelper;\n    this.OvhApiCloudProjectOpenstackClient = OvhApiCloudProjectOpenstackClient;\n    this.OvhApiCloudProjectRegion = OvhApiCloudProjectRegion;\n    this.serviceName = this.$stateParams.projectId;\n    this.term = new Terminal();\n    this.messages = [];\n    this.emptyOption = 'emptyOption';\n    this.region = this.emptyOption;\n    this.minimized = sessionStorage.getItem('CloudProjectComputeInfrastructureOpenstackClientCtrl.minimized') !== 'false';\n    this.maximized = sessionStorage.getItem('CloudProjectComputeInfrastructureOpenstackClientCtrl.maximized') === 'true';\n    this.actions = {\n      help: 'openstack help | less',\n      catalog: 'openstack catalog list',\n      server: 'openstack server list',\n      image: 'openstack image list',\n      flavor: 'openstack flavor list',\n      volume: 'openstack volume list',\n      network: 'openstack network list',\n      subnet: 'openstack subnet list',\n      'create server': 'create-server.sh',\n      'bigdata platform': 'bigdata-platform-cli'\n    };\n    this.initLoaders();\n  }\n\n  _createClass(CloudProjectComputeInfrastructureOpenstackClientCtrl, [{\n    key: \"initWithConfig\",\n    value: function initWithConfig(config) {\n      this.actions = _.get(config, 'actions', this.actions);\n      this.region = _.get(config, 'region', this.region);\n\n      var session = _.get(config, 'session');\n\n      if (session) {\n        this.minimized = false;\n        this.maximized = false;\n\n        _.set(this.session, 'data', this.Service.setSession(session, this.term));\n      }\n\n      this.load();\n    }\n  }, {\n    key: \"initAndMaximizeWithConfig\",\n    value: function initAndMaximizeWithConfig(config) {\n      this.OvhApiCloudProjectOpenstackClient.initWithConfig(config);\n      this.OvhApiCloudProjectOpenstackClient.maximize();\n    }\n  }, {\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.session = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.Service.getSession({\n            serviceName: _this.serviceName,\n            term: _this.term\n          });\n        }\n      });\n      this.regions = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.Service.getRegions(_this.serviceName);\n        }\n      });\n    }\n  }, {\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this2 = this;\n\n      this.initWithConfig(this.$stateParams.hTerm);\n      this.CloudMessage.unSubscribe('iaas.pci-project.compute.openstack-console');\n      this.messageHandler = this.CloudMessage.subscribe('iaas.pci-project.compute.openstack-console', {\n        onMessage: function onMessage() {\n          return _this2.refreshMessages();\n        }\n      });\n    }\n  }, {\n    key: \"refreshMessages\",\n    value: function refreshMessages() {\n      this.messages = this.messageHandler.getMessages();\n    }\n  }, {\n    key: \"clickBar\",\n    value: function clickBar() {\n      if (this.minimized) {\n        this.minimized = false;\n        this.load();\n        this.savePrefs();\n      }\n    }\n  }, {\n    key: \"minimize\",\n    value: function minimize($event) {\n      this.minimized = !this.minimized;\n      this.maximized = false;\n      this.savePrefs();\n      $event.stopPropagation();\n    }\n  }, {\n    key: \"maximize\",\n    value: function maximize($event) {\n      this.maximized = !this.maximized;\n      this.minimized = false;\n      this.load();\n      this.savePrefs();\n      $event.stopPropagation();\n    }\n  }, {\n    key: \"$onDestroy\",\n    value: function $onDestroy() {\n      this.Service.close();\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (this.minimized) {\n        return;\n      } // No cache as it's POST\n\n\n      if (!this.session.loading && (this.session.hasErrors || _.isEmpty(this.session.data))) {\n        this.session.load();\n      }\n\n      this.regions.load();\n    }\n  }, {\n    key: \"savePrefs\",\n    value: function savePrefs() {\n      sessionStorage.setItem('CloudProjectComputeInfrastructureOpenstackClientCtrl.minimized', this.minimized);\n      sessionStorage.setItem('CloudProjectComputeInfrastructureOpenstackClientCtrl.maximized', this.maximized);\n    }\n  }]);\n\n  return CloudProjectComputeInfrastructureOpenstackClientCtrl;\n}();\n\nangular.module('managerApp').controller('CloudProjectComputeInfrastructureOpenstackClientCtrl', CloudProjectComputeInfrastructureOpenstackClientCtrl);",null]}