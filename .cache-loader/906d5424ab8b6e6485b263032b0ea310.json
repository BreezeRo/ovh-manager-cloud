{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/home/logs-streams-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/home/logs-streams-home.controller.js","mtime":1539717142151},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsStreamsHomeCtrl {\n  constructor($state, $stateParams, $translate, LogsStreamsService, ControllerHelper, CloudMessage,\n    UrlHelper) {\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.serviceName = this.$stateParams.serviceName;\n    this.LogsStreamsService = LogsStreamsService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.UrlHelper = UrlHelper;\n    this.initLoaders();\n  }\n\n  /**\n   * initializes streams and quota object by making API call to get data\n   *\n   * @memberof LogsStreamsHomeCtrl\n   */\n  initLoaders() {\n    this.quota = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsStreamsService.getQuota(this.serviceName),\n    });\n    this.streams = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsStreamsService.getStreams(this.serviceName),\n    });\n    this.quota.load();\n    this.streams.load();\n  }\n\n  /**\n   * navigates to add stream page\n   *\n   * @memberof LogsStreamsHomeCtrl\n   */\n  add() {\n    this.$state.go('dbaas.logs.detail.streams.add', {\n      serviceName: this.serviceName,\n    });\n  }\n\n  /**\n   * create stream\n   *\n   * @memberof LogsStreamsHomeCtrl\n   */\n  create() {\n    this.LogsStreamsService.createStream(this.serviceName)\n      .then(() => this.initLoaders());\n  }\n\n  /**\n   * navigates to edit stream page\n   *\n   * @param {any} stream\n   * @memberof LogsStreamsHomeCtrl\n   */\n  edit(stream) {\n    this.$state.go('dbaas.logs.detail.streams.edit', {\n      serviceName: this.serviceName,\n      streamId: stream.info.streamId,\n    });\n  }\n\n  /**\n   * show delete stream confirmation modal\n   *\n   * @param {any} stream to delete\n   * @memberof LogsStreamsHomeCtrl\n   */\n  showDeleteConfirm(stream) {\n    this.CloudMessage.flushChildMessage();\n    this.ControllerHelper.modal.showDeleteModal({\n      titleText: this.$translate.instant('logs_stream_delete_title'),\n      textHtml: this.$translate.instant('logs_stream_delete_message', { stream: stream.info.title }),\n    }).then(() => this.remove(stream));\n  }\n\n  /**\n   * delete stream\n   *\n   * @param {any} stream to delete\n   * @memberof LogsStreamsHomeCtrl\n   */\n  remove(stream) {\n    this.delete = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsStreamsService.deleteStream(this.serviceName, stream.info)\n        .then(() => this.initLoaders())\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    this.delete.load();\n  }\n\n  /**\n   * navigates to the alerts page\n   *\n   * @param {any} stream, stream for which alerts should be managed\n   * @memberof LogsStreamsHomeCtrl\n   */\n  manageAlerts(stream) {\n    this.CloudMessage.flushChildMessage();\n    this.$state.go('dbaas.logs.detail.streams.alerts', {\n      serviceName: this.serviceName,\n      streamId: stream.info.streamId,\n    });\n  }\n\n  /**\n   * navigates to the alerts page\n   *\n   * @param {any} stream, stream for which alerts should be managed\n   * @memberof LogsStreamsHomeCtrl\n   */\n  gotoArchives(stream) {\n    this.CloudMessage.flushChildMessage();\n    this.$state.go('dbaas.logs.detail.streams.archives', {\n      serviceName: this.serviceName,\n      streamId: stream.info.streamId,\n    });\n  }\n\n  /**\n   * navigates to follow live stream page\n   *\n   * @param {any} stream, stream to follow live\n   * @memberof LogsStreamsHomeCtrl\n   */\n  followLive(stream) {\n    this.CloudMessage.flushChildMessage();\n    this.$state.go('dbaas.logs.detail.streams.follow', {\n      serviceName: this.serviceName,\n      streamId: stream.info.streamId,\n    });\n  }\n\n  /**\n   * extracts graylog web URL from stream\n   *\n   * @param {any} stream, stream for which URL needs to be extracted\n   * @return {string} graylog url\n   * @memberof LogsStreamsHomeCtrl\n   */\n  getGraylogUrl(stream) {\n    return this.LogsStreamsService.getStreamGraylogUrl(stream);\n  }\n\n  copyToken(stream) {\n    this.LogsStreamsService.copyStreamToken(stream);\n    this.ControllerHelper.scrollPageToTop();\n  }\n}\n\nangular.module('managerApp').controller('LogsStreamsHomeCtrl', LogsStreamsHomeCtrl);\n"]}