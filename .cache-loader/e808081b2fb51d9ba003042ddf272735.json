{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/follow/streams-follow.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/follow/streams-follow.service.js","mtime":1539717142151},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsStreamsFollowService =\n/*#__PURE__*/\nfunction () {\n  LogsStreamsFollowService.$inject = [\"$websocket\", \"$translate\", \"OvhApiDbaas\", \"LogsStreamsService\", \"ControllerHelper\", \"CloudMessage\", \"ServiceHelper\", \"UrlHelper\", \"LogsConstants\"];\n\n  function LogsStreamsFollowService($websocket, $translate, OvhApiDbaas, LogsStreamsService, ControllerHelper, CloudMessage, ServiceHelper, UrlHelper, LogsConstants) {\n    _classCallCheck(this, LogsStreamsFollowService);\n\n    this.$websocket = $websocket;\n    this.$translate = $translate;\n    this.LogsStreamsService = LogsStreamsService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.ServiceHelper = ServiceHelper;\n    this.UrlHelper = UrlHelper;\n    this.LogsAapiService = OvhApiDbaas.Logs().Aapi();\n    this.LogsConstants = LogsConstants;\n    this.testTypeEnum = _.indexBy([this.LogsConstants.GELF, this.LogsConstants.LTSV, this.LogsConstants.RFC5424]);\n    this.webSocket = null;\n    this.messages = [];\n    this.totalMessages = 0;\n    this.connectionClosed = false;\n    this.waitingForMessages = true;\n    this.lastEvent = 0;\n    this.initializeData();\n  }\n\n  _createClass(LogsStreamsFollowService, [{\n    key: \"initializeData\",\n    value: function initializeData() {\n      this.alertTypeLabelMap = {\n        0: {\n          label: 'logs_streams_follow_emergency',\n          type: 'error'\n        },\n        1: {\n          label: 'logs_streams_follow_alert',\n          type: 'error'\n        },\n        2: {\n          label: 'logs_streams_follow_critical',\n          type: 'error'\n        },\n        3: {\n          label: 'logs_streams_follow_error',\n          type: 'warning'\n        },\n        4: {\n          label: 'logs_streams_follow_warning',\n          type: 'warning'\n        },\n        5: {\n          label: 'logs_streams_follow_notice',\n          type: 'primary'\n        },\n        6: {\n          label: 'logs_streams_follow_info',\n          type: 'info'\n        },\n        7: {\n          label: 'logs_streams_follow_debug',\n          type: 'default'\n        }\n      };\n    }\n    /**\n     * Makes API call to get LTSV, GELF and RFC client configures URL's\n     * Show error on UI if failed to get data from API\n     * @param {string} serviceName\n     */\n\n  }, {\n    key: \"getTestClientUrls\",\n    value: function getTestClientUrls(serviceName) {\n      return this.LogsAapiService.home({\n        serviceName: serviceName\n      }).$promise.catch(this.ServiceHelper.errorHandler('logs_streams_get_command_urls_error'));\n    }\n    /**\n     * Copies websocket URL for a given stream into clipboard.\n     * Shows exception message on UI if failed to copy to clipboard.\n     * @param {object} stream\n     */\n\n  }, {\n    key: \"copyWebSocketAddress\",\n    value: function copyWebSocketAddress(stream) {\n      var url = this.UrlHelper.constructor.findUrl(stream, this.LogsConstants.WEB_SOCKET_URL);\n\n      if (!url) {\n        this.CloudMessage.error(this.$translate.instant('logs_streams_follow_get_websocket_error', {\n          stream: stream.info.title\n        }));\n      } else {\n        var error = this.ControllerHelper.constructor.copyToClipboard(url);\n\n        if (error) {\n          this.CloudMessage.error(this.$translate.instant('logs_streams_follow_copy_websocket_error', {\n            stream: stream.info.title,\n            url: url\n          }));\n        } else {\n          this.CloudMessage.info(this.$translate.instant('logs_streams_follow_copy_websocket_success'));\n        }\n      }\n    }\n  }, {\n    key: \"getTotalMessages\",\n    value: function getTotalMessages() {\n      return this.totalMessages;\n    }\n  }, {\n    key: \"getLastEvent\",\n    value: function getLastEvent() {\n      return this.lastEvent;\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages() {\n      return this.messages;\n    }\n  }, {\n    key: \"getAlertType\",\n    value: function getAlertType(level) {\n      return this.alertTypeLabelMap[level] ? this.alertTypeLabelMap[level].type : '';\n    }\n  }, {\n    key: \"getAlertLabel\",\n    value: function getAlertLabel(level) {\n      return this.alertTypeLabelMap[level] ? this.alertTypeLabelMap[level].label : '';\n    }\n  }, {\n    key: \"isConnectionClosed\",\n    value: function isConnectionClosed() {\n      return this.connectionClosed;\n    }\n  }, {\n    key: \"isWaitingForMessages\",\n    value: function isWaitingForMessages() {\n      return this.waitingForMessages;\n    }\n    /**\n     * Close websocket connection\n     */\n\n  }, {\n    key: \"closeConnection\",\n    value: function closeConnection() {\n      this.webSocket.close();\n    }\n    /**\n     * Open websocket connection to given stream\n     * @param {object} stream\n     */\n\n  }, {\n    key: \"openConnection\",\n    value: function openConnection(stream) {\n      this.waitingForMessages = true;\n      this.connectionClosed = false;\n      this.messages = [];\n      this.totalMessages = 0;\n      this.connectToWebSocket(stream);\n    }\n    /**\n     * Copies GELF client command line to clipboard. Shows status message on UI.\n     * Shows error if copy failed, success otherwise.\n     * @param {Object} stream\n     * @param {string} gelfUrl\n     */\n\n  }, {\n    key: \"copyRFCCommandLine\",\n    value: function copyRFCCommandLine(stream, rfc5424Url) {\n      var token = this.LogsStreamsService.getStreamToken(stream);\n\n      if (token) {\n        var now = new Date();\n        var dateFormatted = now.toISOString();\n        var command = \"echo -e '<6>1 \".concat(dateFormatted, \" 149.202.165.20 example.org - - [exampleSDID@8485 user_id=\\\"9001\\\"  some_info=\\\"foo\\\" some_metric_num=\\\"42.0\\\" X-OVH-TOKEN=\\\"\").concat(token, \"\\\"] A short RFC 5424 message that helps you identify what is going on'\\\\n | openssl s_client -quiet -no_ign_eof  -connect \").concat(rfc5424Url);\n        var error = this.ControllerHelper.constructor.copyToClipboard(command);\n        this.handleCommandCopyStatus(error, stream, command, this.testTypeEnum.RFC5424);\n      }\n    }\n    /**\n       * Copies GELF client command line to clipboard. Shows status message on UI.\n       * Shows error if copy failed, success otherwise.\n       * @param {Object} stream\n       * @param {string} gelfUrl\n       */\n\n  }, {\n    key: \"copyLTSVCommandLine\",\n    value: function copyLTSVCommandLine(stream, ltsvUrl) {\n      var token = this.LogsStreamsService.getStreamToken(stream);\n\n      if (token) {\n        var now = new Date();\n        var dateFormatted = now.toISOString();\n        var command = \"echo -e 'X-OVH-TOKEN:\".concat(token, \"\\\\thost:example.org\\\\ttime:\").concat(dateFormatted, \"\\\\tmessage:A short LTSV message that helps you identify what is going on\\\\tfull_message:Backtrace here more stuff\\\\tlevel:1\\\\tuser_id:9001\\\\tsome_info:foo\\\\tsome_metric_num:42.0\\\\0' | openssl s_client -quiet -no_ign_eof  -connect \").concat(ltsvUrl);\n        var error = this.ControllerHelper.constructor.copyToClipboard(command);\n        this.handleCommandCopyStatus(error, stream, command, this.testTypeEnum.LTSV);\n      }\n    }\n    /**\n       * Copies GELF client command line to clipboard. Shows status message on UI.\n       * Shows error if copy failed, success otherwise.\n       * @param {Object} stream\n       * @param {string} gelfUrl\n       */\n\n  }, {\n    key: \"copyGELCommandLine\",\n    value: function copyGELCommandLine(stream, gelfUrl) {\n      var token = this.LogsStreamsService.getStreamToken(stream);\n\n      if (token) {\n        var now = new Date();\n        var timestamp = Math.round(now.getTime() / 1000);\n        var command = \"echo -e '{\\\"version\\\":\\\"1.1\\\", \\\"host\\\": \\\"example.org\\\", \\\"short_message\\\": \\\"A short GELF message that helps you identify what is going on\\\", \\\"full_message\\\": \\\"Backtrace here more stuff\\\", \\\"timestamp\\\": \".concat(timestamp, \", \\\"level\\\": 1, \\\"_user_id\\\": 9001, \\\"_some_info\\\": \\\"foo\\\", \\\"some_metric_num\\\": 42.0, \\\"_X-OVH-TOKEN\\\":\\\"\").concat(token, \"\\\"}\\\\0' | openssl s_client -quiet -no_ign_eof  -connect \").concat(gelfUrl);\n        var error = this.ControllerHelper.constructor.copyToClipboard(command);\n        this.handleCommandCopyStatus(error, stream, command, this.testTypeEnum.GELF);\n      }\n    }\n  }, {\n    key: \"handleCommandCopyStatus\",\n    value: function handleCommandCopyStatus(error, stream, command, type) {\n      if (error) {\n        this.CloudMessage.error(this.$translate.instant('logs_streams_follow_copy_command_error', {\n          stream: stream.info.title,\n          command: command,\n          type: type\n        }));\n      } else {\n        this.CloudMessage.info(this.$translate.instant('logs_streams_follow_copy_command_success', {\n          type: type\n        }));\n      }\n    }\n    /**\n       * opens websocket connection and connects to given stream URL\n       * @param {object} stream\n       */\n\n  }, {\n    key: \"connectToWebSocket\",\n    value: function connectToWebSocket(stream) {\n      var _this = this;\n\n      var url = this.UrlHelper.constructor.findUrl(stream, this.LogsConstants.WEB_SOCKET_URL);\n\n      if (url) {\n        this.webSocket = this.$websocket(url);\n        var response;\n        var message;\n        var date = new Date();\n        this.lastEvent = date.getTime();\n        this.webSocket.onMessage(function (event) {\n          _this.waitingForMessages = false;\n          _this.totalMessages += 1;\n\n          try {\n            response = JSON.parse(event.data);\n            message = JSON.parse(response.message);\n          } catch (err) {\n            response = {\n              username: 'anonymous',\n              message: event.data\n            };\n            message = {};\n\n            _this.ServiceHelper.errorHandler(err);\n          }\n\n          _this.messages.unshift({\n            type: _this.getAlertType(message.level),\n            label: _this.getAlertLabel(message.level),\n            code: message.level,\n            timestamp: message.timestamp * 1000,\n            content: response.message\n          });\n\n          _this.lastEvent = message.timestamp * 1000;\n\n          if (_this.messages.length > 20) {\n            _this.messages.pop();\n          }\n\n          if (_this.totalMessages === _this.LogsConstants.MESSAGE_THRESHOLD) {\n            _this.closeConnection();\n          }\n        });\n        this.webSocket.onError(function (err) {\n          _this.CloudMessage.error(_this.$translate.instant('logs_streams_follow_connection_error', {\n            message: err\n          }));\n        });\n        this.webSocket.onClose(function () {\n          _this.connectionClosed = true;\n          _this.waitingForMessages = false;\n        });\n        this.webSocket.onOpen(function () {\n          _this.connectionClosed = false;\n          _this.waitingForMessages = true;\n          _this.messages = [];\n          _this.totalMessages = 0;\n        });\n      } else {\n        this.CloudMessage.error(this.$translate.instant('logs_streams_follow_get_websocket_error', {\n          stream: stream.info.title\n        }));\n      }\n    }\n  }]);\n\n  return LogsStreamsFollowService;\n}();\n\nangular.module('managerApp').service('LogsStreamsFollowService', LogsStreamsFollowService);",null]}