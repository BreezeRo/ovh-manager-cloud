{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/upgrade/vps-upgrade.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/upgrade/vps-upgrade.controller.js","mtime":1539717142304},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VpsUpgradeCtrl {\n  constructor($filter, $stateParams, $state, $translate, $q, $window, CloudMessage, CloudNavigation,\n    ControllerHelper, VpsService) {\n    this.$filter = $filter;\n    this.$translate = $translate;\n    this.$q = $q;\n    this.$window = $window;\n    this.CloudMessage = CloudMessage;\n    this.CloudNavigation = CloudNavigation;\n    this.ControllerHelper = ControllerHelper;\n    this.serviceName = $stateParams.serviceName;\n    this.Vps = VpsService;\n\n    this.loaders = {\n      step1: false,\n      step2: false,\n    };\n\n    this.completed = {\n      step1: false,\n      step2: false,\n    };\n    this.order = null;\n    this.selectedModel = {};\n    this.upgradesList = null;\n  }\n\n  $onInit() {\n    this.previousState = this.CloudNavigation.getPreviousState();\n  }\n\n  getCurrentModel() {\n    return _.find(this.upgradesList, upgrade => upgrade.isCurrentModel === true);\n  }\n\n  validateStep1() {\n    if (this.selectedModel.model === this.getCurrentModel().model) {\n      const title = this.$translate.instant('vps_warning_title');\n      const message = this.$translate.instant('vps_configuration_upgradevps_step1_warning');\n\n      this.ControllerHelper.modal.showWarningModal({ title, message });\n      throw new Error(message);\n    } else {\n      this.completed.step1 = true;\n    }\n  }\n\n  loadUpgradesList() {\n    if (!this.upgradesList) {\n      this.loaders.step1 = true;\n      return this.Vps.upgradesList(this.serviceName).then((data) => {\n        this.upgradesList = data.results;\n        this.selectedModel.model = this.getCurrentModel().model;\n        return data;\n      }).catch((err) => {\n        this.$q.reject(err);\n        if (err.message) {\n          this.CloudMessage.error(err.message);\n        } else {\n          this.CloudMessage.error(this.$translate.instant('vps_configuration_upgradevps_fail'));\n        }\n        this.previousState.go();\n      }).finally(() => {\n        this.loaders.step1 = false;\n      });\n    }\n    return this.$q.when();\n  }\n\n  initVpsConditions() {\n    this.conditionsAgree = false;\n    this.loaders.step2 = true;\n    this.order = null;\n    const modelToUpgradeTo = _.find(this.upgradesList, e => e.model === _.first(this.selectedModel.model.split(':')) && e.name === this.selectedModel.model.split(':')[1]);\n\n    if (_.isEmpty(modelToUpgradeTo)) {\n      return this.$q.when(true);\n    }\n\n    this.selectedModelForUpgrade = modelToUpgradeTo;\n\n    return this.Vps\n      .upgrade(\n        this.serviceName,\n        this.selectedModelForUpgrade.model,\n        this.selectedModelForUpgrade.duration.duration,\n      )\n      .then((data) => {\n        this.conditionsAgree = false;\n        this.selectedModelForUpgrade.duration.dateFormatted = this.$filter('date')(this.selectedModelForUpgrade.duration.date, 'dd/MM/yyyy');\n        this.order = data;\n        return data;\n      })\n      .catch((err) => {\n        this.$q.reject(err);\n        if (err.message) {\n          this.CloudMessage.error(err.message);\n        } else {\n          this.CloudMessage.error(this.$translate.instant('vps_configuration_upgradevps_fail'));\n        }\n      })\n      .finally(() => {\n        this.loaders.step2 = false;\n      });\n  }\n\n  cancel() {\n    this.previousState.go();\n  }\n\n  confirm() {\n    this.displayBC();\n  }\n\n  displayBC() {\n    this.$window.open(\n      this.order.url,\n      '_blank',\n    );\n  }\n}\n\nangular.module('managerApp').controller('VpsUpgradeCtrl', VpsUpgradeCtrl);\n"]}