{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/vps-task.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/vps-task.service.js","mtime":1539717142308},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VpsTaskService {\n  constructor($http, $q, $rootScope, $translate, CloudMessage, OvhPoll) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.OvhPoll = OvhPoll;\n\n    this.COMPLETED_TASK_PROGRESS = 100;\n  }\n\n  initPoller(serviceName, containerName) {\n    this.getPendingTasks(serviceName)\n      .then(tasks => this.startTaskPolling(serviceName, containerName, tasks));\n  }\n\n  getPendingTasks(serviceName, type) {\n    return this.$http.get(['/sws/vps', serviceName, 'tasks/uncompleted'].join('/'), {\n      serviceType: 'aapi',\n      params: {\n        type,\n      },\n    })\n      .then(data => data.data)\n      .catch(error => this.$q.reject(error.data));\n  }\n\n  getTask(serviceName, taskId) {\n    return this.$http.get(['/vps', serviceName, 'tasks', taskId].join('/'))\n      .then(data => data.data)\n      .catch(error => this.$q.reject(error.data))\n      .finally(() => this.$rootScope.$broadcast('tasks.pending', serviceName));\n  }\n\n  startTaskPolling(serviceName, containerName, tasks) {\n    this.stopTaskPolling();\n\n    this.poller = this.OvhPoll.pollArray({\n      items: tasks,\n      pollFunction: task => this.getTask(serviceName, task.id),\n      stopCondition: task => _.includes(['done', 'error'], task.state),\n      onItemUpdated: task => this.manageMessage(containerName, task),\n      onItemDone: () => this.manageSuccess(serviceName, containerName),\n    });\n  }\n\n  stopTaskPolling() {\n    if (this.poller) {\n      this.poller.kill();\n    }\n  }\n\n  manageSuccess(serviceName, containerName) {\n    this.flushMessages(containerName);\n    this.$rootScope.$broadcast('tasks.success', serviceName);\n    this.CloudMessage.success(this.$translate.instant('vps_dashboard_task_finish'));\n  }\n\n  manageMessage(containerName, task) {\n    this.flushMessages(containerName, task);\n    if (task.progress !== this.COMPLETED_TASK_PROGRESS) {\n      this.createMessage(containerName, task);\n    }\n  }\n\n  createMessage(containerName, task) {\n    this.CloudMessage.warning({\n      id: task.id,\n      class: 'task',\n      title: this.messageType(task.type),\n      textHtml: this.template(task.type, task.progress),\n      progress: task.progress,\n    }, containerName);\n  }\n\n  flushMessages(containerName, task) {\n    _.forEach(this.CloudMessage.getMessages(containerName), (message) => {\n      if (message.class === 'task') {\n        _.set(message, 'dismissed', true);\n      }\n      if (task && task.id === message.id) {\n        _.set(message, 'dismissed', true);\n      }\n    });\n  }\n\n  template(type, progress) {\n    return `${this.messageType(type)} (${progress}%)`;\n  }\n\n  messageType(type) {\n    return this.$translate.instant(`vps_dashboard_task_${type}`);\n  }\n}\n\nangular.module('managerApp').service('VpsTaskService', VpsTaskService);\n"]}