{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplb-zone-add.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplb-zone-add.service.js","mtime":1539717142229},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerZoneAddService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerZoneAddService.$inject = [\"$q\", \"$translate\", \"$window\", \"CloudMessage\", \"OrderHelperService\", \"OvhApiIpLoadBalancing\", \"RegionService\", \"ServiceHelper\"];\n\n  function IpLoadBalancerZoneAddService($q, $translate, $window, CloudMessage, OrderHelperService, OvhApiIpLoadBalancing, RegionService, ServiceHelper) {\n    _classCallCheck(this, IpLoadBalancerZoneAddService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.CloudMessage = CloudMessage;\n    this.OrderHelperService = OrderHelperService;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  _createClass(IpLoadBalancerZoneAddService, [{\n    key: \"getOrderableZones\",\n    value: function getOrderableZones(serviceName) {\n      var _this = this;\n\n      return this.$q.all({\n        orderableZones: this.OvhApiIpLoadBalancing.v6().get({\n          serviceName: serviceName\n        }).$promise.then(function (response) {\n          return response.orderableZone;\n        }),\n        suspendedZones: this.getSuspendedZones(serviceName)\n      }).then(function (response) {\n        var availableZones = response.orderableZones.concat(response.suspendedZones);\n        return _.map(availableZones, function (zone) {\n          return _.extend(zone, _this.RegionService.getRegion(zone.name));\n        });\n      }).then(function (availableZones) {\n        return _.map(availableZones, function (zone) {\n          return _.extend(zone, {\n            selectable: {\n              value: true,\n              reason: zone.state === 'released' ? _this.$translate.instant('iplb_zone_add_available_released') : ''\n            }\n          });\n        });\n      }).catch(this.ServiceHelper.errorHandler('iplb_zone_add_loading_error'));\n    }\n  }, {\n    key: \"addZones\",\n    value: function addZones(serviceName, zones) {\n      var _this2 = this;\n\n      if (zones.length === 0) {\n        return this.ServiceHelper.errorHandler('iplb_zone_add_selection_error')({});\n      }\n\n      return this.$q.all({\n        created: this.createZones(serviceName, _.filter(zones, function (zone) {\n          return zone.state !== 'released';\n        })),\n        activated: this.activateZones(serviceName, _.filter(zones, function (zone) {\n          return zone.state === 'released';\n        }))\n      }).then(function (response) {\n        if (response.created.quantity > 0) {\n          _this2.$window.open(response.created.url, '_blank');\n\n          return _this2.ServiceHelper.successHandler({\n            text: _this2.$translate.instant(zones.length > 1 ? 'iplb_zone_add_plural_success' : 'iplb_zone_add_single_success'),\n            link: {\n              text: _this2.$translate.instant('common_complete_order'),\n              value: response.created.url\n            }\n          })(response);\n        }\n\n        if (response.activated.quantity > 0) {\n          return _this2.ServiceHelper.successHandler({\n            text: _this2.$translate.instant(zones.length > 1 ? 'iplb_zone_activate_plural_success' : 'iplb_zone_activate_single_success')\n          })(response);\n        }\n\n        return _this2.$q.reject();\n      });\n    }\n  }, {\n    key: \"createZones\",\n    value: function createZones(serviceName, zones) {\n      var _this3 = this;\n\n      var emptyResponse = this.$q.when({\n        quantity: 0\n      });\n\n      if (!zones.length) {\n        return emptyResponse;\n      }\n\n      return this.OrderHelperService.getExpressOrderUrl(_.map(zones, function (zone) {\n        return {\n          productId: 'ipLoadbalancing',\n          serviceName: serviceName,\n          planCode: zone.planCode\n        };\n      })).then(function (response) {\n        return {\n          quantity: zones.length,\n          url: response\n        };\n      }).catch(function (response) {\n        _this3.ServiceHelper.errorHandler(zones.length > 1 ? 'iplb_zone_add_plural_error' : 'iplb_zone_add_single_error')(response);\n\n        return emptyResponse;\n      });\n    }\n  }, {\n    key: \"activateZones\",\n    value: function activateZones(serviceName, zones) {\n      var _this4 = this;\n\n      var emptyResponse = this.$q.when({\n        quantity: 0\n      });\n\n      if (!zones.length) {\n        return emptyResponse;\n      }\n\n      var promises = _.map(zones, function (zone) {\n        return _this4.OvhApiIpLoadBalancing.Zone().v6().cancelDelete({\n          serviceName: serviceName,\n          name: zone.name\n        }, {}).$promise;\n      });\n\n      return this.$q.all(promises).then(function () {\n        return {\n          quantity: zones.length\n        };\n      }).catch(function (response) {\n        _this4.ServiceHelper.errorHandler(zones.length > 1 ? 'iplb_zone_add_plural_error' : 'iplb_zone_add_single_error')(response);\n\n        return emptyResponse;\n      });\n    }\n  }, {\n    key: \"getSuspendedZones\",\n    value: function getSuspendedZones(serviceName) {\n      var _this5 = this;\n\n      return this.OvhApiIpLoadBalancing.Zone().v6().query({\n        serviceName: serviceName\n      }).$promise.then(function (zoneIds) {\n        var promises = _.map(zoneIds, function (zoneId) {\n          return _this5.OvhApiIpLoadBalancing.Zone().v6().get({\n            serviceName: serviceName,\n            name: zoneId\n          }).$promise;\n        });\n\n        return _this5.$q.all(promises);\n      }).then(function (zones) {\n        return _.filter(zones, function (zone) {\n          return zone.state === 'released';\n        });\n      });\n    }\n  }]);\n\n  return IpLoadBalancerZoneAddService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerZoneAddService', IpLoadBalancerZoneAddService);",null]}