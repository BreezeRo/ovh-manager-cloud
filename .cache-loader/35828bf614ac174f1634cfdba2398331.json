{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/navbar/navbar-notification.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/navbar/navbar-notification.service.js","mtime":1539717142406},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NavbarNotificationService =\n/*#__PURE__*/\nfunction () {\n  NavbarNotificationService.$inject = [\"$interval\", \"$q\", \"$translate\", \"CloudMessage\", \"OvhApiNotificationAapi\", \"TARGET\", \"UNIVERSE\"];\n\n  function NavbarNotificationService($interval, $q, $translate, CloudMessage, OvhApiNotificationAapi, TARGET, UNIVERSE) {\n    _classCallCheck(this, NavbarNotificationService);\n\n    this.$interval = $interval;\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.OvhApiNotificationAapi = OvhApiNotificationAapi;\n    this.TARGET = TARGET;\n    this.UNIVERSE = UNIVERSE;\n    this.NOTIFICATION_REFRESH_TIME = 60000;\n  }\n\n  _createClass(NavbarNotificationService, [{\n    key: \"getMessages\",\n    value: function getMessages() {\n      var _this = this;\n\n      return this.$translate.refresh().then(function () {\n        return _this.OvhApiNotificationAapi.query({\n          lang: _this.$translate.preferredLanguage(),\n          target: _this.TARGET,\n          universe: _this.UNIVERSE\n        }).$promise.catch(function (error) {\n          _this.CloudMessage.error({\n            textHtml: error.message\n          }, 'index');\n\n          throw error;\n        });\n      });\n    }\n  }, {\n    key: \"getSubLinks\",\n    value: function getSubLinks() {\n      var _this2 = this;\n\n      return this.getMessages().then(function (messages) {\n        return messages.map(function (message) {\n          return _this2.convertSubLink(message);\n        });\n      }).catch(function () {\n        return undefined;\n      });\n    }\n  }, {\n    key: \"toggleSublinkAction\",\n    value: function toggleSublinkAction(toUpdate, linkClicked) {\n      if (toUpdate.isActive && !toUpdate.updating) {\n        _.set(toUpdate, 'updating', true);\n\n        this.OvhApiNotificationAapi.post({\n          completed: [toUpdate.id]\n        }).$promise.then(function () {\n          _.set(toUpdate, 'isActive', false);\n\n          _.set(toUpdate, 'acknowledged', true);\n        }).finally(function () {\n          _.set(toUpdate, 'updating', false);\n        });\n      } else if (!toUpdate.isActive && !toUpdate.updating && !linkClicked) {\n        _.set(toUpdate, 'updating', true);\n\n        this.OvhApiNotificationAapi.post({\n          acknowledged: [toUpdate.id]\n        }).$promise.then(function () {\n          _.set(toUpdate, 'isActive', true);\n\n          _.set(toUpdate, 'acknowledged', true);\n        }).finally(function () {\n          _.set(toUpdate, 'updating', false);\n        });\n      }\n    }\n  }, {\n    key: \"convertSubLink\",\n    value: function convertSubLink(notification) {\n      var _this3 = this;\n\n      _.set(notification, 'time', this.constructor.formatTime(notification.date));\n\n      _.set(notification, 'url', notification.urlDetails.href);\n\n      _.set(notification, 'isActive', _.contains(['acknowledged', 'delivered'], notification.status));\n\n      _.set(notification, 'acknowledged', _.contains(['acknowledged', 'completed', 'unknown'], notification.status));\n\n      _.set(notification, 'actionClicked', function (toUpdate) {\n        return _this3.toggleSublinkAction(toUpdate);\n      });\n\n      _.set(notification, 'linkClicked', function (toUpdate) {\n        return _this3.toggleSublinkAction(toUpdate, true);\n      });\n\n      return notification;\n    }\n  }, {\n    key: \"aknowledgeAll\",\n    value: function aknowledgeAll() {\n      if (this.navbarContent) {\n        var toAcknowledge = this.navbarContent.subLinks.filter(function (subLink) {\n          return !subLink.acknowledged && subLink.isActive;\n        });\n\n        if (toAcknowledge.length) {\n          this.OvhApiNotificationAapi.post({\n            acknowledged: toAcknowledge.map(function (x) {\n              return x.id;\n            })\n          }).$promise.then(function () {\n            toAcknowledge.forEach(function (sublink) {\n              _.set(sublink, 'acknowledged', true);\n            });\n          });\n        }\n      }\n    }\n  }, {\n    key: \"setRefreshTime\",\n    value: function setRefreshTime(sublinks) {\n      var _this4 = this;\n\n      if (this.formatTimeTask) {\n        this.$interval.cancel(this.formatTimeTask);\n      }\n\n      this.formatTimeTask = this.$interval(function () {\n        sublinks.forEach(function (notification) {\n          _.set(notification, 'time', _this4.constructor.formatTime(notification.date));\n        });\n      }, this.NOTIFICATION_REFRESH_TIME);\n    }\n  }, {\n    key: \"getNavbarContent\",\n    value: function getNavbarContent() {\n      var _this5 = this;\n\n      return this.getSubLinks().then(function (sublinks) {\n        _this5.setRefreshTime(sublinks);\n\n        var navbarContent = {\n          name: 'notifications',\n          title: _this5.$translate.instant('common_navbar_notification_title'),\n          iconClass: 'icon-notifications',\n          limitTo: 10,\n          onClick: function onClick() {\n            return _this5.aknowledgeAll();\n          },\n          subLinks: sublinks,\n          show: true\n        };\n        _this5.navbarContent = navbarContent;\n        return navbarContent;\n      });\n    }\n  }], [{\n    key: \"formatTime\",\n    value: function formatTime(dateTime) {\n      return moment(dateTime).fromNow();\n    }\n  }]);\n\n  return NavbarNotificationService;\n}();\n\nangular.module('managerApp').service('NavbarNotificationService', NavbarNotificationService);",null]}