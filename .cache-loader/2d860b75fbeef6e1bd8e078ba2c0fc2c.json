{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home.controller.js","mtime":1539717142201},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerHomeCtrl {\n  constructor($state, $stateParams, $translate, ControllerHelper, CloudMessage,\n    FeatureAvailabilityService, IpLoadBalancerActionService, IpLoadBalancerConstant,\n    IpLoadBalancerHomeService, IpLoadBalancerHomeStatusService, IpLoadBalancerMetricsService,\n    IpLoadBalancerZoneAddService, IpLoadBalancerZoneDeleteService,\n    IpLoadBalancerVrackHelper, IpLoadBalancerVrackService, REDIRECT_URLS, RegionService,\n    VrackService) {\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.FeatureAvailabilityService = FeatureAvailabilityService;\n    this.IpLoadBalancerActionService = IpLoadBalancerActionService;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerHomeService = IpLoadBalancerHomeService;\n    this.IpLoadBalancerHomeStatusService = IpLoadBalancerHomeStatusService;\n    this.IpLoadBalancerMetricsService = IpLoadBalancerMetricsService;\n    this.IpLoadBalancerZoneAddService = IpLoadBalancerZoneAddService;\n    this.IpLoadBalancerZoneDeleteService = IpLoadBalancerZoneDeleteService;\n    this.IpLoadBalancerVrackHelper = IpLoadBalancerVrackHelper;\n    this.IpLoadBalancerVrackService = IpLoadBalancerVrackService;\n    this.REDIRECT_URLS = REDIRECT_URLS;\n    this.RegionService = RegionService;\n    this.VrackService = VrackService;\n\n    this.serviceName = this.$stateParams.serviceName;\n\n    this.initLoaders();\n  }\n\n  $onInit() {\n    this.configuration.load();\n    this.vrackCreationRules.load();\n\n    this.information.load();\n    this.subscription.load();\n\n    this.iplbStatus.load();\n    this.usage.load();\n\n    this.orderableZones.load();\n    this.deletableZones.load();\n\n    this.initActions();\n    this.initGraph();\n\n    this.serviceActions = {\n      text: this.$translate.instant('iplb_status_apply'),\n      callback: () => this.$state.go('network.iplb.detail.configuration'),\n      isAvailable: () => true,\n    };\n\n    this.frontendsActions = {\n      text: this.$translate.instant('iplb_status_details'),\n      callback: () => this.$state.go('network.iplb.detail.frontends'),\n      isAvailable: () => true,\n    };\n\n    this.farmsActions = {\n      text: this.$translate.instant('iplb_status_details'),\n      callback: () => this.$state.go('network.iplb.detail.server-farm'),\n      isAvailable: () => true,\n    };\n  }\n\n  initLoaders() {\n    this.information = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerHomeService.getInformations(this.serviceName),\n    });\n\n    this.configuration = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerHomeService.getConfiguration(this.serviceName),\n      successHandler: () => this.getRegionsGroup(this.configuration.data.zone),\n    });\n\n    this.vrackCreationRules = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerVrackService\n        .getNetworkCreationRules(this.serviceName),\n    });\n\n    this.subscription = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerHomeService.getSubscription(this.serviceName),\n    });\n\n    this.iplbStatus = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerHomeStatusService\n        .getIPLBStatus(this.serviceName, { toArray: true }),\n    });\n\n    this.usage = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerHomeService.getUsage(this.serviceName),\n    });\n\n    this.orderableZones = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerZoneAddService.getOrderableZones(this.serviceName),\n    });\n\n    this.deletableZones = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerZoneDeleteService\n        .getDeletableZones(this.serviceName),\n    });\n  }\n\n  initActions() {\n    this.actions = {\n      showFailoverIp: {\n        callback: () => this.IpLoadBalancerActionService.showFailoverIpDetail(this.serviceName),\n      },\n      showNatIp: {\n        callback: () => this.IpLoadBalancerActionService.showNatIpDetail(this.serviceName),\n      },\n      changeName: {\n        text: this.$translate.instant('common_edit'),\n        callback: () => this.ControllerHelper.modal.showNameChangeModal({\n          serviceName: this.serviceName,\n          displayName: this.configuration.data.displayName,\n          onSave: newDisplayName => this.IpLoadBalancerHomeService\n            .updateName(this.serviceName, newDisplayName)\n            .then(() => this.configuration.load()),\n        }),\n        isAvailable: () => !this.configuration.loading && !this.configuration.hasErrors,\n      },\n      changeCipher: {\n        text: this.$translate.instant('common_edit'),\n        callback: () => this.IpLoadBalancerActionService\n          .cipherChange(this.serviceName, () => this.configuration.load()),\n        isAvailable: () => !this.configuration.loading && !this.configuration.hasErrors,\n      },\n      activateVrack: {\n        text: this.$translate.instant('common_activate'),\n        callback: () => this.VrackService.selectVrack()\n          .then(result => this.IpLoadBalancerVrackHelper.associateVrack(\n            this.serviceName,\n            result.serviceName,\n            this.vrackCreationRules.data,\n          )),\n        isAvailable: () => !this.vrackCreationRules.loading\n          && !this.vrackCreationRules.hasErrors\n          && this.vrackCreationRules.data.vrackEligibility\n          && this.vrackCreationRules.data.status === 'inactive',\n      },\n      deActivateVrack: {\n        text: this.$translate.instant('common_deactivate'),\n        callback: () => this.VrackService.unlinkVrackModal()\n          .then(() => this.IpLoadBalancerVrackHelper.deAssociateVrack(\n            this.serviceName,\n            this.vrackCreationRules.data,\n          )),\n        isAvailable: () => !this.vrackCreationRules.loading && !this.vrackCreationRules.hasErrors && this.vrackCreationRules.data.status === 'active',\n      },\n      changeOffer: {\n        // TODO: Implementation of modal for changing offer\n        text: this.$translate.instant('common_edit'),\n        isAvailable: () => false,\n      },\n      manageAutorenew: {\n        text: this.$translate.instant('common_manage'),\n        href: this.ControllerHelper.navigation.getUrl('renew', { serviceName: this.serviceName, serviceType: 'IP_LOADBALANCER' }),\n        isAvailable: () => !this.subscription.loading && !this.subscription.hasErrors,\n      },\n      manageContact: {\n        text: this.$translate.instant('common_manage'),\n        href: this.ControllerHelper.navigation.getUrl('contacts', { serviceName: this.serviceName }),\n        isAvailable: () => this.FeatureAvailabilityService.hasFeature('CONTACTS', 'manage') && !this.subscription.loading && !this.subscription.hasErrors,\n      },\n      addZone: {\n        text: this.$translate.instant('common_add'),\n        callback: () => this.$state.go('network.iplb.detail.zone.add', { serviceName: this.serviceName }),\n        isAvailable: () => !this.orderableZones.loading && this.orderableZones.data.length > 0,\n      },\n      deleteZone: {\n        text: this.$translate.instant('common_delete'),\n        callback: () => this.$state.go('network.iplb.detail.zone.delete', { serviceName: this.serviceName }),\n        isAvailable: () => !this.deletableZones.loading\n          && _.filter(\n            this.deletableZones.data,\n            zone => zone.selectable.value !== false,\n          ).length - 1 >= 1,\n      },\n    };\n  }\n\n  updateQuotaAlert(quota) {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/iplb/home/updateQuota/iplb-update-quota.html',\n        controller: 'IpLoadBalancerUpdateQuotaCtrl',\n        controllerAs: 'IpLoadBalancerUpdateQuotaCtrl',\n        resolve: {\n          quota: () => quota,\n        },\n      },\n    }).then(() => {\n      this.usage.load();\n    });\n  }\n\n  initGraph() {\n    this.metricsList = this.IpLoadBalancerConstant.graphs;\n    this.metric = _.first(this.metricsList);\n    this.options = {\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false,\n          },\n        }],\n        yAxes: [{\n          id: 'y-axis-1',\n          type: 'linear',\n          ticks: {\n            min: 0,\n            minStep: 1,\n            beginAtZero: true,\n          },\n        }],\n      },\n      elements: {\n        line: {\n          fill: false,\n          borderColor: '#3DD1F0',\n          borderWidth: 4,\n        },\n        point: {\n          radius: 0,\n        },\n      },\n    };\n    this.loadGraph();\n  }\n\n  loadGraph() {\n    const downsampleAggregation = this.metric === 'conn' ? 'sum' : 'max';\n    this.loadingGraph = true;\n    this.IpLoadBalancerMetricsService.getData(this.metric, '40m-ago', null, {\n      // http://opentsdb.net/docs/build/html/user_guide/query/downsampling.html\n      downsample: `5m-${downsampleAggregation}`,\n    })\n      .then((data) => {\n        if (data.length && data[0].dps) {\n          this.data = _.values(data[0].dps);\n          this.labels = [];\n          this.data.forEach((value, index) => {\n            this.labels.unshift(`${index * 5}m`);\n          });\n        }\n      })\n      .finally(() => {\n        this.loadingGraph = false;\n      });\n  }\n\n  getGraphTitle(metric) {\n    return this.$translate.instant(`iplb_graph_name_${metric}`);\n  }\n\n  getRegionsGroup(regions) {\n    this.regionsGroup = [];\n    if (regions) {\n      this.detailedRegions = !_.isArray(regions)\n        ? [this.RegionService.getRegion(regions)]\n        : _.map(regions, region => this.RegionService.getRegion(region));\n    }\n\n    this.regionsGroup = _.groupBy(this.detailedRegions, 'country');\n  }\n\n  hasMultipleRegions() {\n    return _(this.detailedRegions).isArray() && this.detailedRegions.length > 1;\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerHomeCtrl', IpLoadBalancerHomeCtrl);\n"]}