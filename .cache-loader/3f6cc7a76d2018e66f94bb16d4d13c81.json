{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/logs-inputs.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/logs-inputs.service.js","mtime":1539717142091},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsInputsService =\n/*#__PURE__*/\nfunction () {\n  LogsInputsService.$inject = [\"$q\", \"CloudMessage\", \"CloudPoll\", \"LogsHelperService\", \"LogsConstants\", \"LogsOptionsService\", \"OvhApiDbaas\", \"ServiceHelper\"];\n\n  function LogsInputsService($q, CloudMessage, CloudPoll, LogsHelperService, LogsConstants, LogsOptionsService, OvhApiDbaas, ServiceHelper) {\n    _classCallCheck(this, LogsInputsService);\n\n    this.$q = $q;\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.CloudMessage = CloudMessage;\n    this.CloudPoll = CloudPoll;\n    this.InputsApiAapiService = OvhApiDbaas.Logs().Input().Aapi();\n    this.InputsApiLexiService = OvhApiDbaas.Logs().Input().v6();\n    this.LogsConstants = LogsConstants;\n    this.LogsOptionsService = LogsOptionsService;\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.ServiceHelper = ServiceHelper;\n    this.LogsHelperService = LogsHelperService;\n    this.initializeData();\n  }\n\n  _createClass(LogsInputsService, [{\n    key: \"initializeData\",\n    value: function initializeData() {\n      this.flowggerLogFormats = [{\n        value: 'GELF',\n        name: 'inputs_logs_configure_format_gelf'\n      }, {\n        value: 'RFC5424',\n        name: 'inputs_logs_configure_format_rfc'\n      }, {\n        value: 'LTSV',\n        name: 'inputs_logs_configure_format_ltsv'\n      }, {\n        value: 'CAPNP',\n        name: 'inputs_logs_configure_format_cap_proto'\n      }];\n      this.delimiters = [{\n        value: 'LINE',\n        name: 'inputs_logs_configure_delimiter_line'\n      }, {\n        value: 'NUL',\n        name: 'inputs_logs_configure_delimiter_nul'\n      }, {\n        value: 'SYSLEN',\n        name: 'inputs_logs_configure_delimiter_syslen'\n      }, {\n        value: 'CAPNP',\n        name: 'inputs_logs_configure_format_cap_proto'\n      }];\n      this.logstashLogFormats = [{\n        value: 'Syslog',\n        name: 'inputs_logs_configure_format_syslog'\n      }, {\n        value: 'Apache',\n        name: 'inputs_logs_configure_format_apache'\n      }, {\n        value: 'HAProxy',\n        name: 'inputs_logs_configure_format_ha_proxy'\n      }, {\n        value: 'MySQL Slow Queries',\n        name: 'inputs_logs_configure_format_my_sql'\n      }, {\n        value: 'Twitter',\n        name: 'inputs_logs_configure_format_twitter'\n      }, {\n        value: 'Nginx',\n        name: 'inputs_logs_configure_format_nginx'\n      }];\n    }\n  }, {\n    key: \"getFlowggerLogFormats\",\n    value: function getFlowggerLogFormats() {\n      return this.flowggerLogFormats;\n    }\n  }, {\n    key: \"getLogstashLogFormats\",\n    value: function getLogstashLogFormats() {\n      return this.logstashLogFormats;\n    }\n  }, {\n    key: \"getDelimiters\",\n    value: function getDelimiters() {\n      return this.delimiters;\n    }\n    /**\n     * add input\n     *\n     * @param {any} serviceName\n     * @param {any} input, input object to be added\n     * @returns promise which will resolve with the operation object\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"addInput\",\n    value: function addInput(serviceName, input) {\n      var _this = this;\n\n      return this.InputsApiLexiService.create({\n        serviceName: serviceName\n      }, this.constructor.transformInputToSave(input)).$promise.then(function (operation) {\n        _this.resetAllCache();\n\n        return _this.LogsHelperService.handleOperation(serviceName, operation.data);\n      }).catch(function (err) {\n        return _this.LogsHelperService.handleError('logs_inputs_add_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n    /**\n     * delete input\n     *\n     * @param {any} serviceName\n     * @param {any} input, input object to be deleted\n     * @returns promise which will resolve with the operation object\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"deleteInput\",\n    value: function deleteInput(serviceName, input) {\n      var _this2 = this;\n\n      return this.InputsApiLexiService.delete({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }).$promise.then(function (operation) {\n        _this2.resetAllCache();\n\n        return _this2.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_inputs_delete_success', {\n          inputTitle: input.info.title\n        });\n      }).catch(function (err) {\n        return _this2.LogsHelperService.handleError('logs_inputs_delete_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n    /**\n     * returns array of Input IDs of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of input IDs\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getDetails\",\n    value: function getDetails(serviceName) {\n      var _this3 = this;\n\n      return this.DetailsAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (details) {\n        return _this3.constructor.transformDetails(details);\n      }).catch(function (err) {\n        return _this3.LogsHelperService.handleError('logs_inputs_details_get_error', err, {});\n      });\n    }\n    /**\n     * returns array of Input IDs of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of input IDs\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getAllInputs\",\n    value: function getAllInputs(serviceName) {\n      return this.InputsApiLexiService.query({\n        serviceName: serviceName\n      }).$promise;\n    }\n    /**\n     * returns details of an input\n     *\n     * @param {any} serviceName\n     * @param {any} inputId\n     * @returns promise which will be resolve to an input object\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getInput\",\n    value: function getInput(serviceName, inputId) {\n      var _this4 = this;\n\n      return this.InputsApiAapiService.get({\n        serviceName: serviceName,\n        inputId: inputId\n      }).$promise.catch(function (err) {\n        return _this4.LogsHelperService.handleError('logs_inputs_get_error', err, {});\n      });\n    }\n    /**\n     * returns details of an input and transforms it\n     *\n     * @param {any} serviceName\n     * @param {any} inputId\n     * @returns promise which will be resolve to an input object\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getInputDetail\",\n    value: function getInputDetail(serviceName, inputId) {\n      var _this5 = this;\n\n      return this.getInput(serviceName, inputId).then(function (input) {\n        return _this5.transformInput(input);\n      });\n    }\n    /**\n     * gets a temporary url to retrive the input logs\n     *\n     * @param {any} serviceName\n     * @param {any} inputId\n     * @returns promise which will resolve with the temporary url\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getInputLogUrl\",\n    value: function getInputLogUrl(serviceName, inputId) {\n      var _this6 = this;\n\n      return this.InputsApiLexiService.logurl({\n        serviceName: serviceName,\n        inputId: inputId\n      }).$promise.catch(function (err) {\n        return _this6.LogsHelperService.handleError('logs_inputs_logurl_error', err, {});\n      });\n    }\n    /**\n     * gets details of all inputs\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to an array of inputs\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getInputs\",\n    value: function getInputs(serviceName) {\n      var _this7 = this;\n\n      return this.getAllInputs(serviceName).then(function (inputIds) {\n        var promises = inputIds.map(function (inputId) {\n          return _this7.getInputDetail(serviceName, inputId);\n        });\n        return _this7.$q.all(promises);\n      });\n    }\n  }, {\n    key: \"getMainOffer\",\n    value: function getMainOffer(serviceName) {\n      var _this8 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        return {\n          max: me.offer.maxNbInput,\n          current: me.offer.curNbInput\n        };\n      }).catch(function (err) {\n        return _this8.LogsHelperService.handleError('logs_inputs_main_offer_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getNewInput\",\n    value: function getNewInput() {\n      return {\n        data: {\n          info: {\n            exposedPort: this.LogsConstants.INPUT_DEFAULT_PORT\n          }\n        },\n        loading: false\n      };\n    }\n    /**\n     * returns the object containing total number of inputs and total number of inputs used\n     *\n     * @param {any} serviceName\n     * @returns quota object containing total number inputs and configured number of inputs\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getQuota\",\n    value: function getQuota(serviceName) {\n      var _this9 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        var quota = {\n          max: me.total.maxNbInput,\n          configured: me.total.curNbInput,\n          currentUsage: me.total.curNbInput * 100 / me.total.maxNbInput\n        };\n        return quota;\n      }).catch(function (err) {\n        return _this9.LogsHelperService.handleError('logs_inputs_quota_get_error', err, {});\n      });\n    }\n    /**\n     * returns the subscribed options\n     *\n     * @param {any} serviceName\n     * @returns array of options\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getSubscribedOptions\",\n    value: function getSubscribedOptions(serviceName) {\n      return this.LogsOptionsService.getSubscribedOptionsByType(serviceName, this.LogsConstants.INPUT_OPTION_REFERENCE);\n    }\n    /**\n     * restart an input\n     *\n     * @param {any} serviceName\n     * @param {any} inputId\n     * @returns promise which will resolve with the operation object\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"restartInput\",\n    value: function restartInput(serviceName, input) {\n      var _this10 = this;\n\n      return this.InputsApiLexiService.restart({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }).$promise.then(function (operation) {\n        _this10.resetAllCache();\n\n        return _this10.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_inputs_restart_success', {\n          inputTitle: input.info.title\n        });\n      }).catch(function (err) {\n        _this10.resetAllCache();\n\n        return _this10.LogsHelperService.handleError('logs_inputs_restart_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n    /**\n     * start an input\n     *\n     * @param {any} serviceName\n     * @param {any} inputId\n     * @returns promise which will resolve with the operation object\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"startInput\",\n    value: function startInput(serviceName, input) {\n      var _this11 = this;\n\n      return this.InputsApiLexiService.start({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }).$promise.then(function (operation) {\n        _this11.resetAllCache();\n\n        return _this11.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_inputs_start_success', {\n          inputTitle: input.info.title\n        });\n      }).catch(function (err) {\n        _this11.resetAllCache();\n\n        return _this11.LogsHelperService.handleError('logs_inputs_start_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n    /**\n     * stop an input\n     *\n     * @param {any} serviceName\n     * @param {any} inputId\n     * @returns promise which will resolve with the operation object\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"stopInput\",\n    value: function stopInput(serviceName, input) {\n      var _this12 = this;\n\n      return this.InputsApiLexiService.end({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }).$promise.then(function (operation) {\n        _this12.resetAllCache();\n\n        return _this12.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_inputs_stop_success', {\n          inputTitle: input.info.title\n        });\n      }).catch(function (err) {\n        _this12.resetAllCache();\n\n        return _this12.LogsHelperService.handleError('logs_inputs_stop_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n    /**\n     * transforms the input by adding some additional information\n     *\n     * @param {any} input\n     * @returns the transformed input\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"transformInput\",\n    value: function transformInput(input) {\n      _.set(input, 'info.engine.software', [input.info.engine.name, input.info.engine.version].join(' '));\n\n      _.set(input, 'info.exposedPort', parseInt(input.info.exposedPort, 10));\n\n      _.set(input, 'actionsMap', input.actions.reduce(function (actions, action) {\n        actions[action.type] = action.isAllowed; // eslint-disable-line\n\n        return actions;\n      }, {}));\n\n      var isProcessing = input.info.status === this.LogsConstants.inputStatus.PROCESSING;\n      var isToBeConfigured = input.info.status === this.LogsConstants.inputStatus.INIT && !input.actionsMap.START;\n      var isPending = (input.info.status === this.LogsConstants.inputStatus.INIT || input.info.status === this.LogsConstants.inputStatus.PENDING) && input.actionsMap.START;\n      var isRunning = input.info.status === this.LogsConstants.inputStatus.RUNNING;\n      /* eslint-disable no-nested-ternary */\n\n      _.set(input, 'info.state', isProcessing ? this.LogsConstants.inputState.PROCESSING : input.info.isRestartRequired ? this.LogsConstants.inputState.RESTART_REQUIRED : isToBeConfigured ? this.LogsConstants.inputState.TO_CONFIGURE : isPending ? this.LogsConstants.inputState.PENDING : isRunning ? this.LogsConstants.inputState.RUNNING : this.LogsConstants.inputState.UNKNOWN);\n      /* eslint-disable no-nested-ternary */\n\n\n      _.set(input, 'info.stateType', this.LogsConstants.inputStateType[input.info.state]);\n\n      return input;\n    }\n  }, {\n    key: \"addNetwork\",\n    value: function addNetwork(serviceName, input, network) {\n      var _this13 = this;\n\n      return this.InputsApiLexiService.trustNetwork({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }, network).$promise.then(function (operation) {\n        _this13.InputsApiAapiService.resetAllCache();\n\n        return _this13.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this13.LogsHelperService.handleError('logs_inputs_network_add_error', err, {\n          network: network.network,\n          inputTitle: input.info.title\n        });\n      });\n    }\n  }, {\n    key: \"executeTest\",\n    value: function executeTest(serviceName, input) {\n      var _this14 = this;\n\n      return this.InputsApiLexiService.test({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }).$promise.then(function (operation) {\n        return _this14.LogsHelperService.handleOperation(serviceName, operation);\n      }).then(function () {\n        return _this14.getTestResults(serviceName, input);\n      }).catch(function (err) {\n        return _this14.LogsHelperService.handleError('logs_inputs_test_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n  }, {\n    key: \"removeNetwork\",\n    value: function removeNetwork(serviceName, input, network) {\n      var _this15 = this;\n\n      return this.InputsApiLexiService.rejectNetwork({\n        serviceName: serviceName,\n        inputId: input.info.inputId,\n        allowedNetworkId: network.allowedNetworkId\n      }).$promise.then(function (operation) {\n        _this15.InputsApiAapiService.resetAllCache();\n\n        return _this15.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this15.LogsHelperService.handleError('logs_inputs_network_remove_error', err, {\n          network: network.network,\n          inputTitle: input.info.title\n        });\n      });\n    }\n  }, {\n    key: \"updateFlowgger\",\n    value: function updateFlowgger(serviceName, input, flowgger) {\n      var _this16 = this;\n\n      return this.InputsApiLexiService.updateFlowgger({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }, flowgger).$promise.then(function (operation) {\n        _this16.InputsApiAapiService.resetAllCache();\n\n        return _this16.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this16.LogsHelperService.handleError('logs_inputs_flowgger_update_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n  }, {\n    key: \"updateLogstash\",\n    value: function updateLogstash(serviceName, input, logstash) {\n      var _this17 = this;\n\n      return this.InputsApiLexiService.updateLogstash({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }, logstash).$promise.then(function (operation) {\n        _this17.InputsApiAapiService.resetAllCache();\n\n        return _this17.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this17.LogsHelperService.handleError('logs_inputs_logstash_update_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n    /**\n     * update input\n     *\n     * @param {any} serviceName\n     * @param {any} input, input object to be updated\n     * @returns promise which will resolve with the operation object\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"updateInput\",\n    value: function updateInput(serviceName, input) {\n      var _this18 = this;\n\n      return this.InputsApiLexiService.update({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }, this.constructor.transformInputToSave(input)).$promise.then(function (operation) {\n        _this18.resetAllCache();\n\n        return _this18.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this18.LogsHelperService.handleError('logs_inputs_update_error', err, {\n          inputTitle: input.info.title\n        });\n      });\n    }\n  }, {\n    key: \"getTestResults\",\n    value: function getTestResults(serviceName, input) {\n      return this.InputsApiLexiService.testResult({\n        serviceName: serviceName,\n        inputId: input.info.inputId\n      }).$promise;\n    }\n    /**\n     * Resets the cache of all APIs used\n     *\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.InputsApiAapiService.resetAllCache();\n      this.InputsApiLexiService.resetAllCache();\n      this.AccountingAapiService.resetAllCache();\n    }\n  }], [{\n    key: \"transformDetails\",\n    value: function transformDetails(details) {\n      details.engines.forEach(function (engine) {\n        if (!engine.isDeprecated) {\n          _.set(engine, 'name', engine.name.charAt(0).toUpperCase() + engine.name.toLowerCase().slice(1));\n        }\n      });\n      return details;\n    }\n  }, {\n    key: \"transformInputToSave\",\n    value: function transformInputToSave(input) {\n      return {\n        title: input.info.title,\n        description: input.info.description,\n        engineId: input.info.engineId,\n        optionId: input.info.optionId ? input.info.optionId : undefined,\n        streamId: input.info.streamId,\n        singleInstanceEnabled: input.info.singleInstanceEnabled,\n        exposedPort: input.info.exposedPort.toString()\n      };\n    }\n  }]);\n\n  return LogsInputsService;\n}();\n\nangular.module('managerApp').service('LogsInputsService', LogsInputsService);",null]}