{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/add/edit/logs-inputs-add-edit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/add/edit/logs-inputs-add-edit.controller.js","mtime":1539717142087},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsInputsAddEditCtrl =\n/*#__PURE__*/\nfunction () {\n  LogsInputsAddEditCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"CloudMessage\", \"ControllerHelper\", \"LogsConstants\", \"LogsInputsService\", \"LogsStreamsService\"];\n\n  function LogsInputsAddEditCtrl($q, $state, $stateParams, CloudMessage, ControllerHelper, LogsConstants, LogsInputsService, LogsStreamsService) {\n    _classCallCheck(this, LogsInputsAddEditCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.inputId = this.$stateParams.inputId;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsInputsService = LogsInputsService;\n    this.LogsStreamsService = LogsStreamsService;\n    this.editMode = Boolean(this.inputId);\n    this.availableEngines = [];\n    this.initLoaders();\n  }\n\n  _createClass(LogsInputsAddEditCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      if (this.editMode) {\n        this.input.load();\n      } else {\n        this.input = this.LogsInputsService.getNewInput();\n      }\n\n      this.details.load().then(function (details) {\n        _this.availableEngines = details.engines.reduce(function (enginesList, engine) {\n          if (!engine.isDeprecated) {\n            enginesList.push(engine);\n          }\n\n          return enginesList;\n        }, []);\n      });\n      this.streams.load();\n      this.options.load();\n      this.mainOffer.load();\n    }\n    /**\n     * initializes the input log url\n     *\n     * @memberof LogsInputsAddEditCtrl\n     */\n\n  }, {\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this2 = this;\n\n      if (this.editMode) {\n        this.input = this.ControllerHelper.request.getHashLoader({\n          loaderFunction: function loaderFunction() {\n            return _this2.LogsInputsService.getInput(_this2.serviceName, _this2.inputId).then(function (input) {\n              return _this2.LogsInputsService.transformInput(input);\n            });\n          }\n        });\n      }\n\n      this.details = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.LogsInputsService.getDetails(_this2.serviceName);\n        }\n      });\n      this.streams = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.LogsStreamsService.getStreams(_this2.serviceName);\n        }\n      });\n      this.options = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.LogsInputsService.getSubscribedOptions(_this2.serviceName);\n        }\n      });\n      this.mainOffer = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.LogsInputsService.getMainOffer(_this2.serviceName);\n        }\n      });\n    }\n  }, {\n    key: \"addEditInput\",\n    value: function addEditInput() {\n      var _this3 = this;\n\n      if (this.form.$invalid) {\n        return this.$q.reject();\n      }\n\n      if (!this.form.$dirty) {\n        return this.gotToNextStep(this.inputId);\n      }\n\n      this.CloudMessage.flushChildMessage();\n      this.inputAddEdit = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this3.editMode ? _this3.LogsInputsService.updateInput(_this3.serviceName, _this3.input.data) : _this3.LogsInputsService.addInput(_this3.serviceName, _this3.input.data);\n        }\n      });\n      return this.inputAddEdit.load().then(function (successData) {\n        _this3.gotToNextStep(_this3.inputId || successData[0].item.inputId);\n      }).catch(function () {\n        return _this3.ControllerHelper.scrollPageToTop();\n      });\n    }\n  }, {\n    key: \"gotToNextStep\",\n    value: function gotToNextStep(inputId) {\n      this.$state.go('dbaas.logs.detail.inputs.editwizard.configure', {\n        serviceName: this.serviceName,\n        inputId: inputId\n      });\n      return this.$q.resolve();\n    }\n  }]);\n\n  return LogsInputsAddEditCtrl;\n}();\n\nangular.module('managerApp').controller('LogsInputsAddEditCtrl', LogsInputsAddEditCtrl);",null]}