{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/aliases/logs-aliases.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/aliases/logs-aliases.service.js","mtime":1539717142078},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsAliasesService =\n/*#__PURE__*/\nfunction () {\n  LogsAliasesService.$inject = [\"$q\", \"$translate\", \"OvhApiDbaas\", \"ServiceHelper\", \"CloudPoll\", \"LogsHelperService\", \"LogsOptionsService\", \"LogsConstants\", \"UrlHelper\", \"CloudMessage\", \"LogsStreamsService\", \"LogsIndexService\"];\n\n  function LogsAliasesService($q, $translate, OvhApiDbaas, ServiceHelper, CloudPoll, LogsHelperService, LogsOptionsService, LogsConstants, UrlHelper, CloudMessage, LogsStreamsService, LogsIndexService) {\n    _classCallCheck(this, LogsAliasesService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.ServiceHelper = ServiceHelper;\n    this.AliasApiService = OvhApiDbaas.Logs().Alias().v6();\n    this.AliasAapiService = OvhApiDbaas.Logs().Alias().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.CloudPoll = CloudPoll;\n    this.LogsHelperService = LogsHelperService;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsConstants = LogsConstants;\n    this.UrlHelper = UrlHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsStreamsService = LogsStreamsService;\n    this.LogsIndexService = LogsIndexService;\n    this.contentTypeEnum = _.indexBy(['STREAMS', 'INDICES']);\n    this.contents = [{\n      value: this.contentTypeEnum.STREAMS,\n      name: 'logs_streams_title'\n    }, {\n      value: this.contentTypeEnum.INDICES,\n      name: 'logs_index_title'\n    }];\n  }\n\n  _createClass(LogsAliasesService, [{\n    key: \"getContents\",\n    value: function getContents() {\n      return this.contents;\n    }\n    /**\n     * returns array of aliases with details\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of aliases.\n     *          Each alias will have all details populated.\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"getAliases\",\n    value: function getAliases(serviceName) {\n      var _this = this;\n\n      return this.getAliasesDetails(serviceName).catch(function (err) {\n        return _this.LogsHelperService.handleError('logs_aliases_get_error', err, {});\n      });\n    }\n    /**\n     * returns array of owned aliases with details of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of aliases.\n     *          Each stream will have all details populated.\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getOwnAliases\",\n    value: function getOwnAliases(serviceName) {\n      var _this2 = this;\n\n      return this.getAliasesDetails(serviceName).then(function (aliases) {\n        return aliases.filter(function (alias) {\n          return alias.info.isEditable;\n        });\n      }).catch(function (err) {\n        return _this2.LogsHelperService.handleError('logs_aliases_get_error', err, {});\n      });\n    }\n    /**\n     * returns array of shareable aliases with details of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of aliases.\n     *          Each stream will have all details populated.\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getShareableAliases\",\n    value: function getShareableAliases(serviceName) {\n      var _this3 = this;\n\n      return this.getAliasesDetails(serviceName).then(function (aliases) {\n        return aliases.filter(function (alias) {\n          return alias.info.isShareable;\n        });\n      }).catch(function (err) {\n        return _this3.LogsHelperService.handleError('logs_aliases_get_error', err, {});\n      });\n    }\n    /**\n     * gets details for each alias in array\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to an array of alias objects\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"getAliasesDetails\",\n    value: function getAliasesDetails(serviceName) {\n      var _this4 = this;\n\n      return this.getAliasesIds(serviceName).then(function (aliases) {\n        var promises = aliases.map(function (aliasId) {\n          return _this4.getAapiAlias(serviceName, aliasId);\n        });\n        return _this4.$q.all(promises);\n      });\n    }\n    /**\n     * returns array of aliases id's of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of aliases id's\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"getAliasesIds\",\n    value: function getAliasesIds(serviceName) {\n      return this.AliasApiService.query({\n        serviceName: serviceName\n      }).$promise;\n    }\n    /**\n     * returns details of an alias\n     *\n     * @param {any} serviceName\n     * @param {any} aliasId\n     * @returns promise which will be resolve to alias object\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"getAlias\",\n    value: function getAlias(serviceName, aliasId) {\n      var _this5 = this;\n\n      return this.AliasApiService.get({\n        serviceName: serviceName,\n        aliasId: aliasId\n      }).$promise.catch(function (err) {\n        return _this5.LogsHelperService.handleError('logs_alias_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getAliasWithStreamsAndIndices\",\n    value: function getAliasWithStreamsAndIndices(serviceName, aliasId) {\n      var _this6 = this;\n\n      return this.AliasAapiService.get({\n        serviceName: serviceName,\n        aliasId: aliasId\n      }).$promise.then(function (alias) {\n        if (alias.streams.length > 0) {\n          var promises = alias.streams.map(function (streamId) {\n            return _this6.LogsStreamsService.getAapiStream(serviceName, streamId);\n          });\n          return _this6.$q.all(promises).then(function (streams) {\n            _.set(alias, 'streams', streams);\n\n            return alias;\n          });\n        }\n\n        if (alias.indexes.length > 0) {\n          var _promises = alias.indexes.map(function (indexId) {\n            return _this6.LogsIndexService.getIndexDetails(serviceName, indexId);\n          });\n\n          return _this6.$q.all(_promises).then(function (indices) {\n            _.set(alias, 'indexes', indices);\n\n            return alias;\n          });\n        }\n\n        return alias;\n      }).catch(function (err) {\n        return _this6.LogsHelperService.handleError('logs_alias_get_error', err, {});\n      });\n    }\n    /**\n     * returns details of an alias\n     *\n     * @param {any} serviceName\n     * @param {any} aliasId\n     * @returns promise which will be resolve to alias object\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"getAapiAlias\",\n    value: function getAapiAlias(serviceName, aliasId) {\n      var _this7 = this;\n\n      return this.AliasAapiService.get({\n        serviceName: serviceName,\n        aliasId: aliasId\n      }).$promise.catch(function (err) {\n        return _this7.LogsHelperService.handleError('logs_alias_get_error', err, {});\n      });\n    }\n    /**\n     * returns objecy containing total number of aliases and total number of aliases used\n     *\n     * @param {any} serviceName\n     * @returns quota object containing max (total number aliases)\n     *          and configured (number of aliases used)\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"getQuota\",\n    value: function getQuota(serviceName) {\n      var _this8 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        return {\n          max: me.total.maxNbAlias,\n          configured: me.total.curNbAlias\n        };\n      }).catch(function (err) {\n        return _this8.LogsHelperService.handleError('logs_alias_quota_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getMainOffer\",\n    value: function getMainOffer(serviceName) {\n      var _this9 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        return {\n          max: me.offer.maxNbAlias,\n          current: me.offer.curNbAlias\n        };\n      }).catch(function (err) {\n        return _this9.LogsHelperService.handleError('logs_main_offer_get_error', err, {});\n      });\n    }\n    /**\n     * delete alias\n     *\n     * @param {any} serviceName\n     * @param {any} alias, alias object to be deleted\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"deleteAlias\",\n    value: function deleteAlias(serviceName, alias) {\n      var _this10 = this;\n\n      return this.AliasApiService.delete({\n        serviceName: serviceName,\n        aliasId: alias.aliasId\n      }, alias).$promise.then(function (operation) {\n        _this10.resetAllCache();\n\n        return _this10.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_aliases_delete_success', {\n          aliasName: alias.name\n        });\n      }).catch(function (err) {\n        return _this10.LogsHelperService.handleError('logs_aliases_delete_error', err, {\n          aliasName: alias.name\n        });\n      });\n    }\n    /**\n     * create new alias\n     *\n     * @param {any} serviceName\n     * @param {any} alias, alias object to be created\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"createAlias\",\n    value: function createAlias(serviceName, alias) {\n      var _this11 = this;\n\n      return this.AliasApiService.create({\n        serviceName: serviceName\n      }, alias).$promise.then(function (operation) {\n        _this11.resetAllCache();\n\n        return _this11.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_aliases_create_success', {\n          aliasName: alias.suffix\n        });\n      }).catch(function (err) {\n        return _this11.LogsHelperService.handleError('logs_aliases_create_error', err, {\n          streamName: alias.suffix\n        });\n      });\n    }\n    /**\n     * update alias\n     *\n     * @param {any} serviceName\n     * @param {any} alias, alias object to be updated\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"updateAlias\",\n    value: function updateAlias(serviceName, alias) {\n      var _this12 = this;\n\n      return this.AliasApiService.update({\n        serviceName: serviceName,\n        aliasId: alias.aliasId\n      }, alias).$promise.then(function (operation) {\n        _this12.resetAllCache();\n\n        return _this12.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_aliases_update_success', {\n          aliasName: alias.name\n        });\n      }).catch(function (err) {\n        return _this12.LogsHelperService.handleError('logs_aliases_update_error', err, {\n          aliasName: alias.name\n        });\n      });\n    }\n  }, {\n    key: \"attachStream\",\n    value: function attachStream(serviceName, alias, stream) {\n      var _this13 = this;\n\n      return this.AliasApiService.linkStream({\n        serviceName: serviceName,\n        aliasId: alias.aliasId\n      }, stream).$promise.then(function (operation) {\n        return _this13.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this13.LogsHelperService.handleError('logs_aliases_attach_stream_error', err, {\n          streamName: stream.title\n        });\n      });\n    }\n  }, {\n    key: \"detachStream\",\n    value: function detachStream(serviceName, alias, stream) {\n      var _this14 = this;\n\n      return this.AliasApiService.unlinkStream({\n        serviceName: serviceName,\n        aliasId: alias.aliasId,\n        streamId: stream.streamId\n      }).$promise.then(function (operation) {\n        return _this14.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this14.LogsHelperService.handleError('logs_aliases_detach_stream_error', err, {\n          streamName: stream.title\n        });\n      });\n    }\n  }, {\n    key: \"attachIndex\",\n    value: function attachIndex(serviceName, alias, index) {\n      var _this15 = this;\n\n      return this.AliasApiService.linkIndex({\n        serviceName: serviceName,\n        aliasId: alias.aliasId\n      }, index).$promise.then(function (operation) {\n        return _this15.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this15.LogsHelperService.handleError('logs_aliases_attach_index_error', err, {\n          indexName: index.name\n        });\n      });\n    }\n  }, {\n    key: \"detachIndex\",\n    value: function detachIndex(serviceName, alias, index) {\n      var _this16 = this;\n\n      return this.AliasApiService.unlinkIndex({\n        serviceName: serviceName,\n        aliasId: alias.aliasId,\n        indexId: index.indexId\n      }).$promise.then(function (operation) {\n        return _this16.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this16.LogsHelperService.handleError('logs_aliases_detach_index_error', err, {\n          indexName: index.name\n        });\n      });\n    }\n    /**\n     * creates new alias with default values\n     *\n     * @returns alias object with default values\n     * @memberof LogsAliasesService\n     */\n\n  }, {\n    key: \"getSubscribedOptions\",\n    value: function getSubscribedOptions(serviceName) {\n      return this.LogsOptionsService.getSubscribedOptionsByType(serviceName, this.LogsConstants.ALIAS_OPTION_REFERENCE);\n    }\n  }, {\n    key: \"getElasticSearchUrl\",\n    value: function getElasticSearchUrl(alias) {\n      var url = this.UrlHelper.constructor.findUrl(alias, this.LogsConstants.ELASTICSEARCH_API_URL);\n\n      if (!url) {\n        this.CloudMessage.error(this.$translate.instant('logs_aliases_get_elasticsearch_url_error', {\n          alias: alias.info.name\n        }));\n      }\n\n      return url;\n    }\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.AccountingAapiService.resetAllCache();\n    }\n  }], [{\n    key: \"getNewAlias\",\n    value: function getNewAlias() {\n      return {\n        data: {\n          description: null,\n          suffix: null\n        },\n        loading: false\n      };\n    }\n  }]);\n\n  return LogsAliasesService;\n}();\n\nangular.module('managerApp').service('LogsAliasesService', LogsAliasesService);",null]}