{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/services/container.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/services/container.service.js","mtime":1539717142051},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').service('CloudStorageContainer', ['$cacheFactory', '$http', '$q', 'OvhApiCloudProjectStorage', 'CloudStorageContainersConfiguration', 'CLOUD_PCA_FILE_STATE', function ($cacheFactory, $http, $q, OvhApiCloudProjectStorage, storageContainerConfig, CLOUD_PCA_FILE_STATE) {\n  var self = this; // Openstack headers\n\n  var xStoragePolicy = 'x-storage-policy';\n  var xContainerRead = 'x-container-read';\n  var xContainerMetaWebListings = 'x-container-meta-web-listings';\n  var xContainerReadPublicValue = '.r:*,.rlistings'; // Cache management\n\n  var accessCache = storageContainerConfig.accessCache;\n\n  function getAccessAndToken(projectId) {\n    var cacheValue = accessCache.get(projectId);\n    var getAccessAndTokenPromise = cacheValue ? $q.resolve(cacheValue) : OvhApiCloudProjectStorage.v6().access({\n      projectId: projectId\n    }, {}).$promise;\n    return getAccessAndTokenPromise.then(function (accessResult) {\n      if (!cacheValue) {\n        accessCache.put(projectId, accessResult);\n      }\n\n      self.token = accessResult.token;\n      self.endpoints = accessResult.endpoints.reduce(function (resultParam, endpoint) {\n        var result = resultParam;\n        result[endpoint.region.toLowerCase()] = endpoint.url;\n        return result;\n      }, {});\n      return accessResult;\n    });\n  }\n\n  function ensureAccess(projectId) {\n    return getAccessAndToken(projectId);\n  } // Improvement:\n  // Avoid listing all containers to get metadata.\n\n\n  function getContainerMeta(projectId, containerId) {\n    var containerMeta = storageContainerConfig.containerMetaCache.get(projectId, containerId);\n    return containerMeta ? $q.resolve(containerMeta) : self.list(projectId, containerId).then(function () {\n      return storageContainerConfig.containerMetaCache.get(projectId, containerId);\n    });\n  }\n\n  function getContainerUrl(baseUrl, containerName, file) {\n    var urlTpl = \"\".concat(baseUrl, \"/{container}\");\n    var url;\n\n    if (file) {\n      urlTpl += '/{file}';\n      url = URI.expand(urlTpl, {\n        container: containerName,\n        file: file\n      }).toString();\n    } else {\n      url = URI.expand(urlTpl, {\n        container: containerName\n      }).toString();\n    }\n\n    return url;\n  }\n\n  function requestContainer(baseUrl, containerName, optsParam) {\n    var opts = optsParam || {};\n    var url = getContainerUrl(baseUrl, containerName, opts.file);\n    delete opts.file; // eslint-disable-line\n\n    return $http(angular.merge({\n      method: 'GET',\n      url: url,\n      headers: {\n        'X-Auth-Token': self.token\n      }\n    }, opts));\n  }\n  /**\n   * Get meta data of this container.\n   * @param  {string} projectId     project id\n   * @param  {string} containerId   container id\n   * @return {Promise<Object>}      container metadata\n   */\n\n\n  self.getMetaData = function (projectId, containerId) {\n    return ensureAccess(projectId).then(function () {\n      return getContainerMeta(projectId, containerId);\n    }).then(function (containerMeta) {\n      return requestContainer(self.endpoints[containerMeta.region.toLowerCase()], containerMeta.name, {\n        method: 'HEAD'\n      });\n    }).then(function (data) {\n      return _.pick(data.headers(), function (value, key) {\n        return /^(X-Container|X-Storage)/i.test(key);\n      });\n    }).then(function (data) {\n      // Guess storage type\n      if (data[xStoragePolicy] === 'PCS') {\n        if (data[xContainerMetaWebListings]) {\n          _.set(data, 'shortcut', 'swift_cname');\n        } else if (data[xContainerRead] === xContainerReadPublicValue) {\n          _.set(data, 'shortcut', 'swift_public');\n        } else {\n          _.set(data, 'shortcut', 'swift_private');\n        }\n      } else {\n        _.set(data, 'shortcut', 'pca');\n      }\n\n      return data;\n    });\n  };\n  /**\n   * List container objects.\n   * @param  {string} projectId     project id\n   * @param  {string} containerId   container id\n   * @return {Promise<Object>}      object containing the list of objects\n   */\n\n\n  self.list = function (projectId, containerId) {\n    return OvhApiCloudProjectStorage.v6().get({\n      projectId: projectId,\n      containerId: containerId\n    }).$promise.then(function (containerData) {\n      storageContainerConfig.containerMetaCache.set(projectId, containerId, _.pick(containerData, ['name', 'region']));\n      return containerData;\n    });\n  };\n  /* eslint-disable no-shadow */\n\n\n  function upload(url, config) {\n    var deferred = $q.defer();\n    var xhr = new XMLHttpRequest();\n\n    var uploadProgress = function uploadProgress(e) {\n      var res;\n\n      if (e.lengthComputable) {\n        res = Math.round(e.loaded * 100 / e.total);\n      } else {\n        res = undefined;\n      }\n\n      if (typeof deferred.notify === 'function') {\n        deferred.notify(res);\n      }\n    };\n\n    var uploadComplete = function uploadComplete(e) {\n      var xhr = e.srcElement || e.target;\n\n      if (xhr.status >= 200 && xhr.status < 300) {\n        // successful upload\n        deferred.resolve(xhr);\n      } else {\n        deferred.reject(xhr);\n      }\n    };\n\n    var uploadFailed = function uploadFailed(e) {\n      var xhr = e.srcElement || e.target;\n      deferred.reject(xhr);\n    };\n\n    var uploadCanceled = function uploadCanceled(e) {\n      var xhr = e.srcElement || e.target;\n      deferred.reject(xhr);\n    };\n\n    xhr.upload.addEventListener('progress', uploadProgress, false);\n    xhr.addEventListener('load', uploadComplete, false);\n    xhr.addEventListener('error', uploadFailed, false);\n    xhr.addEventListener('abort', uploadCanceled, false); // Send the file\n\n    xhr.open('PUT', url, true);\n    var headers = config.headers || {};\n    headers = angular.extend({\n      'X-Auth-Token': self.token\n    }, headers);\n    angular.forEach(headers, function (header, id) {\n      xhr.setRequestHeader(id, header);\n    });\n    xhr.send(config.data);\n    return deferred.promise;\n  }\n  /* eslint-enable no-shadow */\n\n  /**\n   * Download file.\n   * @param  {string} projectId   project id\n   * @param  {string} containerId container id\n   * @param  {Object} object      object to download\n   * @return {Promise}\n   */\n\n\n  self.download = function (projectId, containerId, file) {\n    var weekDurationInMilliseconds = 6.048e+8;\n    var expiration = new Date(Date.now() + weekDurationInMilliseconds);\n\n    function unseal(url) {\n      return $http.get(url).catch(function (err) {\n        // This call make a CORS error, but still initiate the process,\n        // swallow status -1 which is what we get when cors fail.\n        if (err.status !== -1) {\n          throw err;\n        }\n      });\n    }\n\n    return OvhApiCloudProjectStorage.v6().getURL({\n      projectId: projectId,\n      containerId: containerId\n    }, {\n      expirationDate: expiration.toISOString(),\n      objectName: file.name\n    }).$promise.then(function (resp) {\n      if (file.retrievalState === CLOUD_PCA_FILE_STATE.SEALED) {\n        return unseal(resp.getURL);\n      }\n\n      return resp.getURL;\n    });\n  };\n  /**\n   * Add object to container.\n   * @param  {string} projectId     project id\n   * @param  {string} containerId   container id\n   * @param  {Object} opts          upload opts\n   * @return {Promise}\n   */\n\n\n  self.upload = function (projectId, containerId, opts) {\n    if (!opts.file) {\n      return $q.reject({\n        errorCode: 'BAD_PARAMETERS',\n        config: opts\n      });\n    }\n\n    return ensureAccess(projectId).then(function () {\n      return getContainerMeta(projectId, containerId);\n    }).then(function (containerMeta) {\n      var config = {\n        headers: {\n          'Content-Type': opts.file.type\n        },\n        data: opts.file\n      };\n      var filename = opts.file.name;\n\n      if (opts.prefix) {\n        filename = opts.prefix + filename;\n      }\n\n      var url = getContainerUrl(self.endpoints[containerMeta.region.toLowerCase()], containerMeta.name, filename);\n      return upload(url, config);\n    });\n  };\n  /**\n   * Delete an object.\n   * @param  {string} projectId   project id\n   * @param  {string} containerId container id\n   * @param  {string} file        file name\n   * @return {Promise}\n   */\n\n\n  self.delete = function (projectId, containerId, file) {\n    return ensureAccess(projectId).then(function () {\n      return getContainerMeta(projectId, containerId);\n    }).then(function (containerMeta) {\n      return requestContainer(self.endpoints[containerMeta.region.toLowerCase()], containerMeta.name, {\n        method: 'DELETE',\n        file: file\n      });\n    });\n  };\n  /**\n   * Set container as public.\n   * @param {string} projectId   project id\n   * @param {string} containerId container id\n   * @return {Promise}\n   */\n\n\n  self.setAsPublic = function (projectId, containerId) {\n    return ensureAccess(projectId).then(function () {\n      return getContainerMeta(projectId, containerId);\n    }).then(function (containerMeta) {\n      if (containerMeta[xContainerRead] !== xContainerReadPublicValue) {\n        return requestContainer(self.endpoints[containerMeta.region.toLowerCase()], containerMeta.name, {\n          method: 'PUT',\n          headers: {\n            'X-Container-Read': xContainerReadPublicValue\n          }\n        });\n      }\n\n      return $.resolve();\n    });\n  };\n\n  self.getAccessAndToken = getAccessAndToken;\n}]);",null]}