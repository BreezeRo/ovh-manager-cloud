{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/cloud-project-compute.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/cloud-project-compute.controller.js","mtime":1539717141968},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeCtrl =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeCtrl.$inject = [\"$q\", \"$scope\", \"$state\", \"$stateParams\", \"$translate\", \"$window\", \"OvhApiCloudProject\", \"CloudMessage\", \"CloudProjectOrchestrator\", \"CloudUserPref\", \"FeatureAvailabilityService\", \"OvhApiMe\", \"moment\", \"PCI_ANNOUNCEMENTS\"];\n\n  function CloudProjectComputeCtrl($q, $scope, $state, $stateParams, $translate, $window, OvhApiCloudProject, CloudMessage, CloudProjectOrchestrator, CloudUserPref, FeatureAvailabilityService, OvhApiMe, moment, PCI_ANNOUNCEMENTS) {\n    _classCallCheck(this, CloudProjectComputeCtrl);\n\n    this.$q = $q;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n    this.CloudMessage = CloudMessage;\n    this.CloudProjectOrchestrator = CloudProjectOrchestrator;\n    this.PCI_ANNOUNCEMENTS = PCI_ANNOUNCEMENTS;\n    this.OvhApiMe = OvhApiMe;\n    this.FeatureAvailabilityService = FeatureAvailabilityService;\n    this.CloudUserPref = CloudUserPref;\n    this.moment = moment;\n    this.messages = [];\n  }\n\n  _createClass(CloudProjectComputeCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.serviceName = this.$stateParams.projectId;\n      this.loading = true;\n      this.infoMessageDismissed = true;\n      this.loadMessage();\n      this.init();\n    }\n  }, {\n    key: \"loadMessage\",\n    value: function loadMessage() {\n      var _this = this;\n\n      this.CloudMessage.unSubscribe('iaas.pci-project.compute');\n      this.messageHandler = this.CloudMessage.subscribe('iaas.pci-project.compute', {\n        onMessage: function onMessage() {\n          return _this.refreshMessage();\n        }\n      });\n    }\n  }, {\n    key: \"refreshMessage\",\n    value: function refreshMessage() {\n      this.messages = this.messageHandler.getMessages();\n    }\n  }, {\n    key: \"getRouteContext\",\n    value: function getRouteContext() {\n      if (this.$state.includes('iaas.pci-project')) {\n        return 'iaas.pci-project.compute';\n      }\n\n      return '';\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      this.loading = true;\n      this.OvhApiMe.v6().get().$promise.then(function (me) {\n        _this2.loadAnnouncements(me.ovhSubsidiary);\n      });\n      return this.shouldRedirectToProjectListView().then(function (redirect) {\n        _this2.$scope.redirectToListView = redirect;\n      }).finally(function () {\n        _this2.loading = false;\n      });\n    }\n  }, {\n    key: \"shouldRedirectToProjectListView\",\n    value: function shouldRedirectToProjectListView() {\n      if (this.$stateParams.forceLargeProjectDisplay) {\n        return this.$q.when(false);\n      }\n\n      var hasTooMany = this.$q.all({\n        hasTooManyInstances: this.CloudProjectOrchestrator.hasTooManyInstances(this.$stateParams.projectId),\n        hasTooManyIps: this.CloudProjectOrchestrator.hasTooManyIps(this.$stateParams.projectId)\n      }).then(function (result) {\n        return result.hasTooManyInstances || result.hasTooManyIps;\n      });\n      return this.CloudUserPref.get(\"cloud_project_\".concat(this.serviceName, \"_overview\")).then(function (params) {\n        if (params && params.hide) {\n          return false;\n        }\n\n        return hasTooMany;\n      });\n    }\n  }, {\n    key: \"loadAnnouncements\",\n    value: function loadAnnouncements(ovhSubsidiary) {\n      var _this3 = this;\n\n      var areDismissed = [];\n\n      _.forEach(this.PCI_ANNOUNCEMENTS, function (announcement) {\n        var now = moment();\n        var afterTheStart = now.isAfter(announcement.messageStart);\n        var beforeTheEnd = now.isBefore(announcement.messageEnd);\n\n        if (afterTheStart && beforeTheEnd) {\n          areDismissed.push(_this3.isInfoMessageDismissed(announcement));\n        }\n      });\n\n      this.$q.all(areDismissed).then(function (areDismissedMessages) {\n        var messages = _.map(areDismissedMessages, function (announcement) {\n          return _this3.augmentMessage(announcement, ovhSubsidiary);\n        });\n\n        _.forEach(messages, function (message) {\n          return _this3.CloudMessage.info(message);\n        });\n      });\n    }\n  }, {\n    key: \"augmentMessage\",\n    value: function augmentMessage(message, ovhSubsidiary) {\n      var _this4 = this;\n\n      var augmentedMessage = _.cloneDeep(message);\n\n      augmentedMessage.dismiss = function () {\n        _this4.dismissInfoMessage(message.messageId);\n      };\n\n      augmentedMessage.text = this.$translate.instant(message.messageId);\n\n      if (!message.linkURL || _.isEmpty(message.linkURL)) {\n        return augmentedMessage;\n      }\n\n      augmentedMessage.link = {};\n      augmentedMessage.link.value = message.linkURL[ovhSubsidiary] || message.linkURL.EN;\n\n      if (message.hasLinkText) {\n        augmentedMessage.link.text = this.$translate.instant(\"\".concat(message.messageId, \"_link\"));\n      } else {\n        augmentedMessage.link.text = this.$translate.instant('cloud_message_pci_no_link');\n      }\n\n      return augmentedMessage;\n    }\n  }, {\n    key: \"dismissInfoMessage\",\n    value: function dismissInfoMessage(messageId) {\n      this.CloudUserPref.set(messageId, {\n        markedAsRead: new Date()\n      });\n    }\n  }, {\n    key: \"isInfoMessageDismissed\",\n    value: function isInfoMessageDismissed(message) {\n      return this.CloudUserPref.get(message.messageId).then(function (value) {\n        _.set(message, 'dismissed', !!(!_.isEmpty(value) && value.markedAsRead));\n\n        return message;\n      });\n    }\n  }]);\n\n  return CloudProjectComputeCtrl;\n}();\n\nangular.module('managerApp').controller('CloudProjectComputeCtrl', CloudProjectComputeCtrl);",null]}