{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack.service.js","mtime":1539717142228},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerVrackService {\n  constructor($q, IpLoadBalancerServerFarmService, OvhApiIpLoadBalancing,\n    IpLoadBalancerTaskService, OvhApiVrack,\n    CloudPoll, ServiceHelper) {\n    this.$q = $q;\n    this.IpLoadBalancerServerFarmService = IpLoadBalancerServerFarmService;\n    this.IpLoadBalancerTaskService = IpLoadBalancerTaskService;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.OvhApiVrack = OvhApiVrack;\n    this.CloudPoll = CloudPoll;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  associateVrack(serviceName, vrackName) {\n    return this.OvhApiVrack.IpLoadBalancing().v6().create({\n      serviceName: vrackName,\n    }, {\n      ipLoadbalancing: serviceName,\n    })\n      .$promise\n      .then(task => task.data)\n      .catch(this.ServiceHelper.errorHandler('iplb_vrack_associate_vrack_error'));\n  }\n\n  deAssociateVrack(serviceName) {\n    return this.OvhApiIpLoadBalancing.Vrack().v6().getCreationRules({ serviceName }, {})\n      .$promise\n      .then(response => this.OvhApiVrack.IpLoadBalancing().v6().delete({\n        serviceName: response.vrackName,\n        ipLoadbalancing: serviceName,\n      }).$promise)\n      .then(task => task.data)\n      .catch(this.ServiceHelper.errorHandler('iplb_vrack_deassociate_vrack_error'));\n  }\n\n  getNetworkCreationRules(serviceName, config = { resetCache: false }) {\n    if (config.resetCache) {\n      this.OvhApiIpLoadBalancing.Vrack().v6().resetCache();\n    }\n\n    return this.OvhApiIpLoadBalancing.Vrack().v6().getStatus({ serviceName }, {})\n      .$promise\n      .then((response) => {\n        const promises = {\n          vrackStatus: this.$q.when(response),\n          vrack: response.state === 'active' ? this.OvhApiVrack.v6().get({ serviceName: response.vrackName }).$promise : this.$q.when({}),\n          iplb: this.OvhApiIpLoadBalancing.v6().get({ serviceName }).$promise,\n          rules: response.state === 'active' ? this.OvhApiIpLoadBalancing.Vrack().v6().getCreationRules({ serviceName }, {}).$promise : this.$q.when({}),\n        };\n        return this.$q.all(promises);\n      })\n      .then(response => ({\n        networkId: response.vrackStatus.vrackName,\n        remainingNetworks: response.rules.remainingNetworks,\n        minNatIps: response.rules.minNatIps,\n        status: response.vrackStatus.state,\n        displayName: response.vrack.name || response.vrackStatus.vrackName,\n        vrackEligibility: response.iplb.vrackEligibility,\n        tasks: response.vrackStatus.task,\n      }))\n      .catch(this.ServiceHelper.errorHandler('iplb_vrack_rules_loading_error'));\n  }\n\n  pollNetworkTask(serviceName, tasks) {\n    const tasksObject = _.map(tasks, task => ({ id: task }));\n    return this.CloudPoll.pollArray({\n      items: tasksObject,\n      pollFunction: task => this.IpLoadBalancerTaskService.getTask(serviceName, task.id)\n        .catch(() => ({ status: 'done' })),\n      stopCondition: item => item.status === 'done' || item.status === 'error',\n    });\n  }\n\n  getPrivateNetworks(serviceName) {\n    return this.OvhApiIpLoadBalancing.Vrack().v6().query({ serviceName })\n      .$promise\n      .then((response) => {\n        const promises = _.map(\n          response,\n          networkId => this.getPrivateNetwork(serviceName, networkId),\n        );\n        return this.$q.all(promises);\n      })\n      .then((response) => {\n        _.forEach(response, (privateNetwork) => {\n          this.IpLoadBalancerServerFarmService\n            .getServerFarms(serviceName, privateNetwork.vrackNetworkId)\n            .then((farms) => {\n              _.set(privateNetwork, 'farmId', farms);\n            });\n\n          _.set(privateNetwork, 'farmId', []);\n        });\n\n        return response;\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_vrack_private_networks_loading_error'));\n  }\n\n  getPrivateNetworkFarms(serviceName, networkId) {\n    return this.getPrivateNetwork(serviceName, networkId)\n      .then(privateNetwork => this.IpLoadBalancerServerFarmService\n        .getServerFarms(serviceName, privateNetwork.vrackNetworkId));\n  }\n\n  addPrivateNetwork(serviceName, network) {\n    return this.OvhApiIpLoadBalancing.Vrack().v6().post({ serviceName }, _.omit(network, ['vrackNetworkId', 'farmId']))\n      .$promise\n      .then(response => this.OvhApiIpLoadBalancing.Vrack().v6()\n        .updateFarmId({\n          serviceName,\n          vrackNetworkId: response.vrackNetworkId,\n        }, { farmId: network.farmId }).$promise)\n      .then((response) => {\n        this.OvhApiIpLoadBalancing.Farm().v6().resetQueryCache();\n        this.OvhApiIpLoadBalancing.Farm().Tcp().v6().resetCache();\n        this.OvhApiIpLoadBalancing.Farm().Udp().v6().resetCache();\n        this.OvhApiIpLoadBalancing.Farm().Http().v6().resetCache();\n        return response;\n      })\n      .then(this.ServiceHelper.successHandler('iplb_vrack_private_network_add_success'))\n      .catch(this.ServiceHelper.errorHandler('iplb_vrack_private_network_add_error'));\n  }\n\n  editPrivateNetwork(serviceName, network) {\n    return this.$q.all([\n      this.OvhApiIpLoadBalancing.Vrack().v6().put({ serviceName, vrackNetworkId: network.vrackNetworkId }, _.omit(network, ['vrackNetworkId', 'farmId'])).$promise,\n      this.OvhApiIpLoadBalancing.Vrack().v6()\n        .updateFarmId({\n          serviceName,\n          vrackNetworkId: network.vrackNetworkId,\n        }, { farmId: network.farmId }).$promise,\n    ])\n      .then((response) => {\n        this.OvhApiIpLoadBalancing.Farm().v6().resetQueryCache();\n        this.OvhApiIpLoadBalancing.Farm().Tcp().v6().resetCache();\n        this.OvhApiIpLoadBalancing.Farm().Udp().v6().resetCache();\n        this.OvhApiIpLoadBalancing.Farm().Http().v6().resetCache();\n        return response;\n      })\n      .then(this.ServiceHelper.successHandler('iplb_vrack_private_network_edit_success'))\n      .catch(this.ServiceHelper.errorHandler('iplb_vrack_private_network_edit_error'));\n  }\n\n  deletePrivateNetwork(serviceName, networkId) {\n    return this.OvhApiIpLoadBalancing.Vrack().v6()\n      .updateFarmId({ serviceName, vrackNetworkId: networkId }, { farmId: [] }).$promise\n      .then(() => this.OvhApiIpLoadBalancing.Vrack().v6()\n        .delete({ serviceName, vrackNetworkId: networkId }).$promise)\n      .then(this.ServiceHelper.successHandler('iplb_vrack_private_network_delete_success'))\n      .catch(this.ServiceHelper.errorHandler('iplb_vrack_private_network_delete_error'));\n  }\n\n  getPrivateNetwork(serviceName, networkId) {\n    return this.OvhApiIpLoadBalancing.Vrack().v6().get({ serviceName, vrackNetworkId: networkId })\n      .$promise\n      .then((response) => {\n        response.displayName = response.displayName || response.vrackNetworkId;\n        return response;\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_vrack_private_network_loading_error'));\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerVrackService', IpLoadBalancerVrackService);\n"]}