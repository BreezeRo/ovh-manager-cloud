{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/billing/instance-list/billing-instance-list.component.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/billing/instance-list/billing-instance-list.component.controller.js","mtime":1539717142374},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp')\n  .controller('BillingInstanceListComponentCtrl', function BillingInstanceListComponentCtrl($stateParams, $q, $translate, OvhApiCloudProjectImage, DetailsPopoverService, OvhApiCloudProjectInstance, Toast, OvhApiMe, OvhCloudPriceHelper) {\n    const self = this;\n    self.windowsStringPattern = '/^win-/';\n    self.instanceConsumptionDetails = [];\n\n    self.data = {\n      instances: [],\n      images: [],\n      instanceToMonthlyPrice: null,\n    };\n\n    self.loaders = {\n      monthlyBilling: false,\n      instanceList: false,\n    };\n\n    self.DetailsPopoverService = DetailsPopoverService;\n    self.currencySymbol = '';\n\n    self.instanceToMonthly = null;\n\n    function initInstances() {\n      return OvhApiCloudProjectInstance.v6().query({\n        serviceName: $stateParams.projectId,\n      }).$promise.then((instances) => {\n        self.data.instances = instances;\n      });\n    }\n\n    function initImages() {\n      return OvhApiCloudProjectImage.v6().query({\n        serviceName: $stateParams.projectId,\n      }).$promise.then((result) => {\n        self.data.images = result;\n      });\n    }\n\n    function initUserCurrency() {\n      return OvhApiMe.v6().get().$promise.then((me) => {\n        self.currencySymbol = me.currency.symbol;\n      });\n    }\n\n    function getImageTypeFromReference(reference) {\n      if (reference) {\n        return /^win/.test(reference) ? 'windows' : 'linux';\n      }\n      return '';\n    }\n\n    function getInstanceConsumptionDetails(billingDetail) {\n      const instanceConsumptionDetail = {};\n      instanceConsumptionDetail.instanceId = billingDetail.instanceId;\n      instanceConsumptionDetail.instanceName = billingDetail.instanceId;\n      instanceConsumptionDetail.total = `${billingDetail.totalPrice.toFixed(2)} ${self.currencySymbol}`;\n      instanceConsumptionDetail.region = billingDetail.region;\n      instanceConsumptionDetail.reference = billingDetail.reference;\n      instanceConsumptionDetail.imageType = getImageTypeFromReference(billingDetail.reference);\n      instanceConsumptionDetail.vmType = billingDetail.reference ? billingDetail.reference.replace(self.windowsStringPattern, '').toUpperCase() : '';\n\n      const instance = _.find(self.data.instances, { id: billingDetail.instanceId });\n      if (instance) {\n        instanceConsumptionDetail.isDeleted = false;\n        instanceConsumptionDetail.instanceName = instance.name;\n        instanceConsumptionDetail.monthlyBilling = instance.monthlyBilling;\n        instanceConsumptionDetail.planCode = instance.planCode;\n        const imageData = _.find(self.data.images, { id: instance.imageId });\n        if (imageData) {\n          instanceConsumptionDetail.imageType = imageData.type;\n        }\n      } else {\n        instanceConsumptionDetail.isDeleted = true;\n      }\n\n      return instanceConsumptionDetail;\n    }\n\n    function loadConsumptionDetails() {\n      self.instanceConsumptionDetailsInit = _.map(\n        self.instances,\n        billingDetail => getInstanceConsumptionDetails(billingDetail),\n      );\n\n      $q.allSettled(self.instanceConsumptionDetailsInit).then((instances) => {\n        self.instanceConsumptionDetails = instances;\n      });\n    }\n\n    self.$onInit = () => {\n      self.loaders.instanceList = true;\n\n      $q\n        .all([\n          initInstances(),\n          initImages(),\n          initUserCurrency(),\n        ])\n        .then(() => {\n          loadConsumptionDetails();\n        })\n        .catch((err) => {\n          Toast.error([$translate.instant('cpb_error_message'), (err.data && err.data.message) || ''].join(' '));\n          return $q.reject(err);\n        })\n        .finally(() => {\n          self.loaders.instanceList = false;\n        });\n    };\n\n    self.prepareMonthlyPaymentActivation = function (instance) {\n      self.instanceToMonthly = instance.instanceId;\n      self.data.instanceToMonthlyPrice = null;\n      self.loaders.monthlyBilling = true;\n\n      OvhCloudPriceHelper.getPrices($stateParams.projectId).then((prices) => {\n        const monthlyPrice = prices[instance.planCode && instance.planCode.replace('consumption', 'monthly')];\n        if (!monthlyPrice) {\n          self.endInstanceToMonthlyConversion();\n          return $q.reject({ data: { message: 'No monthly price for this instance' } });\n        }\n        self.data.instanceToMonthlyPrice = monthlyPrice;\n        return $.when();\n      }).catch((err) => {\n        self.instanceToMonthly = null;\n        Toast.error([$translate.instant('cpbc_hourly_instance_pass_to_monthly_price_error'), (err.data && err.data.message) || ''].join(' '));\n        return $q.reject(err);\n      }).finally(() => {\n        self.loaders.monthlyBilling = false;\n      });\n    };\n\n    self.confirmMonthlyPaymentActivation = function () {\n      self.loaders.monthlyBilling = true;\n\n      OvhApiCloudProjectInstance.v6().activeMonthlyBilling({\n        serviceName: $stateParams.projectId,\n        instanceId: self.instanceToMonthly,\n      }, {}).$promise.then(() => {\n        // reset loaders and instance to activate\n        self.endInstanceToMonthlyConversion();\n      }).catch((err) => {\n        Toast.error([$translate.instant('cpbc_hourly_instance_pass_to_monthly_error'), (err.data && err.data.message) || ''].join(' '));\n        return $q.reject(err);\n      }).finally(() => {\n        self.loaders.monthlyBilling = false;\n      });\n    };\n\n    self.endInstanceToMonthlyConversion = function () {\n      self.instanceToMonthly = null;\n    };\n  });\n"]}