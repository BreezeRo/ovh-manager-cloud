{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/volume/cloud-project-compute-volume.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/volume/cloud-project-compute-volume.controller.js","mtime":1539717142039},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectComputeVolumeCtrl', [\"$scope\", \"$filter\", \"$q\", \"$timeout\", \"$stateParams\", \"$translate\", \"$state\", \"ControllerHelper\", \"CloudProjectOrchestrator\", \"OvhApiCloudProjectVolume\", \"OvhApiCloudProjectVolumeSnapshot\", \"OvhApiCloudProjectInstance\", \"CloudMessage\", \"RegionService\", \"CLOUD_UNIT_CONVERSION\", function CloudProjectComputeVolumeCtrl($scope, $filter, $q, $timeout, $stateParams, $translate, $state, ControllerHelper, CloudProjectOrchestrator, OvhApiCloudProjectVolume, OvhApiCloudProjectVolumeSnapshot, OvhApiCloudProjectInstance, CloudMessage, RegionService, CLOUD_UNIT_CONVERSION) {\n  var self = this;\n  var _serviceName = $stateParams.projectId;\n  var orderBy = $filter('orderBy');\n  self.regionService = RegionService; // Datas\n\n  self.table = {\n    volume: [],\n    volumeFilter: [],\n    groupVolume: {},\n    selected: {},\n    autoSelected: [],\n    instance: [],\n    volumeFilterCheckbox: [],\n    volumeFilterCheckboxPage: []\n  };\n  self.toggle = {\n    volumeDeleteId: null,\n    // Curent volume to delete\n    openDeleteMultiConfirm: false\n  }; // Loader during Datas requests\n\n  self.loaders = {\n    table: {\n      volume: false\n    },\n    remove: {\n      volume: false,\n      volumeMulti: false\n    }\n  };\n  self.order = {\n    by: 'creationDate',\n    reverse: true\n  };\n  self.totalResume = {\n    capacity: 0,\n    price: {\n      value: 0,\n      text: null,\n      currencyCode: null\n    }\n  };\n  self.GIBIBYTE_TO_BYTE = CLOUD_UNIT_CONVERSION.GIBIBYTE_TO_BYTE;\n\n  function initSearchBar() {\n    self.search = {\n      name: null,\n      minDisk: null,\n      creationStart: null,\n      creationEnd: null\n    };\n  }\n\n  function init() {\n    self.getVolume();\n    initSearchBar();\n  } // ---------TOOLS---------\n\n\n  self.getSelectedCount = function () {\n    return Object.keys(self.table.selected).length;\n  };\n\n  $scope.$watch('CloudProjectComputeVolumeCtrl.table.selected', function () {\n    // if some line were not removed => recheck\n    self.toggle.openDeleteMultiConfirm = false;\n\n    if (self.table.autoSelected.length) {\n      angular.forEach(Object.keys(self.table.selected), function (volumeId) {\n        if (self.table.selected[volumeId] === false) {\n          delete self.table.selected[volumeId];\n        } else {\n          var isInVolumeTable = _.find(self.table.volume, function (volume) {\n            return volume.id === volumeId && volume.status === 'active';\n          });\n\n          if (isInVolumeTable && self.table.selected[volumeId]) {\n            self.table.selected[volumeId] = true;\n          }\n        }\n      });\n      self.table.autoSelected = [];\n    } else {\n      self.toggle.openDeleteMultiConfirm = false;\n    }\n  }, true);\n\n  self.toggleDeleteMultiConfirm = function () {\n    if (self.toggle.openDeleteMultiConfirm) {\n      self.table.selected = {};\n    }\n\n    self.toggle.volumeDeleteId = null;\n    self.toggle.openDeleteMultiConfirm = !self.toggle.openDeleteMultiConfirm;\n  };\n\n  $scope.$watch('CloudProjectComputeVolumeCtrl.table.volumeFilterPage', function (pageVolumes) {\n    self.table.volumeFilterCheckboxPage = _.filter(pageVolumes, function (volume) {\n      return volume.getStatusGroup() === 'ACTIVE' && !volume.snapshotted;\n    });\n  }); // ---------SEARCH BAR---------\n\n  function filterVolume() {\n    if ($scope.searchVolumeForm && $scope.searchVolumeForm.$valid) {\n      var tab = self.table.volume;\n      tab = _.filter(self.table.volume, function (volume) {\n        var result = true;\n\n        if (self.search.name && volume.name) {\n          var index = volume.name.toLowerCase().indexOf(self.search.name.toLowerCase());\n          result = result && index !== -1;\n        }\n\n        if (self.search.minDisk) {\n          result = result && self.search.minDisk <= volume.size;\n        }\n\n        if (self.search.creationStart) {\n          result = result && moment(self.search.creationStart) <= moment(volume.creationDate);\n        }\n\n        if (self.search.creationEnd) {\n          result = result && moment(self.search.creationEnd) > moment(volume.creationDate);\n        }\n\n        return result;\n      });\n      self.table.volumeFilter = tab;\n      self.table.volumeFilterCheckbox = _.filter(tab, function (volume) {\n        return volume.getStatusGroup() === 'ACTIVE' && !volume.snapshotted;\n      });\n\n      if (self.table.volumeFilter.length) {\n        self.orderBy();\n      }\n    }\n  }\n\n  $scope.$watch('CloudProjectComputeVolumeCtrl.search', function () {\n    // otherwise filterVolume launched before form validation\n    $timeout(function () {\n      filterVolume();\n    }, 0);\n  }, true); // ---------ORDER---------\n\n  self.orderBy = function order(by) {\n    if (by) {\n      if (self.order.by === by) {\n        self.order.reverse = !self.order.reverse;\n      } else {\n        self.order.by = by;\n      }\n    }\n\n    var orderByExpression = self.order.by !== 'price' ? self.order.by : function (volume) {\n      return volume.calculatePrice().monthlyPrice.value;\n    };\n    self.table.volumeFilter = orderBy(self.table.volumeFilter, orderByExpression, self.order.reverse);\n    self.table.volumeFilterCheckbox = _.filter(self.table.volumeFilter, function (volume) {\n      return volume.getStatusGroup() === 'ACTIVE' && !volume.snapshotted;\n    });\n  }; // ---------VOLUME---------\n\n\n  function getVolumeListDetailed(volumeList) {\n    var tab = [];\n    angular.forEach(volumeList.volumes, function (vols) {\n      angular.forEach(vols, function (vol) {\n        tab.push(vol);\n      });\n    });\n    return tab;\n  }\n\n  function setDetails() {\n    var fullInfosQueue = [];\n    var tmpInstanceDetail;\n    var firstVolumePrice;\n    angular.forEach(self.table.volume, function (volume) {\n      fullInfosQueue.push(volume.getFullInformations());\n    });\n    return $q.all(fullInfosQueue).then(function () {\n      // reset total resume\n      self.totalResume.capacity = 0;\n      self.totalResume.price.value = 0;\n      self.totalResume.price.text = 0;\n      self.totalResume.price.currencyCode = 0;\n      angular.forEach(self.table.volume, function (volume) {\n        _.set(volume, 'attachedToDetails', []); // calculate total capacity\n\n\n        self.totalResume.capacity += volume.size; // calculate total price value\n\n        self.totalResume.price.value += volume.calculatePrice().monthlyPrice.value;\n        angular.forEach(volume.attachedTo, function (instanceId) {\n          tmpInstanceDetail = _.find(self.table.instance, {\n            id: instanceId\n          });\n\n          if (tmpInstanceDetail) {\n            volume.attachedToDetails.push(tmpInstanceDetail.name);\n          }\n        }); // check if the volume is linked to one or more snapshots\n\n        _.set(volume, 'snapshotted', !!_.find(self.table.snapshots, {\n          volumeId: volume.id\n        }));\n      });\n\n      if (self.table.volume.length) {\n        firstVolumePrice = self.table.volume[0].calculatePrice(); // set good total price\n\n        self.totalResume.price.text = firstVolumePrice.monthlyPrice.text.replace(/\\d+(?:[.,]\\d+)?/, \"\".concat(self.totalResume.price.value.toFixed(2)));\n        self.totalResume.price.currencyCode = firstVolumePrice.monthlyPrice.currencyCode;\n      }\n    });\n  }\n\n  self.getVolume = function getVolume(clearCache) {\n    if (!self.loaders.table.volume) {\n      self.table.volume = [];\n      self.table.instance = [];\n      self.toggle.volumeDeleteId = null;\n      self.loaders.table.volume = true;\n\n      if (clearCache) {\n        OvhApiCloudProjectVolume.v6().resetQueryCache();\n      }\n\n      $q.all([// GET INSTANCES DETAILS\n      OvhApiCloudProjectInstance.v6().query({\n        serviceName: _serviceName\n      }).$promise.then(function (instanceList) {\n        self.table.instance = instanceList;\n      }), // GET VOLUMES DETAILS\n      CloudProjectOrchestrator.initVolumes({\n        serviceName: _serviceName\n      }).then(function (volumeList) {\n        self.table.volume = getVolumeListDetailed(volumeList);\n        self.table.groupVolume = volumeList;\n      }), OvhApiCloudProjectVolumeSnapshot.v6().query({\n        serviceName: _serviceName\n      }).$promise.then(function (snapshotList) {\n        self.table.snapshots = snapshotList;\n      })]).then(function () {\n        return setDetails().then(function () {\n          filterVolume(); // orderBy is call by filterVolume();\n        });\n      }, function (err) {\n        self.table.volume = null;\n        self.table.instance = null;\n        self.table.snapshots = null;\n        CloudMessage.error([$translate.instant('cpc_volume_error'), err.data && err.data.message || ''].join(' '));\n      }).finally(function () {\n        self.loaders.table.volume = false;\n      });\n    }\n  }; // need to watch grouped volume by instance change\n  // because volume tabs use an array of volume and not object...\n\n\n  $scope.$watch('CloudProjectComputeVolumeCtrl.table.groupVolume', function (newVal, oldVal) {\n    if (oldVal && newVal) {\n      self.table.volume = getVolumeListDetailed(newVal); // to update total price and volume\n\n      setDetails().then(function () {\n        filterVolume(); // orderBy is call by filterVolume();\n      });\n    }\n  }, true);\n\n  self.createNewVolume = function () {\n    CloudMessage.info($translate.instant('cpc_volume_create_volume_button_info'));\n    $timeout(function () {\n      $state.go('iaas.pci-project.compute.infrastructure.diagram', {\n        createNewVolume: true\n      });\n    }, 99);\n  };\n\n  self.openDeleteVolume = function (_volume) {\n    ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/cloud/project/compute/volume/delete/cloud-project-compute-volume-delete.html',\n        controller: 'CloudProjectComputeVolumeDeleteCtrl',\n        controllerAs: '$ctrl',\n        resolve: {\n          serviceName: function serviceName() {\n            return _serviceName;\n          },\n          volume: function volume() {\n            return _volume;\n          }\n        }\n      },\n      successHandler: function successHandler() {\n        self.getVolume(true);\n        CloudMessage.success($translate.instant('cpc_volume_delete_success'));\n      },\n      errorHandler: function errorHandler(err) {\n        return CloudMessage.error([$translate.instant('cpc_volume_delete_error'), err.data && err.data.message || ''].join(' '));\n      }\n    });\n  };\n\n  init();\n}]);",null]}