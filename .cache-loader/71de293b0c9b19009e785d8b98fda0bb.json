{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/logs-dashboards.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/logs-dashboards.controller.js","mtime":1539717142079},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsDashboardsCtrl =\n/*#__PURE__*/\nfunction () {\n  LogsDashboardsCtrl.$inject = [\"$state\", \"$stateParams\", \"$translate\", \"LogsDashboardsService\", \"ControllerHelper\", \"CloudMessage\", \"LogsConstants\", \"ControllerModalHelper\"];\n\n  function LogsDashboardsCtrl($state, $stateParams, $translate, LogsDashboardsService, ControllerHelper, CloudMessage, LogsConstants, ControllerModalHelper) {\n    _classCallCheck(this, LogsDashboardsCtrl);\n\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.$translate = $translate;\n    this.LogsDashboardsService = LogsDashboardsService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsConstants = LogsConstants;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.initLoaders();\n  }\n  /**\n   * initializes dashboards and quota object by making API call to get data\n   *\n   * @memberof LogsDashboardsCtrl\n   */\n\n\n  _createClass(LogsDashboardsCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.quota = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsDashboardsService.getQuota(_this.serviceName);\n        }\n      });\n      this.dashboards = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsDashboardsService.getDashboards(_this.serviceName);\n        }\n      });\n      this.quota.load();\n      this.dashboards.load();\n    }\n    /**\n     * navigates to add dashboard page\n     *\n     * @memberof LogsDashboardsCtrl\n     */\n\n  }, {\n    key: \"add\",\n    value: function add() {\n      this.$state.go('dbaas.logs.detail.dashboards.add', {\n        serviceName: this.serviceName\n      });\n    }\n    /**\n     * navigates to edit dashboard page\n     *\n     * @param {any} dashboard\n     * @memberof LogsDashboardsCtrl\n     */\n\n  }, {\n    key: \"edit\",\n    value: function edit(dashboard) {\n      this.$state.go('dbaas.logs.detail.dashboards.edit', {\n        serviceName: this.serviceName,\n        dashboardId: dashboard.dashboardId\n      });\n    }\n    /**\n     * navigates to duplicate dashboard page\n     *\n     * @param {any} dashboard\n     * @memberof LogsDashboardsCtrl\n     */\n\n  }, {\n    key: \"duplicate\",\n    value: function duplicate(dashboard) {\n      if (this.isBasicOffer(this.quota.data)) {\n        this.showOfferUpgradeInfo();\n      } else {\n        this.$state.go('dbaas.logs.detail.dashboards.duplicate', {\n          serviceName: this.serviceName,\n          dashboardId: dashboard.dashboardId,\n          dashboardName: dashboard.title\n        });\n      }\n    }\n    /**\n     * show delete dashboard confirmation modal\n     *\n     * @param {any} dashboard to delete\n     * @memberof LogsDashboardsCtrl\n     */\n\n  }, {\n    key: \"showDeleteConfirm\",\n    value: function showDeleteConfirm(dashboard) {\n      var _this2 = this;\n\n      this.CloudMessage.flushChildMessage();\n      return this.ControllerHelper.modal.showDeleteModal({\n        titleText: this.$translate.instant('logs_dashboards_delete_title'),\n        textHtml: this.$translate.instant('logs_dashboards_delete_message', {\n          dashboardName: dashboard.title\n        })\n      }).then(function () {\n        return _this2.delete(dashboard);\n      });\n    }\n    /**\n     * delete dashboard\n     *\n     * @param {any} dashboard to delete\n     * @memberof LogsDashboardsCtrl\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(dashboard) {\n      var _this3 = this;\n\n      this.delete = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this3.LogsDashboardsService.deleteDashboard(_this3.serviceName, dashboard).then(function () {\n            return _this3.initLoaders();\n          }).finally(function () {\n            return _this3.ControllerHelper.scrollPageToTop();\n          });\n        }\n      });\n      this.delete.load();\n    }\n    /**\n     * extracts graylog web URL from dashboard\n     *\n     * @param {any} dashboard, dashboard for which URL needs to be extracted\n     * @return {string} graylog url\n     * @memberof LogsDashboardsCtrl\n     */\n\n  }, {\n    key: \"getGraylogUrl\",\n    value: function getGraylogUrl(aapiDashboard) {\n      return this.LogsDashboardsService.getDashboardGraylogUrl(aapiDashboard);\n    }\n    /**\n     * Checks if the user has a basic offer\n     *\n     * @returns true if the user is subscribed to a basic offer\n     * @memberof LogsDashboardsCtrl\n     */\n\n  }, {\n    key: \"isBasicOffer\",\n    value: function isBasicOffer(offerObj) {\n      return offerObj.reference === this.LogsConstants.basicOffer;\n    }\n    /**\n     * show a modal dialog asking user to upgrade before creating more dashboards\n     *\n     * @memberof LogsDashboardsCtrl\n     */\n\n  }, {\n    key: \"showOfferUpgradeInfo\",\n    value: function showOfferUpgradeInfo() {\n      var _this4 = this;\n\n      return this.ControllerModalHelper.showInfoModal({\n        titleText: this.$translate.instant('options_upgradequotalink_increase_quota_title'),\n        text: this.$translate.instant('logs_dashboards_basic_offer_info_message'),\n        okButtonText: this.$translate.instant('options_upgradequotalink_increase_quota_upgrade')\n      }).then(function () {\n        return _this4.$state.go('dbaas.logs.detail.offer', {\n          serveiceName: _this4.serviceName\n        });\n      });\n    }\n  }]);\n\n  return LogsDashboardsCtrl;\n}();\n\nangular.module('managerApp').controller('LogsDashboardsCtrl', LogsDashboardsCtrl);",null]}