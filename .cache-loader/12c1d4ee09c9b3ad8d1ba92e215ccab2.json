{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/header/iplb-dashboard-header.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/header/iplb-dashboard-header.controller.js","mtime":1539717142199},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerDashboardHeaderCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerDashboardHeaderCtrl.$inject = [\"$stateParams\", \"$translate\", \"ControllerHelper\", \"IpLoadBalancerHomeService\", \"ovhDocUrl\", \"SidebarMenu\", \"URLS\"];\n\n  function IpLoadBalancerDashboardHeaderCtrl($stateParams, $translate, ControllerHelper, IpLoadBalancerHomeService, ovhDocUrl, SidebarMenu, URLS) {\n    var _this = this;\n\n    _classCallCheck(this, IpLoadBalancerDashboardHeaderCtrl);\n\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerHomeService = IpLoadBalancerHomeService;\n    this.ovhDocUrl = ovhDocUrl;\n    this.SidebarMenu = SidebarMenu;\n    this.URLS = URLS;\n    this.serviceName = $stateParams.serviceName; //  No error handling since we don't want to break anything for a title.\n\n    this.configuration = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: function loaderFunction() {\n        return _this.IpLoadBalancerHomeService.getConfiguration(_this.serviceName);\n      },\n      successHandler: function successHandler() {\n        _this.menuItem.title = _this.configuration.data.displayName;\n      }\n    });\n  }\n\n  _createClass(IpLoadBalancerDashboardHeaderCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.menuItem = this.SidebarMenu.getItemById(this.serviceName); //  If the menu is not yet loaded, we fetch IPLB's displayName.  Dirty patch.\n\n      if (!this.menuItem) {\n        this.menuItem = {\n          title: this.serviceName\n        };\n        this.configuration.load();\n      }\n\n      this.initGuides();\n    }\n  }, {\n    key: \"initGuides\",\n    value: function initGuides() {\n      this.guides = {};\n      this.guides.title = this.$translate.instant('iplb_guides');\n      this.guides.list = [{\n        name: this.$translate.instant('iplb_guides_title'),\n        url: this.ovhDocUrl.getDocUrl('iplb'),\n        external: true\n      }];\n      this.guides.footer = {\n        name: this.$translate.instant('iplb_guide_footer'),\n        url: this.URLS.guides.home.FR,\n        external: true\n      };\n    }\n  }]);\n\n  return IpLoadBalancerDashboardHeaderCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerDashboardHeaderCtrl', IpLoadBalancerDashboardHeaderCtrl);",null]}