{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/logs-options.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/logs-options.service.js","mtime":1539717142136},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsOptionsService {\n  constructor($translate, $window, ControllerHelper, LogsHelperService,\n    OvhApiOrderCartServiceOption, ServiceHelper, OvhApiDbaas, LogsOfferService, LogsConstants) {\n    this.ControllerHelper = ControllerHelper;\n    this.OvhApiOrderCartServiceOption = OvhApiOrderCartServiceOption;\n    this.LogsHelperService = LogsHelperService;\n    this.ServiceHelper = ServiceHelper;\n    this.ControllerHelper = ControllerHelper;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.OvhApiDbaasLogs = OvhApiDbaas.Logs();\n    this.LogsOfferService = LogsOfferService;\n    this.LogsConstants = LogsConstants;\n    this.OptionsApiLexiService = OvhApiDbaas.Logs().Option().v6();\n  }\n\n  /**\n   * returns the current offer after transformation\n   *\n   * @param {any} serviceName\n   * @returns the current offer\n   * @memberof LogsOptionsService\n   */\n  getOffer(serviceName) {\n    return this.LogsOfferService.getOffer(serviceName)\n      .then(offer => this.transformOffer(offer));\n  }\n\n  /**\n   * returns the list of options available for selection\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to an array of options objects\n   * @memberof LogsOptionsService\n   */\n  getOptions(serviceName) {\n    return this.OvhApiOrderCartServiceOption.v6().get({\n      productName: this.LogsConstants.productName,\n      serviceName,\n    }).$promise\n      .then((response) => {\n        _.each(response, option => this.transformOption(option));\n        return response.sort((optionA, optionB) => (optionA.type === optionB.type\n          ? this.ControllerHelper.constructor.naturalCompare(optionA.detail, optionB.detail)\n          : this.ControllerHelper.constructor.naturalCompare(optionA.type, optionB.type)));\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_options_options_loading_error', err, {}));\n  }\n\n  /**\n   * returns the list of options that have to be ordered (quantity > 0)\n   *\n   * @param {any} serviceName\n   * @returns the list of options to be ordered\n   * @memberof LogsOptionsService\n   */\n  static getOptionsToOrder(options) {\n    return _.filter(options, option => option.quantity > 0);\n  }\n\n  /**\n   * returns the options configuration using which the order url can be constructed\n   *\n   * @param {any} options\n   * @param {any} serviceName\n   * @returns returns the options configuration to be used to construct the order url\n   * @memberof LogsOptionsService\n   */\n  getOrderConfiguration(options, serviceName) {\n    const optionsToOrder = LogsOptionsService.getOptionsToOrder(options);\n    return _.map(optionsToOrder, option => this.transformOptionForOrder(option, serviceName));\n  }\n\n  transformManagedOptions(option) {\n    _.set(option, 'type', this.$translate.instant(`${option.reference}-type`));\n    _.set(option, 'detail', this.$translate.instant(`${option.reference}-detail`));\n    _.set(option, 'linked_items', option.curNbAlias + option.curNbDashboard + option.curNbIndex + option.curNbRole + option.curNbInput + option.curNbStream);\n    return option;\n  }\n\n  getManagedOptions(serviceName) {\n    return this.getSubscribedOptions(serviceName)\n      .then(response => _.map(response.options, option => this.transformManagedOptions(option)))\n      .catch(this.ServiceHelper.errorHandler('logs_options_manage_get_error'));\n  }\n\n  /**\n   * makes API call to get the list of options that have been subscribed in the service\n   *\n   * @param {any} serviceName\n   * @returns promise that resolves with the array of options which have been subscribed\n   * @memberof LogsOptionsService\n   */\n  getSubscribedOptions(serviceName) {\n    return this.OvhApiDbaasLogs.Accounting().Aapi().me({\n      serviceName,\n    })\n      .$promise\n      .catch(err => this.LogsHelperService.handleError('logs_options_current_options_loading_error', err, {}));\n  }\n\n  /**\n   * returns all subscribed options with reference \"logs-stream\".\n   *\n   * @param {any} serviceName\n   * @returns array of all subscribed option objects belonging to streams\n   * @memberof LogsOptionsService\n   */\n  getSubscribedOptionsByType(serviceName, optionType) {\n    return this.getSubscribedOptions(serviceName)\n      .then((response) => {\n        switch (optionType) {\n          case this.LogsConstants.STREAM_OPTION_REFERENCE:\n            return this.filterOptions(response.options, 'maxNbStream');\n          case this.LogsConstants.INDEX_OPTION_REFERENCE:\n            return this.filterOptions(response.options, 'maxNbIndex');\n          case this.LogsConstants.ALIAS_OPTION_REFERENCE:\n            return this.filterOptions(response.options, 'maxNbAlias');\n          case this.LogsConstants.INPUT_OPTION_REFERENCE:\n            return this.filterOptions(response.options, 'maxNbInput');\n          case this.LogsConstants.ROLE_OPTION_REFERENCE:\n            return this.filterOptions(response.options, 'maxNbRole');\n          case this.LogsConstants.DASHBOARD_OPTION_REFERENCE:\n            return this.filterOptions(response.options, 'maxNbDashboard');\n          default:\n            return response.options;\n        }\n      });\n  }\n\n  /**\n   * returns map of all subscribed options with their count.\n   *\n   * @param {any} serviceName\n   * @returns map of subscribed option with count\n   * @memberof LogsOptionsService\n   */\n  /* eslint-disable no-param-reassign */\n  getSubscribedOptionsMap(serviceName) {\n    return this.getSubscribedOptions(serviceName)\n      .then((response) => {\n        // Build a map of option vs no. of subscribed instances\n        const optionsCountMap = _.reduce(response.options, (optionsMap, option) => {\n          optionsMap[option.reference] = optionsMap[option.reference]\n            ? optionsMap[option.reference] += 1\n            : 1;\n          return optionsMap;\n        }, {});\n        // Build a new data structure with the option information and the no.of instances subscribed\n        return _.map(\n          _.keys(optionsCountMap),\n          option => this.transformSubscribedOption(option, optionsCountMap),\n        )\n          .sort((optionA, optionB) => (optionA.type === optionB.type\n            ? this.ControllerHelper.constructor.naturalCompare(optionA.detail, optionB.detail)\n            : this.ControllerHelper.constructor.naturalCompare(optionA.type, optionB.type)));\n      });\n  }\n\n  /**\n   * returns map of all subscribed options with their count, grouped by their type.\n   *\n   * @param {any} serviceName\n   * @returns map of subscribed options with count\n   * @memberof LogsOptionsService\n   */\n  getSubscribedOptionsMapGrouped(serviceName) {\n    return this.getSubscribedOptionsMap(serviceName)\n      .then((options) => {\n        const groupedOptionsMap = options.reduce((groupedOptions, option) => {\n          groupedOptions[option.type] = groupedOptions[option.type]\n            ? groupedOptions[option.type]\n            : { type: option.type, quantity: 0, details: [] };\n          groupedOptions[option.type].quantity += option.quantity\n            * this.LogsConstants.PRODUCT_COUNT[option.id];\n          groupedOptions[option.type].details.push(option);\n          return groupedOptions;\n        }, {});\n        return Object.keys(groupedOptionsMap)\n          .map(groupedOptionsName => groupedOptionsMap[groupedOptionsName])\n          .sort((optionA, optionB) => this.ControllerHelper.constructor.naturalCompare(\n            optionA.type,\n            optionB.type,\n          ));\n      });\n  }\n  /* eslint-enable no-param-reassign */\n\n  /**\n   * returns the transformed option, which has the count for each of the options.\n   * Meant to be used for the subscribed options\n   *\n   * @param {any} option\n   * @param {any} optionsCountMap\n   * @returns the transformed option\n   * @memberof LogsOptionsService\n   */\n  transformSubscribedOption(option, optionsCountMap) {\n    const optionConfig = {};\n    optionConfig.id = option;\n    optionConfig.type = this.$translate.instant(`${option}-type`);\n    optionConfig.detail = this.$translate.instant(`${option}-detail`);\n    optionConfig.quantity = optionsCountMap[option];\n    return optionConfig;\n  }\n\n  filterOptions(options, max) {\n    return options\n      .filter(option => option[max] > 0)\n      .map((option) => {\n        _.set(option, 'type', this.$translate.instant(`${option.reference}-type`));\n        _.set(option, 'detail', this.$translate.instant(`${option.reference}-detail`));\n        return option;\n      });\n  }\n\n  /**\n   * returns the transformed offer\n   *\n   * @param {any} offer\n   * @returns the transformed offer\n   * @memberof LogsOptionsService\n   */\n  transformOffer(offer) {\n    const offerPrefix = this.$translate.instant('log_options_pro_offer');\n    const offerName = this.$translate.instant(offer.reference);\n    const streams = this.$translate.instant('logs_offer_streams');\n    const dashboards = this.$translate.instant('logs_offer_tables');\n    const inputs = this.$translate.instant('logs_offer_collection_tools');\n    _.set(offer, 'name', `${offerPrefix} ${offerName}`);\n    _.set(offer, 'streams', `${offer.maxNbStream} ${streams}`);\n    _.set(offer, 'dashboards', `${offer.maxNbDashboard} ${dashboards}`);\n    _.set(offer, 'inputs', `${offer.maxNbInput} ${inputs}`);\n    return offer;\n  }\n\n  /**\n   * returns the transformed option. Meant to be used for the available options\n   *\n   * @param {any} option\n   * @returns the transformed option\n   * @memberof LogsOptionsService\n   */\n  transformOption(option) {\n    _.set(option, 'quantity', 0);\n    _.set(option, 'price', option.prices[0].price.value);\n    _.set(option, 'priceText', option.prices[0].price.text);\n    _.set(option, 'type', this.$translate.instant(`${option.planCode}-type`));\n    _.set(option, 'detail', this.$translate.instant(`${option.planCode}-detail`));\n  }\n\n  /**\n   * returns the transformed option. Meant to be used to construct the order URL\n   *\n   * @param {any} option\n   * @returns the transformed option\n   * @memberof LogsOptionsService\n   */\n  transformOptionForOrder(option, serviceName) {\n    return {\n      planCode: option.planCode,\n      quantity: option.quantity,\n      serviceName,\n      productId: this.LogsConstants.productName,\n    };\n  }\n\n  showReactivateInfo(option) {\n    this.ControllerHelper.modal.showWarningModal({\n      title: this.$translate.instant('logs_options_modal_reactivate_title'),\n      message: this.$translate.instant('logs_options_modal_reactivate_description', { optionType: `${option.type}, ${option.detail}` }),\n    });\n  }\n\n  terminateModal(option) {\n    return this.ControllerHelper.modal.showDeleteModal({\n      submitButtonText: this.$translate.instant('logs_options_action_disable'),\n      titleText: this.$translate.instant('logs_options_manage_terminate_title'),\n      textHtml: this.$translate.instant('logs_options_manage_terminate_question', { optionType: `${option.type}, ${option.detail}` }),\n    });\n  }\n\n  terminateOption(serviceName, option) {\n    return this.OptionsApiLexiService.terminate({ serviceName, optionId: option.optionId }).$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_options_delete_success', { optionType: `${option.type}, ${option.detail}` });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_options_delete_error', err, { optionType: `${option.type}, ${option.detail}` }));\n  }\n\n  resetAllCache() {\n    this.OvhApiDbaasLogs.Accounting().Aapi().resetAllCache();\n    this.OptionsApiLexiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsOptionsService', LogsOptionsService);\n"]}