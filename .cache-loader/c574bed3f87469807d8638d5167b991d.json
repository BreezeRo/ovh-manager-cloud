{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/products/products.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/products/products.service.js","mtime":1539717142413},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class ProductsService {\n  constructor($q, OvhApiProducts, OvhApiLicense, OvhApiIp) {\n    this.$q = $q;\n    this.OvhApiProducts = OvhApiProducts;\n    this.OvhApiLicense = OvhApiLicense;\n    this.OvhApiIp = OvhApiIp;\n\n    this.products = {};\n    this.productsDeferred = null;\n  }\n\n  getProducts(force) {\n    if (!_.isEmpty(this.products)) {\n      return this.$q.when(this.products);\n    }\n\n    if (!_.isNull(this.productsDeferred) && !force) {\n      return this.productsDeferred.promise;\n    }\n\n    this.productsDeferred = this.$q.defer();\n\n    this.$q.all({\n      cloudProducts: this.OvhApiProducts.Aapi().get({ universe: 'cloud' }).$promise,\n      licenses: this.OvhApiLicense.Aapi().get({ count: 1, offset: 0 }).$promise,\n      ips: this.OvhApiIp.v6().query().$promise,\n    })\n      .then((products) => {\n        this.products = this.constructor.mergeLicenseIntoProducts(\n          products.licenses,\n          products.cloudProducts,\n        );\n        this.products = this.constructor.mergeIpsIntoProducts(products.ips, this.products);\n        this.productsDeferred.resolve(this.products);\n      });\n\n    return this.productsDeferred.promise;\n  }\n\n  static mergeIpsIntoProducts(ips, allProducts) {\n    const allProductsMerged = _.clone(allProducts);\n    allProductsMerged.results.push({\n      name: 'IP',\n      services: _.map(ips, ip => ({\n        displayName: ip,\n        serviceName: ip,\n      })),\n    });\n    return allProductsMerged;\n  }\n\n  static mergeLicenseIntoProducts(licenses, allProducts) {\n    const allProductsMerged = _.clone(allProducts);\n    allProductsMerged.errors.push(...licenses.list.messages);\n    allProductsMerged.results.push({\n      name: 'LICENSE',\n      services: _.map(licenses.list.results, license => _.extend(license, {\n        displayName: license.id,\n        serviceName: license.id,\n      })),\n    });\n    return allProductsMerged;\n  }\n\n  getProductsOfType(type) {\n    return _.result(_.find(this.products, service => service.name === type), 'services');\n  }\n\n  getDisplayName(type, serviceName) {\n    const services = this.getProductsOfType(type);\n    return _.result(_.find(services, service => service.serviceName === serviceName), 'displayName');\n  }\n}\n\nangular.module('managerApp').service('ProductsService', ProductsService);\n"]}