{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/add/nasha-add.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/add/nasha-add.service.js","mtime":1539717142233},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class NashaAddService {\n  constructor($q, $translate, OrderHelperService, OvhApiMe, OvhApiOrder, ServiceHelper) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.OrderHelperService = OrderHelperService;\n    this.OvhApiMe = OvhApiMe;\n    this.OvhApiOrder = OvhApiOrder;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  getAvailableRegions() {\n    return this.OvhApiOrder.v6().schema()\n      .$promise\n      .then(response => _.filter(response.models['dedicated.NasHAZoneEnum'].enum, datacenter => datacenter !== 'gra'))\n      .catch(this.ServiceHelper.errorHandler('nasha_order_loading_error'));\n  }\n\n  getOffers() {\n    return this.OvhApiMe.v6().get()\n      .$promise\n      .then(user => this.OvhApiOrder.Cart().v6()\n        .post({}, { ovhSubsidiary: user.ovhSubsidiary }).$promise)\n      .then(cart => this.OvhApiOrder.Cart().Product().v6().get({ cartId: cart.cartId, productName: 'nasha' }).$promise.then(offers => ({ cart, offers })))\n      .then((response) => {\n        _.forEach(response.offers, (offer) => {\n          _.set(offer, 'productName', this.$translate.instant(`nasha_order_nasha_${offer.planCode}`));\n        });\n\n        this.OvhApiOrder.Cart().v6().assign({ cartId: response.cart.cartId })\n          .$promise\n          .then(() => this.OvhApiOrder.Cart().v6().delete({ cartId: response.cart.cartId }));\n\n        return response.offers;\n      })\n      .catch(this.ServiceHelper.errorHandler('nasha_order_loading_error'));\n  }\n\n  getDurations() {\n    return this.$q.when([{\n      value: 1,\n      text: `01 ${this.$translate.instant('nas_order_month')}`,\n    }, {\n      value: 3,\n      text: `03 ${this.$translate.instant('nas_order_month')}`,\n    }, {\n      value: 6,\n      text: `06 ${this.$translate.instant('nas_order_month')}`,\n    }, {\n      value: 12,\n      text: `12 ${this.$translate.instant('nas_order_month')}`,\n    }]);\n  }\n\n  order(model) {\n    return this.OrderHelperService.getExpressOrderUrl({\n      productId: 'nasha',\n      duration: `P${model.selectedDuration}M`,\n      planCode: model.selectedModel,\n      pricingMode: 'default',\n      quantity: 1,\n      configuration: [{\n        label: 'datacenter',\n        values: [model.selectedDatacenter.toUpperCase()],\n      }],\n    })\n      .then(response => ({ url: response }))\n      .catch(this.ServiceHelper.errorHandler('nasha_order_validation_error'));\n  }\n}\n\nangular.module('managerApp').service('NashaAddService', NashaAddService);\n"]}