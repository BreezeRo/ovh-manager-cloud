{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/offer/cloud-offer.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/offer/cloud-offer.controller.js","mtime":1539717141949},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["(() => {\n  class CloudOfferCtrl {\n    constructor($q, $stateParams, $translate, FeatureAvailabilityService, CloudProjectAdd,\n      CloudMessage, OvhApiMe, TARGET, URLS) {\n      this.$q = $q;\n      this.$stateParams = $stateParams;\n      this.$translate = $translate;\n      this.CloudProjectAdd = CloudProjectAdd;\n      this.CloudMessage = CloudMessage;\n      this.User = OvhApiMe;\n      this.FeatureAvailabilityService = FeatureAvailabilityService;\n      this.TARGET = TARGET;\n      this.URLS = URLS;\n\n      this.data = {\n        defaultPayment: null,\n        agreementsAccepted: [],\n        agreements: [],\n      };\n\n      this.messages = [];\n\n      this.model = {\n        voucher: null,\n        projectName: '',\n      };\n\n      this.state = {\n        allAgreementsAccepted: false,\n      };\n\n      this.loaders = {\n        payment: false,\n        agreements: false,\n        start: false,\n      };\n\n      this.features = [{\n        title: 'cloud_offer_vrack',\n        explanation: 'cloud_offer_vrack_explanation',\n      },\n      {\n        title: 'cloud_offer_ipfo',\n        explanation: 'cloud_offer_ipfo_explanation',\n      },\n      {\n        title: 'cloud_offer_ipv6',\n        explanation: 'cloud_offer_ipv6_explanation',\n      },\n      {\n        title: 'cloud_offer_upgrade',\n        explanation: 'cloud_offer_upgrade_explanation',\n      },\n      {\n        title: 'cloud_offer_pca',\n        explanation: 'cloud_offer_pca_explanation',\n      },\n      {\n        title: 'cloud_offer_snapshot',\n        explanation: 'cloud_offer_snapshot_explanation',\n      },\n      {\n        title: 'cloud_offer_ssd',\n        explanation: 'cloud_offer_ssd_explanation',\n      },\n      {\n        title: 'cloud_offer_volume',\n        explanation: 'cloud_offer_volume_explanation',\n      },\n      {\n        title: 'cloud_offer_object_storage',\n        explanation: 'cloud_offer_object_storage_explanation',\n      },\n      {\n        title: 'cloud_offer_api',\n        explanation: 'cloud_offer_api_explanation',\n      }];\n\n      this.init();\n    }\n\n    init() {\n      this.loadMessage();\n      // Call not available for US customer\n      this.FeatureAvailabilityService.hasFeaturePromise('PROJECT', 'expressOrder').then((hasFeature) => {\n        if (!hasFeature) {\n          this.loaders.agreements = true;\n          this.CloudProjectAdd.getProjectInfo()\n            .then((projectInfo) => {\n              this.data.agreements = projectInfo.agreementsToAccept;\n              this.data.order = projectInfo.orderToPay;\n            })\n            .finally(() => {\n              this.loaders.agreements = false;\n            });\n          this.getDefaultPaymentMethod();\n        }\n      });\n\n      this.model.voucher = this.$stateParams.voucher;\n    }\n\n    loadMessage() {\n      this.CloudMessage.unSubscribe('iaas.pci-project-onboarding');\n      this.messageHandler = this.CloudMessage.subscribe('iaas.pci-project-onboarding', { onMessage: () => this.refreshMessage() });\n    }\n\n    refreshMessage() {\n      this.messages = this.messageHandler.getMessages();\n    }\n\n    startProject() {\n      this.loaders.start = true;\n\n      // Use express order for US customers\n      if (this.FeatureAvailabilityService.hasFeature('PROJECT', 'expressOrder')) {\n        window.location.href = this.URLS.website_order['cloud-resell-eu'].US(this.model.projectName);\n        return;\n      }\n      this.acceptAllAgreements()\n        .then(() => {\n          this.createProject();\n        });\n    }\n\n    agreementAcceptation(agreementId) {\n      if (this.acceptedAgreements[agreementId]) {\n        this.data.agreementsAccepted.push(agreementId);\n      } else {\n        _.pull(this.data.agreementsAccepted, agreementId);\n      }\n      this.state.allAgreementsAccepted = this.data.agreementsAccepted.length === this.data\n        .agreements.length;\n    }\n\n    canStartProject() {\n      return this.data.agreements.length && !this.state.allAgreementsAccepted;\n    }\n\n    acceptAllAgreements() {\n      const agreements = [];\n      _.forEach(this.data.agreements, (agreement) => {\n        agreements.push(this.acceptAgreement(agreement.id));\n      });\n      return this.$q.all(agreements)\n        .catch((err) => {\n          this.CloudMessage.error(this.$translate.instant('cpa_error') + (err.data && err.data.message ? ` (${err.data.message})` : ''));\n          this.loaders.start = false;\n        });\n    }\n\n    acceptAgreement(agreementId) {\n      return this.User.Agreements().v6().accept({\n        id: agreementId,\n      }, {});\n    }\n\n    getDefaultPaymentMethod() {\n      this.loaders.payment = true;\n      this.User.PaymentMean().v6().getDefaultPaymentMean()\n        .then((defaultPayment) => {\n          this.data.defaultPayment = defaultPayment;\n        })\n        .finally(() => {\n          this.loaders.payment = false;\n        });\n    }\n\n    createProject() {\n      this.CloudProjectAdd.startProject(this.model.voucher, this.model.projectName)\n        .catch((error) => {\n          if (error.agreements) {\n            this.data.agreementsAccepted = [];\n            this.data.agreements = error.agreements;\n            this.state.allAgreementsAccepted = false;\n          }\n        })\n        .finally(() => {\n          this.loaders.start = false;\n        });\n    }\n  }\n  angular.module('managerApp').controller('CloudOfferCtrl', CloudOfferCtrl);\n})();\n"]}