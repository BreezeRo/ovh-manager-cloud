{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/virtualMachine/add/cloud-project-compute-infrastructure-virtualMachine-add.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/virtualMachine/add/cloud-project-compute-infrastructure-virtualMachine-add.service.js","mtime":1539717374477},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectVirtualMachineAddService {\n  constructor($q, $translate, CloudFlavorService, CloudImageService, ControllerModalHelper,\n    OvhApiCloudProject, OvhApiCloudProjectInstance, OvhApiCloudProjectNetworkPrivateSubnet) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudFlavorService = CloudFlavorService;\n    this.CloudImageService = CloudImageService;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n    this.OvhApiCloudProjectInstance = OvhApiCloudProjectInstance;\n    this.OvhApiCloudProjectNetworkPrivateSubnet = OvhApiCloudProjectNetworkPrivateSubnet;\n  }\n\n  getAugmentedImages(images) {\n    return _.map(_.uniq(images, 'id'), this.CloudImageService.constructor.augmentImage);\n  }\n\n  filterFlavorsByType(flavors, type) {\n    return _(flavors)\n      .filter({\n        available: true,\n        osType: type,\n      })\n      .map(flavor => this.CloudFlavorService.augmentFlavor(flavor))\n      .filter({\n        diskType: 'ssd',\n        flex: false,\n      })\n      .value();\n  }\n\n  static getFilteredFlavorsByRegion(flavors, regionCode) {\n    const filteredFlavors = _.uniq(_.remove(flavors, { region: regionCode }), 'name');\n    const usedFlavorNames = _.uniq(_.map(filteredFlavors, flavor => flavor.name));\n    const notAvailableFlavors = _.filter(\n      flavors,\n      flavor => !_.include(usedFlavorNames, flavor.name),\n    );\n    const outOfRegionFlavors = _.map(_.uniq(notAvailableFlavors, 'name'), (flavor) => {\n      _.set(flavor, 'regions', _.map(_.filter(notAvailableFlavors, f => f.name === flavor.name), 'region'));\n      _.set(flavor, 'disabled', 'NOT_AVAILABLE');\n      delete flavor.region; // eslint-disable-line\n      delete flavor.price; // eslint-disable-line\n      return flavor;\n    });\n\n    return filteredFlavors.concat(outOfRegionFlavors);\n  }\n\n  static getFilteredPrivateNetworksByRegion(privateNetworks, regionCode, subNets = []) {\n    return _.chain(privateNetworks)\n      .filter((network) => {\n        if (!_.has(subNets, network.id)) {\n          return false;\n        }\n        return _.some(network.regions, 'region', regionCode);\n      })\n      .sortBy('vlanId')\n      .map((network) => {\n        const pad = Array(5).join('0');\n        return _.assign(network, {\n          vlanId: pad.substring(0, pad.length - network.vlanId.toString().length) + network.vlanId,\n        });\n      })\n      .value();\n  }\n\n  /* eslint-disable no-nested-ternary */\n  getImageApps(images) {\n    return _.uniq(_.forEach(this.CloudImageService.constructor.getApps(images), (app) => {\n      _.set(app, 'appName', _.get(app, 'name', '')\n        .replace(/^[a-z0-9\\s]+ - /ig, '')\n        .replace(' - deprecated', ''));\n      delete app.region; // eslint-disable-line\n      delete app.id; // eslint-disable-line\n    }), 'name').sort((image1, image2) => (image1.appName < image2.appName ? -1 : image1.appName > image2.appName ? 1 : 0));\n  }\n  /* eslint-enable no-nested-ternary */\n\n  static getMostRecentVm(vms) {\n    return _.filter(vms, { status: 'ACTIVE' }).sort((vm1, vm2) => new Date(vm2.created) - new Date(vm1.created))[0] || null;\n  }\n\n  getPrivateNetworksSubNets(serviceName, privateNetworks) {\n    let networkIds = [];\n    return _.chain(privateNetworks)\n      .map(_.property('id'))\n      .tap((ids) => { networkIds = ids; })\n      .map(networkId => this.OvhApiCloudProjectNetworkPrivateSubnet.v6()\n        .query({ serviceName, networkId }).$promise)\n      .thru((promises) => { // .mapKeys on a more recent lodash.\n        const collection = {};\n        _.forEach(promises, (promise, key) => {\n          collection[networkIds[key]] = promise;\n        });\n        return this.$q.all(collection);\n      })\n      .value()\n      .then(subNets => subNets)\n      .catch(() => []);\n  }\n\n  getRegionsByImageType(regions, allImages, imageType) {\n    if (this.CloudImageService.constructor.isSnapshot(imageType)) {\n      return _.filter(regions, region => _.get(imageType, 'region', '') === region.microRegion.code);\n    }\n\n    const filteredImages = _.filter(_.cloneDeep(allImages), {\n      distribution: _.get(imageType, 'distribution'),\n      nameGeneric: _.get(imageType, 'nameGeneric'),\n      status: 'active',\n    });\n    const filteredRegions = _.uniq(_.map(filteredImages, image => image.region));\n    return _.filter(regions, region => _.indexOf(filteredRegions, region.microRegion.code) > -1);\n  }\n\n  static groupRegionsByDatacenter(regions) {\n    const groupedByMacroRegions = _.groupBy(regions, 'macroRegion.code');\n    const groupedRegions = _.map(groupedByMacroRegions, (microRegions) => {\n      const region = _.cloneDeep(microRegions[0]);\n      region.dataCenters = microRegions;\n      delete region.microRegion;\n      delete region.disabled;\n      return region;\n    });\n    return groupedRegions;\n  }\n\n  groupFlavorsByCategory(flavors, flavorsTypes) {\n    return _(flavorsTypes)\n      .chain()\n      .reduce((previousValues, flavorType) => {\n        const flavorsOfCurrentFlavorType = _(flavors).filter({ type: flavorType }).value();\n\n        if (_(flavorsOfCurrentFlavorType).isEmpty()) {\n          return previousValues;\n        }\n\n        const category = this.CloudFlavorService.getCategory(flavorType, true);\n        const categoryObject = _(previousValues).find({ category: category.id });\n        const matchingFlavors = _(flavors).filter({ type: flavorType }).value();\n\n        if (!categoryObject) {\n          return previousValues.concat({\n            category: category.id,\n            order: category.order,\n            flavors: matchingFlavors,\n          });\n        }\n\n        categoryObject.flavors = categoryObject.flavors\n          .concat(matchingFlavors)\n          .sort((a, b) => a.name.localeCompare(b.name, undefined, { numeric: true, sensitivity: 'base' }));\n\n        return previousValues;\n      }, [])\n      .sortBy('order')\n      .value();\n  }\n\n  hasVRack(serviceName) {\n    return this.OvhApiCloudProject.v6().vrack({ serviceName }).$promise\n      .then(() => true)\n      .catch((err) => {\n        if (_.get(err, 'status') === 404) {\n          return false;\n        }\n        return this.$q.reject(err);\n      });\n  }\n\n  openSshKeyRegionModal(sshKey) {\n    return this.ControllerModalHelper.showConfirmationModal({\n      titleText: this.$translate.instant('cpcivm_add_step1_sshKey_regions_title'),\n      text: this.$translate.instant('cpcivm_add_step1_sshKey_regions_message', { sshKey }),\n    });\n  }\n\n  openQuotaModal(type, params = null) {\n    this.ControllerModalHelper.showWarningModal({\n      title: this.$translate.instant(`cpcivm_add_step3_disabled_${type}`),\n      message: this.$translate.instant(`cpcivm_add_step3_disabled_message_${type}`, params),\n    });\n  }\n\n  createVirtualMachine(serviceName, data) {\n    const postVm = {\n      flavorId: _.get(data, 'flavor.id'),\n      imageId: _.get(data, 'imageId.id'),\n      name: _.get(data, 'name', 'No Name'),\n      region: _.get(data, 'region.microRegion.code'),\n      sshKeyId: _.get(data, 'sshKey.id', undefined),\n      monthlyBilling: _.get(data, 'billingPeriod', '') === 'monthly',\n      userData: _.get(data, 'userData', undefined),\n      networks: _.get(data, 'networks', undefined),\n    };\n\n    if (data.number > 1) {\n      postVm.number = data.number;\n      return this.OvhApiCloudProjectInstance.v6().bulk({ serviceName }, postVm).$promise;\n    }\n\n    return this.OvhApiCloudProjectInstance.v6().save({ serviceName }, postVm).$promise;\n  }\n\n  static roundBandwidthValue(value) {\n    return Math.floor(value / 50) * 50;\n  }\n}\n\nangular.module('managerApp').service('CloudProjectVirtualMachineAddService', CloudProjectVirtualMachineAddService);\n"]}