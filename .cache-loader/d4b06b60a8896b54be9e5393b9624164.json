{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/openstackClient/cloud-project-compute-infrastructure-openstack-client.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/openstackClient/cloud-project-compute-infrastructure-openstack-client.controller.js","mtime":1539717374455},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeInfrastructureOpenstackClientCtrl {\n  constructor($interval, $q, $stateParams, $translate, CloudMessage,\n    CloudProjectComputeInfrastructureOpenstackClientService, ControllerHelper,\n    OvhApiCloudProjectOpenstackClient, OvhApiCloudProjectRegion) {\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.Service = CloudProjectComputeInfrastructureOpenstackClientService;\n    this.ControllerHelper = ControllerHelper;\n    this.OvhApiCloudProjectOpenstackClient = OvhApiCloudProjectOpenstackClient;\n    this.OvhApiCloudProjectRegion = OvhApiCloudProjectRegion;\n\n    this.serviceName = this.$stateParams.projectId;\n    this.term = new Terminal();\n    this.messages = [];\n    this.emptyOption = 'emptyOption';\n    this.region = this.emptyOption;\n    this.minimized = sessionStorage.getItem('CloudProjectComputeInfrastructureOpenstackClientCtrl.minimized') !== 'false';\n    this.maximized = sessionStorage.getItem('CloudProjectComputeInfrastructureOpenstackClientCtrl.maximized') === 'true';\n    this.actions = {\n      help: 'openstack help | less',\n      catalog: 'openstack catalog list',\n      server: 'openstack server list',\n      image: 'openstack image list',\n      flavor: 'openstack flavor list',\n      volume: 'openstack volume list',\n      network: 'openstack network list',\n      subnet: 'openstack subnet list',\n      'create server': 'create-server.sh',\n      'bigdata platform': 'bigdata-platform-cli',\n    };\n\n    this.initLoaders();\n  }\n\n  initWithConfig(config) {\n    this.actions = _.get(config, 'actions', this.actions);\n    this.region = _.get(config, 'region', this.region);\n    const session = _.get(config, 'session');\n\n    if (session) {\n      this.minimized = false;\n      this.maximized = false;\n      _.set(this.session, 'data', this.Service.setSession(session, this.term));\n    }\n\n    this.load();\n  }\n\n\n  initAndMaximizeWithConfig(config) {\n    this.OvhApiCloudProjectOpenstackClient.initWithConfig(config);\n    this.OvhApiCloudProjectOpenstackClient.maximize();\n  }\n\n  initLoaders() {\n    this.session = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.Service.getSession({\n        serviceName: this.serviceName,\n        term: this.term,\n      }),\n    });\n    this.regions = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.Service.getRegions(this.serviceName),\n    });\n  }\n\n  $onInit() {\n    this.initWithConfig(this.$stateParams.hTerm);\n    this.CloudMessage.unSubscribe('iaas.pci-project.compute.openstack-console');\n    this.messageHandler = this.CloudMessage.subscribe('iaas.pci-project.compute.openstack-console', { onMessage: () => this.refreshMessages() });\n  }\n\n  refreshMessages() {\n    this.messages = this.messageHandler.getMessages();\n  }\n\n  clickBar() {\n    if (this.minimized) {\n      this.minimized = false;\n      this.load();\n      this.savePrefs();\n    }\n  }\n\n  minimize($event) {\n    this.minimized = !this.minimized;\n    this.maximized = false;\n    this.savePrefs();\n    $event.stopPropagation();\n  }\n\n  maximize($event) {\n    this.maximized = !this.maximized;\n    this.minimized = false;\n    this.load();\n    this.savePrefs();\n    $event.stopPropagation();\n  }\n\n  $onDestroy() {\n    this.Service.close();\n  }\n\n  load() {\n    if (this.minimized) {\n      return;\n    }\n\n    // No cache as it's POST\n    if (!this.session.loading && (this.session.hasErrors || _.isEmpty(this.session.data))) {\n      this.session.load();\n    }\n    this.regions.load();\n  }\n\n  savePrefs() {\n    sessionStorage.setItem('CloudProjectComputeInfrastructureOpenstackClientCtrl.minimized', this.minimized);\n    sessionStorage.setItem('CloudProjectComputeInfrastructureOpenstackClientCtrl.maximized', this.maximized);\n  }\n}\n\n\nangular.module('managerApp').controller('CloudProjectComputeInfrastructureOpenstackClientCtrl', CloudProjectComputeInfrastructureOpenstackClientCtrl);\n"]}