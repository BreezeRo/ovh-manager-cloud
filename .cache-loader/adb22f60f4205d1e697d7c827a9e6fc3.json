{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/flavor.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/flavor.service.js","mtime":1539717374442},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["(() => {\n  const oldFlavorRegex = /eg|sp|hg|vps-ssd/;\n\n  class CloudFlavorService {\n    constructor($filter,\n      CLOUD_FLAVORTYPE_CATEGORY, CLOUD_INSTANCE_CPU_FREQUENCY, CLOUD_INSTANCE_NUMBER_OF_GPUS) {\n      this.$filter = $filter;\n\n      this.CLOUD_FLAVORTYPE_CATEGORY = CLOUD_FLAVORTYPE_CATEGORY;\n      this.CLOUD_INSTANCE_CPU_FREQUENCY = CLOUD_INSTANCE_CPU_FREQUENCY;\n      this.CLOUD_INSTANCE_NUMBER_OF_GPUS = CLOUD_INSTANCE_NUMBER_OF_GPUS;\n    }\n\n    static isOldFlavor(flavorName) {\n      return oldFlavorRegex.test(flavorName);\n    }\n\n    static getFlavorTypes(flavors) {\n      return _.uniq(_.map(flavors, 'type'));\n    }\n\n    static addPriceInfos(flavor, prices) {\n      const price = { price: { value: 0 }, monthlyPrice: { value: 0 } };\n      const planHourly = prices[_.get(flavor, 'planCodes.hourly')];\n      if (planHourly) {\n        _.set(price, 'price', planHourly.price);\n        // Set 3 digits for hourly price\n        _.set(price, 'price.text', _.get(price, 'price.text', '').replace(/\\d+(?:[.,]\\d+)?/, `${price.price.value.toFixed(3)}`));\n      }\n      const planMonthly = prices[_.get(flavor, 'planCodes.monthly')];\n      if (planMonthly) {\n        _.set(price, 'monthlyPrice', planMonthly.price);\n      }\n      _.set(flavor, 'price', price);\n    }\n\n    static addOverQuotaInfos(flavor, quota, minDisk = 0, minRam = 0) {\n      const quotaByRegion = _.find(quota, { region: flavor.region });\n      const instanceQuota = _.get(quotaByRegion, 'instance', false);\n      if (instanceQuota) {\n        // set over quota reason\n        if (instanceQuota.maxInstances !== -1\n          && instanceQuota.usedInstances >= instanceQuota.maxInstances) {\n          _.set(flavor, 'disabled', 'QUOTA_INSTANCE');\n        } else if (flavor.ram && instanceQuota.maxRam !== -1\n            && flavor.ram > instanceQuota.maxRam - instanceQuota.usedRAM) {\n          _.set(flavor, 'disabled', 'QUOTA_RAM');\n        } else if (flavor.vcpus\n            && instanceQuota.maxCores !== -1\n            && flavor.vcpus > instanceQuota.maxCores - instanceQuota.usedCores) {\n          _.set(flavor, 'disabled', 'QUOTA_VCPUS');\n        }\n\n        // set max instances (-1 : unlimited)\n        if (instanceQuota.maxInstances === -1) {\n          _.set(flavor, 'maxInstance', -1);\n        } else {\n          _.set(flavor, 'maxInstance', instanceQuota.maxInstances - instanceQuota.usedInstances);\n        }\n\n        if (instanceQuota.maxRam === -1) {\n          _.set(flavor, 'maxInstance', Math.max(flavor.maxInstance, -1));\n        } else {\n          _.set(flavor, 'maxInstance', Math.min(flavor.maxInstance > -1 ? flavor.maxInstance : 1000, Math.floor((instanceQuota.maxRam - instanceQuota.usedRAM) / flavor.ram)));\n        }\n\n        if (instanceQuota.maxCores === -1) {\n          _.set(flavor, 'maxInstance', Math.max(flavor.maxInstance, -1));\n        } else {\n          _.set(flavor, 'maxInstance', Math.min(flavor.maxInstance > -1 ? flavor.maxInstance : 1000, Math.floor((instanceQuota.maxCores - instanceQuota.usedCores) / flavor.vcpus)));\n        }\n      }\n\n      if (minDisk > flavor.disk && !flavor.disabled) {\n        _.set(flavor, 'disabled', 'QUOTA_MINDISK');\n      }\n\n      if (minRam > flavor.ram && !flavor.disabled) {\n        _.set(flavor, 'disabled', 'QUOTA_MINRAM');\n      }\n    }\n\n    getQuotaRam(flavor, quota) {\n      const quotaByRegion = _.find(quota, { region: flavor.region });\n      const instanceQuota = _.get(quotaByRegion, 'instance', false);\n      if (instanceQuota) {\n        return {\n          max: this.$filter('bytes')(instanceQuota.maxRam, 0, false, 'MB'),\n          used: this.$filter('bytes')(instanceQuota.usedRAM, 0, false, 'MB'),\n          remaining: this.$filter('bytes')(instanceQuota.maxRam - instanceQuota.usedRAM, 0, false, 'MB'),\n          required: this.$filter('bytes')(flavor.ram, 0, false, 'MB'),\n        };\n      }\n      return null;\n    }\n\n    static getQuotaCore(flavor, quota) {\n      const quotaByRegion = _.find(quota, { region: flavor.region });\n      const instanceQuota = _.get(quotaByRegion, 'instance', false);\n      if (instanceQuota) {\n        return {\n          max: instanceQuota.maxCores,\n          used: instanceQuota.usedCores,\n          remaining: instanceQuota.maxCores - instanceQuota.usedCores,\n          required: flavor.vcpus,\n        };\n      }\n      return null;\n    }\n\n    getRequirements(flavor, image) {\n      return {\n        name: _.get(image, 'name', undefined),\n        currentDisk: this.$filter('bytes')(flavor.disk, 2, false, 'GB'),\n        currentRam: this.$filter('bytes')(flavor.ram, 2, false, 'MB'),\n        requiredDisk: this.$filter('bytes')(image.minDisk, 2, false, 'GB') || undefined,\n        requiredRam: this.$filter('bytes')(image.minRam, 2, false, 'MB') || undefined,\n      };\n    }\n\n    augmentFlavor(flavor) {\n      if (!flavor) {\n        return null;\n      }\n\n      const augmentedFlavor = _.cloneDeep(flavor);\n      augmentedFlavor.frequency = this.CLOUD_INSTANCE_CPU_FREQUENCY[flavor.type];\n\n      if (/vps/.test(flavor.type)) {\n        return Object.assign({\n          vps: true,\n          diskType: 'ssd',\n          flex: false,\n          shortGroupName: flavor.name,\n        },\n        augmentedFlavor);\n      }\n\n      let shortType;\n      let numberType;\n\n      if (flavor.osType === 'windows') {\n        [, shortType, numberType] = flavor.name.split('-');\n      } else {\n        [shortType, numberType] = flavor.name.split('-');\n      }\n\n      if (shortType) {\n        augmentedFlavor.shortType = shortType;\n      }\n\n      if (numberType) {\n        augmentedFlavor.numberType = numberType;\n      }\n\n      if (shortType && numberType) {\n        augmentedFlavor.shortGroupName = `${shortType}-${numberType}`;\n      }\n\n      augmentedFlavor.flex = /flex$/.test(flavor.name);\n      augmentedFlavor.diskType = [/ssd/, /nvme/].some(regex => regex.test(flavor.type)) ? 'ssd' : 'ceph';\n\n      const flavorContainsGPUs = _(['g1', 'g2', 'g3', 't1']).includes(augmentedFlavor.shortType);\n      if (flavorContainsGPUs) {\n        augmentedFlavor.imageType = flavor.osType === 'windows' ? ['uefi'] : augmentedFlavor.imageType;\n        augmentedFlavor.gpuCardCount = _(this.CLOUD_INSTANCE_NUMBER_OF_GPUS).get(\n          numberType,\n          this.CLOUD_INSTANCE_NUMBER_OF_GPUS.default,\n        );\n      }\n\n      augmentedFlavor.isOldFlavor = CloudFlavorService.isOldFlavor(flavor.name);\n\n\n      return augmentedFlavor;\n    }\n\n    getCategory(flavorType) {\n      return _(this.CLOUD_FLAVORTYPE_CATEGORY).find(\n        currentCategory => _(currentCategory.types).includes(flavorType),\n      );\n    }\n  }\n\n  angular.module('managerApp').service('CloudFlavorService', CloudFlavorService);\n})();\n"]}