{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/navbar/navbar.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/navbar/navbar.service.js","mtime":1539717374674},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class ManagerNavbarService {\n  constructor($q,\n    $translate,\n    atInternet,\n    FeatureAvailabilityService,\n    LANGUAGES,\n    MANAGER_URLS,\n    NavbarNotificationService,\n    OtrsPopupService,\n    ProductsService,\n    REDIRECT_URLS,\n    SessionService,\n    ssoAuthentication,\n    TARGET,\n    TranslateService,\n    URLS,\n    asyncLoader) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.atInternet = atInternet;\n    this.featureAvailabilityService = FeatureAvailabilityService;\n    this.LANGUAGES = LANGUAGES;\n    this.MANAGER_URLS = MANAGER_URLS;\n    this.navbarNotificationService = NavbarNotificationService;\n    this.otrsPopupService = OtrsPopupService;\n    this.productsService = ProductsService;\n    this.REDIRECT_URLS = REDIRECT_URLS;\n    this.sections = {\n      iaas: ['PROJECT', 'VPS', 'SERVER', 'DEDICATED_CLOUD', 'HOUSING'],\n      paas: ['CEPH', 'KUBE', 'NAS', 'NASHA', 'CDN', 'VEEAM', 'VEEAM_ENTERPRISE'],\n      metrics: 'METRICS',\n      vracks: 'VRACK',\n      loadBalancer: 'LOAD_BALANCER',\n      cloudDesktop: 'CLOUD_DESKTOP',\n    };\n    this.sessionService = SessionService;\n    this.ssoAuthentication = ssoAuthentication;\n    this.TARGET = TARGET;\n    this.translateService = TranslateService;\n    this.URLS = URLS;\n    this.asyncLoader = asyncLoader;\n  }\n\n  getProducts(products) {\n    const getServices = (section, products) => { // eslint-disable-line\n      // If only one section (string), return a simple array\n      if (_.isString(section)) {\n        return _.map(_.get(_.find(products, { name: section }), 'services'));\n      }\n\n      // Return object of all sections\n      const services = _.map(section, serviceType => _.map(_.get(_.find(products, { name: serviceType }), 'services')));\n      return _.zipObject(section, services);\n    };\n\n    return {\n      iaas: getServices(this.sections.iaas, products),\n      paas: getServices(this.sections.paas, products),\n      metrics: getServices(this.sections.metrics, products),\n      vracks: getServices(this.sections.vracks, products),\n      loadBalancer: getServices(this.sections.loadBalancer, products),\n      cloudDesktop: getServices(this.sections.cloudDesktop, products),\n    };\n  }\n\n  static getProductsMenu(categoryName, products) {\n    return _.map(products, product => ({\n      title: product.displayName,\n      state: categoryName,\n      stateParams: {\n        serviceName: product.serviceName,\n      },\n    }));\n  }\n\n  getSectionTitle(section) {\n    switch (section) {\n      case 'PROJECT':\n        return this.$translate.instant('cloud_sidebar_section_cloud_project');\n      case 'VPS':\n        return this.$translate.instant('cloud_sidebar_section_vps');\n      case 'SERVER':\n        return this.$translate.instant('cloud_sidebar_section_dedicated_server');\n      case 'DEDICATED_CLOUD':\n        return this.$translate.instant('cloud_sidebar_section_dedicated_cloud');\n      case 'HOUSING':\n        return this.$translate.instant('cloud_sidebar_section_housing');\n      case 'CEPH':\n        return this.$translate.instant('cloud_sidebar_section_paas_cda');\n      case 'NAS':\n        return this.$translate.instant('cloud_sidebar_section_nas');\n      case 'NASHA':\n        return this.$translate.instant('cloud_sidebar_section_nasha');\n      case 'CDN':\n        return this.$translate.instant('cloud_sidebar_section_cdn');\n      case 'VEEAM':\n        return this.$translate.instant('cloud_sidebar_section_paas_veeam');\n      case 'VEEAM_ENTERPRISE':\n        return this.$translate.instant('cloud_sidebar_section_paas_veeam_enterprise');\n      case 'KUBE':\n        return this.$translate.instant('cloud_sidebar_section_paas_kube');\n      default:\n        return '';\n    }\n  }\n\n  getIaasMenu(products) {\n    return _.map(this.sections.iaas, section => ({\n      name: `iaas.${section}`,\n      title: this.getSectionTitle(section),\n      subLinks: !products[section].length ? null : _.map(products[section], (service) => {\n        switch (section) {\n          case 'PROJECT':\n            return {\n              name: service.serviceName,\n              title: service.displayName,\n              subLinks: [{\n                title: this.$translate.instant('cloud_sidebar_pci_infrastructure'),\n                state: 'iaas.pci-project.compute',\n                stateParams: {\n                  projectId: service.serviceName,\n                },\n              }, {\n                title: this.$translate.instant('cloud_sidebar_pci_object_storage'),\n                state: 'iaas.pci-project.compute.storage',\n                stateParams: {\n                  projectId: service.serviceName,\n                },\n              }, {\n                title: this.$translate.instant('cloud_sidebar_pci_manage'),\n                state: 'iaas.pci-project.billing',\n                stateParams: {\n                  projectId: service.serviceName,\n                },\n              }, {\n                title: this.$translate.instant('cloud_sidebar_pci_openstack'),\n                state: 'iaas.pci-project.compute.openstack',\n                stateParams: {\n                  projectId: service.serviceName,\n                },\n              }],\n            };\n          case 'VPS':\n            return {\n              title: service.displayName,\n              state: 'iaas.vps.detail.dashboard',\n              stateParams: {\n                serviceName: service.serviceName,\n              },\n            };\n          case 'SERVER':\n            return {\n              title: service.displayName,\n              url: this.REDIRECT_URLS.dedicatedServersPage.replace('{server}', service.serviceName),\n            };\n          case 'DEDICATED_CLOUD':\n            return {\n              title: service.displayName,\n              url: this.REDIRECT_URLS.dedicatedCloudPage.replace('{pcc}', service.serviceName),\n            };\n          case 'HOUSING':\n            return {\n              title: service.displayName,\n              url: this.REDIRECT_URLS.housing.replace('{housing}', service.serviceName),\n            };\n          default:\n            return '';\n        }\n      }),\n    }));\n  }\n\n  getPaasMenu(products) {\n    return _.map(this.sections.paas, section => ({\n      name: `paas.${section}`,\n      title: this.getSectionTitle(section),\n      subLinks: !products[section].length ? null : _.map(products[section], (service) => {\n        switch (section) {\n          case 'CEPH':\n            return {\n              title: service.displayName,\n              state: 'paas.cda.cda-details.cda-details-home',\n              stateParams: {\n                serviceName: service.serviceName,\n              },\n            };\n          case 'KUBE':\n            return {\n              title: service.displayName,\n              state: 'paas.kube.service',\n              stateParams: {\n                serviceName: service.serviceName,\n              },\n            };\n          case 'NAS':\n            return {\n              title: service.displayName,\n              url: this.REDIRECT_URLS.nasPage.replace('{nas}', service.serviceName),\n            };\n          case 'NASHA':\n            return {\n              title: service.displayName,\n              state: 'paas.nasha.nasha-partitions',\n              stateParams: {\n                nashaId: service.serviceName,\n              },\n            };\n          case 'CDN':\n            return {\n              title: service.displayName,\n              url: this.REDIRECT_URLS.cdnPage.replace('{cdn}', service.serviceName),\n            };\n          case 'VEEAM':\n            return {\n              title: service.displayName,\n              state: 'paas.veeam.detail.dashboard',\n              stateParams: {\n                serviceName: service.serviceName,\n              },\n            };\n          case 'VEEAM_ENTERPRISE':\n            return {\n              title: service.displayName,\n              state: 'paas.veeam-enterprise.dashboard',\n              stateParams: {\n                serviceName: service.serviceName,\n              },\n            };\n          default:\n            return '';\n        }\n      }),\n    }));\n  }\n\n  static getCloudDesktopMenu(categoryName, products) {\n    return _.map(products, product => ({\n      title: (product.displayName === 'noAlias') ? product.serviceName : product.displayName,\n      state: categoryName,\n      stateParams: {\n        serviceName: product.serviceName,\n      },\n    }));\n  }\n\n  getUniverseMenu(products) {\n    const universeProducts = this.getProducts(products);\n    const universeMenu = [{\n      // Iaas\n      name: 'iaas',\n      title: this.$translate.instant('cloud_sidebar_section_iaas'),\n      subLinks: this.getIaasMenu(universeProducts.iaas),\n    }, {\n      // Paas\n      name: 'paas',\n      title: this.$translate.instant('cloud_sidebar_section_paas'),\n      subLinks: this.getPaasMenu(universeProducts.paas),\n    }, {\n      // Metrics\n      name: 'dbaas.metrics',\n      title: this.$translate.instant('cloud_sidebar_section_metrics'),\n      subLinks: this.constructor.getProductsMenu('dbaas.metrics.detail.dashboard', universeProducts.metrics),\n    }, {\n      // Licences (Link)\n      title: this.$translate.instant('cloud_sidebar_section_license'),\n      url: this.REDIRECT_URLS.license,\n    }, {\n      // IP (Link)\n      title: this.$translate.instant('cloud_sidebar_section_ip'),\n      url: this.REDIRECT_URLS.ip,\n    }, {\n      // Load Balancer\n      name: 'network.iplb',\n      title: this.$translate.instant('cloud_sidebar_section_load_balancer'),\n      subLinks: this.constructor.getProductsMenu('network.iplb.detail.home', universeProducts.loadBalancer),\n    }, {\n      // vRack\n      name: 'vrack',\n      title: this.$translate.instant('cloud_sidebar_section_vrack'),\n      subLinks: _.map(universeProducts.vracks, product => ({\n        title: product.displayName,\n        state: 'vrack',\n        stateParams: {\n          vrackId: product.serviceName,\n        },\n      })),\n    }];\n\n    // Cloud Desktop\n    if (this.featureAvailabilityService.hasFeature('CLOUD_DESKTOP', 'sidebarMenu', this.locale)) {\n      universeMenu.push({\n        name: 'deskaas',\n        title: this.$translate.instant('cloud_sidebar_section_cloud_desktop'),\n        subLinks: this.constructor.getCloudDesktopMenu('deskaas.details', universeProducts.cloudDesktop),\n      });\n    }\n\n    return universeMenu;\n  }\n\n  getAssistanceMenu(locale) {\n    const assistanceMenu = [];\n\n    // Guides (External)\n    const cloudGuide = _.get(this.URLS.guides, `cloud.${locale}`);\n    const homeGuide = _.get(this.URLS.guides, `home.${locale}`);\n    const frenchHomeGuide = _.get(this.URLS.guides, 'home.FR');\n    if (cloudGuide) {\n      assistanceMenu.push({\n        title: this.$translate.instant('common_menu_support_guide'),\n        url: cloudGuide,\n        isExternal: true,\n      });\n    } else if (homeGuide) {\n      assistanceMenu.push({\n        title: this.$translate.instant('common_menu_support_all_guides'),\n        url: homeGuide,\n        isExternal: true,\n      });\n    } else if (frenchHomeGuide) {\n      assistanceMenu.push({\n        title: this.$translate.instant('common_menu_support_all_guides'),\n        url: frenchHomeGuide,\n        isExternal: true,\n      });\n    }\n\n    // New ticket\n    assistanceMenu.push({\n      title: this.$translate.instant('common_menu_support_new_ticket'),\n      click: (callback) => {\n        if (!this.otrsPopupService.isLoaded()) {\n          this.otrsPopupService.init();\n        } else {\n          this.otrsPopupService.toggle();\n        }\n\n        if (typeof callback === 'function') {\n          callback();\n        }\n      },\n    });\n\n    // Tickets list\n    assistanceMenu.push({\n      title: this.$translate.instant('common_menu_support_list_ticket'),\n      url: _.get(this.REDIRECT_URLS, 'support', ''),\n    });\n\n    // Telephony (External)\n    if (this.TARGET !== 'US') {\n      assistanceMenu.push({\n        title: this.$translate.instant('common_menu_support_telephony_contact'),\n        url: this.URLS.support_contact[locale] || this.URLS.support_contact.FR,\n        isExternal: true,\n      });\n    }\n\n    return {\n      name: 'assistance',\n      title: this.$translate.instant('common_menu_support_assistance'),\n      iconClass: 'icon-assistance',\n      subLinks: assistanceMenu,\n    };\n  }\n\n  getLanguageMenu() {\n    const currentLanguage = _.find(\n      this.LANGUAGES.available,\n      {\n        key: this.translateService.getUserLocale(),\n      },\n    );\n\n    return {\n      name: 'languages',\n      label: _(currentLanguage).get('name'),\n      class: 'oui-navbar-menu_language',\n      title: _(currentLanguage).get('key').split('_')[0].toUpperCase(),\n      headerTitle: this.$translate.instant('common_menu_language'),\n      subLinks: _.map(this.LANGUAGES.available, lang => ({\n        title: lang.name,\n        isActive: lang.key === currentLanguage.key,\n        click: () => {\n          this.translateService.setUserLocale(lang.key);\n          window.location.reload();\n        },\n        lang: _.chain(lang.key).words().head().value(),\n      })),\n    };\n  }\n\n  getUserMenu(currentUser) {\n    return {\n      name: 'user',\n      title: currentUser.firstname,\n      iconClass: 'icon-user',\n      nichandle: currentUser.nichandle,\n      fullName: `${currentUser.firstname} ${currentUser.name}`,\n      subLinks: [\n        // My Account\n        {\n          name: 'user.account',\n          title: this.$translate.instant('common_menu_account'),\n          url: this.REDIRECT_URLS.userInfos,\n          subLinks: [{\n            title: this.$translate.instant('common_menu_account_infos'),\n            url: this.REDIRECT_URLS.userInfos,\n          }, {\n            title: this.$translate.instant('common_menu_account_security'),\n            url: this.REDIRECT_URLS.userSecurity,\n          },\n          (this.TARGET === 'EU' || this.TARGET === 'CA') && {\n            title: this.$translate.instant('common_menu_account_emails'),\n            url: this.REDIRECT_URLS.userEmails,\n          },\n          (this.TARGET === 'EU') && {\n            title: this.$translate.instant('common_menu_account_subscriptions'),\n            url: this.REDIRECT_URLS.userSubscriptions,\n          }, {\n            title: this.$translate.instant('common_menu_account_ssh'),\n            url: this.REDIRECT_URLS.userSSH,\n          }, {\n            title: this.$translate.instant('common_menu_account_advanced'),\n            url: this.REDIRECT_URLS.userAdvanced,\n          }],\n        },\n\n        // Billing\n        !currentUser.isEnterprise && {\n          name: 'user.billing',\n          title: this.$translate.instant('common_menu_billing'),\n          url: this.REDIRECT_URLS.billing,\n          subLinks: [{\n            title: this.$translate.instant('common_menu_billing_history'),\n            url: this.REDIRECT_URLS.billing,\n          }, {\n            title: this.$translate.instant('common_menu_billing_payments'),\n            url: this.REDIRECT_URLS.billingPayments,\n          }],\n        },\n\n        // Services\n        (this.TARGET === 'EU' || this.TARGET === 'CA') && (!currentUser.isEnterprise ? {\n          name: 'user.services',\n          title: this.$translate.instant('common_menu_renew'),\n          url: this.REDIRECT_URLS.services,\n          subLinks: [{\n            title: this.$translate.instant('common_menu_renew_management'),\n            url: this.REDIRECT_URLS.services,\n          }, {\n            title: this.$translate.instant('common_menu_renew_agreements'),\n            url: this.REDIRECT_URLS.servicesAgreements,\n          }],\n        } : {\n          title: this.$translate.instant('common_menu_renew_agreements'),\n          url: this.REDIRECT_URLS.servicesAgreements,\n        }),\n\n        // Payment\n        !currentUser.isEnterprise && {\n          name: 'user.payment',\n          title: this.$translate.instant('common_menu_means'),\n          url: this.REDIRECT_URLS.paymentMeans,\n          subLinks: [{\n            title: this.$translate.instant('common_menu_means_mean'),\n            url: this.REDIRECT_URLS.paymentMeans,\n          },\n          (this.TARGET === 'EU' || this.TARGET === 'CA') && {\n            title: this.$translate.instant('common_menu_means_ovhaccount'),\n            url: this.REDIRECT_URLS.ovhAccount,\n          },\n          (this.TARGET === 'EU' || this.TARGET === 'CA') && {\n            title: this.$translate.instant('common_menu_means_vouchers'),\n            url: this.REDIRECT_URLS.billingVouchers,\n          }, {\n            title: this.$translate.instant('common_menu_means_refunds'),\n            url: this.REDIRECT_URLS.billingRefunds,\n          },\n          (this.TARGET === 'EU') && {\n            title: this.$translate.instant('common_menu_means_fidelity'),\n            url: this.REDIRECT_URLS.billingFidelity,\n          }, {\n            title: this.$translate.instant('common_menu_means_credits'),\n            url: this.REDIRECT_URLS.billingCredits,\n          }],\n        },\n\n        // Orders\n        (!currentUser.isEnterprise && this.TARGET === 'EU' && currentUser.ovhSubsidiary === 'FR') && {\n          title: this.$translate.instant('common_menu_orders'),\n          url: this.REDIRECT_URLS.orders,\n        },\n\n        // Contacts\n        (this.TARGET === 'EU') && {\n          title: this.$translate.instant('common_menu_contacts'),\n          url: this.REDIRECT_URLS.contacts,\n        },\n\n        // Tickets\n        {\n          title: this.$translate.instant('common_menu_list_ticket'),\n          url: this.REDIRECT_URLS.support,\n        },\n\n        // Logout\n        {\n          title: this.$translate.instant('global_logout'),\n          class: 'logout',\n          click: (callback) => {\n            this.ssoAuthentication.logout();\n\n            if (typeof callback === 'function') {\n              callback();\n            }\n          },\n        },\n      ],\n    };\n  }\n\n  getInternalLinks(currentUser, notificationsMenu) {\n    // Return login link if user not logged\n    if (!currentUser) {\n      return [{\n        title: this.$translate.instant('common_login'),\n        click: () => this.ssoAuthentication.logout(),\n      }];\n    }\n\n    const menu = [\n      this.getLanguageMenu(), // Language\n      this.getAssistanceMenu(currentUser.ovhSubsidiary), // Assistance\n      this.getUserMenu(currentUser), // User\n    ];\n\n    if (notificationsMenu.show) {\n      menu.splice(1, 0, notificationsMenu);\n    }\n\n    return menu;\n  }\n\n  getManagersNames() {\n    switch (this.TARGET) {\n      case 'EU': {\n        if (this.locale === 'FR') {\n          return ['portal', 'web', 'dedicated', 'cloud', 'telecom', 'gamma', 'partners'];\n        }\n\n        return ['portal', 'web', 'dedicated', 'cloud', 'telecom', 'gamma'];\n      }\n      case 'CA': {\n        return ['dedicated', 'cloud', 'gamma'];\n      }\n      case 'US':\n      default: {\n        return ['dedicated', 'cloud'];\n      }\n    }\n  }\n\n  loadTranslations() {\n    return this.$translate.refresh();\n  }\n\n  // Get managers links for main-links attribute\n  getManagerLinks(products) {\n    const currentUniverse = 'cloud';\n    const managerUrls = this.MANAGER_URLS;\n    const managerNames = this.getManagersNames();\n\n    return _.map(managerNames, (managerName) => {\n      const managerLink = {\n        name: managerName,\n        class: managerName,\n        title: this.$translate.instant(`common_menu_${managerName}`),\n        url: managerUrls[managerName],\n        isPrimary: ['partners', 'labs'].indexOf(managerName) === -1,\n      };\n\n      if (products && managerName === currentUniverse) {\n        managerLink.subLinks = this.getUniverseMenu(products);\n      }\n\n      return managerLink;\n    });\n  }\n\n  // Get products and build responsive menu\n  getResponsiveLinks() {\n    return this.productsService.getProducts()\n      .then(({ results }) => this.getManagerLinks(results))\n      .catch(() => this.getManagerLinks());\n  }\n\n  // Get navbar navigation and user infos\n  getNavbar() {\n    const managerUrls = this.MANAGER_URLS;\n\n    // Get base structure for the navbar\n    const getBaseNavbar = (user, notifications) => {\n      this.locale = user.ovhSubsidiary;\n\n      return {\n        // Set OVH Logo\n        brand: {\n          label: this.$translate.instant('common_menu_cloud'),\n          url: managerUrls.cloud,\n          iconAlt: 'OVH',\n          iconClass: 'navbar-logo',\n          iconSrc: 'assets/images/navbar/icon-logo-ovh.svg',\n        },\n\n        // Set Internal Links\n        internalLinks: this.getInternalLinks(user, notifications),\n\n        // Set Manager Links\n        managerLinks: this.getManagerLinks(),\n      };\n    };\n\n    this.asyncLoader.addTranslations(\n      import(`../../app/common/translations/Messages_${this.$translate.use()}.xml`)\n        .catch(() => import(`../../app/common/translations/Messages_${this.$translate.fallbackLanguage()}.xml`))\n        .then(x => x.default),\n    );\n\n    return this.$q.all({\n      translate: this.loadTranslations(),\n      user: this.sessionService.getUser(),\n      notifications: this.navbarNotificationService.getNavbarContent(),\n    })\n      .then(({ user, notifications }) => getBaseNavbar(user, notifications))\n      .catch(() => getBaseNavbar());\n  }\n}\n\nangular.module('managerApp').service('ManagerNavbarService', ManagerNavbarService);\n"]}