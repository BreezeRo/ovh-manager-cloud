{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/message/message-container.component.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/message/message-container.component.js","mtime":1539717142268},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["(() => {\n  class UniqueMessageComposite {\n    constructor(messageList) {\n      this.messageList = messageList;\n      this.text = messageList[0].text;\n      this.textHtml = messageList[0].textHtml;\n      this.messageOrder = messageList[0].messageOrder;\n      this.type = messageList[0].type;\n      this.link = messageList[0].link;\n      this.dismissable = messageList[0].dismissable;\n      this.dismissed = !_.some(this.messageList, message => !message.dismissed);\n    }\n\n    dismiss() {\n      this.dismissed = true;\n      _.forEach(this.messageList, (message) => {\n        _.set(message, 'dismissed', true);\n        if (_.isFunction(message.dismiss)) {\n          message.dismiss();\n        }\n      });\n    }\n  }\n\n  class CuiMessageContainerCtrl {\n    constructor($scope) {\n      this.$scope = $scope;\n    }\n\n    $onInit() {\n      this.messages = this.messages || [];\n      this.dismissableTypes = this.dismissableTypes || ['info', 'success'];\n      this.groupedTypes = this.groupedTypes || ['error'];\n\n      this.$scope.$watchCollection(() => this.messages, () => {\n        this.refreshValues();\n        this.groupedMessages = this.getGroupedMessages();\n      });\n    }\n\n    static shouldDisplayGroupedMessages(messageCategory) {\n      return _.filter(\n        messageCategory.values,\n        value => !value.dismissed,\n      ).length !== 1 && messageCategory.isGroupable;\n    }\n\n    hasMessageToDisplay() {\n      return this.messages.length;\n    }\n\n    hasGroupMessageToDisplay(type) {\n      const messageGroup = _.find(this.groupedMessages, group => group.key === type);\n      return _.some(messageGroup.values, value => !value.dismissed);\n    }\n\n    refreshValues() {\n      let messageOrder = 0;\n\n      _.forEachRight(this.messages, (message) => {\n        if (!_.contains([true, false], message.dismissed)) {\n          _.set(message, 'dismissed', false);\n        }\n\n        _.set(message, 'dismissable', this.isDismissable(message.type));\n        _.set(message, 'messageOrder', messageOrder += 1);\n      });\n    }\n\n    getGroupedMessages() {\n      const groupedMessages = _.groupBy(this.messages, 'type');\n\n      const messagePriorities = {\n        error: 1,\n        warning: 2,\n        info: 3,\n        success: 4,\n      };\n\n      return _.map(_.keys(groupedMessages), key => ({\n        key,\n        values: this.constructor.extractUniqueMessage(groupedMessages[key]),\n        isGroupable: this.isGroupable(key),\n        priority: messagePriorities[key],\n        dismissable: this.isDismissable(key),\n      }));\n    }\n\n    isGroupable(type) {\n      return _.contains(this.groupedTypes, type);\n    }\n\n    isDismissable(type) {\n      return _.contains(this.dismissableTypes, type);\n    }\n\n    static extractUniqueMessage(messageList) {\n      const groupedMessages = _.groupBy(messageList, message => message.text || message.textHtml);\n      const groupedMessagesHash = _.map(\n        _.keys(groupedMessages),\n        key => new UniqueMessageComposite(groupedMessages[key]),\n      );\n      return groupedMessagesHash;\n    }\n\n    static onDismiss(message) {\n      message.dismiss();\n    }\n\n    static onGroupDismiss(groupedMessages) {\n      _.forEach(groupedMessages.values, message => message.dismiss());\n    }\n  }\n\n  angular.module('managerApp')\n    .component('cuiMessageContainer', {\n      templateUrl: 'app/ui-components/message/message-container.html',\n      controller: CuiMessageContainerCtrl,\n      bindings: {\n        messages: '<',\n        groupedTypes: '<',\n        dismissableTypes: '<',\n      },\n    });\n\n  angular.module('managerApp').controller('CuiMessageContainerCtrl', CuiMessageContainerCtrl);\n})();\n"]}