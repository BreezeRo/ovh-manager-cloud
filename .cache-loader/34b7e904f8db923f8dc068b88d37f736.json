{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/task/iplb-task.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/task/iplb-task.controller.js","mtime":1539717142222},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerTaskCtrl {\n  constructor($scope, $stateParams, ControllerHelper, CloudPoll, IpLoadBalancerTaskService,\n    ServiceHelper) {\n    this.$scope = $scope;\n    this.$stateParams = $stateParams;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudPoll = CloudPoll;\n    this.IpLoadBalancerTaskService = IpLoadBalancerTaskService;\n    this.ServiceHelper = ServiceHelper;\n\n    this.serviceName = this.$stateParams.serviceName;\n\n    this.tasks = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerTaskService.getTasks(this.serviceName),\n      successHandler: () => this.startTaskPolling(),\n    });\n\n    this.$scope.$on('$destroy', () => this.stopTaskPolling());\n  }\n\n  $onInit() {\n    this.tasks.load();\n  }\n\n  startTaskPolling() {\n    this.stopTaskPolling();\n\n    this.poller = this.CloudPoll.pollArray({\n      items: this.tasks.data,\n      pollFunction: task => this.IpLoadBalancerTaskService.getTask(this.serviceName, task.id),\n      stopCondition: task => _.includes(['done', 'error'], task.status),\n    });\n  }\n\n  stopTaskPolling() {\n    if (this.poller) {\n      this.poller.kill();\n    }\n  }\n\n  showTaskPreview(task) {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/iplb/task/preview/iplb-task-preview.html',\n        controller: 'IpLoadBalancerTaskPreviewCtrl',\n        controllerAs: '$ctrl',\n        resolve: {\n          task: () => task,\n        },\n      },\n    });\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerTaskCtrl', IpLoadBalancerTaskCtrl);\n"]}