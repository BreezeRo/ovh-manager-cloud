{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/privateNetwork/cloud-project-compute-infrastructure-privateNetwork-list.directive.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/privateNetwork/cloud-project-compute-infrastructure-privateNetwork-list.directive.js","mtime":1539717141990},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class PrivateNetworkListCtrl {\n  constructor($window, $rootScope, $translate, $stateParams, $state, $q, $uibModal,\n    CloudProjectComputeInfrastructurePrivateNetworkService, OvhApiCloudProjectNetworkPrivate,\n    OvhApiCloudProject, REDIRECT_URLS, CloudMessage, OvhApiMe, URLS, OvhApiVrack,\n    VrackSectionSidebarService, VrackService, CloudPoll, ControllerHelper) {\n    this.resources = {\n      privateNetwork: OvhApiCloudProjectNetworkPrivate.v6(),\n      project: OvhApiCloudProject.v6(),\n      aapi: OvhApiVrack.Aapi(),\n      modal: $uibModal,\n    };\n    this.CloudMessage = CloudMessage;\n    this.$translate = $translate;\n    this.serviceName = null;\n    this.service = CloudProjectComputeInfrastructurePrivateNetworkService;\n    this.$rootScope = $rootScope;\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.User = OvhApiMe;\n    this.URLS = URLS;\n    this.CloudPoll = CloudPoll;\n    this.VrackService = VrackService;\n    this.ControllerHelper = ControllerHelper;\n\n    this.loaders = {\n      privateNetworks: {\n        query: false,\n        delete: false,\n        activate: false,\n      },\n      vrack: {\n        get: false,\n        link: false,\n        unlink: false,\n      },\n      vracks: {\n        get: true,\n      },\n    };\n    this.urls = {\n      vrack: REDIRECT_URLS.vRack,\n    };\n    this.models = {\n      vrack: null,\n    };\n    this.collections = {\n      privateNetworks: [],\n    };\n    this.states = {\n      dialog: {\n        visible: false,\n      },\n    };\n    this.$window = $window;\n    // get vRacks for current user, shown in left side bar\n    this.vRacks = [];\n    VrackSectionSidebarService.getVracks()\n      .then((vRacks) => {\n        this.vRacks = vRacks;\n      }).finally(() => {\n        this.loaders.vracks.get = false;\n      });\n  }\n\n  $onInit() {\n    this.resources.privateNetwork.resetAllCache();\n    if (angular.isUndefined(this.$stateParams.projectId)) {\n      this.CloudMessage.error(this.$translate.instant('cpci_private_network_list_context_error'));\n    } else {\n      this.serviceName = this.$stateParams.projectId;\n    }\n\n    this.$rootScope.$on('private-network-dialog:hide', this.hideDialog.bind(this));\n    this.$rootScope.$on('private-networks:create', this.createPrivateNetworks.bind(this));\n\n    // Loading privateNetwork first because vrack can fallback to privateNetworkList\n    // to find it's ID.\n    this.fetchPrivateNetworks().then(() => this.fetchVrack());\n\n    this.User.v6().get().$promise.then((user) => {\n      this.orderUrl = _.get(this.URLS.website_order, `vrack.${user.ovhSubsidiary}`);\n    });\n  }\n\n  fetchVrack() {\n    if (this.loaders.vrack.get) {\n      return this.$q.when();\n    }\n    this.loaders.vrack.get = true;\n\n    return this.resources.project\n      .vrack({ serviceName: this.serviceName }).$promise\n      .then((vrack) => { this.models.vrack = vrack; })\n      .then(() => this.getVrackId())\n      .then((id) => { this.models.vrack.id = id; })\n      .catch(() => { this.models.vrack = null; })\n      .finally(() => { this.loaders.vrack.get = false; });\n  }\n\n\n  /**\n     * open UI activate private network modal\n     *\n     * @memberof PrivateNetworkListCtrl\n     */\n  addVRack() {\n    this.VrackService.selectVrack()\n      .then((selectedVrack) => {\n        this.loaders.vrack.link = true;\n        this.models.vrack = {\n          id: selectedVrack.serviceName,\n          name: selectedVrack.name,\n        };\n        return this.VrackService.linkCloudProjectToVrack(\n          selectedVrack.serviceName,\n          this.serviceName,\n        );\n      })\n      .then(vrackTaskId => this.startVrackTaskPolling(this.models.vrack.id, vrackTaskId).$promise)\n      .then(() => {\n        this.CloudMessage.success(this.$translate.instant('cpci_private_network_add_vrack_success'));\n      })\n      .catch((err) => {\n        if (err === 'cancel') {\n          return;\n        }\n        this.CloudMessage.error(this.$translate.instant('cpci_private_network_add_vrack_error'));\n      })\n      .finally(() => {\n        this.loaders.vrack.link = false;\n      });\n  }\n\n  unlinkVrack() {\n    let hasVlansText = this.$translate.instant('private_network_deactivate_confirmation');\n    if (this.collections.privateNetworks.length > 0) {\n      hasVlansText += ` ${this.$translate.instant('private_network_deactivate_confirmation_vlans')}`;\n    }\n    this.VrackService.unlinkVrackModal(hasVlansText)\n      .then(() => {\n        this.loaders.vrack.unlink = true;\n        return this.VrackService.unlinkCloudProjectFromVrack(\n          this.models.vrack.id,\n          this.serviceName,\n        );\n      })\n      .then(vrackTaskId => this.startVrackTaskPolling(this.models.vrack.id, vrackTaskId).$promise)\n      .then(() => {\n        this.models.vrack = null;\n        this.collections.privateNetworks = [];\n        this.CloudMessage.success(this.$translate.instant('cpci_private_network_remove_vrack_success'));\n      })\n      .catch((err) => {\n        if (err === 'cancel') {\n          return;\n        }\n        this.CloudMessage.error(this.$translate.instant('cpci_private_network_remove_vrack_error'));\n      })\n      .finally(() => {\n        this.loaders.vrack.unlink = false;\n      });\n  }\n\n  startVrackTaskPolling(vrack, taskId) {\n    this.stopTaskPolling();\n\n    const taskToPoll = {\n      id: taskId,\n    };\n\n    this.poller = this.CloudPoll.poll({\n      item: taskToPoll,\n      pollFunction: task => this.VrackService.getTask(vrack, task.id),\n      stopCondition: task => !task || _.includes(['done', 'error'], task.status),\n    });\n\n    return this.poller;\n  }\n\n  stopTaskPolling() {\n    if (this.poller) {\n      this.poller.kill();\n    }\n  }\n\n  deletePrivateNetwork(privateNetwork) {\n    const modal = this.resources.modal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/infrastructure/privateNetwork/delete/cloud-project-compute-infrastructure-privateNetwork-delete.html',\n      controller: 'CloudprojectcomputeinfrastructureprivatenetworkdeleteCtrl',\n      controllerAs: 'CloudprojectcomputeinfrastructureprivatenetworkdeleteCtrl',\n      resolve: {\n        params: () => privateNetwork,\n      },\n    });\n    modal.result\n      .then(() => { this.loaders.privateNetworks.delete = true; })\n      .finally(() => {\n        this.loaders.privateNetworks.delete = false;\n        this.deletePrivateNetworkFromList(privateNetwork);\n      });\n  }\n\n  deletePrivateNetworkFromList(privateNetwork) {\n    const newPrivateNetworks = this.collections.privateNetworks\n      .filter(el => el.id !== privateNetwork);\n    this.collections.privateNetworks = newPrivateNetworks;\n    return this.collections;\n  }\n\n  createPrivateNetworks(event, args) {\n    this.hideDialog();\n    const subnets = _.chain(args.subnets)\n      .values()\n      .filter(subnet => _.contains(args.privateNetwork.regions, subnet.region))\n      .map(subnet => _.assign(subnet, { dhcp: args.isDHCPEnabled, network: args.globalNetwork }))\n      .value();\n\n    const onNetworkCreated = function (network) {\n      const promises = _.map(subnets, subnet => this.service\n        .saveSubnet(args.projectId, network.id, subnet).$promise, this);\n      return this.$q.all(promises).then(() => this.fetchPrivateNetworks());\n    }.bind(this);\n\n    this.service.savePrivateNetwork(args.projectId, args.privateNetwork, onNetworkCreated);\n  }\n\n  fetchPrivateNetworks() {\n    if (this.loaders.privateNetworks.query) {\n      return this.$q.when(null);\n    }\n    this.loaders.privateNetworks.query = true;\n\n    return this.resources.privateNetwork.query({\n      serviceName: this.serviceName,\n    }).$promise\n      .then((networks) => {\n        this.collections.privateNetworks = networks;\n        _.forEach(this.collections.privateNetworks, (network) => {\n          if (network.id) {\n            _.set(network, 'shortVlanId', _.last(network.id.split('_')));\n          }\n        });\n      }).catch(() => {\n        this.collections.privateNetworks = [];\n        this.CloudMessage.error(this.$translate.instant('cpci_private_network_list_private_network_query_error'));\n      }).finally(() => { this.loaders.privateNetworks.query = false; });\n  }\n\n  getPrivateNetworks() {\n    return _.sortBy(this.collections.privateNetworks, 'vlanId');\n  }\n\n  getVrackName() {\n    if (_.has(this.models.vrack, 'name') && !_.isEmpty(this.models.vrack.name)) {\n      return this.models.vrack.name;\n    } if (_.has(this.models.vrack, 'id') && !_.isEmpty(this.models.vrack.id)) {\n      return this.models.vrack.id;\n    }\n    return this.$translate.instant('cpci_private_network_list_vrack_unnamed');\n  }\n\n  getVrackId() {\n    if (_.has(this.models.vrack, 'id') && !_.isEmpty(this.models.vrack.id)) {\n      return this.$q.when(this.models.vrack.id);\n    } if (_.isEmpty(this.models.vrack.name)) {\n      return this.fetchPrivateNetworks()\n        .then(() => {\n          if (_.any(this.collections.privateNetworks)) {\n            return _.first(_.first(this.collections.privateNetworks).id.split('_'));\n          }\n          return this.$q.when(null);\n        });\n    }\n    return this.resources.aapi.query().$promise\n      .then((vracks) => {\n        const vrack = _.find(vracks, { name: this.models.vrack.name });\n        return _.get(vrack, 'id', null);\n      })\n      .catch(() => null);\n  }\n\n  gotoVrack() {\n    this.getVrackId().then(id => this.$state.go('vrack', { vrackId: id }));\n  }\n\n  canGotoVrack() {\n    return this.hasVrack() && !_.isNull(this.models.vrack.id);\n  }\n\n  hasVrack() {\n    return this.loaders.vrack.get === false && !_.isNull(this.models.vrack);\n  }\n\n  showDialog() {\n    this.states.dialog.visible = true;\n  }\n\n  hideDialog() {\n    this.states.dialog.visible = false;\n    this.$rootScope.$broadcast('highlighed-element.hide', 'compute');\n  }\n\n  toggleDialog() {\n    this.states.dialog.visible = !this.states.dialog.visible;\n  }\n\n  hasVisibleDialog() {\n    return this.states.dialog.visible;\n  }\n\n  hasPendingLoaders() {\n    return _.some(this.loaders, 'query', true)\n               || _.some(this.loaders, 'get', true)\n               || _.some(this.loaders, 'link', true)\n               || _.some(this.loaders, 'unlink', true)\n               || this.isVrackCreating();\n  }\n\n  isVrackCreating() {\n    return this.service.isSavePending();\n  }\n\n  onKeyDown($event) {\n    switch ($event.which) {\n      case 27:\n        // Important not to put $event.preventDefault(); before the switch statement\n        // since it will catch and prevent default\n        // behavior on keyDown everywhere in the directive, inputs included.\n        $event.preventDefault();\n        this.hideDialog();\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nangular.module('managerApp')\n  .directive('privateNetworkList', () => ({\n    restrict: 'E',\n    templateUrl: 'app/cloud/project/compute/infrastructure/privateNetwork/cloud-project-compute-infrastructure-privateNetwork-list.html',\n    controller: PrivateNetworkListCtrl,\n    controllerAs: '$ctrl',\n    bindToController: true,\n    replace: false,\n  }));\n"]}