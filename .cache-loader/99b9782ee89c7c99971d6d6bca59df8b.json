{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/dual-list/dual-list.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/dual-list/dual-list.controller.js","mtime":1539717142259},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DualListCtrl =\n/*#__PURE__*/\nfunction () {\n  DualListCtrl.$inject = [\"$q\", \"$element\", \"DualListProvider\"];\n\n  function DualListCtrl($q, $element, DualListProvider) {\n    _classCallCheck(this, DualListCtrl);\n\n    this.$q = $q;\n    this.$element = $element;\n    this.dualListProvider = DualListProvider;\n  }\n\n  _createClass(DualListCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.sourceListLabel = this.sourceListLabel || this.dualListProvider.translations.sourceListLabel;\n      this.targetListLabel = this.targetListLabel || this.dualListProvider.translations.targetListLabel;\n      this.moveAllLabel = this.moveAllLabel || this.dualListProvider.translations.moveAllLabel;\n      this.removeAllLabel = this.removeAllLabel || this.dualListProvider.translations.removeAllLabel;\n      this.sourceListEmptyLabel = this.sourceListEmptyLabel || this.dualListProvider.translations.sourceListEmptyLabel;\n      this.targetListEmptyLabel = this.targetListEmptyLabel || this.dualListProvider.translations.targetListEmptyLabel;\n      this.addLabel = this.addLabel || this.dualListProvider.translations.addLabel;\n      this.height = this.height || this.dualListProvider.height;\n      this.bulkActionEnabled = this.bulkActionEnabled || this.dualListProvider.bulkActionEnabled;\n      this.sourceList = this.sourceList || [];\n      this.targetList = this.targetList || [];\n      this.onAdd = this.onAdd || null;\n      this.onRemove = this.onRemove || null;\n      this.property = this.property || null;\n      this.loadingMap = {};\n      this.targetCloseIconStyle = {};\n      this.targetOpenIconStyle = {};\n      this.targetContentStyle = {};\n      this.sourceCloseIconStyle = {};\n      this.sourceOpenIconStyle = {};\n      this.sourceContentStyle = {};\n      this.sourceListLoading = false;\n      this.targetListLoading = false;\n      this.displayNoneStyle = {\n        display: 'none'\n      };\n      this.displayBlockStyle = {\n        display: 'inline-block'\n      };\n      this.displayFlexStyle = {\n        display: 'flex'\n      };\n      this.listHeight = {\n        height: this.height\n      };\n      this.loadSourceList();\n      this.loadtargetList();\n    }\n  }, {\n    key: \"onTargetContentClose\",\n    value: function onTargetContentClose() {\n      this.targetCloseIconStyle = this.displayNoneStyle;\n      this.targetOpenIconStyle = this.displayBlockStyle;\n      this.targetContentStyle = this.displayFlexStyle;\n    }\n  }, {\n    key: \"onTargetContentOpen\",\n    value: function onTargetContentOpen() {\n      this.targetCloseIconStyle = this.displayBlockStyle;\n      this.targetOpenIconStyle = this.displayNoneStyle;\n      this.targetContentStyle = this.displayNoneStyle;\n    }\n  }, {\n    key: \"onSourceContentClose\",\n    value: function onSourceContentClose() {\n      this.sourceCloseIconStyle = this.displayNoneStyle;\n      this.sourceOpenIconStyle = this.displayBlockStyle;\n      this.sourceContentStyle = this.displayFlexStyle;\n    }\n  }, {\n    key: \"onSourceContentOpen\",\n    value: function onSourceContentOpen() {\n      this.sourceCloseIconStyle = this.displayBlockStyle;\n      this.sourceOpenIconStyle = this.displayNoneStyle;\n      this.sourceContentStyle = this.displayNoneStyle;\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(item) {\n      if (!this.property) {\n        return item;\n      }\n\n      return this.property.split('.').reduce(function (prev, curr) {\n        return prev ? prev[curr] : undefined;\n      }, item);\n    }\n  }, {\n    key: \"isLoading\",\n    value: function isLoading(item) {\n      var uniqueName = this.getProperty(item);\n\n      if (this.loadingMap[uniqueName]) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(item, state) {\n      var uniqueName = this.getProperty(item);\n      this.loadingMap[uniqueName] = state;\n    }\n  }, {\n    key: \"loadSourceList\",\n    value: function loadSourceList() {\n      var _this = this;\n\n      if (this.sourceListLoading) {\n        return this.$q.reject(false);\n      }\n\n      this.sourceListLoading = true;\n      return this.$q.when(this.sourceList).then(function (items) {\n        _this.sourceList = items.data ? items.data : items;\n      }).finally(function () {\n        _this.sourceListLoading = false;\n      });\n    }\n  }, {\n    key: \"loadtargetList\",\n    value: function loadtargetList() {\n      var _this2 = this;\n\n      if (this.targetListLoading) {\n        return this.$q.reject(false);\n      }\n\n      this.targetListLoading = true;\n      return this.$q.when(this.targetList).then(function (items) {\n        _this2.targetList = items.data ? items.data : items;\n      }).finally(function () {\n        _this2.targetListLoading = false;\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add(index, item) {\n      var _this3 = this;\n\n      if (this.isLoading(item)) {\n        return;\n      }\n\n      this.sourceList.splice(index, 1);\n      this.targetList.push(item);\n\n      if (this.onAdd) {\n        this.setLoading(item, true);\n        this.onAdd({\n          items: [item]\n        }).catch(function () {\n          var newIndex = _this3.targetList.indexOf(item);\n\n          _this3.targetList.splice(newIndex, 1);\n\n          _this3.sourceList.push(item);\n        }).finally(function () {\n          return _this3.setLoading(item, false);\n        });\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index, item) {\n      var _this4 = this;\n\n      if (this.isLoading(item)) {\n        return;\n      }\n\n      this.targetList.splice(index, 1);\n      this.sourceList.push(item);\n\n      if (this.onRemove) {\n        this.setLoading(item, true);\n        this.onRemove({\n          items: [item]\n        }).catch(function () {\n          var newIndex = _this4.sourceList.indexOf(item);\n\n          _this4.sourceList.splice(newIndex, 1);\n\n          _this4.targetList.push(item);\n        }).finally(function () {\n          return _this4.setLoading(item, false);\n        });\n      }\n    }\n  }, {\n    key: \"addAll\",\n    value: function addAll() {\n      var _this5 = this;\n\n      var list = this.sourceList.filter(function (item) {\n        return !_this5.isLoading(item);\n      });\n\n      if (list.length === 0) {\n        return;\n      }\n\n      list.forEach(function (item) {\n        // move to target list and set loading\n        _this5.targetList.push(item);\n\n        _this5.setLoading(item, true); // remove from source list\n\n\n        var newIndex = _this5.sourceList.indexOf(item);\n\n        _this5.sourceList.splice(newIndex, 1);\n      });\n\n      if (this.onAdd) {\n        this.onAdd({\n          items: list\n        }).then(function () {\n          // all items successfully moved, remove loading\n          list.forEach(function (item) {\n            return _this5.setLoading(item, false);\n          });\n        }, function (failedItems) {\n          // some or all items failed to move\n          failedItems.forEach(function (item) {\n            // move back to source list and remove loading\n            _this5.sourceList.push(item);\n\n            _this5.setLoading(item, false); // remove from target list\n\n\n            var newIndex = _this5.targetList.indexOf(item);\n\n            _this5.targetList.splice(newIndex, 1);\n          }); // remove loading for all successfull items\n\n          list.forEach(function (item) {\n            return _this5.setLoading(item, false);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _this6 = this;\n\n      var list = this.targetList.filter(function (item) {\n        return !_this6.isLoading(item);\n      });\n\n      if (list.length === 0) {\n        return;\n      }\n\n      list.forEach(function (item) {\n        // move to source list and set loading\n        _this6.sourceList.push(item);\n\n        _this6.setLoading(item, true); // remove from target list\n\n\n        var newIndex = _this6.targetList.indexOf(item);\n\n        _this6.targetList.splice(newIndex, 1);\n      });\n\n      if (this.onAdd) {\n        this.onAdd({\n          items: list\n        }).then(function () {\n          // all items successfully moved, remove loading\n          list.forEach(function (item) {\n            return _this6.setLoading(item, false);\n          });\n        }, function (failedItems) {\n          // some or all items failed to move\n          failedItems.forEach(function (item) {\n            // move back to target list and remove loading\n            _this6.targetList.push(item);\n\n            _this6.setLoading(item, false); // remove from source list\n\n\n            var newIndex = _this6.sourceList.indexOf(item);\n\n            _this6.sourceList.splice(newIndex, 1);\n          }); // remove loading for all successfull items\n\n          list.forEach(function (item) {\n            return _this6.setLoading(item, false);\n          });\n        });\n      }\n    }\n  }]);\n\n  return DualListCtrl;\n}();\n\nangular.module('managerApp').controller('DualListCtrl', DualListCtrl);",null]}