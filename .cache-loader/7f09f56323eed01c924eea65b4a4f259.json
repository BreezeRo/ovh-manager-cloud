{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplb-zone-delete.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplb-zone-delete.service.js","mtime":1539717142230},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerZoneDeleteService {\n  constructor($q, $translate, CloudMessage, OvhApiIpLoadBalancing, RegionService, ServiceHelper) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  getDeletableZones(serviceName) {\n    return this.OvhApiIpLoadBalancing.v6().get({ serviceName })\n      .$promise\n      .then((response) => {\n        const promises = _.map(response.zone, zone => this.OvhApiIpLoadBalancing.Zone().v6()\n          .get({ serviceName, name: zone }).$promise);\n        return this.$q.all(promises);\n      })\n      .then(zones => _.map(zones, zone => _.extend({\n        name: zone.name,\n        selectable: {\n          value: zone.state !== 'released',\n          reason: zone.state === 'released' ? this.$translate.instant('iplb_zone_delete_unavailable_already_released') : '',\n        },\n      }, this.RegionService.getRegion(zone.name))))\n      .catch(this.ServiceHelper.errorHandler('iplb_zone_delete_loading_error'));\n  }\n\n  deleteZones(serviceName, zones) {\n    return this.getDeletableZones(serviceName)\n      .then((deletableZones) => {\n        if (zones.length === 0) {\n          return this.ServiceHelper.errorHandler('iplb_zone_delete_selection_error')({});\n        }\n\n        const deletableZoneCount = _.filter(\n          deletableZones,\n          item => item.selectable.value !== false,\n        ).length - 1;\n        const messages = {\n          tooMany: deletableZoneCount > 1 ? 'iplb_zone_delete_selection_too_many_plural_error' : 'iplb_zone_delete_selection_too_many_single_error',\n          success: zones.length > 1 ? 'iplb_zone_delete_plural_success' : 'iplb_zone_delete_single_success',\n          error: zones.length > 1 ? 'iplb_zone_delete_plural_error' : 'iplb_zone_delete_single_error',\n        };\n\n        if (zones.length > deletableZoneCount) {\n          return this.ServiceHelper.errorHandler(messages.tooMany)({\n            data: {\n              zoneQuantity: deletableZoneCount,\n            },\n          });\n        }\n\n        const deletedZones = _.sortBy(_.map(zones, zone => zone.microRegion.text), zone => zone).join(', ');\n        const promises = _.map(\n          zones,\n          zone => this.OvhApiIpLoadBalancing.Zone().v6()\n            .delete({ serviceName, name: zone.name }, {}).$promise,\n        );\n        return this.$q.all(promises)\n          .then(() => this.ServiceHelper.successHandler(messages.success)({ zones: deletedZones }))\n          .catch(this.ServiceHelper.errorHandler(messages.error));\n      });\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerZoneDeleteService', IpLoadBalancerZoneDeleteService);\n"]}