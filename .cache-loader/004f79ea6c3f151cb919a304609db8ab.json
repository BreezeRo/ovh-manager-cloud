{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/cloud-consumption/consumption-chart.directive.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/cloud-consumption/consumption-chart.directive.js","mtime":1539717142365},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp')\n/**\n * A simple consumption chart directive using d3 js library for rendering.\n *\n * Example usage :\n *\n * var consumptionData = {\n *     data : [\n *         { timestamp: ..., value: ... },\n *         { timestamp: ..., value: ... },\n *         ...\n *     ],\n *     ymin : 0 (y axis minimum value OPTIONAL, default is minimum value of data series)\n *     ymax : 1 (y axis maximum value OPTIONAL, default is maximum value of data series)\n *     xmin : 0 (x axis minimum value OPTIONAL)\n *     xmax : 1 (x axis maximum value OPTIONAL)\n *     unit : \"Mb\" (y axis unit to be displayed OPTIONAL, default is none)\n *     timeScale : { unit: \"hours\", amount: 1, format: \"%H\" }\n *     yTicks : ticks count on y axis (OPTIONAL, default is 4)\n *     margin: {top: 10, right: 10, bottom: 10, left: 10} (chart margins, OPTIONAL)\n * };\n *\n * <div style=\"width: 400px; height: 300px\">\n *     <consumption-chart model=\"myConsumptionData\"></consumption-chart>\n * </div>\n *\n */\n  .directive('consumptionChart', ($window) => {\n    function Chart() {\n      this.width = 250;\n      this.height = 150;\n      this.textSpacing = 4;\n      // default values, can be customized in model parameter\n      this.margin = {\n        top: 20, right: 0, bottom: 20, left: 80,\n      };\n\n      // d3js elements\n      this.x = null;\n      this.y = null;\n      this.xAxis = null;\n      this.barNow = null;\n      this.barFuture = null;\n      this.data = null;\n\n      // d3js graphics\n      this.g = {\n        svg: null,\n        x: null,\n        y: null,\n        line: null,\n        barNow: null,\n        barFuture: null,\n      };\n    }\n\n    Chart.prototype.init = function (d3, el) {\n      this.x = d3.scale.ordinal();\n      this.y = d3.scale.linear();\n      this.xAxis = d3.svg.axis().scale(this.x).orient('bottom');\n      this.g.svg = d3.select(el).append('svg').attr('class', 'cloud-consumption-chart');\n\n      this.g.barNow = this.g.svg.append('rect').attr('class', 'barNow');\n      this.g.barFuture = this.g.svg.append('rect').attr('class', 'barFuture');\n      this.g.line = this.g.svg.append('line').attr('class', 'line');\n      this.g.thresholdText = this.g.svg.append('text').attr('class', 'threshold-text');\n      this.g.thresholdAmount = this.g.svg.append('text').attr('class', 'threshold-amount-text');\n      this.g.barText1 = this.g.svg.append('text').attr('class', 'bar-text');\n      this.g.barText2 = this.g.svg.append('text').attr('class', 'bar-text');\n      this.g.x = this.g.svg.append('g').attr('class', 'axis');\n      this.g.y = this.g.svg.append('g').attr('class', 'axis');\n    };\n\n    Chart.prototype.resize = function () {\n      if (this.width > this.margin.left + this.margin.right\n            && this.height > this.margin.top + this.margin.bottom) {\n        this.g.svg.attr({ width: this.width, height: this.height });\n\n        this.x.rangeRoundBands([0, this.width], 0.50, 0.70);\n        this.y.range([this.height - this.margin.bottom, this.margin.top, 0]);\n        this.g.x.attr('transform', `translate(${[0, this.y.range()[0]]})`);\n        this.g.y.attr('transform', `translate(${[this.x.range()[0], 0]})`);\n        this.g.barText1.attr('transform', `translate(${[this.x.rangeBand() / 2, 0]})`);\n        this.g.barText2.attr('transform', `translate(${[this.x.rangeBand() / 2, 0]})`);\n        this.update();\n      }\n    };\n\n    Chart.prototype.update = function () {\n      // refresh scale\n      this.g.x.call(this.xAxis);\n\n      this.g.barNow\n        .attr('x', this.x(this.data.estimate.now.label))\n        .attr('y', this.y(this.data.estimate.now.value))\n        .attr('height', this.height - this.y(this.data.estimate.now.value) - this.margin.bottom)\n        .attr('width', this.x.rangeBand());\n\n      this.g.barText1\n        .attr('x', this.x(this.data.estimate.now.label))\n        .attr('y', this.y(this.data.estimate.now.value) - this.textSpacing)\n        .text(`${this.data.estimate.now.value} ${this.data.estimate.now.currencyCode}`)\n        .attr('width', this.x.rangeBand());\n\n      this.g.barFuture\n        .attr('x', this.x(this.data.estimate.endOfMonth.label))\n        .attr('y', this.y(this.data.estimate.endOfMonth.value))\n        .attr('height', this.height - this.y(this.data.estimate.endOfMonth.value) - this.margin.bottom)\n        .attr('width', this.x.rangeBand());\n\n      this.g.barText2\n        .attr('x', this.x(this.data.estimate.endOfMonth.label))\n        .attr('y', this.y(this.data.estimate.endOfMonth.value) - this.textSpacing)\n        .text(`${this.data.estimate.endOfMonth.value} ${this.data.estimate.endOfMonth.currencyCode}`)\n        .attr('width', this.x.rangeBand());\n\n      this.g.thresholdText\n        .attr('x', 20)\n        .attr('y', this.y(this.data.threshold.now.value))\n        .text(this.data.threshold.now.label)\n        .attr('width', this.x.rangeBand());\n\n      this.g.thresholdAmount\n        .attr('x', this.width)\n        .attr('y', this.y(this.data.threshold.now.value) - this.textSpacing)\n        .text(`${this.data.threshold.now.value} ${this.data.threshold.now.currencyCode}`)\n        .attr('width', this.x.rangeBand());\n\n      this.g.line\n        .attr('x1', this.x(this.data.estimate.now.label) - 16)\n        .attr('x2', this.width)\n        .attr('y1', this.y(this.data.threshold.now.value))\n        .attr('y2', this.y(this.data.threshold.endOfMonth.value));\n    };\n\n    Chart.prototype.setModel = function (model) {\n      this.data = model;\n      const dataValues = _.values(model.estimate);\n      this.x.domain(dataValues.map(d => d.label));\n      const maxYDomainEstimate = d3.max(dataValues, d => d.value);\n      const maxYDomainThreshold = d3.max(_.values(model.threshold), d => d.value);\n      const maxYDomain = _.max([maxYDomainEstimate, maxYDomainThreshold]);\n      this.y.domain([0, maxYDomain * 1.20]);\n      this.margin = model.margin || this.margin;\n      this.resize();\n      this.update();\n    };\n\n    return {\n      restrict: 'E',\n      scope: {\n        model: '=model',\n      },\n      link($scope, $element) {\n        const self = this;\n\n        self.d3 = $window.d3;\n        if (self.d3) {\n          const chart = new Chart();\n          chart.init(d3, $element[0]);\n          // initialize new chart\n\n          // fill parent container on resize\n          $scope.$watch(() => {\n            if ($element.parent().width() > 0 && $element.parent().height() > 0) {\n              chart.width = $element.parent().width();\n              chart.height = $element.parent().height();\n            }\n            return chart.width + chart.height;\n          }, () => {\n            if (chart.data) {\n              chart.resize();\n            }\n          });\n\n          // update on model change\n          $scope.$watch('model', (model) => {\n            chart.setModel(model);\n          });\n        } else {\n          throw new Error('Missing D3.js dependency');\n        }\n      },\n    };\n  });\n"]}