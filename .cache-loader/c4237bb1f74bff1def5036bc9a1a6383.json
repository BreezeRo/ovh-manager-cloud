{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/zfs-options/nasha-partition-zfs-options.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/zfs-options/nasha-partition-zfs-options.service.js","mtime":1539717142252},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').service('NashaPartitionZFSOptionsService',\n  function ($q, $filter, OvhApiDedicatedNasha, NASHA_ZFS_OPTIONS_DEFAULT) {\n    const self = this;\n    self.getZFSOptionsEnums = function () {\n      return OvhApiDedicatedNasha.v6().schema().$promise\n        .then((schema) => {\n          const enums = {};\n          enums.recordsize = _.chain(schema.models['dedicated.storage.RecordSizeEnum'].enum)\n            .map((size) => {\n              const int = parseInt(size, 10);\n              return {\n                size: int,\n                label: $filter('bytes')(int, true),\n                isDefault: int === NASHA_ZFS_OPTIONS_DEFAULT.recordsize,\n              };\n            })\n            .sortBy('size')\n            .value();\n\n          enums.sync = _.map(schema.models['dedicated.storage.SyncEnum'].enum, option => ({\n            label: option,\n            warning: option === 'disabled',\n            isDefault: option === 'standard',\n          }));\n          return enums;\n        });\n    };\n\n    self.getCurrentZFSOptions = function (nashaId, partitionName) {\n      const options = {\n        atime: NASHA_ZFS_OPTIONS_DEFAULT.atime === 'on',\n        recordsize: NASHA_ZFS_OPTIONS_DEFAULT.recordsize,\n        sync: NASHA_ZFS_OPTIONS_DEFAULT.sync,\n      };\n      return OvhApiDedicatedNasha.Partition().Options().v6().get({\n        serviceName: nashaId,\n        partitionName,\n      }).$promise\n        .then((realOptions) => {\n          options.atime = realOptions.atime === 'on';\n          options.recordsize = parseInt(realOptions.recordsize, 10);\n          options.sync = realOptions.sync;\n          return options;\n        })\n        .catch((err) => {\n          if (err.status === 404) {\n            return $q.when(options);\n          }\n          return $q.reject(err);\n        });\n    };\n  });\n"]}