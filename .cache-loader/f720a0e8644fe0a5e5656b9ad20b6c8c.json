{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/cloud-database/vps-cloud-database.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/cloud-database/vps-cloud-database.controller.js","mtime":1539717374623},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VpsCloudDatabaseCtrl {\n  constructor(\n    $q,\n    $stateParams,\n    $timeout,\n    $translate,\n    $window,\n    CloudMessage,\n    ControllerHelper,\n    OvhApiHostingPrivateDatabase,\n    VpsService,\n  ) {\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.ApiPrivateDb = OvhApiHostingPrivateDatabase.v6();\n    this.ApiWhitelist = OvhApiHostingPrivateDatabase.Whitelist().v6();\n    this.VpsService = VpsService;\n  }\n\n  $onInit() {\n    this.serviceName = this.$stateParams.serviceName;\n\n    this.statusFilterOptions = {\n      values: _.reduce(\n        ['detached', 'restartPending', 'startPending', 'started', 'stopPending', 'stopped'],\n        (result, key) => Object.assign({}, result, { [key]: this.$translate.instant(`common_database_status_${key}`) }),\n        {},\n      ),\n    };\n\n    this.ipv4 = null;\n    this.cloudDatabases = [];\n\n    this.refresh();\n  }\n\n  refresh() {\n    this.loading = true;\n    return this.loadIps()\n      .then(({ results }) => {\n        if (_(results).isString()) {\n          throw new Error('Temporary error from the API');\n        }\n        this.ipv4 = _(results).chain()\n          .find({ version: 'v4' })\n          .get('ipAddress')\n          .value();\n      })\n      .then(() => this.loadDatabases())\n      .then((databases) => {\n        this.cloudDatabases = databases;\n        this.loading = false;\n      });\n  }\n\n  loadIps() {\n    return this.VpsService.getIps(this.serviceName);\n  }\n\n  loadDatabases() {\n    return this.ApiPrivateDb.query().$promise\n      .then(serviceNames => this.$q.all(\n        _.map(\n          serviceNames,\n          serviceName => this.ApiPrivateDb.get({ serviceName }).$promise,\n        ),\n      ))\n      .then(databases => _.filter(databases, { offer: 'public' }))\n      .then(databases => this.$q.all(\n        _.map(\n          databases,\n          database => this.isVpsAuthorized(database.serviceName)\n            .then(vpsAuthorized => _.defaults({ vpsAuthorized }, database)),\n        ),\n      ))\n      .then(databases => _.map(databases, database => _.defaults(\n        {\n          name: database.displayName || database.serviceName,\n        }, database,\n      )))\n      .catch((error) => {\n        this.CloudMessage.error([\n          this.$translate.instant('vps_tab_cloud_database_fetch_error'),\n          _(error).get('data.message', ''),\n        ].join(' '));\n      });\n  }\n\n  isVpsAuthorized(serviceName) {\n    return this.ApiWhitelist.query({ serviceName, ip: this.ipv4, service: true }).$promise\n      .then(whitelist => !_.isEmpty(whitelist));\n  }\n\n  addAuthorizedIp(database) {\n    const { serviceName } = database;\n    return this.ApiWhitelist.post(\n      { serviceName },\n      {\n        ip: this.ipv4,\n        name: this.$translate.instant(\n          'vps_tab_cloud_database_whitelist_ip_name',\n          { vps: this.serviceName },\n        ),\n        service: true,\n        sftp: false,\n      },\n    ).$promise\n      .then(() => {\n        this.$timeout(() => {\n          this.CloudMessage.success(this.$translate.instant('vps_tab_cloud_database_whitelist_add_success'));\n          this.refresh();\n        }, 2000);\n      })\n      .catch((error) => {\n        this.CloudMessage.error([\n          this.$translate.instant('vps_tab_cloud_database_whitelist_add_error'),\n          _(error).get('data.message', ''),\n        ].join(' '));\n      });\n  }\n\n  removeAuthorizedIp(database) {\n    const { serviceName } = database;\n    return this.ApiWhitelist.deleteIp({ serviceName }, { ip: this.ipv4 }).$promise\n      .then(() => {\n        this.$timeout(() => {\n          this.CloudMessage.success(this.$translate.instant('vps_tab_cloud_database_whitelist_remove_success'));\n          this.refresh();\n        }, 2000);\n      })\n      .catch((error) => {\n        this.CloudMessage.error([\n          this.$translate.instant('vps_tab_cloud_database_whitelist_remove_error'),\n          _(error).get('data.message', ''),\n        ].join(' '));\n      });\n  }\n\n  goToCloudDatabase(database) {\n    const { serviceName } = database;\n    this.$window.open(this.ControllerHelper.navigation.getUrl('privateDatabase', { serviceName }));\n  }\n}\n\nangular.module('managerApp').controller('VpsCloudDatabaseCtrl', VpsCloudDatabaseCtrl);\n"]}