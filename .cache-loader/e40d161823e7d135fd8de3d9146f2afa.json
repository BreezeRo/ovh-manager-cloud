{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/openstack/users/openstack-users.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/openstack/users/openstack-users.controller.js","mtime":1539717142047},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectOpenstackUsersCtrl', [\"OvhApiCloud\", \"$translate\", \"CloudMessage\", \"$stateParams\", \"Poller\", \"$scope\", \"OpenstackUsersPassword\", \"OpenstackUsersToken\", \"$filter\", \"$q\", \"ControllerHelper\", \"$window\", \"REDIRECT_URLS\", function CloudProjectOpenstackUsersCtrl(OvhApiCloud, $translate, CloudMessage, $stateParams, Poller, $scope, OpenstackUsersPassword, OpenstackUsersToken, $filter, $q, ControllerHelper, $window, REDIRECT_URLS) {\n  var self = this;\n  var orderBy = $filter('orderBy');\n  var pollingInterval = 5000;\n  self.projectId = $stateParams.projectId;\n  self.table = {\n    users: {},\n    selectableUsers: [],\n    selectableUsersCurrentPage: [],\n    selected: {},\n    autoSelected: {}\n  };\n  self.toggle = {\n    userGenerateTokenId: null\n  };\n  self.order = {\n    by: 'username',\n    reverse: false\n  };\n  self.loaders = {\n    table: {\n      user: false\n    },\n    add: {\n      token: false\n    },\n    remove: {\n      user: false,\n      userMulti: false\n    },\n    regeneratePassword: false,\n    generateToken: false\n  };\n  self.generateToken = {\n    pass: null\n  };\n\n  function init() {\n    self.getUsers();\n  } // ---------TOOLS---------\n\n\n  self.getSelectedCount = function () {\n    return Object.keys(self.table.selected).length;\n  };\n\n  $scope.$watch('CloudProjectOpenstackUsersCtrl.table.selected', function () {\n    // if some line were not removed => recheck or if polling happened.\n    if (!_.isEmpty(self.table.autoSelected)) {\n      // Selected (and autoselected) are represented as object: Not array of objects\n      // or array of arrays.\n      // Therefore, we have to loop through the keys (which represent a UserId)\n      // and then compare it to the\n      // userId in the user object. User.id is a number and userId a string\n      // (it is an object key) so the .ToString is mandatory in order to use === instead of ==.\n      _.forEach(_.keys(self.table.autoSelected), function (userId) {\n        var isInUserTable = _.some(self.table.users, function (user) {\n          return user.id.toString() === userId;\n        });\n\n        if (isInUserTable) {\n          self.table.selected[userId] = true;\n        }\n      });\n\n      self.table.autoSelected = [];\n    }\n  }, true);\n\n  function getSelectableUserList(userList) {\n    return _.filter(userList, function (user) {\n      return user.status !== 'disabled';\n    });\n  }\n\n  $scope.$watch('CloudProjectComputeSnapshotCtrl.table.usersCurrentPage', function (users) {\n    self.table.selectableUsersCurrentPage = getSelectableUserList(users);\n  }); // ---------ORDER---------\n\n  self.orderBy = function (by) {\n    if (by) {\n      if (self.order.by === by) {\n        self.order.reverse = !self.order.reverse;\n      } else {\n        self.order.by = by;\n      }\n    }\n\n    self.table.users = orderBy(self.table.users, self.order.by, self.order.reverse);\n    self.table.selectableUsers = orderBy(self.table.selectableUsers, self.order.by, self.order.reverse);\n  };\n\n  self.selectUser = function (id, active) {\n    if (active) {\n      setTimeout(function () {\n        var areaheight = $(\"#user_\".concat(id)).prop('scrollHeight');\n        $(\"#user_\".concat(id)).height(areaheight).select();\n      }, 0);\n    }\n  };\n\n  function updateUserList(userList) {\n    // We set autoSelected so the selected entries remain selected after polling.\n    self.table.autoSelected = self.table.selected;\n    self.table.users = userList;\n    self.table.selectableUsers = getSelectableUserList(userList);\n    self.orderBy();\n    self.loaders.table.user = false;\n  }\n\n  self.getUsers = function () {\n    if (!self.loaders.table.user) {\n      self.table.users = [];\n      self.loaders.table.user = true;\n      return Poller.poll(\"/cloud/project/\".concat(self.projectId, \"/user\"), null, {\n        namespace: 'cloud.users.query',\n        scope: $scope.$id,\n        interval: pollingInterval\n      }).then(function (userList) {\n        updateUserList(userList);\n      }, function (err) {\n        if (err && err.status) {\n          self.table.user = null;\n          CloudMessage.error([$translate.instant('openstackusers_users_userlist_error'), err.data && err.data.message || ''].join(' '));\n        }\n      }, function (userList) {\n        updateUserList(userList);\n      }).finally(function () {\n        self.loaders.table.user = false;\n      });\n    }\n\n    return null;\n  };\n\n  $scope.$on('$destroy', function () {\n    Poller.kill({\n      namespace: 'cloud.users.query'\n    });\n  });\n\n  self.regeneratePassword = function (currentUser) {\n    if (!self.loaders.regeneratePassword) {\n      self.loaders.regeneratePassword = currentUser.id;\n      return OvhApiCloud.Project().User().v6().password({\n        serviceName: self.projectId,\n        userId: currentUser.id\n      }, {}).$promise.then(function (newUser) {\n        var currentUserFound = _.find(self.table.users, function (user) {\n          return user.username === currentUser.username;\n        });\n\n        OpenstackUsersPassword.put(self.projectId, currentUserFound.id, newUser.password);\n        CloudMessage.success($translate.instant('openstackusers_users_regeneratepassword_success', currentUser));\n      }, function (err) {\n        CloudMessage.error([$translate.instant('openstackusers_users_regeneratepassword_error'), err.data && err.data.message || ''].join(' '));\n      }).finally(function () {\n        self.loaders.regeneratePassword = false;\n      });\n    }\n\n    return null;\n  };\n\n  self.downloadOpenrcFile = function (currentUser) {\n    ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/cloud/project/openstack/users/openrc/openstack-users-openrc.html',\n        controller: 'OpenstackUsersOpenrcCtrl',\n        controllerAs: 'OpenstackUsersOpenrcCtrl',\n        resolve: {\n          openstackUser: function openstackUser() {\n            return currentUser;\n          }\n        }\n      }\n    });\n  };\n\n  self.downloadRcloneFile = function (currentUser) {\n    ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/cloud/project/openstack/users/rclone/openstack-users-rclone.modal.html',\n        controller: 'CloudProjectOpenstackUsersRcloneModalCtrl',\n        controllerAs: '$ctrl',\n        resolve: {\n          openstackUser: function openstackUser() {\n            return currentUser;\n          }\n        }\n      }\n    });\n  };\n\n  self.generateToken = function (currentUser) {\n    ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/cloud/project/openstack/users/token/openstack-users-token.html',\n        controller: 'CloudProjectOpenstackUsersTokenCtrl',\n        controllerAs: 'CloudProjectOpenstackUsersTokenCtrl',\n        resolve: {\n          openstackUser: function openstackUser() {\n            return currentUser;\n          }\n        }\n      }\n    });\n  };\n\n  self.openAddUser = function () {\n    ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/cloud/project/openstack/users/add/openstack-users-add.html',\n        controller: 'CloudProjectOpenStackUserAddCtrl',\n        controllerAs: '$ctrl',\n        resolve: {\n          serviceName: function serviceName() {\n            return self.projectId;\n          }\n        }\n      },\n      successHandler: function successHandler() {\n        return self.getUsers();\n      }\n    });\n  };\n\n  self.openDeleteUser = function (currentUser) {\n    ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/cloud/project/openstack/users/delete/openstack-users-delete.html',\n        controller: 'CloudProjectOpenStackUserDeleteCtrl',\n        controllerAs: 'CloudProjectOpenStackUserDeleteCtrl',\n        resolve: {\n          openstackUser: function openstackUser() {\n            return currentUser;\n          },\n          serviceName: function serviceName() {\n            return self.projectId;\n          }\n        }\n      },\n      successHandler: function successHandler() {\n        self.removeFromList(currentUser);\n        CloudMessage.success($translate.instant('openstackusers_users_delete_success', currentUser));\n      },\n      errorHandler: function errorHandler(err) {\n        return CloudMessage.error([$translate.instant('openstackusers_users_delete_error'), err.data && err.data.message || ''].join(' '));\n      }\n    });\n  }; // Open Openstack Horizon in a new navigator window, pre-filling the user login\n\n\n  self.openHorizon = function (user) {\n    $window.open(REDIRECT_URLS.horizon.replace('{username}', user.username), '_blank');\n  };\n\n  self.getPassword = function (currentUser) {\n    return OpenstackUsersPassword.get(self.projectId, currentUser.id);\n  };\n\n  self.removeFromList = function (user) {\n    var index = _.findIndex(self.table.users, {\n      id: user.id\n    });\n\n    if (index !== -1) {\n      self.table.users.splice(index, 1);\n    }\n  };\n\n  init();\n}]);",null]}