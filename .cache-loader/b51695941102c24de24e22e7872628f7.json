{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home.controller.js","mtime":1539717142201},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerHomeCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerHomeCtrl.$inject = [\"$state\", \"$stateParams\", \"$translate\", \"ControllerHelper\", \"CloudMessage\", \"FeatureAvailabilityService\", \"IpLoadBalancerActionService\", \"IpLoadBalancerConstant\", \"IpLoadBalancerHomeService\", \"IpLoadBalancerHomeStatusService\", \"IpLoadBalancerMetricsService\", \"IpLoadBalancerZoneAddService\", \"IpLoadBalancerZoneDeleteService\", \"IpLoadBalancerVrackHelper\", \"IpLoadBalancerVrackService\", \"REDIRECT_URLS\", \"RegionService\", \"VrackService\"];\n\n  function IpLoadBalancerHomeCtrl($state, $stateParams, $translate, ControllerHelper, CloudMessage, FeatureAvailabilityService, IpLoadBalancerActionService, IpLoadBalancerConstant, IpLoadBalancerHomeService, IpLoadBalancerHomeStatusService, IpLoadBalancerMetricsService, IpLoadBalancerZoneAddService, IpLoadBalancerZoneDeleteService, IpLoadBalancerVrackHelper, IpLoadBalancerVrackService, REDIRECT_URLS, RegionService, VrackService) {\n    _classCallCheck(this, IpLoadBalancerHomeCtrl);\n\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.FeatureAvailabilityService = FeatureAvailabilityService;\n    this.IpLoadBalancerActionService = IpLoadBalancerActionService;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerHomeService = IpLoadBalancerHomeService;\n    this.IpLoadBalancerHomeStatusService = IpLoadBalancerHomeStatusService;\n    this.IpLoadBalancerMetricsService = IpLoadBalancerMetricsService;\n    this.IpLoadBalancerZoneAddService = IpLoadBalancerZoneAddService;\n    this.IpLoadBalancerZoneDeleteService = IpLoadBalancerZoneDeleteService;\n    this.IpLoadBalancerVrackHelper = IpLoadBalancerVrackHelper;\n    this.IpLoadBalancerVrackService = IpLoadBalancerVrackService;\n    this.REDIRECT_URLS = REDIRECT_URLS;\n    this.RegionService = RegionService;\n    this.VrackService = VrackService;\n    this.serviceName = this.$stateParams.serviceName;\n    this.initLoaders();\n  }\n\n  _createClass(IpLoadBalancerHomeCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.configuration.load();\n      this.vrackCreationRules.load();\n      this.information.load();\n      this.subscription.load();\n      this.iplbStatus.load();\n      this.usage.load();\n      this.orderableZones.load();\n      this.deletableZones.load();\n      this.initActions();\n      this.initGraph();\n      this.serviceActions = {\n        text: this.$translate.instant('iplb_status_apply'),\n        callback: function callback() {\n          return _this.$state.go('network.iplb.detail.configuration');\n        },\n        isAvailable: function isAvailable() {\n          return true;\n        }\n      };\n      this.frontendsActions = {\n        text: this.$translate.instant('iplb_status_details'),\n        callback: function callback() {\n          return _this.$state.go('network.iplb.detail.frontends');\n        },\n        isAvailable: function isAvailable() {\n          return true;\n        }\n      };\n      this.farmsActions = {\n        text: this.$translate.instant('iplb_status_details'),\n        callback: function callback() {\n          return _this.$state.go('network.iplb.detail.server-farm');\n        },\n        isAvailable: function isAvailable() {\n          return true;\n        }\n      };\n    }\n  }, {\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this2 = this;\n\n      this.information = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerHomeService.getInformations(_this2.serviceName);\n        }\n      });\n      this.configuration = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerHomeService.getConfiguration(_this2.serviceName);\n        },\n        successHandler: function successHandler() {\n          return _this2.getRegionsGroup(_this2.configuration.data.zone);\n        }\n      });\n      this.vrackCreationRules = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerVrackService.getNetworkCreationRules(_this2.serviceName);\n        }\n      });\n      this.subscription = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerHomeService.getSubscription(_this2.serviceName);\n        }\n      });\n      this.iplbStatus = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerHomeStatusService.getIPLBStatus(_this2.serviceName, {\n            toArray: true\n          });\n        }\n      });\n      this.usage = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerHomeService.getUsage(_this2.serviceName);\n        }\n      });\n      this.orderableZones = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerZoneAddService.getOrderableZones(_this2.serviceName);\n        }\n      });\n      this.deletableZones = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerZoneDeleteService.getDeletableZones(_this2.serviceName);\n        }\n      });\n    }\n  }, {\n    key: \"initActions\",\n    value: function initActions() {\n      var _this3 = this;\n\n      this.actions = {\n        showFailoverIp: {\n          callback: function callback() {\n            return _this3.IpLoadBalancerActionService.showFailoverIpDetail(_this3.serviceName);\n          }\n        },\n        showNatIp: {\n          callback: function callback() {\n            return _this3.IpLoadBalancerActionService.showNatIpDetail(_this3.serviceName);\n          }\n        },\n        changeName: {\n          text: this.$translate.instant('common_edit'),\n          callback: function callback() {\n            return _this3.ControllerHelper.modal.showNameChangeModal({\n              serviceName: _this3.serviceName,\n              displayName: _this3.configuration.data.displayName,\n              onSave: function onSave(newDisplayName) {\n                return _this3.IpLoadBalancerHomeService.updateName(_this3.serviceName, newDisplayName).then(function () {\n                  return _this3.configuration.load();\n                });\n              }\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.configuration.loading && !_this3.configuration.hasErrors;\n          }\n        },\n        changeCipher: {\n          text: this.$translate.instant('common_edit'),\n          callback: function callback() {\n            return _this3.IpLoadBalancerActionService.cipherChange(_this3.serviceName, function () {\n              return _this3.configuration.load();\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.configuration.loading && !_this3.configuration.hasErrors;\n          }\n        },\n        activateVrack: {\n          text: this.$translate.instant('common_activate'),\n          callback: function callback() {\n            return _this3.VrackService.selectVrack().then(function (result) {\n              return _this3.IpLoadBalancerVrackHelper.associateVrack(_this3.serviceName, result.serviceName, _this3.vrackCreationRules.data);\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.vrackCreationRules.loading && !_this3.vrackCreationRules.hasErrors && _this3.vrackCreationRules.data.vrackEligibility && _this3.vrackCreationRules.data.status === 'inactive';\n          }\n        },\n        deActivateVrack: {\n          text: this.$translate.instant('common_deactivate'),\n          callback: function callback() {\n            return _this3.VrackService.unlinkVrackModal().then(function () {\n              return _this3.IpLoadBalancerVrackHelper.deAssociateVrack(_this3.serviceName, _this3.vrackCreationRules.data);\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.vrackCreationRules.loading && !_this3.vrackCreationRules.hasErrors && _this3.vrackCreationRules.data.status === 'active';\n          }\n        },\n        changeOffer: {\n          // TODO: Implementation of modal for changing offer\n          text: this.$translate.instant('common_edit'),\n          isAvailable: function isAvailable() {\n            return false;\n          }\n        },\n        manageAutorenew: {\n          text: this.$translate.instant('common_manage'),\n          href: this.ControllerHelper.navigation.getUrl('renew', {\n            serviceName: this.serviceName,\n            serviceType: 'IP_LOADBALANCER'\n          }),\n          isAvailable: function isAvailable() {\n            return !_this3.subscription.loading && !_this3.subscription.hasErrors;\n          }\n        },\n        manageContact: {\n          text: this.$translate.instant('common_manage'),\n          href: this.ControllerHelper.navigation.getUrl('contacts', {\n            serviceName: this.serviceName\n          }),\n          isAvailable: function isAvailable() {\n            return _this3.FeatureAvailabilityService.hasFeature('CONTACTS', 'manage') && !_this3.subscription.loading && !_this3.subscription.hasErrors;\n          }\n        },\n        addZone: {\n          text: this.$translate.instant('common_add'),\n          callback: function callback() {\n            return _this3.$state.go('network.iplb.detail.zone.add', {\n              serviceName: _this3.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.orderableZones.loading && _this3.orderableZones.data.length > 0;\n          }\n        },\n        deleteZone: {\n          text: this.$translate.instant('common_delete'),\n          callback: function callback() {\n            return _this3.$state.go('network.iplb.detail.zone.delete', {\n              serviceName: _this3.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this3.deletableZones.loading && _.filter(_this3.deletableZones.data, function (zone) {\n              return zone.selectable.value !== false;\n            }).length - 1 >= 1;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"updateQuotaAlert\",\n    value: function updateQuotaAlert(_quota) {\n      var _this4 = this;\n\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/home/updateQuota/iplb-update-quota.html',\n          controller: 'IpLoadBalancerUpdateQuotaCtrl',\n          controllerAs: 'IpLoadBalancerUpdateQuotaCtrl',\n          resolve: {\n            quota: function quota() {\n              return _quota;\n            }\n          }\n        }\n      }).then(function () {\n        _this4.usage.load();\n      });\n    }\n  }, {\n    key: \"initGraph\",\n    value: function initGraph() {\n      this.metricsList = this.IpLoadBalancerConstant.graphs;\n      this.metric = _.first(this.metricsList);\n      this.options = {\n        scales: {\n          xAxes: [{\n            gridLines: {\n              display: false\n            }\n          }],\n          yAxes: [{\n            id: 'y-axis-1',\n            type: 'linear',\n            ticks: {\n              min: 0,\n              minStep: 1,\n              beginAtZero: true\n            }\n          }]\n        },\n        elements: {\n          line: {\n            fill: false,\n            borderColor: '#3DD1F0',\n            borderWidth: 4\n          },\n          point: {\n            radius: 0\n          }\n        }\n      };\n      this.loadGraph();\n    }\n  }, {\n    key: \"loadGraph\",\n    value: function loadGraph() {\n      var _this5 = this;\n\n      var downsampleAggregation = this.metric === 'conn' ? 'sum' : 'max';\n      this.loadingGraph = true;\n      this.IpLoadBalancerMetricsService.getData(this.metric, '40m-ago', null, {\n        // http://opentsdb.net/docs/build/html/user_guide/query/downsampling.html\n        downsample: \"5m-\".concat(downsampleAggregation)\n      }).then(function (data) {\n        if (data.length && data[0].dps) {\n          _this5.data = _.values(data[0].dps);\n          _this5.labels = [];\n\n          _this5.data.forEach(function (value, index) {\n            _this5.labels.unshift(\"\".concat(index * 5, \"m\"));\n          });\n        }\n      }).finally(function () {\n        _this5.loadingGraph = false;\n      });\n    }\n  }, {\n    key: \"getGraphTitle\",\n    value: function getGraphTitle(metric) {\n      return this.$translate.instant(\"iplb_graph_name_\".concat(metric));\n    }\n  }, {\n    key: \"getRegionsGroup\",\n    value: function getRegionsGroup(regions) {\n      var _this6 = this;\n\n      this.regionsGroup = [];\n\n      if (regions) {\n        this.detailedRegions = !_.isArray(regions) ? [this.RegionService.getRegion(regions)] : _.map(regions, function (region) {\n          return _this6.RegionService.getRegion(region);\n        });\n      }\n\n      this.regionsGroup = _.groupBy(this.detailedRegions, 'country');\n    }\n  }, {\n    key: \"hasMultipleRegions\",\n    value: function hasMultipleRegions() {\n      return _(this.detailedRegions).isArray() && this.detailedRegions.length > 1;\n    }\n  }]);\n\n  return IpLoadBalancerHomeCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerHomeCtrl', IpLoadBalancerHomeCtrl);",null]}