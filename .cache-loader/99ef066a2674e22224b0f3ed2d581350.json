{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/nodes/add/kubernetes-nodes-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/nodes/add/kubernetes-nodes-add.controller.js","mtime":1539717374575},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('KubernetesNodesAddCtrl', class KubernetesNodesAddCtrl {\n  constructor(\n    $q, $state, $stateParams, $translate, $uibModalInstance,\n    CloudFlavorService, Kubernetes, OvhApiMe, OvhCloudPriceHelper, projectId,\n    CLOUD_FLAVORTYPE_CATEGORY, KUBERNETES,\n  ) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.$uibModalInstance = $uibModalInstance;\n    this.CloudFlavorService = CloudFlavorService;\n    this.Kubernetes = Kubernetes;\n    this.OvhApiMe = OvhApiMe;\n    this.OvhCloudPriceHelper = OvhCloudPriceHelper;\n    this.projectId = projectId;\n    this.CLOUD_FLAVORTYPE_CATEGORY = CLOUD_FLAVORTYPE_CATEGORY;\n    this.KUBERNETES = KUBERNETES;\n  }\n\n  $onInit() {\n    this.loading = true;\n    this.serviceName = this.$stateParams.serviceName;\n\n    this.getPublicCloudProject()\n      .then(() => this.$q.all({\n        quotas: this.getProjectQuota(),\n        prices: this.getPrices(),\n      }))\n      .then(({ quotas, prices }) => this.getFlavors(quotas, prices))\n      .catch(error => this.$uibModalInstance.dismiss(this.$translate.instant('kube_nodes_add_flavor_error', { message: _.get(error, 'data.message', '') })))\n      .finally(() => { this.loading = false; });\n  }\n\n  getPublicCloudProject() {\n    return this.Kubernetes.getAssociatedPublicCloudProjects(this.serviceName)\n      .then((projects) => { this.project = _.first(projects); });\n  }\n\n  getProjectQuota() {\n    return this.Kubernetes.getProjectQuota(this.project.projectId);\n  }\n\n  getFlavors(quotas, prices) {\n    return this.Kubernetes.getFlavors(this.projectId)\n      .then((flavors) => {\n        /**\n        * @type {{id: string, familyName: string, flavors: Object[]}}\n        */\n        this.flavorFamilies = this.CLOUD_FLAVORTYPE_CATEGORY\n          .filter(type => _.includes(this.KUBERNETES.flavorTypes, type.id))\n          .map(category => (\n            {\n              id: category.id,\n              familyName: this.$translate.instant(`kube_nodes_add_flavor_family_${category.id}`),\n              flavors: flavors\n                .filter(flavor => _.includes(category.types, flavor.type) && flavor.osType !== 'windows')\n                .map(flavor => ({\n                  name: flavor.name,\n                  displayedName: this.Kubernetes.formatFlavor(flavor),\n                  quotaOverflow: this.getQuotaOverflow(flavor, quotas),\n                  price: _.get(_.get(prices, flavor.planCodes.hourly), 'price.text'),\n                })),\n            }));\n        return flavors;\n      });\n  }\n\n  getSubsidiary() {\n    return this.OvhApiMe.v6().get().then(({ subsidiary }) => { this.subsidiary = subsidiary; });\n  }\n\n  getPrices() {\n    return this.OvhCloudPriceHelper.getPrices(this.project.projectId);\n  }\n\n  getQuotaOverflow(flavor, quotas) {\n    // addOverQuotaInfos adds 'disabled' key to flavor parameter\n    const testedFlavor = _.clone(flavor);\n    this.CloudFlavorService.constructor.addOverQuotaInfos(testedFlavor, quotas);\n    return _.get(testedFlavor, 'disabled');\n  }\n\n  onFlavorFamilyChange(selectedFamily) {\n    this.selectedFlavor = null;\n    this.flavors = _.find(this.flavorFamilies, family => family.id === selectedFamily.id).flavors;\n  }\n\n  addNode() {\n    this.loading = true;\n    return this.Kubernetes.addNode(this.serviceName, this.selectedFlavor.name)\n      .then(() => this.$uibModalInstance.close())\n      .catch(error => this.$uibModalInstance.dismiss(this.$translate.instant('kube_nodes_add_error', { message: _.get(error, 'data.message', '') })))\n      .finally(() => { this.loading = false; });\n  }\n\n  instanceIsValid() {\n    return !this.selectedFlavor.quotaOverflow;\n  }\n\n  dismiss(error) {\n    this.$uibModalInstance.dismiss(error);\n  }\n\n  goToProjectQuota() {\n    this.$uibModalInstance.close();\n    this.$state.go('iaas.pci-project.compute.quota', { projectId: this.project.projectId });\n  }\n});\n"]}