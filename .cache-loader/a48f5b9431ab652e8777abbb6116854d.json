{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/tokens/logs-tokens.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/tokens/logs-tokens.service.js","mtime":1539717142155},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsTokensService {\n  constructor($q, OvhApiDbaas, LogsHelperService) {\n    this.$q = $q;\n    this.TokenApiService = OvhApiDbaas.Logs().Token().v6();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.LogsHelperService = LogsHelperService;\n  }\n\n  /**\n   * returns array of tokens with details\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of tokens.\n   *          Each alias will have all details populated.\n   * @memberof LogsTokensService\n   */\n  getTokens(serviceName) {\n    return this.getTokensDetails(serviceName)\n      .catch(err => this.LogsHelperService.handleError('logs_tokens_get_error', err, {}));\n  }\n\n  /**\n   * gets details for each token in array\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to an array of token objects\n   * @memberof LogsTokensService\n   */\n  getTokensDetails(serviceName) {\n    return this.getTokensIds(serviceName)\n      .then((tokens) => {\n        const promises = tokens.map(tokenId => this.getToken(serviceName, tokenId));\n        return this.$q.all(promises);\n      });\n  }\n\n  /**\n   * returns array of tokens id's of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of tokens id's\n   * @memberof LogsTokensService\n   */\n  getTokensIds(serviceName) {\n    return this.TokenApiService.query({ serviceName }).$promise;\n  }\n\n  /**\n   * returns details of an token\n   *\n   * @param {any} serviceName\n   * @param {any} tokenId\n   * @returns promise which will be resolve to token object\n   * @memberof LogsTokensService\n   */\n  getToken(serviceName, tokenId) {\n    return this.TokenApiService.get({ serviceName, tokenId })\n      .$promise.catch(err => this.LogsHelperService.handleError('logs_tokens_get_detail_error', err, {}));\n  }\n\n  /**\n   * delete token\n   *\n   * @param {any} serviceName\n   * @param {any} token, token object to be deleted\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsTokensService\n   */\n  deleteToken(serviceName, token) {\n    return this.TokenApiService.delete({ serviceName, tokenId: token.tokenId })\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_tokens_delete_success', { tokenName: token.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_tokens_delete_error', err, { tokenName: token.name }));\n  }\n\n  /**\n   * create new token\n   *\n   * @param {any} serviceName\n   * @param {any} token, token object to be created\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsTokensService\n   */\n  createToken(serviceName, token) {\n    return this.TokenApiService.create({ serviceName }, token)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_tokens_create_success', { tokenName: token.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_tokens_create_error', err, { tokenName: token.name }));\n  }\n\n  /**\n   * returns array of Input IDs of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of input IDs\n   * @memberof LogsInputsService\n   */\n  getClusters(serviceName, errorMessageParam) {\n    const errorMessage = errorMessageParam || 'logs_tokens_cluster_get_error';\n    return this.DetailsAapiService.me({ serviceName })\n      .$promise\n      .then(details => details.clusters)\n      .catch(err => this.LogsHelperService.handleError(\n        errorMessage,\n        err,\n        { accountName: serviceName },\n      ));\n  }\n\n  /**\n   * returns default cluster associated with user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to default cluster\n   * @memberof LogsInputsService\n   */\n  getDefaultCluster(serviceName, errorMessage) {\n    return this.getClusters(serviceName, errorMessage)\n      .then((clusters) => {\n        const defaultClusters = clusters.filter(cluster => cluster.isDefault);\n        return defaultClusters.length > 0 ? defaultClusters[0] : null;\n      });\n  }\n\n  /**\n   * creates new token with default values\n   *\n   * @returns token object with default values\n   * @memberof LogsTokensService\n   */\n  getNewToken(serviceName) {\n    return this.getDefaultCluster(serviceName).then(defaultCluster => ({\n      name: null,\n      clusterId: defaultCluster ? defaultCluster.clusterId : null,\n    }));\n  }\n\n  resetAllCache() {\n    this.TokenApiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsTokensService', LogsTokensService);\n"]}