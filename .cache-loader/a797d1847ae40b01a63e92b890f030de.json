{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/common/cloud-navigation.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/common/cloud-navigation.service.js","mtime":1539717142058},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudNavigation =\n/*#__PURE__*/\nfunction () {\n  CloudNavigation.$inject = [\"$transitions\", \"$state\", \"$stateParams\", \"TabsService\"];\n\n  function CloudNavigation($transitions, $state, $stateParams, TabsService) {\n    var _this = this;\n\n    _classCallCheck(this, CloudNavigation);\n\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.TabsService = TabsService;\n    this.rootElement = undefined;\n    $transitions.onSuccess({}, function (transition) {\n      var toState = transition.to();\n      var toParams = transition.params();\n      var fromState = transition.from();\n      var fromParams = transition.params('from');\n\n      var correspondingState = _.find(_this.history, function (elem) {\n        return elem.state === toState.name && _.isEqual(elem.stateParams, toParams);\n      });\n\n      if (correspondingState) {\n        while (_.last(_this.history) !== correspondingState) {\n          _this.history.pop();\n        }\n\n        _this.history.pop();\n      } else {\n        var element = {\n          state: fromState.name,\n          stateParams: fromParams,\n          sref: _this.constructor.getSref({\n            state: fromState.name\n          }, fromParams)\n        };\n\n        _this.history.push(element);\n      }\n    });\n  }\n\n  _createClass(CloudNavigation, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init(rootElement) {\n      this.history = [];\n      this.rootElement = undefined;\n\n      if (rootElement) {\n        this.rootElement = rootElement;\n      }\n    }\n  }, {\n    key: \"getPreviousState\",\n    value: function getPreviousState() {\n      var _this2 = this;\n\n      var previousState = _.last(this.history) || this.getActiveTabState() || this.rootElement;\n\n      previousState.go = function () {\n        return _this2.$state.go(previousState.state, previousState.stateParams);\n      };\n\n      return previousState;\n    }\n  }, {\n    key: \"getActiveTabState\",\n    value: function getActiveTabState() {\n      return this.TabsService.getActiveTab();\n    }\n  }, {\n    key: \"findInHistory\",\n    value: function findInHistory(stateToFind) {\n      return _.find(this.history, function (state) {\n        return state.state === stateToFind.state && _.isEqual(state.stateParams, stateToFind.stateParams);\n      });\n    }\n  }], [{\n    key: \"getSref\",\n    value: function getSref(element, params) {\n      return \"\".concat(element.state, \"(\").concat(JSON.stringify(params), \")\");\n    }\n  }]);\n\n  return CloudNavigation;\n}();\n\nangular.module('managerApp').service('CloudNavigation', CloudNavigation);",null]}