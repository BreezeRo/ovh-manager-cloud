{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/storage-add/storage/add-storage-controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/storage-add/storage/add-storage-controller.js","mtime":1539717142053},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('RA.add.storageCtrl', ['$q', '$scope', '$state', '$stateParams', '$timeout', '$translate', 'OvhApiCloudProjectRegion', 'CloudStorageContainers', 'CloudMessage', function storageCtrl($q, $scope, $state, $stateParams, $timeout, $translate, OvhApiCloudProjectRegion, CloudStorageContainers, CloudMessage) {\n  $scope.projectId = $stateParams.projectId;\n  $scope.model = {};\n  $scope.steps = {\n    region: {\n      enable: false\n    },\n    containerType: {\n      enable: false\n    },\n    name: {\n      enable: false\n    }\n  };\n  $scope.stepPath = null;\n  $scope.loaders = {\n    regions: true\n  };\n  $scope.historyStep = []; // handle messages\n\n  $scope.messages = [];\n\n  function refreshMessage() {\n    $scope.messages = $scope.messageHandler.getMessages();\n  }\n\n  function loadMessage() {\n    CloudMessage.unSubscribe('iaas.pci-project.compute.storage');\n    $scope.messageHandler = CloudMessage.subscribe('iaas.pci-project.compute.storage', {\n      onMessage: function onMessage() {\n        return refreshMessage();\n      }\n    });\n  }\n\n  $scope.loadStep = function (step) {\n    $scope.steps[step].enable = true;\n    $scope.historyStep.push(step);\n  };\n\n  $scope.isValid = function () {\n    var isDefined = function isDefined(expr) {\n      return !_.isUndefined(expr);\n    };\n\n    return isDefined($scope.model.region) && isDefined($scope.model.containerType) && isDefined($scope.model.name);\n  };\n\n  $scope.addStorage = function () {\n    $scope.loaders.post = true;\n    return CloudStorageContainers.create($scope.projectId, $scope.model.name, $scope.model.region, $scope.model.containerType.type).then(function (resp) {\n      if (!resp || !resp.id) {\n        CloudMessage.error($translate.instant('add_storage_storage_added_error'));\n        return $q.reject(resp);\n      }\n\n      return $timeout(function () {\n        CloudMessage.success($translate.instant('add_storage_storage_added'));\n        $state.go('iaas.pci-project.compute.storage.detail-container', {\n          projectId: $scope.projectId,\n          storageId: resp.id\n        });\n      }, 3000).then(function () {\n        return resp;\n      });\n    }).finally(function () {\n      $scope.loaders.post = false;\n    });\n  };\n\n  function loadRegions() {\n    $scope.loaders.regions = true;\n    $scope.regions = null;\n    return OvhApiCloudProjectRegion.v6().query({\n      serviceName: $scope.projectId\n    }).$promise.then(function (regions) {\n      $scope.regions = regions;\n    }).finally(function () {\n      $scope.loaders.regions = false;\n    });\n  }\n\n  function init() {\n    loadMessage();\n    return loadRegions().then(function () {\n      $scope.loadStep('region');\n    });\n  }\n\n  init();\n}]);",null]}