{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/ts/project/details/key/addOrEdit/dbaasts-project-details-key-add.controllers.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/ts/project/details/key/addOrEdit/dbaasts-project-details-key-add.controllers.js","mtime":1539717142163},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('DBaasTsProjectDetailsKeyAddOrEditCtrl', [\"$q\", \"$state\", \"$stateParams\", \"$translate\", \"OvhApiDBaasTsProjectKey\", \"Toast\", function DBaasTsProjectDetailsKeyAddOrEditCtrl($q, $state, $stateParams, $translate, OvhApiDBaasTsProjectKey, Toast) {\n  // -- Variable declaration --\n  var self = this;\n  var serviceName = $stateParams.serviceName,\n      keyId = $stateParams.keyId;\n  self.loaders = {\n    init: false,\n    addOrEdit: false\n  };\n  self.data = {\n    permissions: _.indexBy(['READ', 'WRITE']),\n    // Detect edition if a key id is present\n    edition: !!keyId\n  };\n  self.model = {\n    permissions: [self.data.permissions.READ],\n    tags: [{}] // Initialize tags with an empty object\n\n  }; // -- Initialization\n\n  function init() {\n    // Retrieve the key in edition\n    if (self.data.edition) {\n      self.loaders.init = true;\n      OvhApiDBaasTsProjectKey.v6().get({\n        serviceName: serviceName,\n        keyId: keyId\n      }).$promise.then(function (key) {\n        self.loaders.init = false;\n        self.model = key; // If no tags initialize tags with an empty array\n\n        if (!key.tags) {\n          self.model.tags = [];\n        }\n      }).catch(function (err) {\n        Toast.error([$translate.instant('dtpdt_init_error'), err.data && err.data.message || ''].join(' '));\n      }).finally(function () {\n        self.loaders.init = false;\n      });\n    }\n  }\n\n  init(); // -- Create or update the key\n\n  self.saveKey = function saveKey() {\n    self.loaders.addOrEdit = true;\n    var successMsg;\n    var errorMsg;\n    var req; // Filter empty keys in the tags\n\n    self.model.tags = _.filter(self.model.tags, function (tag) {\n      return tag.key;\n    });\n    self.model.serviceName = serviceName;\n\n    if (self.data.edition) {\n      successMsg = 'dtpdt_edit_successful';\n      errorMsg = 'dtpdt_edit_error';\n      req = OvhApiDBaasTsProjectKey.v6().update({\n        serviceName: serviceName,\n        keyId: keyId\n      }, self.model);\n    } else {\n      successMsg = 'dtpdt_creation_successful';\n      errorMsg = 'dtpdt_creation_error';\n      req = OvhApiDBaasTsProjectKey.v6().create({\n        serviceName: serviceName\n      }, self.model);\n    }\n\n    req.$promise.then(function () {\n      $state.go('^.dbaasts-project-details-key');\n      Toast.info($translate.instant(successMsg));\n    }).catch(function (err) {\n      Toast.error([$translate.instant(errorMsg), err.data && err.data.message || ''].join(' : '));\n      self.loaders.addOrEdit = false;\n    });\n  }; // -- Add / Remove a tag\n\n\n  self.addTag = function addTag() {\n    self.model.tags.push({});\n  };\n\n  self.removeTag = function removeTag(index) {\n    self.model.tags.splice(index, 1);\n  };\n}]);",null]}