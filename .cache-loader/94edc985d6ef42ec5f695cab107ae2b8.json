{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/index/logs-index.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/index/logs-index.service.js","mtime":1539717142084},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsIndexService {\n  constructor($q, $translate, CloudPoll, ControllerHelper, LogsHelperService, OvhApiDbaas,\n    ServiceHelper, LogsOptionsService, LogsConstants) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudPoll = CloudPoll;\n    this.ServiceHelper = ServiceHelper;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsHelperService = LogsHelperService;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsConstants = LogsConstants;\n    this.IndexApiService = OvhApiDbaas.Logs().Index().v6();\n    this.IndexAapiService = OvhApiDbaas.Logs().Index().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.newIndex = {\n      description: '',\n      alertNotifyEnabled: false,\n    };\n  }\n\n  getNewIndex() {\n    return this.newIndex;\n  }\n\n  getQuota(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then((me) => {\n        const quota = {\n          max: me.total.maxNbIndex,\n          configured: me.total.curNbIndex,\n          currentUsage: me.total.curNbIndex * 100 / me.total.maxNbIndex,\n          mainOfferMax: me.offer.maxNbIndex,\n          mainOfferCurrent: me.offer.curNbIndex,\n        };\n        return quota;\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_streams_quota_get_error', err, {}));\n  }\n\n  getIndices(serviceName) {\n    return this.IndexApiService.query({ serviceName }).$promise\n      .then((indices) => {\n        const promises = indices.map(indexId => this.getIndexDetails(serviceName, indexId));\n        return this.$q.all(promises);\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_index_get_error', err, {}));\n  }\n\n  getOwnIndices(serviceName) {\n    return this.getIndices(serviceName)\n      .then(indices => indices.filter(index => index.info.isEditable))\n      .catch(err => this.LogsHelperService.handleError('logs_index_get_error', err, {}));\n  }\n\n  getShareableIndices(serviceName) {\n    return this.getIndices(serviceName)\n      .then(indices => indices.filter(index => index.info.isShareable))\n      .catch(err => this.LogsHelperService.handleError('logs_index_get_error', err, {}));\n  }\n\n  getIndexDetails(serviceName, indexId) {\n    return this.IndexAapiService.get({ serviceName, indexId })\n      .$promise\n      .then(index => this.constructor.transformAapiIndex(index));\n  }\n\n  static transformAapiIndex(index) {\n    if (index.info.currentStorage < 0) {\n      _.set(index, 'info.currentStorage', 0);\n    }\n    if (index.info.maxSize < 0) {\n      _.set(index, 'info.maxSize', 0);\n    }\n    return index;\n  }\n\n  deleteModal(indexName) {\n    return this.ControllerHelper.modal.showDeleteModal({\n      titleText: this.$translate.instant('logs_modal_delete_title'),\n      textHtml: this.$translate.instant('logs_modal_delete_question', { name: indexName }),\n    });\n  }\n\n  getSubscribedOptions(serviceName) {\n    return this.LogsOptionsService.getSubscribedOptionsByType(\n      serviceName,\n      this.LogsConstants.INDEX_OPTION_REFERENCE,\n    );\n  }\n\n  createIndex(serviceName, object) {\n    return this.IndexApiService.post({ serviceName }, object).$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_index_create_success', { name: object.suffix });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_index_create_error', err, { name: object.suffix }));\n  }\n\n  updateIndex(serviceName, index, indexInfo) {\n    return this.IndexApiService.put({ serviceName, indexId: index.indexId }, indexInfo)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_index_edit_success', { name: index.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_index_edit_error', err, { name: index.name }));\n  }\n\n  deleteIndex(serviceName, index) {\n    return this.IndexApiService.delete({ serviceName, indexId: index.indexId }).$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_index_delete_success', { name: index.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_index_delete_error', err, { name: index.name }));\n  }\n\n  resetAllCache() {\n    this.IndexApiService.resetAllCache();\n    this.IndexAapiService.resetAllCache();\n    this.AccountingAapiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsIndexService', LogsIndexService);\n"]}