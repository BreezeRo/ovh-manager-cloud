{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm.service.js","mtime":1539717142217},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerServerFarmService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerServerFarmService.$inject = [\"$q\", \"$translate\", \"IpLoadBalancerConfigurationService\", \"OvhApiIpLoadBalancing\", \"ServiceHelper\", \"RegionService\"];\n\n  function IpLoadBalancerServerFarmService($q, $translate, IpLoadBalancerConfigurationService, OvhApiIpLoadBalancing, ServiceHelper, RegionService) {\n    _classCallCheck(this, IpLoadBalancerServerFarmService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.IpLoadBalancerConfigurationService = IpLoadBalancerConfigurationService;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n    this.Farm = {\n      all: this.IpLoadBalancing.Farm().v6(),\n      tcp: this.IpLoadBalancing.Farm().Tcp().v6(),\n      udp: this.IpLoadBalancing.Farm().Udp().v6(),\n      http: this.IpLoadBalancing.Farm().Http().v6()\n    };\n    this.Server = {\n      tcp: this.IpLoadBalancing.Farm().Tcp().Server().v6(),\n      udp: this.IpLoadBalancing.Farm().Udp().Server().v6(),\n      http: this.IpLoadBalancing.Farm().Http().Server().v6()\n    };\n  }\n\n  _createClass(IpLoadBalancerServerFarmService, [{\n    key: \"getAvailableFarmProbes\",\n    value: function getAvailableFarmProbes(serviceName) {\n      return this.IpLoadBalancing.v6().availableFarmProbes({\n        serviceName: serviceName\n      }).$promise.catch(this.ServiceHelper.errorHandler('iplb_farm_edit_probe_info_error'));\n    }\n  }, {\n    key: \"getServerFarms\",\n    value: function getServerFarms(serviceName, networkId) {\n      var _this = this;\n\n      return this.Farm.all.query({\n        serviceName: serviceName,\n        vrackNetworkId: networkId\n      }).$promise.then(function (farms) {\n        var promises = _.map(farms, function (farm) {\n          return _this.getServerFarm(serviceName, farm.id, farm.type);\n        });\n\n        return _this.$q.all(promises);\n      }).catch(this.ServiceHelper.errorHandler('iplb_farm_list_loading_error'));\n    }\n  }, {\n    key: \"getServerFarm\",\n    value: function getServerFarm(serviceName, farmId, type) {\n      var _this2 = this;\n\n      return this.Farm[type].get({\n        serviceName: serviceName\n      }, {\n        farmId: farmId\n      }).$promise.then(function (farm) {\n        _.set(farm, 'type', type);\n\n        _.set(farm, 'zoneText', _this2.RegionService.getRegion(farm.zone));\n\n        return farm;\n      });\n    }\n  }, {\n    key: \"getAllFarmsTypes\",\n    value: function getAllFarmsTypes(serviceName) {\n      return this.Farm.all.query({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"getServerFarmServers\",\n    value: function getServerFarmServers(serviceName, farmId, type) {\n      var _this3 = this;\n\n      return this.Server[type].query({\n        serviceName: serviceName,\n        farmId: farmId\n      }).$promise.then(function (serverIds) {\n        var promises = _.map(serverIds, function (serverId) {\n          return _this3.Server[type].get({\n            serviceName: serviceName,\n            farmId: farmId,\n            serverId: serverId\n          }).$promise.then(function (server) {\n            if (!server.serverState) {\n              _.set(server, 'serverState', []);\n            }\n\n            return server;\n          });\n        });\n\n        return _this3.$q.all(promises);\n      }).catch(this.ServiceHelper.errorHandler('iplb_farm_server_list_loading_error'));\n    }\n  }, {\n    key: \"create\",\n    value: function create(type, serviceName, farm) {\n      var _this4 = this;\n\n      return this.Farm[type].post({\n        serviceName: serviceName\n      }, farm).$promise.then(this.ServiceHelper.successHandler('iplb_farm_add_success')).then(function () {\n        return _this4.Farm.all.resetQueryCache();\n      }).then(function () {\n        return _this4.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_farm_add_error'));\n    }\n  }, {\n    key: \"update\",\n    value: function update(type, serviceName, farmId, farm) {\n      var _this5 = this;\n\n      return this.Farm[type].put({\n        serviceName: serviceName,\n        farmId: farmId\n      }, farm).$promise.then(this.ServiceHelper.successHandler('iplb_farm_update_success')).then(function () {\n        return _this5.Farm.all.resetQueryCache();\n      }).then(function () {\n        return _this5.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_farm_update_error'));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(type, serviceName, farmId) {\n      var _this6 = this;\n\n      return this.Farm[type].delete({\n        serviceName: serviceName,\n        farmId: farmId\n      }).$promise.then(this.ServiceHelper.successHandler('iplb_farm_delete_success')).then(function () {\n        return _this6.Farm.all.resetQueryCache();\n      }).then(function () {\n        return _this6.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_farm_delete_error'));\n    }\n  }, {\n    key: \"humanizeBalance\",\n    value: function humanizeBalance(balance) {\n      if (!balance) {\n        return '-';\n      }\n\n      return this.$translate.instant(\"iplb_farm_balance_\".concat(balance));\n    }\n  }, {\n    key: \"humanizeStickiness\",\n    value: function humanizeStickiness(stickiness) {\n      if (!stickiness) {\n        return this.$translate.instant('iplb_farm_stickiness_none');\n      }\n\n      return this.$translate.instant(\"iplb_farm_stickiness_\".concat(stickiness));\n    }\n  }]);\n\n  return IpLoadBalancerServerFarmService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerServerFarmService', IpLoadBalancerServerFarmService);",null]}