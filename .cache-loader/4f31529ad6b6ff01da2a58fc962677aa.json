{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/add/logs-role-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/add/logs-role-add.controller.js","mtime":1539717142140},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsRoleAddModalCtrl {\n  constructor($q, $stateParams, $uibModalInstance, ControllerHelper, LogsRolesService, options,\n    quota, roleInfo) {\n    this.$stateParams = $stateParams;\n    this.$q = $q;\n    this.ControllerHelper = ControllerHelper;\n    this.options = options;\n    this.quota = quota;\n    this.roleInfo = roleInfo;\n    this.LogsRolesService = LogsRolesService;\n    this.$uibModalInstance = $uibModalInstance;\n    this.serviceName = $stateParams.serviceName;\n    this.role = this.LogsRolesService.getNewRole();\n  }\n\n  $onInit() {\n    this.isEdit = this.constructor.checkIsEdit(this.roleInfo);\n    if (this.isEdit) {\n      this.populateRole();\n    } else {\n      this.clearRole();\n    }\n  }\n\n  clearRole() {\n    this.title = 'logs_role_modal_add_title';\n    this.role.description = '';\n    this.role.name = '';\n    this.role.optionId = null;\n  }\n\n  populateRole() {\n    this.title = 'logs_role_modal_edit_title';\n    this.role.description = this.roleInfo.description;\n    this.role.name = this.roleInfo.name;\n    this.role.optionId = this.roleInfo.optionId;\n  }\n\n  static checkIsEdit(roleInfo) {\n    return roleInfo !== undefined;\n  }\n\n  cancel() {\n    this.$uibModalInstance.dismiss();\n  }\n\n  save() {\n    if (this.isEdit) {\n      this.updateRole();\n    } else {\n      this.saveRole();\n    }\n  }\n\n  saveRole() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsRolesService.addRole(this.serviceName, this.role)\n        .then(response => this.$uibModalInstance.close(response))\n        .catch(response => this.$uibModalInstance.dismiss(response))\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    return this.saving.load();\n  }\n\n  updateRole() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsRolesService\n        .updateRole(this.serviceName, this.roleInfo.roleId, this.role)\n        .then(response => this.$uibModalInstance.close(response))\n        .catch(response => this.$uibModalInstance.dismiss(response))\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    return this.saving.load();\n  }\n}\n\nangular.module('managerApp').controller('LogsRoleAddModalCtrl', LogsRoleAddModalCtrl);\n"]}