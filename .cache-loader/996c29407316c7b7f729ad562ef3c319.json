{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/services/containers.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/services/containers.service.js","mtime":1539717142051},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').service('CloudStorageContainers', ['$q', 'OvhApiCloudProjectStorage', 'CloudStorageContainersConfiguration', 'CloudStorageContainer', function CloudStorageContainers($q, OvhApiCloudProjectStorage, storageContainerConfig, storageContainer) {\n  var self = this;\n  /**\n   * Get the list of the containers.\n   * @param  {string} projectId    project id\n   * @return {Promise}\n   */\n\n  self.list = function (projectId) {\n    function saveNameAndRegion(container) {\n      var data = storageContainerConfig.containerMetaCache.get(projectId, container.id);\n\n      if (!data) {\n        storageContainerConfig.containerMetaCache.set(projectId, container.id, _.pick(container, ['name', 'region']));\n      }\n    }\n\n    return OvhApiCloudProjectStorage.v6().query({\n      projectId: projectId\n    }).$promise.then(function (containers) {\n      // Cache name and region of each container\n      containers.forEach(function (container) {\n        saveNameAndRegion(container);\n      });\n      return containers;\n    });\n  };\n  /**\n   * Create a container.\n   * @param  {string} projectId     project id\n   * @param  {string} containerName container name\n   * @param  {string} region        region\n   * @param  {string} type          storage type (swift_cname|swift_public|swift_private|pca)\n   * @return {Promise}\n   */\n\n\n  self.create = function (projectId, containerName, region, type) {\n    var data = {\n      containerName: containerName,\n      region: region\n    };\n    var containerData = {};\n    var currentContainerId;\n\n    if (type === 'archive') {\n      data.archive = true;\n    }\n\n    return OvhApiCloudProjectStorage.v6().save({\n      projectId: projectId\n    }, data).$promise.then(function (result) {\n      currentContainerId = result.id;\n      containerData = result; // Make container a static hosting\n\n      if (type === 'static') {\n        return OvhApiCloudProjectStorage.v6().static({\n          projectId: projectId,\n          containerId: currentContainerId\n        }, {}).$promise;\n      } // Make container public\n\n\n      if (type === 'public') {\n        return storageContainer.setAsPublic(projectId, currentContainerId);\n      }\n\n      return $q.when();\n    }).then(function () {\n      return storageContainer.getMetaData(projectId, currentContainerId);\n    }).then(function (metaData) {\n      return angular.extend(containerData, metaData);\n    });\n  };\n  /**\n   * Delete a container.\n   * @param  {string} projectId   project id\n   * @param  {string} containerId container id\n   * @return {Promise}\n   */\n\n\n  self.delete = function (projectId, containerId) {\n    return OvhApiCloudProjectStorage.v6().get({\n      projectId: projectId,\n      containerId: containerId\n    }).$promise.then(function (containerData) {\n      if (containerData.objects.length) {\n        return $q.reject('NON_EMPTY_CONTAINER');\n      }\n\n      return OvhApiCloudProjectStorage.v6().delete({\n        projectId: projectId,\n        containerId: containerId\n      }).$promise;\n    });\n  };\n}]);",null]}