{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/openstackClient/cloud-project-compute-infrastructure-openstack-client.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/openstackClient/cloud-project-compute-infrastructure-openstack-client.service.js","mtime":1539717374456},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeInfrastructureOpenstackClientService =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeInfrastructureOpenstackClientService.$inject = [\"$q\", \"$stateParams\", \"$interval\", \"OvhApiCloudProjectOpenstackClient\", \"OvhApiCloudProjectRegion\", \"ServiceHelper\"];\n\n  function CloudProjectComputeInfrastructureOpenstackClientService($q, $stateParams, $interval, OvhApiCloudProjectOpenstackClient, OvhApiCloudProjectRegion, ServiceHelper) {\n    _classCallCheck(this, CloudProjectComputeInfrastructureOpenstackClientService);\n\n    this.$q = $q;\n    this.$interval = $interval;\n    this.OvhApiCloudProjectOpenstackClient = OvhApiCloudProjectOpenstackClient;\n    this.OvhApiCloudProjectRegion = OvhApiCloudProjectRegion;\n    this.ServiceHelper = ServiceHelper;\n    this.ws = null;\n  }\n\n  _createClass(CloudProjectComputeInfrastructureOpenstackClientService, [{\n    key: \"setSession\",\n    value: function setSession(session, term) {\n      if (!session) {\n        return this.$q.when();\n      }\n\n      this.session = session;\n      this.updateExpiresAt();\n\n      if (!term) {\n        return session;\n      }\n\n      return this.initWebSocket(session, term);\n    }\n  }, {\n    key: \"getSession\",\n    value: function getSession(_ref) {\n      var _this = this;\n\n      var serviceName = _ref.serviceName,\n          term = _ref.term;\n      return this.OvhApiCloudProjectOpenstackClient.v6().post({\n        serviceName: serviceName\n      }, {}).$promise.then(function (session) {\n        return _this.setSession(session, term);\n      }).catch(this.ServiceHelper.errorHandler('cpci_openstack_client_session_error', 'iaas.pci-project.compute.openstack-console'));\n    }\n  }, {\n    key: \"getRegions\",\n    value: function getRegions(serviceName) {\n      return this.OvhApiCloudProjectRegion.v6().query({\n        serviceName: serviceName\n      }).$promise.catch(this.ServiceHelper.errorHandler('cpci_openstack_client_regions_error', 'iaas.pci-project.compute.openstack-console'));\n    }\n  }, {\n    key: \"sendAction\",\n    value: function sendAction(action) {\n      this.clear();\n      this.send(\"\".concat(action, \"\\n\"));\n    }\n  }, {\n    key: \"pasteAction\",\n    value: function pasteAction(action) {\n      this.clear();\n      this.send(action);\n    }\n  }, {\n    key: \"updateExpiresAt\",\n    value: function updateExpiresAt() {\n      this.expiresAt = moment(this.session.expires).fromNow(true);\n    }\n  }, {\n    key: \"ping\",\n    value: function ping() {\n      this.updateExpiresAt();\n      this.ws.send('1');\n    }\n  }, {\n    key: \"initWebSocket\",\n    value: function initWebSocket(session, term) {\n      var _this2 = this;\n\n      var defer = this.$q.defer();\n      var pingTimer;\n\n      if (!session) {\n        return defer.reject();\n      }\n\n      this.ws = new WebSocket(session.websocket);\n\n      this.ws.onopen = function () {\n        _this2.retry = false;\n        _this2.ws.opened = true;\n        pingTimer = _this2.$interval(function () {\n          return _this2.ping();\n        }, 15 * 1000);\n        defer.resolve(session);\n      };\n\n      this.ws.onmessage = function (event) {\n        var data = event.data.slice(1);\n\n        switch (event.data[0]) {\n          case '0':\n            term.write(atob(data));\n            break;\n\n          default:\n            break;\n        }\n      };\n\n      this.ws.onclose = function () {\n        if (pingTimer) {\n          _this2.$interval.cancel(pingTimer);\n        }\n\n        if (_this2.success) {\n          return;\n        }\n\n        if (!_this2.retry && moment(_this2.session.expires).isAfter()) {\n          _this2.retry = true;\n\n          _this2.initWebSocket(session, term);\n\n          return;\n        }\n\n        _this2.ServiceHelper.errorHandler('cpci_openstack_client_session_closed', 'iaas.pci-project.compute.openstack-console')({\n          data: 'Expired Session'\n        });\n\n        defer.reject();\n      };\n\n      this.ws.onerror = function (err) {\n        _this2.ServiceHelper.errorHandler('cpci_openstack_client_session_error', 'iaas.pci-project.compute.openstack-console')(err);\n\n        defer.reject(err);\n      };\n\n      return defer.promise;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.success = true;\n\n      if (this.ws) {\n        this.ws.close();\n      }\n    }\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      if (!this.wsReady()) {\n        return;\n      }\n\n      this.ws.send(\"0\".concat(data));\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      // to clear the line before sending data\n      this.ws.send('0\\x15\\x0b');\n    }\n  }, {\n    key: \"setRegion\",\n    value: function setRegion(region) {\n      if (!this.wsReady()) {\n        return;\n      }\n\n      this.clear();\n      this.send(\"export OS_REGION_NAME=\".concat(region, \"\\n\"));\n    }\n  }, {\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      if (!this.wsReady()) {\n        return;\n      }\n\n      this.ws.send(\"2\".concat(JSON.stringify(config)));\n    }\n  }, {\n    key: \"wsReady\",\n    value: function wsReady() {\n      return this.ws && this.ws.opened;\n    }\n  }]);\n\n  return CloudProjectComputeInfrastructureOpenstackClientService;\n}();\n\nangular.module('managerApp').service('CloudProjectComputeInfrastructureOpenstackClientService', CloudProjectComputeInfrastructureOpenstackClientService);",null]}