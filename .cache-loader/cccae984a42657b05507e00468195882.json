{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/nasha-partition.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/nasha-partition.controller.js","mtime":1539717142248},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('PartitionCtrl', function PartitionCtrl($state, $rootScope,\n  $scope, $uibModal, $q, $translate, $stateParams, OvhApiDedicatedNasha, Poller, CloudMessage) {\n  const self = this;\n\n  self.trackedTaskStatus = ['todo', 'doing'];\n  self.trackedTaskOperations = [\n    'clusterLeclercPartitionAdd',\n    'clusterLeclercPartitionDelete',\n    'clusterLeclercPartitionUpdate',\n    'clusterLeclercSnapshotUpdate',\n    'clusterLeclercCustomSnapCreate',\n    'clusterLeclercZfsOptions',\n  ];\n\n  // object that contain tasks for each partition\n  // e.g. [\n  //   {\n  //     partitionName: \"partition123\",\n  //     tasks: [65564, 78329]\n  //   }, {\n  //     partitionName: \"partitionABC\",\n  //     tasks: [9998,9999]\n  //   },\n  // ]\n  self.data = {\n    partitionsTasks: {},\n    nasha: null,\n    table: {\n      partitionIds: [],\n      partitionsInCreation: [],\n      currentPartitions: [],\n      refresh: false,\n    },\n  };\n\n  self.loaders = {\n    table: false,\n  };\n\n  function getTasksPromise(status) {\n    return OvhApiDedicatedNasha.Task().v6()\n      .query({ serviceName: $stateParams.nashaId, status }).$promise;\n  }\n\n  function buildPartitionsInCreation(task, accumulator) {\n    if (task.operation === 'clusterLeclercPartitionAdd') {\n      const partition = _.find(\n        self.data.table.partitionIds,\n        partitionId => task.partitionName === partitionId,\n      );\n\n      if (!partition) {\n        self.data.table.partitionIds.unshift(task.partitionName);\n        self.data.table.partitions.unshift({ partitionName: task.partitionName });\n      }\n\n      accumulator.push({ partitionName: task.partitionName });\n    }\n  }\n\n  function buildPartitionsTasks(task, accumulator) {\n    if (_.includes(self.trackedTaskOperations, task.operation)) {\n      if (accumulator[task.partitionName] === undefined) {\n        accumulator[task.partitionName] = [task];\n      }\n    }\n  }\n\n  function launchPolling(taskId) {\n    return Poller.poll(`/dedicated/nasha/${self.data.nasha.serviceName}/task/${taskId}`,\n      null,\n      {\n\n        successRule(task) {\n          return task.status === 'done';\n        },\n        errorRule(task) {\n          return ['doing', 'todo', 'done'].indexOf(task.status) === -1;\n        },\n        namespace: 'nasha.partition',\n      });\n  }\n\n  function initPartitions(resetCache) {\n    self.data.table.partitionsInCreation = [];\n    if (resetCache) {\n      OvhApiDedicatedNasha.Aapi().resetAllCache();\n    }\n\n    return OvhApiDedicatedNasha.Aapi()\n      .partitions({ serviceName: $stateParams.nashaId }).$promise\n      .then((partitions) => {\n        self.data.table.partitions = _.map(partitions, partition => partition.partitionName);\n        self.data.table.partitionIds = self.data.table.partitions;\n\n        self.data.table.partitions = _.map(partitions, (partition) => {\n          _.forEach(partition.use, (part, key) => {\n            _.set(part, 'name', $translate.instant(`nasha_storage_usage_type_${key}`));\n          });\n          return partition;\n        });\n      });\n  }\n\n  function pollPartitionTask(task) {\n    launchPolling(task.taskId)\n      .finally(() => {\n        initPartitions(true).then(() => {\n          const taskIndex = _.findIndex(\n            self.data.partitionsTasks[task.partitionName],\n            partitionTask => task.taskId === partitionTask.taskId,\n          );\n\n          if (taskIndex > -1) {\n            self.data.partitionsTasks[task.partitionName].splice(taskIndex, 1);\n          }\n        }).catch((err) => {\n          CloudMessage.error($translate.instant('nasha_partitions_no_data_error'));\n          return $q.reject(err);\n        });\n      });\n  }\n\n  function initTasks() {\n    OvhApiDedicatedNasha.Task().v6().resetCache();\n\n    const tasksPromises = _.map(self.trackedTaskStatus, status => getTasksPromise(status));\n\n    return $q.allSettled(tasksPromises).then(data => _.flatten(data)).then((taskIds) => {\n      const taskPromises = _.map(taskIds, taskId => OvhApiDedicatedNasha.Task().v6()\n        .get({ serviceName: $stateParams.nashaId, taskId }).$promise);\n\n      return $q.allSettled(taskPromises);\n    }).then((taskObjects) => {\n      // We don't wipe self.data.partitionsTasks right away because we don't want the spinners\n      // to disapear while we reload.\n      const partitionsTasksAccumulator = {};\n      self.data.table.partitionsInCreation = [];\n\n      _.forEach(taskObjects, (taskObject) => {\n        buildPartitionsInCreation(taskObject, self.data.table.partitionsInCreation);\n        buildPartitionsTasks(taskObject, partitionsTasksAccumulator);\n        pollPartitionTask(taskObject);\n      });\n\n      self.data.partitionsTasks = partitionsTasksAccumulator;\n      return $q.when(taskObjects);\n    });\n  }\n\n  self.openModal = function (template, controller, params) {\n    const modal = $uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: template,\n      controller,\n      controllerAs: controller,\n      resolve: {\n        items() {\n          return params;\n        },\n      },\n    });\n\n    modal.result.then(() => {\n      initTasks();\n    });\n  };\n\n  function initNasha() {\n    return OvhApiDedicatedNasha.Aapi()\n      .get({ serviceName: $stateParams.nashaId }).$promise\n      .then((nasha) => {\n        self.data.nasha = nasha;\n      });\n  }\n\n  self.load = function (resetCache) {\n    self.loaders.table = true;\n    $q.all([\n      initNasha(),\n      initPartitions(),\n    ]).then(() => initTasks()).then(() => {\n      if (resetCache) {\n        self.data.table.refresh = !self.data.table.refresh;\n      }\n    }).catch((err) => {\n      CloudMessage.error($translate.instant('nasha_partitions_no_data_error'));\n      return $q.reject(err);\n    })\n      .finally(() => {\n        self.loaders.table = false;\n      });\n  };\n\n  self.hasTaskInProgress = function (partition) {\n    return _.any(self.data.partitionsTasks[partition.partitionName]);\n  };\n\n  self.updatePartition = function (partition) {\n    return self.getPartition(partition.partitionName)\n      .then((updatedPartition) => {\n        _.set(partition, 'size', updatedPartition.size);\n      }).catch((data) => {\n        // partition is not found, probably deleted\n        if (data.status === 404) {\n          _.remove(self.data.table.partitionIds, item => item === partition.partitionName);\n        } else {\n          return $q.reject(data);\n        }\n        return null;\n      });\n  };\n\n  self.goToNashaPartitionAccess = function (partitionName) {\n    $state.go('paas.nasha.nasha-partition-access', {\n      partitionName,\n    });\n  };\n\n  $scope.$on('$destroy', () => {\n    Poller.kill({ namespace: 'nasha.partition' });\n  });\n\n  self.load();\n});\n"]}