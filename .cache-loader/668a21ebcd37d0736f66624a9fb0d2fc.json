{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/cloud-project-compute-loadbalancer.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/cloud-project-compute-loadbalancer.service.js","mtime":1539717142027},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeLoadbalancerService =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeLoadbalancerService.$inject = [\"$q\", \"OvhApiCloudProjectIplb\", \"OvhApiIpLoadBalancing\", \"OvhApiCloudProject\"];\n\n  function CloudProjectComputeLoadbalancerService($q, OvhApiCloudProjectIplb, OvhApiIpLoadBalancing, OvhApiCloudProject) {\n    _classCallCheck(this, CloudProjectComputeLoadbalancerService);\n\n    this.$q = $q;\n    this.OvhApiCloudProjectIplb = OvhApiCloudProjectIplb;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n  }\n\n  _createClass(CloudProjectComputeLoadbalancerService, [{\n    key: \"getLoadbalancer\",\n    value: function getLoadbalancer(id) {\n      var _this = this;\n\n      return this.OvhApiIpLoadBalancing.v6().get({\n        serviceName: id\n      }).$promise.then(function (loadbalancer) {\n        if (loadbalancer.state !== 'ok') {\n          return loadbalancer;\n        } // Find the frontend http 80 if exists as this page only display a view for HTTP.\n\n\n        return _this.OvhApiIpLoadBalancing.Frontend().Http().v6().query({\n          serviceName: id,\n          port: 80\n        }).$promise.then(function (frontendIds) {\n          return frontendIds.length && _this.OvhApiIpLoadBalancing.Frontend().Http().v6().get({\n            serviceName: id,\n            frontendId: frontendIds[0]\n          }).$promise || loadbalancer;\n        }).then(function (frontend) {\n          if (frontend.frontendId) {\n            _.set(loadbalancer, 'frontend', frontend);\n          }\n\n          return frontend.frontendId && frontend.defaultFarmId && _this.OvhApiIpLoadBalancing.Farm().Http().v6().get({\n            serviceName: id,\n            farmId: frontend.defaultFarmId\n          }).$promise || loadbalancer;\n        }).then(function (farm) {\n          if (farm.farmId) {\n            _.set(loadbalancer, 'farm', farm);\n          }\n\n          return loadbalancer;\n        }).catch(function () {\n          _.set(loadbalancer, 'state', 'broken');\n\n          return loadbalancer;\n        });\n      }).then(function (loadbalancer) {\n        if (loadbalancer.state !== 'ok') {\n          _.set(loadbalancer, 'status', 'unavailable');\n        } else if (loadbalancer.frontend && loadbalancer.farm) {\n          _.set(loadbalancer, 'status', 'deployed');\n        } else if (!loadbalancer.frontend && !loadbalancer.farm) {\n          _.set(loadbalancer, 'status', 'available');\n        } else if (loadbalancer.state !== 'ok') {\n          _.set(loadbalancer, 'status', 'unavailable');\n        } else {\n          _.set(loadbalancer, 'status', 'custom');\n        }\n\n        return loadbalancer;\n      });\n    }\n  }, {\n    key: \"getLoadbalancersImported\",\n    value: function getLoadbalancersImported(serviceName) {\n      var _this2 = this;\n\n      return this.OvhApiCloudProjectIplb.v6().query({\n        serviceName: serviceName\n      }).$promise.then(function (ids) {\n        return _this2.$q.all(_.map(ids, function (id) {\n          return _this2.OvhApiCloudProjectIplb.v6().get({\n            serviceName: serviceName,\n            id: id\n          }).$promise;\n        }));\n      }).then(function (loadbalancers) {\n        var result = {};\n\n        _.forEach(loadbalancers, function (lb) {\n          result[lb.iplb] = lb;\n        });\n\n        return result;\n      });\n    } // Get servers of the default farm of the frontend\n    // loadbalancer must be generated from function this.getLoadbalancer(id)\n\n  }, {\n    key: \"getAttachedServers\",\n    value: function getAttachedServers(loadbalancer) {\n      var _this3 = this;\n\n      if (!loadbalancer.farm) {\n        return Promise.resolve([]);\n      }\n\n      return this.OvhApiIpLoadBalancing.Farm().Http().Server().v6().query({\n        serviceName: loadbalancer.serviceName,\n        farmId: loadbalancer.farm.farmId\n      }).$promise.then(function (serverIds) {\n        return _this3.$q.all(_.map(serverIds, function (serverId) {\n          return _this3.OvhApiIpLoadBalancing.Farm().Http().Server().v6().get({\n            serviceName: loadbalancer.serviceName,\n            farmId: loadbalancer.farm.farmId,\n            serverId: serverId\n          }).$promise;\n        }));\n      });\n    }\n  }, {\n    key: \"getServerList\",\n    value: function getServerList(_ref) {\n      var _this4 = this;\n\n      var serviceName = _ref.serviceName,\n          loadbalancer = _ref.loadbalancer;\n      return this.$q.all({\n        cloudServers: this.OvhApiCloudProject.Instance().v6().query({\n          serviceName: serviceName\n        }).$promise,\n        attachedServers: this.getAttachedServers(loadbalancer)\n      }).then(function (_ref2) {\n        var cloudServers = _ref2.cloudServers,\n            attachedServers = _ref2.attachedServers;\n        var activeServers = {};\n\n        _.forEach(attachedServers, function (attachedServer) {\n          if (attachedServer.status === 'active') {\n            activeServers[attachedServer.address] = attachedServer;\n          }\n        }); // Generate array of object type as {ipv4, name}\n        // Concat all public ip of public cloud and of the loadbalancer.\n\n\n        var servers = _.uniq(_.union(_.flatten(_.map(cloudServers, function (server) {\n          return _.map(_.filter(server.ipAddresses, {\n            type: 'public',\n            version: 4\n          }), function (adresse) {\n            return {\n              label: server.name,\n              ip: adresse.ip\n            };\n          });\n        })), _.map(_this4.attachedServers, function (server) {\n          return {\n            label: server.displayName,\n            ip: server.address\n          };\n        })), 'ip');\n\n        return {\n          servers: servers,\n          attachedServers: activeServers\n        };\n      }).catch(function (err) {\n        _this4.CloudMessage.error([_this4.$translate.instant('cpc_server_error'), err.data && err.data.message || ''].join(' '));\n      });\n    }\n  }]);\n\n  return CloudProjectComputeLoadbalancerService;\n}();\n\nangular.module('managerApp').service('CloudProjectComputeLoadbalancerService', CloudProjectComputeLoadbalancerService);",null]}