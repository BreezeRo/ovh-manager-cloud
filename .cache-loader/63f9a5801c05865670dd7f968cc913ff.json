{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home.service.js","mtime":1539717142202},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerHomeService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerHomeService.$inject = [\"$q\", \"SidebarMenu\", \"IpLoadBalancerCipherService\", \"OvhApiIpLoadBalancing\", \"RegionService\", \"ServiceHelper\"];\n\n  function IpLoadBalancerHomeService($q, SidebarMenu, IpLoadBalancerCipherService, OvhApiIpLoadBalancing, RegionService, ServiceHelper) {\n    _classCallCheck(this, IpLoadBalancerHomeService);\n\n    this.$q = $q;\n    this.SidebarMenu = SidebarMenu;\n    this.IpLoadBalancerCipherService = IpLoadBalancerCipherService;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  _createClass(IpLoadBalancerHomeService, [{\n    key: \"getInformations\",\n    value: function getInformations(serviceName) {\n      return this.$q.all({\n        configuration: this.OvhApiIpLoadBalancing.v6().get({\n          serviceName: serviceName\n        }).$promise,\n        failoverIp: this.OvhApiIpLoadBalancing.v6().failoverIp({\n          serviceName: serviceName\n        }).$promise,\n        natIp: this.OvhApiIpLoadBalancing.v6().natIp({\n          serviceName: serviceName\n        }).$promise\n      }).then(function (response) {\n        return {\n          ipV4: response.configuration.ipLoadbalancing,\n          ipV6: response.configuration.ipv6,\n          failoverIp: response.failoverIp,\n          natIp: response.natIp\n        };\n      }).catch(this.ServiceHelper.errorHandler('iplb_information_loading_error'));\n    }\n  }, {\n    key: \"getConfiguration\",\n    value: function getConfiguration(serviceName) {\n      var _this = this;\n\n      return this.OvhApiIpLoadBalancing.v6().get({\n        serviceName: serviceName\n      }).$promise.then(function (response) {\n        response.displayName = response.displayName || response.serviceName;\n        response.sslConfiguration = _this.IpLoadBalancerCipherService.transformCipher(response.sslConfiguration);\n        return response;\n      }).catch(this.ServiceHelper.errorHandler('iplb_configuration_loading_error'));\n    }\n  }, {\n    key: \"getUsage\",\n    value: function getUsage(serviceName) {\n      var _this2 = this;\n\n      return this.OvhApiIpLoadBalancing.Quota().v6().query({\n        serviceName: serviceName\n      }).$promise.then(function (zones) {\n        return _this2.$q.all(zones.map(function (zone) {\n          return _this2.getUsageForZone(serviceName, zone);\n        }));\n      }).then(function (quotas) {\n        return quotas.map(function (quota) {\n          _.set(quota, 'region', _this2.RegionService.getRegion(quota.zone));\n\n          return quota;\n        });\n      }).catch(this.ServiceHelper.errorHandler('iplb_usage_loading_error'));\n    }\n  }, {\n    key: \"getUsageForZone\",\n    value: function getUsageForZone(serviceName, zoneName) {\n      return this.OvhApiIpLoadBalancing.Quota().v6().get({\n        serviceName: serviceName,\n        zoneName: zoneName\n      }).$promise;\n    }\n  }, {\n    key: \"updateQuota\",\n    value: function updateQuota(serviceName, zoneName, alert) {\n      return this.OvhApiIpLoadBalancing.Quota().v6().put({\n        serviceName: serviceName,\n        zoneName: zoneName\n      }, {\n        alert: alert\n      }).$promise.catch(this.ServiceHelper.errorHandler('iplb_utilisation_update_alert_error'));\n    }\n  }, {\n    key: \"updateName\",\n    value: function updateName(serviceName, newName) {\n      var _this3 = this;\n\n      return this.OvhApiIpLoadBalancing.v6().put({\n        serviceName: serviceName\n      }, {\n        displayName: newName\n      }).$promise.then(function (response) {\n        _this3.getConfiguration(serviceName).then(function (configuration) {\n          return _this3.changeMenuTitle(serviceName, configuration.displayName || serviceName);\n        });\n\n        return response;\n      }).catch(this.ServiceHelper.errorHandler('iplb_modal_name_change_updating_error'));\n    }\n  }, {\n    key: \"changeMenuTitle\",\n    value: function changeMenuTitle(serviceName, displayName) {\n      var menuItem = this.SidebarMenu.getItemById(serviceName);\n\n      if (menuItem) {\n        menuItem.title = displayName;\n      }\n    }\n  }, {\n    key: \"getSubscription\",\n    value: function getSubscription(serviceName) {\n      return this.$q.all({\n        configuration: this.OvhApiIpLoadBalancing.v6().get({\n          serviceName: serviceName\n        }).$promise,\n        serviceInfos: this.OvhApiIpLoadBalancing.v6().serviceInfos({\n          serviceName: serviceName\n        }).$promise\n      }).then(function (response) {\n        return _.extend(response.serviceInfos, {\n          offer: response.configuration.offer\n        });\n      }).catch(this.ServiceHelper.errorHandler('iplb_subscription_loading_error'));\n    }\n  }]);\n\n  return IpLoadBalancerHomeService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerHomeService', IpLoadBalancerHomeService);",null]}