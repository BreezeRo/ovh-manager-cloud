{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/cloud-project-compute-loadbalancer.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/cloud-project-compute-loadbalancer.controller.js","mtime":1539717142025},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeLoadbalancerCtrl =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeLoadbalancerCtrl.$inject = [\"$q\", \"$translate\", \"$state\", \"$stateParams\", \"CloudProjectComputeLoadbalancerService\", \"OvhApiCloudProjectIplb\", \"OvhApiIpLoadBalancing\", \"CloudMessage\", \"OvhApiMe\", \"URLS\"];\n\n  function CloudProjectComputeLoadbalancerCtrl($q, $translate, $state, $stateParams, CloudProjectComputeLoadbalancerService, OvhApiCloudProjectIplb, OvhApiIpLoadBalancing, CloudMessage, OvhApiMe, URLS) {\n    var _this = this;\n\n    _classCallCheck(this, CloudProjectComputeLoadbalancerCtrl);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.$state = $state;\n    this.CloudProjectComputeLoadbalancerService = CloudProjectComputeLoadbalancerService;\n    this.OvhApiCloudProjectIplb = OvhApiCloudProjectIplb;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.CloudMessage = CloudMessage;\n    this.OvhApiMe = OvhApiMe;\n    this.serviceName = $stateParams.projectId; // Datas\n\n    this.table = {\n      loadbalancer: []\n    }; // Order link\n\n    this.urls = URLS;\n    this.locale = ''; // Init locale for order link\n\n    OvhApiMe.v6().get().$promise.then(function (user) {\n      _this.locale = user.ovhSubsidiary.toUpperCase();\n    }); // Loader during Datas requests\n\n    this.loaders = {\n      table: {\n        loadbalancer: false\n      }\n    };\n  }\n\n  _createClass(CloudProjectComputeLoadbalancerCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.getLoadbalancers(true);\n    }\n  }, {\n    key: \"goToLoadbalancerConfigure\",\n    value: function goToLoadbalancerConfigure(serviceName) {\n      this.$state.go('iaas.pci-project.compute.loadbalancerConfigure', {\n        loadbalancerId: serviceName\n      });\n    }\n  }, {\n    key: \"goToIPLB\",\n    value: function goToIPLB(serviceName) {\n      this.$state.go('network.iplb.detail.home', {\n        serviceName: serviceName\n      });\n    }\n  }, {\n    key: \"getLoadbalancers\",\n    value: function getLoadbalancers(clearCache) {\n      var _this2 = this;\n\n      if (!this.loaders.table.loadbalancer) {\n        this.loaders.table.loadbalancer = true;\n\n        if (clearCache) {\n          this.OvhApiCloudProjectIplb.v6().resetQueryCache();\n          this.OvhApiIpLoadBalancing.v6().resetQueryCache();\n        }\n\n        this.$q.all({\n          loadbalancers: this.OvhApiIpLoadBalancing.v6().query().$promise.then(function (response) {\n            return _this2.$q.all(_.map(response, function (id) {\n              return _this2.CloudProjectComputeLoadbalancerService.getLoadbalancer(id);\n            }));\n          }),\n          loadbalancersImportedArray: this.OvhApiCloudProjectIplb.v6().query({\n            serviceName: this.serviceName\n          }).$promise.then(function (ids) {\n            return _this2.$q.all(_.map(ids, function (id) {\n              return _this2.OvhApiCloudProjectIplb.v6().get({\n                serviceName: _this2.serviceName,\n                id: id\n              }).$promise;\n            }));\n          })\n        }).then(function (_ref) {\n          var loadbalancers = _ref.loadbalancers,\n              loadbalancersImportedArray = _ref.loadbalancersImportedArray;\n          // Create a map of imported loadbalancers\n          var loadBalancerImported = {};\n\n          _.forEach(loadbalancersImportedArray, function (lb) {\n            loadBalancerImported[lb.iplb] = lb;\n          }); // Set openstack importation status\n\n\n          _this2.table.loadbalancer = _.map(loadbalancers, function (lb) {\n            if (loadBalancerImported[lb.serviceName]) {\n              _.set(lb, 'openstack', loadBalancerImported[lb.serviceName].status);\n            } else {\n              _.set(lb, 'openstack', 'not_imported');\n            }\n\n            return lb;\n          });\n        }).catch(function (err) {\n          _this2.table.loadbalancer = null;\n\n          _this2.CloudMessage.error([_this2.$translate.instant('cpc_loadbalancer_error'), err.data && err.data.message || ''].join(' '));\n        }).finally(function () {\n          _this2.loaders.table.loadbalancer = false;\n        });\n      }\n    }\n  }]);\n\n  return CloudProjectComputeLoadbalancerCtrl;\n}();\n\nangular.module('managerApp').controller('CloudProjectComputeLoadbalancerCtrl', CloudProjectComputeLoadbalancerCtrl);",null]}