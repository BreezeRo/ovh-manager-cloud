{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/nodes/kubernetes-nodes.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/nodes/kubernetes-nodes.controller.js","mtime":1539717374577},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nangular.module('managerApp').controller('KubernetesNodesCtrl',\n/*#__PURE__*/\nfunction () {\n  KubernetesNodesCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"$timeout\", \"$translate\", \"$uibModal\", \"CloudMessage\", \"Kubernetes\", \"KUBERNETES\"];\n\n  function KubernetesNodesCtrl($q, $state, $stateParams, $timeout, $translate, $uibModal, CloudMessage, Kubernetes, KUBERNETES) {\n    _classCallCheck(this, KubernetesNodesCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = $translate;\n    this.$uibModal = $uibModal;\n    this.CloudMessage = CloudMessage;\n    this.Kubernetes = Kubernetes;\n    this.KUBERNETES = KUBERNETES;\n  }\n\n  _createClass(KubernetesNodesCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.loading = false;\n      this.getPublicCloudProject().then(function () {\n        return _this.getNodes();\n      }).then(function () {\n        return _this.loadMessages();\n      });\n    }\n  }, {\n    key: \"loadMessages\",\n    value: function loadMessages() {\n      var _this2 = this;\n\n      this.CloudMessage.unSubscribe('paas.kube.nodes');\n      this.messageHandler = this.CloudMessage.subscribe('paas.kube.nodes', {\n        onMessage: function onMessage() {\n          return _this2.refreshMessages();\n        }\n      });\n    }\n  }, {\n    key: \"refreshMessages\",\n    value: function refreshMessages() {\n      this.messages = this.messageHandler.getMessages();\n    }\n  }, {\n    key: \"getNodes\",\n    value: function getNodes() {\n      var _this3 = this;\n\n      this.loading = true;\n      return this.Kubernetes.getNodes(this.serviceName).then(function (nodes) {\n        _this3.nodes = nodes;\n      }).catch(function () {\n        return _this3.CloudMessage.error(_this3.$translate.instant('kube_nodes_error'));\n      }).finally(function () {\n        _this3.loading = false;\n      });\n    }\n  }, {\n    key: \"getAssociatedFlavor\",\n    value: function getAssociatedFlavor(node) {\n      var _this4 = this;\n\n      if (node.instanceId) {\n        return this.Kubernetes.getAssociatedInstance(node.projectId, node.instanceId).then(function (instance) {\n          return _.set(node, 'formattedFlavor', _this4.Kubernetes.formatFlavor(instance.flavor));\n        }).catch(function () {\n          _.set(node, 'formattedFlavor', _this4.$translate.instant('kube_nodes_flavor_error'));\n        });\n      }\n\n      return this.$q.when(_.set(node, 'formattedFlavor', node.flavor));\n    }\n  }, {\n    key: \"getPublicCloudProject\",\n    value: function getPublicCloudProject() {\n      var _this5 = this;\n\n      return this.Kubernetes.getAssociatedPublicCloudProjects(this.serviceName).then(function (projects) {\n        return _this5.Kubernetes.getProject(_.first(projects).projectId);\n      }).then(function (project) {\n        _this5.project = project;\n      }).catch(function () {\n        _this5.CloudMessage.error(_this5.$translate.instant('kube_nodes_project_error'));\n      });\n    }\n  }, {\n    key: \"confirmNodeDeletion\",\n    value: function confirmNodeDeletion(_nodeId) {\n      var _this6 = this;\n\n      return this.$uibModal.open({\n        templateUrl: 'app/kubernetes/nodes/delete/kubernetes-nodes-delete.html',\n        controller: 'KubernetesNodesDeleteCtrl',\n        controllerAs: '$ctrl',\n        backdrop: 'static',\n        resolve: {\n          nodeId: function nodeId() {\n            return _nodeId;\n          }\n        }\n      }).result.then(function () {\n        _this6.displaySuccessMessage('kube_nodes_delete_success');\n\n        return _this6.refreshNodes();\n      }).catch(function (error) {\n        if (error) {\n          _this6.CloudMessage.error(_this6.$translate.instant('kube_nodes_delete_error', {\n            message: error\n          }));\n        }\n      });\n    }\n  }, {\n    key: \"openAddNodeForm\",\n    value: function openAddNodeForm(_projectId) {\n      var _this7 = this;\n\n      return this.$uibModal.open({\n        templateUrl: 'app/kubernetes/nodes/add/kubernetes-nodes-add.html',\n        controller: 'KubernetesNodesAddCtrl',\n        controllerAs: '$ctrl',\n        backdrop: 'static',\n        resolve: {\n          projectId: function projectId() {\n            return _projectId;\n          }\n        }\n      }).result.then(function () {\n        _this7.displaySuccessMessage('kube_nodes_add_success');\n\n        return _this7.refreshNodes();\n      }).catch(function (error) {\n        if (error) {\n          _this7.CloudMessage.error(error);\n        }\n      });\n    }\n  }, {\n    key: \"displaySuccessMessage\",\n    value: function displaySuccessMessage(message) {\n      var _this8 = this;\n\n      this.CloudMessage.success(this.$translate.instant(message));\n      this.$timeout(function () {\n        return _this8.CloudMessage.flushMessages();\n      }, 3000);\n    }\n  }, {\n    key: \"refreshNodes\",\n    value: function refreshNodes() {\n      this.Kubernetes.resetNodesCache();\n      return this.getNodes();\n    }\n  }]);\n\n  return KubernetesNodesCtrl;\n}());",null]}