{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/consumption/estimate/cloud-project-billing-consumption-estimate.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/consumption/estimate/cloud-project-billing-consumption-estimate.controller.js","mtime":1539717141956},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectBillingConsumptionEstimateCtrl', [\"$q\", \"$uibModal\", \"$stateParams\", \"$translate\", \"OvhApiCloudProjectAlerting\", \"CloudMessage\", \"OvhApiCloudProjectUsageForecast\", \"OvhApiCloudProjectUsageCurrent\", \"CloudProjectBillingService\", function CloudProjectBillingConsumptionEstimateCtrl($q, $uibModal, $stateParams, $translate, OvhApiCloudProjectAlerting, CloudMessage, OvhApiCloudProjectUsageForecast, OvhApiCloudProjectUsageCurrent, CloudProjectBillingService) {\n  var self = this;\n  self.loading = false;\n  self.data = {\n    currencySymbol: null,\n    alert: null,\n    estimateTotals: null,\n    currentTotals: null\n  };\n  self.loaders = {\n    alert: false,\n    forecast: false,\n    current: false,\n    deleteAlert: false\n  };\n\n  self.getCurrentMonth = function () {\n    return moment();\n  };\n\n  self.getNextMonth = function () {\n    return moment().add(1, 'month');\n  };\n\n  function initForecast() {\n    self.loaders.forecast = true;\n    return OvhApiCloudProjectUsageForecast.v6().get({\n      serviceName: $stateParams.projectId\n    }).$promise.then(function (billingInfo) {\n      return CloudProjectBillingService.getConsumptionDetails(billingInfo, billingInfo).then(function (data) {\n        self.data.estimateTotals = data.totals;\n        self.data.currencySymbol = self.data.estimateTotals.currencySymbol;\n      }).finally(function () {\n        self.loaders.forecast = false;\n      });\n    });\n  }\n\n  function initCurrent() {\n    self.loaders.current = true;\n    return OvhApiCloudProjectUsageCurrent.v6().get({\n      serviceName: $stateParams.projectId\n    }).$promise.then(function (billingInfo) {\n      return CloudProjectBillingService.getConsumptionDetails(billingInfo, billingInfo);\n    }).then(function (data) {\n      self.data.currentTotals = data.totals;\n    }).finally(function () {\n      self.loaders.current = false;\n    });\n  }\n\n  function getAlertIds() {\n    OvhApiCloudProjectAlerting.v6().resetCache();\n    return OvhApiCloudProjectAlerting.v6().getIds({\n      serviceName: $stateParams.projectId\n    }).$promise;\n  }\n\n  function getAlert(id) {\n    return OvhApiCloudProjectAlerting.v6().get({\n      serviceName: $stateParams.projectId,\n      alertId: id\n    }).$promise.catch(function () {\n      // We dont rethrow or show a message to hide an API glitch.\n      self.data.alert = null;\n      return null;\n    });\n  }\n\n  function initConsumptionChart() {\n    var labelNow = $translate.instant('cpbe_estimate_alert_chart_label_now');\n    var labelFuture = $translate.instant('cpbe_estimate_alert_chart_label_future');\n    var labelLimit = $translate.instant('cpbe_estimate_alert_chart_label_limit');\n    self.consumptionChartData = {\n      estimate: {\n        now: {\n          value: self.data.currentTotals.hourly.total,\n          currencyCode: self.data.estimateTotals.currencySymbol,\n          label: labelNow\n        },\n        endOfMonth: {\n          value: self.data.estimateTotals.hourly.total,\n          currencyCode: self.data.estimateTotals.currencySymbol,\n          label: labelFuture\n        }\n      },\n      threshold: {\n        now: {\n          value: self.data.alert.monthlyThreshold,\n          currencyCode: self.data.estimateTotals.currencySymbol,\n          label: labelLimit\n        },\n        endOfMonth: {\n          value: self.data.alert.monthlyThreshold,\n          currencyCode: self.data.estimateTotals.currencySymbol,\n          label: labelLimit\n        }\n      }\n    };\n  }\n\n  function initAlert() {\n    self.loaders.alert = true; // list alerts ids\n\n    return getAlertIds().then(function (alertIds) {\n      if (_.isEmpty(alertIds)) {\n        return null;\n      }\n\n      return getAlert(_.first(alertIds));\n    }).then(function (alertObject) {\n      self.data.alert = alertObject;\n\n      if (!_.isNull(alertObject)) {\n        initConsumptionChart();\n      }\n    }).finally(function () {\n      self.loaders.alert = false;\n    });\n  }\n\n  function init() {\n    initForecast().then(function () {\n      return initCurrent();\n    }).then(function () {\n      return initAlert();\n    }).catch(function (err) {\n      CloudMessage.error([$translate.instant('cpbe_estimate_price_error_message'), err.data && err.data.message || ''].join(' '));\n    });\n  }\n\n  self.openAlertAddModal = function () {\n    var modal = $uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/billing/consumption/estimate/alert/add/cloud-project-billing-consumption-estimate-alert-add.html',\n      controller: 'CloudProjectBillingConsumptionEstimateAlertAddCtrl',\n      controllerAs: 'CloudProjectBillingConsumptionEstimateAlertAddCtrl',\n      resolve: {\n        dataContext: function dataContext() {\n          return self.data;\n        }\n      }\n    });\n    modal.result.then(function () {\n      initAlert();\n    });\n  };\n\n  self.deleteAlert = function () {\n    self.loaders.deleteAlert = true; // we query alerts to check if an alert already exists, in this case we delete it\n\n    OvhApiCloudProjectAlerting.v6().getIds({\n      serviceName: $stateParams.projectId\n    }).$promise.then(function (alertIds) {\n      if (!_.isEmpty(alertIds)) {\n        return OvhApiCloudProjectAlerting.v6().delete({\n          serviceName: $stateParams.projectId,\n          alertId: _.first(alertIds)\n        }).$promise.then(function () {\n          CloudMessage.success($translate.instant('cpbe_estimate_alert_delete_success'));\n        });\n      }\n\n      return $q.reject({\n        data: {\n          message: 'Alert not found'\n        }\n      });\n    }).catch(function (err) {\n      CloudMessage.error([$translate.instant('cpbe_estimate_alert_delete_error'), err.data && err.data.message || ''].join(' '));\n      return $q.reject(err);\n    }).finally(function () {\n      self.loaders.deleteAlert = false;\n    });\n    initAlert();\n  };\n\n  init();\n}]);",null]}