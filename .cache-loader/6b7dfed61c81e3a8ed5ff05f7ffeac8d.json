{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/rights/cloud-project-billing-rights.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/rights/cloud-project-billing-rights.controller.js","mtime":1539717141961},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectBillingRightsCtrl', [\"OvhApiCloud\", \"OvhApiCloudProjectServiceInfos\", \"OvhApiMe\", \"$stateParams\", \"CloudMessage\", \"ControllerHelper\", \"$translate\", \"REDIRECT_URLS\", \"$window\", function (OvhApiCloud, OvhApiCloudProjectServiceInfos, OvhApiMe, $stateParams, CloudMessage, ControllerHelper, $translate, REDIRECT_URLS, $window) {\n  var self = this;\n  var serviceName = $stateParams.projectId;\n  self.model = {\n    owner: '',\n    billing: '',\n    isAdmin: false,\n    // do we have admin rights?\n    isUSorCA: false // true if user country is USA or Canada\n\n  }; // admin & billing contact form\n\n  self.contactFormData = {\n    owner: '',\n    billing: ''\n  }; // add user right form\n\n  self.addRightFormData = {\n    contact: '',\n    // either Nic or Email depending on user country\n    type: 'readOnly'\n  }; // reference to the right the user want to delete\n\n  self.removeRight = {\n    accountId: null\n  }; // toggle display of form inputs\n\n  self.toggle = {\n    owner: false,\n    billing: false,\n    addUser: false\n  }; // table data\n\n  self.data = {\n    rights: []\n  }; // spinners ...\n\n  self.loader = false;\n  /* ==================================================\n     * Initialization\n     */\n\n  function initContact() {\n    return OvhApiCloudProjectServiceInfos.v6().get({\n      serviceName: serviceName\n    }).$promise.then(function (infos) {\n      self.model.owner = infos.contactAdmin;\n      self.contactFormData.owner = infos.contactAdmin;\n      self.model.billing = infos.contactBilling;\n      self.contactFormData.billing = infos.contactBilling;\n      return OvhApiMe.v6().get().$promise.then(function (me) {\n        if (me.nichandle === infos.contactAdmin) {\n          self.model.isAdmin = true;\n        }\n\n        if (me.country) {\n          // check if the user country is USA or Canada, in this case we display\n          // email instead of NIC handle\n          self.model.isUSorCA = _.indexOf(['US', 'CA'], me.country.toUpperCase()) >= 0;\n        }\n      });\n    });\n  }\n\n  self.init = function () {\n    self.getRights();\n    initContact();\n  };\n  /* ==================================================\n     * Owner contact form\n     */\n\n\n  self.canChangeContacts = function () {\n    return REDIRECT_URLS.contacts;\n  };\n\n  self.openContacts = function () {\n    if (self.canChangeContacts()) {\n      var redirectUrl = REDIRECT_URLS.contacts;\n      redirectUrl = redirectUrl.replace('{serviceName}', serviceName);\n      $window.open(redirectUrl, '_blank');\n    }\n  }; // show or hide (toggle) the owner contact field\n\n\n  self.toggleEditOwner = function () {\n    self.toggle.owner = !self.toggle.owner;\n\n    if (self.toggle.owner) {\n      $('#ownerContactInput').focus();\n    }\n  }; // watch for escape/enter keys when editing owner contact field\n\n\n  self.watchOwnerInput = function (ev) {\n    if (ev && ev.keyCode === 27) {\n      // escape key\n      ev.stopPropagation();\n      ev.preventDefault();\n      self.toggle.owner = false;\n      self.contactFormData.owner = self.model.owner;\n    }\n  };\n  /* ==================================================\n     * Billing contact form\n     */\n  // show or hide (toggle) the billing contact field\n\n\n  self.toggleEditBilling = function () {\n    self.toggle.billing = !self.toggle.billing;\n\n    if (self.toggle.billing) {\n      $('#billingContactInput').focus();\n    }\n  }; // watch for escape/enter keys when editing billing contact field\n\n\n  self.watchBillingInput = function (ev) {\n    if (ev && ev.keyCode === 27) {\n      // escape key\n      ev.stopPropagation();\n      ev.preventDefault();\n      self.toggle.billing = false;\n      self.contactFormData.billing = self.model.billing;\n    }\n  };\n  /* ==================================================\n     * Rights table\n     */\n\n\n  self.showAddRight = function () {\n    ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/cloud/project/billing/rights/addRights/cloud-project-billing-rights-add.html',\n        controller: 'CloudProjectBillingRightsAddCtrl',\n        controllerAs: '$ctrl',\n        resolve: {\n          model: function model() {\n            return self.model;\n          }\n        }\n      }\n    }).then(function () {\n      self.getRights(true);\n      CloudMessage.success($translate.instant('cpb_rights_table_rights_add_success'));\n    }).catch(function (err) {\n      CloudMessage.error([$translate.instant('cpb_rights_add_error'), err.data && err.data.message || ''].join(' '));\n    }).finally(function () {\n      self.loader = false;\n    });\n  };\n\n  self.getRights = function (clearCache) {\n    self.loader = true;\n\n    if (clearCache) {\n      OvhApiCloud.Project().Acl().v6().resetQueryCache();\n    }\n\n    return OvhApiCloud.Project().Acl().v6().query({\n      serviceName: serviceName\n    }).$promise.then(function (rightIds) {\n      self.data.rights = rightIds.map(function (id) {\n        return {\n          accountId: id\n        };\n      });\n    }).catch(function (err) {\n      self.data.rights = [];\n      CloudMessage.error([$translate.instant('cpb_rights_error'), err.data && err.data.message || ''].join(' '));\n    }).finally(function () {\n      self.loader = false;\n    });\n  };\n\n  self.removeRight = function (account) {\n    self.loader = true;\n    self.removeRight.accountId = account.accountId;\n    return ControllerHelper.modal.showConfirmationModal({\n      titleText: $translate.instant('cpb_rights_delete_title'),\n      text: $translate.instant('cpb_rights_delete_question', {\n        nickname: account.accountId\n      })\n    }).then(function () {\n      return OvhApiCloud.Project().Acl().v6().remove({\n        serviceName: serviceName,\n        accountId: account.accountId\n      }).$promise;\n    }).then(function () {\n      self.getRights(true);\n      CloudMessage.success($translate.instant('cpb_rights_table_rights_remove_success'));\n    }).catch(function (err) {\n      CloudMessage.error([$translate.instant('cpb_rights_remove_error'), err.data && err.data.message || ''].join(' '));\n    }).finally(function () {\n      self.loader = false;\n      self.removeRight.accountId = null;\n    });\n  };\n\n  this.transformItem = function (account) {\n    return OvhApiCloud.Project().Acl().v6().get({\n      serviceName: serviceName,\n      accountId: account.accountId\n    }).$promise;\n  }; // Controller initialization\n\n\n  self.init();\n}]);",null]}