{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/navbar/navbar.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/navbar/navbar.service.js","mtime":1539717374674},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ManagerNavbarService =\n/*#__PURE__*/\nfunction () {\n  ManagerNavbarService.$inject = [\"$q\", \"$translate\", \"atInternet\", \"FeatureAvailabilityService\", \"LANGUAGES\", \"MANAGER_URLS\", \"NavbarNotificationService\", \"OtrsPopupService\", \"ProductsService\", \"REDIRECT_URLS\", \"SessionService\", \"ssoAuthentication\", \"TARGET\", \"TranslateService\", \"URLS\", \"asyncLoader\"];\n\n  function ManagerNavbarService($q, $translate, atInternet, FeatureAvailabilityService, LANGUAGES, MANAGER_URLS, NavbarNotificationService, OtrsPopupService, ProductsService, REDIRECT_URLS, SessionService, ssoAuthentication, TARGET, TranslateService, URLS, asyncLoader) {\n    _classCallCheck(this, ManagerNavbarService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.atInternet = atInternet;\n    this.featureAvailabilityService = FeatureAvailabilityService;\n    this.LANGUAGES = LANGUAGES;\n    this.MANAGER_URLS = MANAGER_URLS;\n    this.navbarNotificationService = NavbarNotificationService;\n    this.otrsPopupService = OtrsPopupService;\n    this.productsService = ProductsService;\n    this.REDIRECT_URLS = REDIRECT_URLS;\n    this.sections = {\n      iaas: ['PROJECT', 'VPS', 'SERVER', 'DEDICATED_CLOUD', 'HOUSING'],\n      paas: ['CEPH', 'KUBE', 'NAS', 'NASHA', 'CDN', 'VEEAM', 'VEEAM_ENTERPRISE'],\n      metrics: 'METRICS',\n      vracks: 'VRACK',\n      loadBalancer: 'LOAD_BALANCER',\n      cloudDesktop: 'CLOUD_DESKTOP'\n    };\n    this.sessionService = SessionService;\n    this.ssoAuthentication = ssoAuthentication;\n    this.TARGET = TARGET;\n    this.translateService = TranslateService;\n    this.URLS = URLS;\n    this.asyncLoader = asyncLoader;\n  }\n\n  _createClass(ManagerNavbarService, [{\n    key: \"getProducts\",\n    value: function getProducts(products) {\n      var getServices = function getServices(section, products) {\n        // eslint-disable-line\n        // If only one section (string), return a simple array\n        if (_.isString(section)) {\n          return _.map(_.get(_.find(products, {\n            name: section\n          }), 'services'));\n        } // Return object of all sections\n\n\n        var services = _.map(section, function (serviceType) {\n          return _.map(_.get(_.find(products, {\n            name: serviceType\n          }), 'services'));\n        });\n\n        return _.zipObject(section, services);\n      };\n\n      return {\n        iaas: getServices(this.sections.iaas, products),\n        paas: getServices(this.sections.paas, products),\n        metrics: getServices(this.sections.metrics, products),\n        vracks: getServices(this.sections.vracks, products),\n        loadBalancer: getServices(this.sections.loadBalancer, products),\n        cloudDesktop: getServices(this.sections.cloudDesktop, products)\n      };\n    }\n  }, {\n    key: \"getSectionTitle\",\n    value: function getSectionTitle(section) {\n      switch (section) {\n        case 'PROJECT':\n          return this.$translate.instant('cloud_sidebar_section_cloud_project');\n\n        case 'VPS':\n          return this.$translate.instant('cloud_sidebar_section_vps');\n\n        case 'SERVER':\n          return this.$translate.instant('cloud_sidebar_section_dedicated_server');\n\n        case 'DEDICATED_CLOUD':\n          return this.$translate.instant('cloud_sidebar_section_dedicated_cloud');\n\n        case 'HOUSING':\n          return this.$translate.instant('cloud_sidebar_section_housing');\n\n        case 'CEPH':\n          return this.$translate.instant('cloud_sidebar_section_paas_cda');\n\n        case 'NAS':\n          return this.$translate.instant('cloud_sidebar_section_nas');\n\n        case 'NASHA':\n          return this.$translate.instant('cloud_sidebar_section_nasha');\n\n        case 'CDN':\n          return this.$translate.instant('cloud_sidebar_section_cdn');\n\n        case 'VEEAM':\n          return this.$translate.instant('cloud_sidebar_section_paas_veeam');\n\n        case 'VEEAM_ENTERPRISE':\n          return this.$translate.instant('cloud_sidebar_section_paas_veeam_enterprise');\n\n        case 'KUBE':\n          return this.$translate.instant('cloud_sidebar_section_paas_kube');\n\n        default:\n          return '';\n      }\n    }\n  }, {\n    key: \"getIaasMenu\",\n    value: function getIaasMenu(products) {\n      var _this = this;\n\n      return _.map(this.sections.iaas, function (section) {\n        return {\n          name: \"iaas.\".concat(section),\n          title: _this.getSectionTitle(section),\n          subLinks: !products[section].length ? null : _.map(products[section], function (service) {\n            switch (section) {\n              case 'PROJECT':\n                return {\n                  name: service.serviceName,\n                  title: service.displayName,\n                  subLinks: [{\n                    title: _this.$translate.instant('cloud_sidebar_pci_infrastructure'),\n                    state: 'iaas.pci-project.compute',\n                    stateParams: {\n                      projectId: service.serviceName\n                    }\n                  }, {\n                    title: _this.$translate.instant('cloud_sidebar_pci_object_storage'),\n                    state: 'iaas.pci-project.compute.storage',\n                    stateParams: {\n                      projectId: service.serviceName\n                    }\n                  }, {\n                    title: _this.$translate.instant('cloud_sidebar_pci_manage'),\n                    state: 'iaas.pci-project.billing',\n                    stateParams: {\n                      projectId: service.serviceName\n                    }\n                  }, {\n                    title: _this.$translate.instant('cloud_sidebar_pci_openstack'),\n                    state: 'iaas.pci-project.compute.openstack',\n                    stateParams: {\n                      projectId: service.serviceName\n                    }\n                  }]\n                };\n\n              case 'VPS':\n                return {\n                  title: service.displayName,\n                  state: 'iaas.vps.detail.dashboard',\n                  stateParams: {\n                    serviceName: service.serviceName\n                  }\n                };\n\n              case 'SERVER':\n                return {\n                  title: service.displayName,\n                  url: _this.REDIRECT_URLS.dedicatedServersPage.replace('{server}', service.serviceName)\n                };\n\n              case 'DEDICATED_CLOUD':\n                return {\n                  title: service.displayName,\n                  url: _this.REDIRECT_URLS.dedicatedCloudPage.replace('{pcc}', service.serviceName)\n                };\n\n              case 'HOUSING':\n                return {\n                  title: service.displayName,\n                  url: _this.REDIRECT_URLS.housing.replace('{housing}', service.serviceName)\n                };\n\n              default:\n                return '';\n            }\n          })\n        };\n      });\n    }\n  }, {\n    key: \"getPaasMenu\",\n    value: function getPaasMenu(products) {\n      var _this2 = this;\n\n      return _.map(this.sections.paas, function (section) {\n        return {\n          name: \"paas.\".concat(section),\n          title: _this2.getSectionTitle(section),\n          subLinks: !products[section].length ? null : _.map(products[section], function (service) {\n            switch (section) {\n              case 'CEPH':\n                return {\n                  title: service.displayName,\n                  state: 'paas.cda.cda-details.cda-details-home',\n                  stateParams: {\n                    serviceName: service.serviceName\n                  }\n                };\n\n              case 'KUBE':\n                return {\n                  title: service.displayName,\n                  state: 'paas.kube.service',\n                  stateParams: {\n                    serviceName: service.serviceName\n                  }\n                };\n\n              case 'NAS':\n                return {\n                  title: service.displayName,\n                  url: _this2.REDIRECT_URLS.nasPage.replace('{nas}', service.serviceName)\n                };\n\n              case 'NASHA':\n                return {\n                  title: service.displayName,\n                  state: 'paas.nasha.nasha-partitions',\n                  stateParams: {\n                    nashaId: service.serviceName\n                  }\n                };\n\n              case 'CDN':\n                return {\n                  title: service.displayName,\n                  url: _this2.REDIRECT_URLS.cdnPage.replace('{cdn}', service.serviceName)\n                };\n\n              case 'VEEAM':\n                return {\n                  title: service.displayName,\n                  state: 'paas.veeam.detail.dashboard',\n                  stateParams: {\n                    serviceName: service.serviceName\n                  }\n                };\n\n              case 'VEEAM_ENTERPRISE':\n                return {\n                  title: service.displayName,\n                  state: 'paas.veeam-enterprise.dashboard',\n                  stateParams: {\n                    serviceName: service.serviceName\n                  }\n                };\n\n              default:\n                return '';\n            }\n          })\n        };\n      });\n    }\n  }, {\n    key: \"getUniverseMenu\",\n    value: function getUniverseMenu(products) {\n      var universeProducts = this.getProducts(products);\n      var universeMenu = [{\n        // Iaas\n        name: 'iaas',\n        title: this.$translate.instant('cloud_sidebar_section_iaas'),\n        subLinks: this.getIaasMenu(universeProducts.iaas)\n      }, {\n        // Paas\n        name: 'paas',\n        title: this.$translate.instant('cloud_sidebar_section_paas'),\n        subLinks: this.getPaasMenu(universeProducts.paas)\n      }, {\n        // Metrics\n        name: 'dbaas.metrics',\n        title: this.$translate.instant('cloud_sidebar_section_metrics'),\n        subLinks: this.constructor.getProductsMenu('dbaas.metrics.detail.dashboard', universeProducts.metrics)\n      }, {\n        // Licences (Link)\n        title: this.$translate.instant('cloud_sidebar_section_license'),\n        url: this.REDIRECT_URLS.license\n      }, {\n        // IP (Link)\n        title: this.$translate.instant('cloud_sidebar_section_ip'),\n        url: this.REDIRECT_URLS.ip\n      }, {\n        // Load Balancer\n        name: 'network.iplb',\n        title: this.$translate.instant('cloud_sidebar_section_load_balancer'),\n        subLinks: this.constructor.getProductsMenu('network.iplb.detail.home', universeProducts.loadBalancer)\n      }, {\n        // vRack\n        name: 'vrack',\n        title: this.$translate.instant('cloud_sidebar_section_vrack'),\n        subLinks: _.map(universeProducts.vracks, function (product) {\n          return {\n            title: product.displayName,\n            state: 'vrack',\n            stateParams: {\n              vrackId: product.serviceName\n            }\n          };\n        })\n      }]; // Cloud Desktop\n\n      if (this.featureAvailabilityService.hasFeature('CLOUD_DESKTOP', 'sidebarMenu', this.locale)) {\n        universeMenu.push({\n          name: 'deskaas',\n          title: this.$translate.instant('cloud_sidebar_section_cloud_desktop'),\n          subLinks: this.constructor.getCloudDesktopMenu('deskaas.details', universeProducts.cloudDesktop)\n        });\n      }\n\n      return universeMenu;\n    }\n  }, {\n    key: \"getAssistanceMenu\",\n    value: function getAssistanceMenu(locale) {\n      var _this3 = this;\n\n      var assistanceMenu = []; // Guides (External)\n\n      var cloudGuide = _.get(this.URLS.guides, \"cloud.\".concat(locale));\n\n      var homeGuide = _.get(this.URLS.guides, \"home.\".concat(locale));\n\n      var frenchHomeGuide = _.get(this.URLS.guides, 'home.FR');\n\n      if (cloudGuide) {\n        assistanceMenu.push({\n          title: this.$translate.instant('common_menu_support_guide'),\n          url: cloudGuide,\n          isExternal: true\n        });\n      } else if (homeGuide) {\n        assistanceMenu.push({\n          title: this.$translate.instant('common_menu_support_all_guides'),\n          url: homeGuide,\n          isExternal: true\n        });\n      } else if (frenchHomeGuide) {\n        assistanceMenu.push({\n          title: this.$translate.instant('common_menu_support_all_guides'),\n          url: frenchHomeGuide,\n          isExternal: true\n        });\n      } // New ticket\n\n\n      assistanceMenu.push({\n        title: this.$translate.instant('common_menu_support_new_ticket'),\n        click: function click(callback) {\n          if (!_this3.otrsPopupService.isLoaded()) {\n            _this3.otrsPopupService.init();\n          } else {\n            _this3.otrsPopupService.toggle();\n          }\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        }\n      }); // Tickets list\n\n      assistanceMenu.push({\n        title: this.$translate.instant('common_menu_support_list_ticket'),\n        url: _.get(this.REDIRECT_URLS, 'support', '')\n      }); // Telephony (External)\n\n      if (this.TARGET !== 'US') {\n        assistanceMenu.push({\n          title: this.$translate.instant('common_menu_support_telephony_contact'),\n          url: this.URLS.support_contact[locale] || this.URLS.support_contact.FR,\n          isExternal: true\n        });\n      }\n\n      return {\n        name: 'assistance',\n        title: this.$translate.instant('common_menu_support_assistance'),\n        iconClass: 'icon-assistance',\n        subLinks: assistanceMenu\n      };\n    }\n  }, {\n    key: \"getLanguageMenu\",\n    value: function getLanguageMenu() {\n      var _this4 = this;\n\n      var currentLanguage = _.find(this.LANGUAGES.available, {\n        key: this.translateService.getUserLocale()\n      });\n\n      return {\n        name: 'languages',\n        label: _(currentLanguage).get('name'),\n        class: 'oui-navbar-menu_language',\n        title: _(currentLanguage).get('key').split('_')[0].toUpperCase(),\n        headerTitle: this.$translate.instant('common_menu_language'),\n        subLinks: _.map(this.LANGUAGES.available, function (lang) {\n          return {\n            title: lang.name,\n            isActive: lang.key === currentLanguage.key,\n            click: function click() {\n              _this4.translateService.setUserLocale(lang.key);\n\n              window.location.reload();\n            },\n            lang: _.chain(lang.key).words().head().value()\n          };\n        })\n      };\n    }\n  }, {\n    key: \"getUserMenu\",\n    value: function getUserMenu(currentUser) {\n      var _this5 = this;\n\n      return {\n        name: 'user',\n        title: currentUser.firstname,\n        iconClass: 'icon-user',\n        nichandle: currentUser.nichandle,\n        fullName: \"\".concat(currentUser.firstname, \" \").concat(currentUser.name),\n        subLinks: [// My Account\n        {\n          name: 'user.account',\n          title: this.$translate.instant('common_menu_account'),\n          url: this.REDIRECT_URLS.userInfos,\n          subLinks: [{\n            title: this.$translate.instant('common_menu_account_infos'),\n            url: this.REDIRECT_URLS.userInfos\n          }, {\n            title: this.$translate.instant('common_menu_account_security'),\n            url: this.REDIRECT_URLS.userSecurity\n          }, (this.TARGET === 'EU' || this.TARGET === 'CA') && {\n            title: this.$translate.instant('common_menu_account_emails'),\n            url: this.REDIRECT_URLS.userEmails\n          }, this.TARGET === 'EU' && {\n            title: this.$translate.instant('common_menu_account_subscriptions'),\n            url: this.REDIRECT_URLS.userSubscriptions\n          }, {\n            title: this.$translate.instant('common_menu_account_ssh'),\n            url: this.REDIRECT_URLS.userSSH\n          }, {\n            title: this.$translate.instant('common_menu_account_advanced'),\n            url: this.REDIRECT_URLS.userAdvanced\n          }]\n        }, // Billing\n        !currentUser.isEnterprise && {\n          name: 'user.billing',\n          title: this.$translate.instant('common_menu_billing'),\n          url: this.REDIRECT_URLS.billing,\n          subLinks: [{\n            title: this.$translate.instant('common_menu_billing_history'),\n            url: this.REDIRECT_URLS.billing\n          }, {\n            title: this.$translate.instant('common_menu_billing_payments'),\n            url: this.REDIRECT_URLS.billingPayments\n          }]\n        }, // Services\n        (this.TARGET === 'EU' || this.TARGET === 'CA') && (!currentUser.isEnterprise ? {\n          name: 'user.services',\n          title: this.$translate.instant('common_menu_renew'),\n          url: this.REDIRECT_URLS.services,\n          subLinks: [{\n            title: this.$translate.instant('common_menu_renew_management'),\n            url: this.REDIRECT_URLS.services\n          }, {\n            title: this.$translate.instant('common_menu_renew_agreements'),\n            url: this.REDIRECT_URLS.servicesAgreements\n          }]\n        } : {\n          title: this.$translate.instant('common_menu_renew_agreements'),\n          url: this.REDIRECT_URLS.servicesAgreements\n        }), // Payment\n        !currentUser.isEnterprise && {\n          name: 'user.payment',\n          title: this.$translate.instant('common_menu_means'),\n          url: this.REDIRECT_URLS.paymentMeans,\n          subLinks: [{\n            title: this.$translate.instant('common_menu_means_mean'),\n            url: this.REDIRECT_URLS.paymentMeans\n          }, (this.TARGET === 'EU' || this.TARGET === 'CA') && {\n            title: this.$translate.instant('common_menu_means_ovhaccount'),\n            url: this.REDIRECT_URLS.ovhAccount\n          }, (this.TARGET === 'EU' || this.TARGET === 'CA') && {\n            title: this.$translate.instant('common_menu_means_vouchers'),\n            url: this.REDIRECT_URLS.billingVouchers\n          }, {\n            title: this.$translate.instant('common_menu_means_refunds'),\n            url: this.REDIRECT_URLS.billingRefunds\n          }, this.TARGET === 'EU' && {\n            title: this.$translate.instant('common_menu_means_fidelity'),\n            url: this.REDIRECT_URLS.billingFidelity\n          }, {\n            title: this.$translate.instant('common_menu_means_credits'),\n            url: this.REDIRECT_URLS.billingCredits\n          }]\n        }, // Orders\n        !currentUser.isEnterprise && this.TARGET === 'EU' && currentUser.ovhSubsidiary === 'FR' && {\n          title: this.$translate.instant('common_menu_orders'),\n          url: this.REDIRECT_URLS.orders\n        }, // Contacts\n        this.TARGET === 'EU' && {\n          title: this.$translate.instant('common_menu_contacts'),\n          url: this.REDIRECT_URLS.contacts\n        }, // Tickets\n        {\n          title: this.$translate.instant('common_menu_list_ticket'),\n          url: this.REDIRECT_URLS.support\n        }, // Logout\n        {\n          title: this.$translate.instant('global_logout'),\n          class: 'logout',\n          click: function click(callback) {\n            _this5.ssoAuthentication.logout();\n\n            if (typeof callback === 'function') {\n              callback();\n            }\n          }\n        }]\n      };\n    }\n  }, {\n    key: \"getInternalLinks\",\n    value: function getInternalLinks(currentUser, notificationsMenu) {\n      var _this6 = this;\n\n      // Return login link if user not logged\n      if (!currentUser) {\n        return [{\n          title: this.$translate.instant('common_login'),\n          click: function click() {\n            return _this6.ssoAuthentication.logout();\n          }\n        }];\n      }\n\n      var menu = [this.getLanguageMenu(), // Language\n      this.getAssistanceMenu(currentUser.ovhSubsidiary), // Assistance\n      this.getUserMenu(currentUser)];\n\n      if (notificationsMenu.show) {\n        menu.splice(1, 0, notificationsMenu);\n      }\n\n      return menu;\n    }\n  }, {\n    key: \"getManagersNames\",\n    value: function getManagersNames() {\n      switch (this.TARGET) {\n        case 'EU':\n          {\n            if (this.locale === 'FR') {\n              return ['portal', 'web', 'dedicated', 'cloud', 'telecom', 'gamma', 'partners'];\n            }\n\n            return ['portal', 'web', 'dedicated', 'cloud', 'telecom', 'gamma'];\n          }\n\n        case 'CA':\n          {\n            return ['dedicated', 'cloud', 'gamma'];\n          }\n\n        case 'US':\n        default:\n          {\n            return ['dedicated', 'cloud'];\n          }\n      }\n    }\n  }, {\n    key: \"loadTranslations\",\n    value: function loadTranslations() {\n      return this.$translate.refresh();\n    } // Get managers links for main-links attribute\n\n  }, {\n    key: \"getManagerLinks\",\n    value: function getManagerLinks(products) {\n      var _this7 = this;\n\n      var currentUniverse = 'cloud';\n      var managerUrls = this.MANAGER_URLS;\n      var managerNames = this.getManagersNames();\n      return _.map(managerNames, function (managerName) {\n        var managerLink = {\n          name: managerName,\n          class: managerName,\n          title: _this7.$translate.instant(\"common_menu_\".concat(managerName)),\n          url: managerUrls[managerName],\n          isPrimary: ['partners', 'labs'].indexOf(managerName) === -1\n        };\n\n        if (products && managerName === currentUniverse) {\n          managerLink.subLinks = _this7.getUniverseMenu(products);\n        }\n\n        return managerLink;\n      });\n    } // Get products and build responsive menu\n\n  }, {\n    key: \"getResponsiveLinks\",\n    value: function getResponsiveLinks() {\n      var _this8 = this;\n\n      return this.productsService.getProducts().then(function (_ref) {\n        var results = _ref.results;\n        return _this8.getManagerLinks(results);\n      }).catch(function () {\n        return _this8.getManagerLinks();\n      });\n    } // Get navbar navigation and user infos\n\n  }, {\n    key: \"getNavbar\",\n    value: function getNavbar() {\n      var _this9 = this;\n\n      var managerUrls = this.MANAGER_URLS; // Get base structure for the navbar\n\n      var getBaseNavbar = function getBaseNavbar(user, notifications) {\n        _this9.locale = user.ovhSubsidiary;\n        return {\n          // Set OVH Logo\n          brand: {\n            label: _this9.$translate.instant('common_menu_cloud'),\n            url: managerUrls.cloud,\n            iconAlt: 'OVH',\n            iconClass: 'navbar-logo',\n            iconSrc: 'assets/images/navbar/icon-logo-ovh.svg'\n          },\n          // Set Internal Links\n          internalLinks: _this9.getInternalLinks(user, notifications),\n          // Set Manager Links\n          managerLinks: _this9.getManagerLinks()\n        };\n      };\n\n      this.asyncLoader.addTranslations(import(\"../../app/common/translations/Messages_\".concat(this.$translate.use(), \".xml\")).catch(function () {\n        return import(\"../../app/common/translations/Messages_\".concat(_this9.$translate.fallbackLanguage(), \".xml\"));\n      }).then(function (x) {\n        return x.default;\n      }));\n      return this.$q.all({\n        translate: this.loadTranslations(),\n        user: this.sessionService.getUser(),\n        notifications: this.navbarNotificationService.getNavbarContent()\n      }).then(function (_ref2) {\n        var user = _ref2.user,\n            notifications = _ref2.notifications;\n        return getBaseNavbar(user, notifications);\n      }).catch(function () {\n        return getBaseNavbar();\n      });\n    }\n  }], [{\n    key: \"getProductsMenu\",\n    value: function getProductsMenu(categoryName, products) {\n      return _.map(products, function (product) {\n        return {\n          title: product.displayName,\n          state: categoryName,\n          stateParams: {\n            serviceName: product.serviceName\n          }\n        };\n      });\n    }\n  }, {\n    key: \"getCloudDesktopMenu\",\n    value: function getCloudDesktopMenu(categoryName, products) {\n      return _.map(products, function (product) {\n        return {\n          title: product.displayName === 'noAlias' ? product.serviceName : product.displayName,\n          state: categoryName,\n          stateParams: {\n            serviceName: product.serviceName\n          }\n        };\n      });\n    }\n  }]);\n\n  return ManagerNavbarService;\n}();\n\nangular.module('managerApp').service('ManagerNavbarService', ManagerNavbarService);",null]}