{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/logs-dashboards.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/logs-dashboards.service.js","mtime":1539717142080},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsDashboardsService {\n  constructor($q, OvhApiDbaas, LogsOptionsService,\n    LogsHelperService, LogsConstants, UrlHelper) {\n    this.$q = $q;\n    this.DashboardsApiService = OvhApiDbaas.Logs().Dashboard().v6();\n    this.DashboardsAapiService = OvhApiDbaas.Logs().Dashboard().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsHelperService = LogsHelperService;\n    this.LogsConstants = LogsConstants;\n    this.UrlHelper = UrlHelper;\n  }\n\n  /**\n   * returns array of dashboards with details\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of dashboards.\n   *          Each Dashboard will have all details populated.\n   * @memberof LogsDashboardsService\n   */\n  getDashboards(serviceName) {\n    return this.getDashboardsDetails(serviceName)\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_get_error', err, {}));\n  }\n\n  /**\n   * returns array of owned dashboards with details of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of dashboards.\n   *          Each stream will have all details populated.\n   * @memberof LogsStreamsService\n   */\n  getOwnDashboards(serviceName) {\n    return this.getDashboardsDetails(serviceName)\n      .then(dashboards => dashboards.filter(dashboard => dashboard.info.isEditable))\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_get_error', err, {}));\n  }\n\n  /**\n   * returns array of shareable dashboards with details of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of dashboards.\n   *          Each stream will have all details populated.\n   * @memberof LogsStreamsService\n   */\n  getShareableDashboards(serviceName) {\n    return this.getDashboardsDetails(serviceName)\n      .then(dashboards => dashboards.filter(dashboard => dashboard.info.isShareable))\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_get_error', err, {}));\n  }\n\n  /**\n   * gets details for each dashboard in array\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to an array of dashboard objects\n   * @memberof LogsDashboardsService\n   */\n  getDashboardsDetails(serviceName) {\n    return this.getDashboardsIds(serviceName)\n      .then((dashboards) => {\n        const promises = dashboards\n          .map(dashboardId => this.getAapiDashboard(serviceName, dashboardId));\n        return this.$q.all(promises);\n      });\n  }\n\n  /**\n   * returns array of dashboards id's of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of dashboards id's\n   * @memberof LogsDashboardsService\n   */\n  getDashboardsIds(serviceName) {\n    return this.DashboardsApiService.query({ serviceName }).$promise;\n  }\n\n  /**\n   * returns details of an dashboard\n   *\n   * @param {any} serviceName\n   * @param {any} dashboardId\n   * @returns promise which will be resolve to dashboard object\n   * @memberof LogsDashboardsService\n   */\n  getDashboard(serviceName, dashboardId) {\n    return this.DashboardsApiService.get({ serviceName, dashboardId })\n      .$promise\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_get_detail_error', err, {}));\n  }\n\n  /**\n   * returns details of an dashboard\n   *\n   * @param {any} serviceName\n   * @param {any} dashboardId\n   * @returns promise which will be resolve to dashboard object\n   * @memberof LogsDashboardsService\n   */\n  getAapiDashboard(serviceName, dashboardId) {\n    return this.DashboardsAapiService.get({ serviceName, dashboardId })\n      .$promise\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_get_detail_error', err, {}));\n  }\n\n  /**\n   * returns objecy containing total number of dashboards and total number of dashboards used\n   *\n   * @param {any} serviceName\n   * @returns quota object containing max (total number dashboards)\n   *          and configured (number of dashboards used)\n   * @memberof LogsDashboardsService\n   */\n  getQuota(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then(me => ({\n        max: me.total.maxNbDashboard,\n        configured: me.total.curNbDashboard,\n        reference: me.total.reference,\n      }))\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_quota_get_error', err, {}));\n  }\n\n  /**\n   * Retrieves options associated with main offer\n   * @param {string} serviceName\n   */\n  getMainOffer(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then(me => ({\n        max: me.offer.maxNbDashboard,\n        current: me.offer.curNbDashboard,\n      }))\n      .catch(err => this.LogsHelperService.handleError('logs_main_offer_get_error', err, {}));\n  }\n\n  /**\n   * delete dashboard\n   *\n   * @param {any} serviceName\n   * @param {any} Dashboard, dashboard object to be deleted\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsDashboardsService\n   */\n  deleteDashboard(serviceName, dashboard) {\n    return this.DashboardsApiService.delete({ serviceName, dashboardId: dashboard.dashboardId })\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_dashboards_delete_success', { dashboardName: dashboard.title });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_delete_error', err, { dashboardName: dashboard.title }));\n  }\n\n  /**\n   * create new dashboard\n   *\n   * @param {any} serviceName\n   * @param {any} Dashboard, dashboard object to be created\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsDashboardsService\n   */\n  createDashboard(serviceName, dashboard) {\n    return this.DashboardsApiService.create({ serviceName }, dashboard)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_dashboards_create_success', { dashboardName: dashboard.title });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_create_error', err, { dashboardName: dashboard.title }));\n  }\n\n  /**\n   * create new dashboard from another dashboard\n   *\n   * @param {any} serviceName\n   * @param {any} Dashboard, dashboard object to be created\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsDashboardsService\n   */\n  duplicateDashboard(serviceName, dashboard, dashboardId) {\n    if (!dashboard.streamId) { delete dashboard.streamId; } // eslint-disable-line\n    return this.DashboardsApiService.duplicate({ serviceName, dashboardId }, dashboard)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_dashboards_create_success', { dashboardName: dashboard.title });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_create_error', err, { dashboardName: dashboard.title }));\n  }\n\n  /**\n   * update dashboard\n   *\n   * @param {any} serviceName\n   * @param {any} Dashboard, dashboard object to be updated\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsDashboardsService\n   */\n  updateDashboard(serviceName, dashboard) {\n    return this.DashboardsApiService\n      .update({ serviceName, DashboardId: dashboard.dashboardId }, dashboard)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_dashboards_update_success', { dashboardName: dashboard.title });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_dashboards_update_error', err, { dashboardName: dashboard.title }));\n  }\n\n  /**\n   * creates new dashboard with default values\n   *\n   * @returns dashboard object with default values\n   * @memberof LogsDashboardsService\n   */\n  static getNewDashboard() {\n    return {\n      data: {\n        description: null,\n        title: null,\n      },\n      loading: false,\n    };\n  }\n\n  /**\n   * retrives all subscribed options of type dashboards\n   * @param {string} serviceName\n   */\n  getSubscribedOptions(serviceName) {\n    return this.LogsOptionsService.getSubscribedOptionsByType(\n      serviceName,\n      this.LogsConstants.DASHBOARD_OPTION_REFERENCE,\n    );\n  }\n\n  /**\n   * extracts graylog URL from dashboard. Shows error message on UI if no graylog URL is found.\n   *\n   * @param {any} dashboard\n   * @returns {string} graylog url, if not found empty string\n   * @memberof LogsDashboardsService\n   */\n  getDashboardGraylogUrl(aapiDashboard) {\n    const url = this.UrlHelper.constructor.findUrl(aapiDashboard, this.LogsConstants.GRAYLOG_WEBUI);\n    if (!url) {\n      this.LogsHelperService.handleError('logs_dashboards_get_graylog_url_error', {}, { dashboardName: aapiDashboard.info.title });\n    }\n    return url;\n  }\n\n  resetAllCache() {\n    this.AccountingAapiService.resetAllCache();\n    this.DashboardsApiService.resetAllCache();\n    this.DashboardsAapiService.resetAllCache();\n    // refresh home page last modified dashboard\n    this.DetailsAapiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsDashboardsService', LogsDashboardsService);\n"]}