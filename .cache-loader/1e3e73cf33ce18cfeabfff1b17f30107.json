{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/region/region.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/region/region.service.js","mtime":1539717142398},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar RegionService =\n/*#__PURE__*/\nfunction () {\n  RegionService.$inject = [\"$translate\"];\n\n  function RegionService($translate) {\n    _classCallCheck(this, RegionService);\n\n    this.$translate = $translate;\n  }\n\n  _createClass(RegionService, [{\n    key: \"getMacroRegionLowercase\",\n    value: function getMacroRegionLowercase(region) {\n      var macro = this.constructor.getMacroRegion(region);\n      return macro ? macro.toLowerCase() : '';\n    }\n  }, {\n    key: \"getAllTranslatedMacroRegion\",\n    value: function getAllTranslatedMacroRegion() {\n      return {\n        SBG: this.$translate.instant('cloud_common_region_SBG'),\n        BHS: this.$translate.instant('cloud_common_region_BHS'),\n        GRA: this.$translate.instant('cloud_common_region_GRA'),\n        WAW: this.$translate.instant('cloud_common_region_WAW'),\n        DE: this.$translate.instant('cloud_common_region_DE'),\n        UK: this.$translate.instant('cloud_common_region_UK'),\n        US: this.$translate.instant('cloud_common_region_US')\n      };\n    }\n  }, {\n    key: \"getTranslatedMacroRegion\",\n    value: function getTranslatedMacroRegion(region) {\n      var translatedMacroRegion = this.$translate.instant(\"cloud_common_region_\".concat(this.constructor.getMacroRegion(region)));\n      return translatedMacroRegion || region;\n    }\n  }, {\n    key: \"getTranslatedMicroRegion\",\n    value: function getTranslatedMicroRegion(region) {\n      var translatedMicroRegion = this.$translate.instant(\"cloud_common_region_\".concat(this.constructor.getMacroRegion(region), \"_micro\"), {\n        micro: region\n      });\n      return translatedMicroRegion || region;\n    }\n  }, {\n    key: \"getTranslatedMicroRegionLocation\",\n    value: function getTranslatedMicroRegionLocation(region) {\n      var translatedMicroRegionLocation = this.$translate.instant(\"cloud_common_region_location_\".concat(this.constructor.getMacroRegion(region)));\n      return translatedMicroRegionLocation || region;\n    }\n  }, {\n    key: \"getRegionIconFlag\",\n    value: function getRegionIconFlag(region) {\n      return \"flag-icon-\".concat(this.getMacroRegionLowercase(region));\n    }\n  }, {\n    key: \"getTranslatedRegionContinent\",\n    value: function getTranslatedRegionContinent(region) {\n      var translatedRegionContinent = this.$translate.instant(\"cloud_common_region_continent_\".concat(this.constructor.getMacroRegion(region)));\n      return translatedRegionContinent || region;\n    }\n  }, {\n    key: \"getRegionCountry\",\n    value: function getRegionCountry(region) {\n      var translatedMicroRegionLocation = this.getTranslatedMicroRegionLocation(region);\n      return _.trim(translatedMicroRegionLocation.split('(')[1], ')');\n    }\n  }, {\n    key: \"getRegion\",\n    value: function getRegion(regionParam) {\n      var region = regionParam;\n      region = region.toUpperCase();\n      return {\n        macroRegion: {\n          code: this.constructor.getMacroRegion(region),\n          text: this.getTranslatedMacroRegion(region)\n        },\n        microRegion: {\n          code: region,\n          text: this.getTranslatedMicroRegion(region)\n        },\n        location: this.getTranslatedMicroRegionLocation(region),\n        continent: this.getTranslatedRegionContinent(region),\n        icon: this.getRegionIconFlag(region),\n        country: this.getRegionCountry(region)\n      };\n    }\n  }], [{\n    key: \"getMacroRegion\",\n    value: function getMacroRegion(region) {\n      var macro = /[\\D]{2,3}/.exec(region);\n      return macro ? macro[0].replace('-', '').toUpperCase() : '';\n    }\n  }, {\n    key: \"getRegionNumber\",\n    value: function getRegionNumber(region) {\n      var number = /[\\d]+$/.exec(region);\n      return number ? number[0] : '';\n    }\n  }]);\n\n  return RegionService;\n}();\n\nangular.module('managerApp').service('RegionService', RegionService);",null]}