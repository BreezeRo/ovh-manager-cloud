{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/crud/logs-dashboards-crud.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/crud/logs-dashboards-crud.controller.js","mtime":1539717142079},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsDashboardsCrudCtrl {\n  constructor($q, $state, $stateParams, $uibModalInstance, LogsDashboardsService,\n    ControllerHelper, CloudMessage, LogsStreamsService) {\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.$uibModalInstance = $uibModalInstance;\n    this.serviceName = this.$stateParams.serviceName;\n    this.LogsDashboardsService = LogsDashboardsService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsStreamsService = LogsStreamsService;\n    this.isEdit = false;\n    this.isDuplicate = $state.$current.name === 'dbaas.logs.detail.dashboards.duplicate';\n    this.dashboardName = this.$stateParams.dashboardName;\n\n    this.initLoaders();\n  }\n\n  /**\n   * initializes options list\n   *\n   * @memberof LogsDashboardsCrudCtrl\n   */\n  initLoaders() {\n    this.options = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsDashboardsService.getSubscribedOptions(this.serviceName),\n    });\n    this.options.load();\n\n    this.mainOffer = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsDashboardsService.getMainOffer(this.serviceName),\n    });\n    this.mainOffer.load();\n\n    if (this.isDuplicate) {\n      this.streams = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: () => this.LogsStreamsService.getOwnStreams(this.serviceName),\n      });\n      this.streams.load();\n      this.isEdit = false;\n      this.title = 'logs_dashboards_duplicate_title';\n      this.dashboard = this.LogsDashboardsService.constructor.getNewDashboard();\n      if (!this.dashboardName) {\n        this.ControllerHelper.request.getHashLoader({\n          loaderFunction: () => this.LogsDashboardsService\n            .getDashboard(this.serviceName, this.$stateParams.dashboardId)\n            .then((aapiDashboard) => {\n              this.dashboardName = aapiDashboard.title;\n              return aapiDashboard;\n            }),\n        }).load();\n      }\n    } else if (this.$stateParams.dashboardId) {\n      this.isEdit = true;\n      this.title = 'logs_dashboards_update_title';\n      this.dashboard = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.LogsDashboardsService\n          .getAapiDashboard(this.serviceName, this.$stateParams.dashboardId)\n          .then(dashboard => dashboard.info),\n      });\n      this.dashboard.load();\n    } else {\n      this.isEdit = false;\n      this.title = 'logs_dashboards_add';\n      this.dashboard = this.LogsDashboardsService.constructor.getNewDashboard();\n    }\n  }\n\n  save() {\n    if (this.isDuplicate) {\n      this.duplicateDashboard();\n    }\n    if (this.isEdit) {\n      this.updateDashboard();\n    }\n    if (!this.isEdit && !this.isDuplicate) {\n      this.createDashboard();\n    }\n  }\n\n  /**\n   * update dashboard\n   *\n   * @memberof LogsDashboardsCrudCtrl\n   */\n  updateDashboard() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.CloudMessage.flushChildMessage();\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsDashboardsService\n        .updateDashboard(this.serviceName, this.dashboard.data)\n        .finally(() => {\n          this.$uibModalInstance.close();\n          this.ControllerHelper.scrollPageToTop();\n        }),\n    });\n    return this.saving.load();\n  }\n\n  /**\n   * create new dashboard\n   *\n   * @memberof LogsDashboardsCrudCtrl\n   */\n  createDashboard() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.CloudMessage.flushChildMessage();\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsDashboardsService\n        .createDashboard(this.serviceName, this.dashboard.data)\n        .finally(() => {\n          this.$uibModalInstance.close();\n          this.ControllerHelper.scrollPageToTop();\n        }),\n    });\n    return this.saving.load();\n  }\n\n  /**\n   * create new dashboard from another dahsboard\n   *\n   * @memberof LogsDashboardsCrudCtrl\n   */\n  duplicateDashboard() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.CloudMessage.flushChildMessage();\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsDashboardsService\n        .duplicateDashboard(this.serviceName, this.dashboard.data, this.$stateParams.dashboardId)\n        .finally(() => {\n          this.$uibModalInstance.close();\n          this.ControllerHelper.scrollPageToTop();\n        }),\n    });\n    return this.saving.load();\n  }\n\n  cancel() {\n    this.$uibModalInstance.dismiss();\n  }\n}\n\nangular.module('managerApp').controller('LogsDashboardsCrudCtrl', LogsDashboardsCrudCtrl);\n"]}