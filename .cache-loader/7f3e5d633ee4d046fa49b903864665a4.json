{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/dbaas-metrics/dashboard/metrics-dashboard.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/dbaas-metrics/dashboard/metrics-dashboard.controller.js","mtime":1539717142067},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var MetricsDashboardCtrl =\n  /*#__PURE__*/\n  function () {\n    MetricsDashboardCtrl.$inject = [\"$scope\", \"$stateParams\", \"$q\", \"$translate\", \"CloudMessage\", \"ControllerHelper\", \"FeatureAvailabilityService\", \"MetricService\", \"METRICS_ENDPOINTS\", \"RegionService\", \"SidebarMenu\"];\n\n    function MetricsDashboardCtrl($scope, $stateParams, $q, $translate, CloudMessage, ControllerHelper, FeatureAvailabilityService, MetricService, METRICS_ENDPOINTS, RegionService, SidebarMenu) {\n      _classCallCheck(this, MetricsDashboardCtrl);\n\n      this.$scope = $scope;\n      this.$stateParams = $stateParams;\n      this.$q = $q;\n      this.$translate = $translate;\n      this.serviceName = $stateParams.serviceName;\n      this.ControllerHelper = ControllerHelper;\n      this.CloudMessage = CloudMessage;\n      this.FeatureAvailabilityService = FeatureAvailabilityService;\n      this.MetricService = MetricService;\n      this.graphs = METRICS_ENDPOINTS.graphs;\n      this.RegionService = RegionService;\n      this.SidebarMenu = SidebarMenu;\n      this.loading = {};\n      this.limit = {\n        warning: 70,\n        danger: 85\n      };\n      this.usage = {};\n      this.configuration = {};\n      this.plan = {};\n      this.actions = {};\n    }\n\n    _createClass(MetricsDashboardCtrl, [{\n      key: \"$onInit\",\n      value: function $onInit() {\n        this.loading.service = true;\n        this.loading.consumption = true;\n        this.loading.plan = true;\n        this.initTiles();\n      }\n    }, {\n      key: \"initTiles\",\n      value: function initTiles() {\n        var _this = this;\n\n        this.initActions();\n        this.MetricService.getService(this.serviceName).then(function (service) {\n          _this.usage.quota = {\n            mads: service.data.quota.mads,\n            ddp: service.data.quota.ddp\n          };\n          _this.configuration = {\n            name: service.data.name,\n            description: service.data.description,\n            retention: service.data.quota.retention,\n            datacenter: _this.transformRegion(service.data.region.name)\n          };\n          _this.plan.offer = service.data.offer;\n        }).finally(function () {\n          _this.loading.service = false;\n        });\n        this.MetricService.getConsumption(this.serviceName).then(function (cons) {\n          _this.usage.conso = {\n            mads: cons.data.mads,\n            ddp: cons.data.ddp\n          };\n\n          _this.initMessages();\n        }).finally(function () {\n          _this.loading.consumption = false;\n        });\n        this.MetricService.getServiceInfos(this.serviceName).then(function (info) {\n          _this.plan = info.data;\n          return _this.MetricService.getService(_this.serviceName);\n        }).then(function (service) {\n          _this.plan.offer = service.data.offer;\n        }).finally(function () {\n          _this.loading.plan = false;\n        });\n      }\n    }, {\n      key: \"initMessages\",\n      value: function initMessages() {\n        if (this.constructor.computeUsage(this.usage.conso.mads, this.usage.quota.mads) > this.limit.warning) {\n          this.CloudMessage.warning(this.$translate.instant('metrics_quota_mads_warning_message'));\n        }\n\n        if (this.constructor.computeUsage(this.usage.conso.ddp, this.usage.quota.ddp) > this.limit.warning) {\n          this.CloudMessage.warning(this.$translate.instant('metrics_quota_ddp_warning_message'));\n        }\n      }\n    }, {\n      key: \"initActions\",\n      value: function initActions() {\n        var _this2 = this;\n\n        this.actions = {\n          autorenew: {\n            text: this.$translate.instant('common_manage'),\n            href: this.ControllerHelper.navigation.getUrl('renew', {\n              serviceName: this.serviceName,\n              serviceType: 'METRICS'\n            }),\n            isAvailable: function isAvailable() {\n              return true;\n            }\n          },\n          contacts: {\n            text: this.$translate.instant('common_manage'),\n            href: this.ControllerHelper.navigation.getUrl('contacts', {\n              serviceName: this.serviceName\n            }),\n            isAvailable: function isAvailable() {\n              return _this2.FeatureAvailabilityService.hasFeature('CONTACTS', 'manage');\n            }\n          },\n          editName: {\n            text: this.$translate.instant('metrics_tiles_modify'),\n            callback: function callback() {\n              return _this2.showEditName(_this2.configuration.description);\n            },\n            isAvailable: function isAvailable() {\n              return true;\n            }\n          }\n        };\n      }\n    }, {\n      key: \"computeColor\",\n      value: function computeColor(value, total) {\n        var green = '#B0CA67';\n        var yellow = '#E3CD4D';\n        var red = '#B04020';\n\n        if (this.constructor.computeUsage(value, total) > this.limit.danger) {\n          return red;\n        }\n\n        if (this.constructor.computeUsage(value, total) > this.limit.warning) {\n          return yellow;\n        }\n\n        return green;\n      }\n    }, {\n      key: \"transformRegion\",\n      value: function transformRegion(regionCode) {\n        var region = this.RegionService.getRegion(regionCode);\n        return {\n          name: region.microRegion.text,\n          country: region.country,\n          flag: region.icon\n        };\n      }\n    }, {\n      key: \"updateName\",\n      value: function updateName(newDisplayName) {\n        var _this3 = this;\n\n        return this.MetricService.setServiceDescription(this.serviceName, newDisplayName).then(function (result) {\n          _this3.configuration.description = result.data.description;\n\n          _this3.$scope.$emit('changeDescription', _this3.configuration.description);\n\n          var menuItem = _this3.SidebarMenu.getItemById(_this3.serviceName);\n\n          menuItem.title = _this3.configuration.description;\n        });\n      }\n    }, {\n      key: \"showEditName\",\n      value: function showEditName(name) {\n        var _this4 = this;\n\n        this.ControllerHelper.modal.showNameChangeModal({\n          serviceName: this.serviceName,\n          displayName: name,\n          onSave: function onSave(newDisplayName) {\n            return _this4.updateName(newDisplayName);\n          }\n        });\n      }\n    }], [{\n      key: \"computeUsage\",\n      value: function computeUsage(value, total) {\n        return value / total * 100;\n      }\n    }, {\n      key: \"displayUsage\",\n      value: function displayUsage(value, total) {\n        if (!value && !total) {\n          return '0';\n        }\n\n        return \"\".concat(value, \"/\").concat(total);\n      }\n    }]);\n\n    return MetricsDashboardCtrl;\n  }();\n\n  angular.module('managerApp').controller('MetricsDashboardCtrl', MetricsDashboardCtrl);\n})();",null]}