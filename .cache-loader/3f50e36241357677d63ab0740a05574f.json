{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/infrastructure/vrack/virtualMachine/virtualMachine.factory.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/infrastructure/vrack/virtualMachine/virtualMachine.factory.js","mtime":1539717142386},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').factory('CloudProjectComputeInfraVrackVmFactory', [\"$rootScope\", \"$q\", \"OvhApiCloudProjectInstance\", \"OvhApiCloudProjectFlavor\", \"OvhApiCloudProjectImage\", \"OvhCloudPriceHelper\", \"OvhApiCloudProjectSnapshot\", \"OvhApiCloudProjectSshKey\", \"CLOUD_VM_STATE\", \"CLOUD_MONITORING\", function ($rootScope, $q, OvhApiCloudProjectInstance, OvhApiCloudProjectFlavor, OvhApiCloudProjectImage, OvhCloudPriceHelper, OvhApiCloudProjectSnapshot, OvhApiCloudProjectSshKey, CLOUD_VM_STATE, CLOUD_MONITORING) {\n  /**\n   *  Defines a cloud project compute infrastructure vm\n   *\n   *  /!\\ Take care when modifying this!!! Check setInfos, and prepareToJson too.\n   */\n  var VirtualMachineFactory = function () {\n    return function CloudProjectComputeInfraVrackVmFactory(optionsParam) {\n      var options = optionsParam;\n\n      if (!options) {\n        options = {};\n      } // Set custom values\n\n\n      options = this.getCustomOptions(options); // Extend and set default values\n\n      angular.extend(this, angular.extend({\n        id: Math.floor(Math.random() * 1000 * new Date().getTime()),\n        status: '',\n        created: new Date().toISOString(),\n        collapsed: false\n      }, options)); // Updating flavorId, imageId, or sshKeyId, ...\n\n      this.getFullInformations();\n    };\n  }(); // /////////////////////\n  //      METHODS      //\n  // /////////////////////\n\n  /**\n     *  Set customs options (for init, and updates)\n     *  -> @devs: put your customs values here\n     */\n\n\n  VirtualMachineFactory.prototype.getCustomOptions = function (options) {\n    return angular.extend(options, {\n      routedTo: options.routedTo ? _.flatten([options.routedTo]) : [],\n      // Ensure routedTo is always an array\n      monthlyBillingBoolean: !!options.monthlyBilling // Set monthlyBillingBoolean\n\n    });\n  };\n  /**\n     *  Set infos after initialization\n     */\n\n\n  VirtualMachineFactory.prototype.setInfos = function (optionsParam) {\n    var options = optionsParam; // Set custom values\n\n    options = this.getCustomOptions(options || {}); // Ok now extend it\n\n    angular.extend(this, options); // Updating flavorId, imageId, or sshKeyId, ...\n\n    return this.getFullInformations();\n  };\n  /**\n     *  [API] Get the virtual machine from API using its id\n     */\n\n\n  VirtualMachineFactory.prototype.get = function () {\n    var self = this;\n    return OvhApiCloudProjectInstance.v6().get({\n      serviceName: this.serviceName,\n      instanceId: this.id\n    }).$promise.then(function (vmOptions) {\n      return self.setInfos(vmOptions);\n    });\n  };\n  /**\n     *  [API] Get additional informations\n     */\n\n\n  VirtualMachineFactory.prototype.updatePrice = function () {\n    var self = this;\n    return OvhCloudPriceHelper.getPrices(self.serviceName).then(function (prices) {\n      self.price = prices[self.planCode]; // Set 3 digits for hourly price\n\n      if (!self.monthlyBillingBoolean) {\n        self.price.price.text = self.price.price.text.replace(/\\d+(?:[.,]\\d+)?/, \"\".concat(self.price.price.value.toFixed(3)));\n      }\n    });\n  };\n\n  VirtualMachineFactory.prototype.getFullInformations = function () {\n    var queue = [];\n    var self = this; // image\n\n    var image = this.imageId || this.image && this.image.id;\n\n    if (image) {\n      queue.push(OvhApiCloudProjectImage.v6().query({\n        serviceName: this.serviceName\n      }).$promise.then(function (images) {\n        self.image = _.find(images, {\n          id: image\n        }); // so it's a snapshot\n\n        if (!self.image) {\n          return OvhApiCloudProjectSnapshot.v6().query({\n            serviceName: self.serviceName\n          }).$promise.then(function (snapshots) {\n            self.image = _.find(snapshots, {\n              id: image\n            }); // so maybe image is not in list\n\n            if (!self.image) {\n              return OvhApiCloudProjectImage.v6().get({\n                serviceName: self.serviceName,\n                imageId: image\n              }).$promise.then(function (img) {\n                self.image = img;\n              });\n            }\n\n            return self;\n          });\n        }\n\n        return self;\n      }));\n    } // flavor + price\n\n\n    var flavorId = this.flavorId || this.flavor && this.flavor.id;\n\n    if (flavorId) {\n      queue.push(OvhApiCloudProjectFlavor.v6().query({\n        serviceName: this.serviceName\n      }).$promise.then(function (flavorsList) {\n        self.flavor = _.find(flavorsList, {\n          id: flavorId\n        });\n        self.planCode = self.flavor.planCodes[self.monthlyBillingBoolean ? 'monthly' : 'hourly']; // if not in the list: it's a deprecated flavor: directly get it!\n\n        if (!self.flavor) {\n          return OvhApiCloudProjectFlavor.v6().get({\n            serviceName: self.serviceName,\n            flavorId: flavorId\n          }).$promise.then(function (flavorDeprecated) {\n            _.set(flavorDeprecated, 'deprecated', true);\n\n            self.flavor = flavorDeprecated;\n          });\n        }\n\n        return self;\n      }));\n    } // if sshKeyId\n\n\n    if (this.sshKeyId) {\n      queue.push(OvhApiCloudProjectSshKey.v6().query({\n        serviceName: this.serviceName\n      }).$promise.then(function (sshKeys) {\n        self.sshKey = _.find(sshKeys, {\n          id: self.sshKeyId\n        });\n      }));\n    }\n\n    return $q.all(queue).then(function () {\n      return self.updatePrice();\n    });\n  };\n  /**\n     *   Get type of status.\n     */\n\n\n  VirtualMachineFactory.prototype.getStatusGroup = function () {\n    if (~CLOUD_VM_STATE.pending.indexOf(this.status)) {\n      return 'PENDING';\n    }\n\n    if (~CLOUD_VM_STATE.openstack.indexOf(this.status)) {\n      return 'OPENSTACK';\n    }\n\n    if (~CLOUD_VM_STATE.error.indexOf(this.status)) {\n      return 'ERROR';\n    }\n\n    return this.status;\n  };\n  /**\n     *  Get ip flagged with private type\n     */\n\n\n  VirtualMachineFactory.prototype.getPrivateIp = function () {\n    return _.find(this.ipAddresses, function (ip) {\n      return ip.type === 'private';\n    });\n  };\n\n  VirtualMachineFactory.prototype.getPublicIpv4 = function () {\n    return _.get(_.find(this.ipAddresses, function (ip) {\n      return ip.type === 'public' && ip.version === 4;\n    }), 'ip', '');\n  };\n\n  VirtualMachineFactory.prototype.getPublicIpv6 = function () {\n    return _.get(_.find(this.ipAddresses, function (ip) {\n      return ip.type === 'public' && ip.version === 6;\n    }), 'ip', _.get(this.ipAddresses[0], 'ipV6.ip', ''));\n  };\n  /**\n     *  [API] Launch the virtual machine. POST informations for creating an instance to API\n     */\n\n\n  VirtualMachineFactory.prototype.launchCreation = function () {\n    var self = this;\n    return OvhApiCloudProjectInstance.v6().save({\n      serviceName: this.serviceName\n    }, {\n      flavorId: this.flavor.id,\n      imageId: this.image.id,\n      name: this.name,\n      region: this.region,\n      sshKeyId: this.sshKey ? this.sshKey.id : undefined,\n      monthlyBilling: this.monthlyBillingBoolean,\n      userData: this.userData,\n      networks: this.networks\n    }).$promise.then(function (vmOptions) {\n      self.id = vmOptions.id; // WARNING: don't forget tu replaceItem with orderedHash!\n\n      self.status = vmOptions.status;\n      self.planCode = vmOptions.planCode;\n      return self.updatePrice();\n    }).finally(function () {\n      return self;\n    });\n  };\n  /**\n     *  [API] Delete a virtual machine.\n     */\n\n\n  VirtualMachineFactory.prototype.remove = function () {\n    var self = this;\n    var oldStatus = self.status;\n    return OvhApiCloudProjectInstance.v6().remove({\n      serviceName: this.serviceName,\n      instanceId: this.id\n    }).$promise.then(function () {\n      self.status = 'DELETING';\n      $rootScope.$broadcast('compute.infrastructure.vm.status-update', self.status, oldStatus, self);\n      return self;\n    });\n  };\n  /**\n     *  [API] Edit the VM (name)\n     */\n\n\n  VirtualMachineFactory.prototype.edit = function () {\n    var self = this;\n    var promises = [];\n\n    if (self.hasChange('name')) {\n      promises.push(OvhApiCloudProjectInstance.v6().put({\n        serviceName: self.serviceName,\n        instanceId: self.id\n      }, {\n        instanceName: self.name\n      }).$promise.then(function () {\n        return self;\n      }, function (error) {\n        return $q.reject({\n          error: error.data,\n          requestName: 'put'\n        });\n      }));\n    }\n\n    if (self.hasChange('monthlyBilling')) {\n      promises.push(OvhApiCloudProjectInstance.v6().activeMonthlyBilling({\n        serviceName: self.serviceName,\n        instanceId: self.id\n      }, {}).$promise.then(function (vmOptions) {\n        self.monthlyBilling = vmOptions.monthlyBilling;\n        self.planCode = self.planCode.replace('consumption', 'monthly');\n        $rootScope.$broadcast('compute.infrastructure.vm.monthlyBilling.status-update', self.monthlyBilling.status, 'OK', self);\n        return self.updatePrice();\n      }, function (error) {\n        return $q.reject({\n          error: error.data,\n          requestName: 'activeMonthlyBilling'\n        });\n      }).finally(function () {\n        return self;\n      }));\n    } // Resize\n\n\n    if (self.hasChange('flavors')) {\n      promises.push(OvhApiCloudProjectInstance.v6().resize({\n        serviceName: self.serviceName,\n        instanceId: self.id\n      }, {\n        flavorId: self.flavor.id\n      }).$promise.then(function (vmOptions) {\n        self.status = vmOptions.status;\n        return self;\n      }, function (error) {\n        return $q.reject({\n          error: error.data,\n          requestName: 'resize'\n        });\n      }));\n    } // Reinstall\n\n\n    if (self.hasChange('images')) {\n      promises.push(self.reinstall());\n    }\n\n    return $q.allSettled(promises).catch(function (responses) {\n      var tabError = responses.filter(function (val) {\n        return !!val.error;\n      });\n      return $q.reject({\n        errors: tabError,\n        vm: self\n      });\n    });\n  };\n  /**\n     * Init saveForEdition attribute.\n     */\n\n\n  VirtualMachineFactory.prototype.initEdition = function () {\n    var self = this;\n    self.saveForEdition = {\n      name: angular.copy(self.name),\n      monthlyBillingBoolean: angular.copy(self.monthlyBillingBoolean),\n      image: angular.copy(self.image),\n      flavor: angular.copy(self.flavor)\n    };\n  };\n  /**\n     *  Enable the edition mode.\n     */\n\n\n  VirtualMachineFactory.prototype.startEdition = function () {\n    var self = this; // Edit\n\n    if (self.status === 'ACTIVE') {\n      self.openMonitoring = false;\n      self.initEdition();\n    }\n\n    self.openMonitoring = false;\n    self.openDetail = true;\n  };\n  /**\n     *  Disable the edition mode.\n     */\n\n\n  VirtualMachineFactory.prototype.stopEdition = function (cancel, vmWithChanges) {\n    var self = this;\n\n    if (!cancel && vmWithChanges) {\n      self.name = vmWithChanges.name;\n      self.monthlyBilling = vmWithChanges.monthlyBilling || self.monthlyBilling || undefined;\n      self.monthlyBillingBoolean = vmWithChanges.monthlyBillingBoolean;\n      self.price = vmWithChanges.flavor.price || vmWithChanges.price || undefined;\n      self.image = vmWithChanges.image;\n      self.flavor = vmWithChanges.flavor;\n    }\n\n    self.saveForEdition = false;\n    self.openDetail = false;\n  };\n  /**\n     *  Enable the monitoring mode.\n     */\n\n\n  VirtualMachineFactory.prototype.startMonitoring = function () {\n    this.openMonitoring = true;\n    this.openDetail = false;\n  };\n  /**\n     *  Disable the monitoring mode.\n     */\n\n\n  VirtualMachineFactory.prototype.stopMonitoring = function () {\n    this.openMonitoring = false;\n  };\n  /**\n     * [EDIT] Item has changes ?\n     */\n\n\n  VirtualMachineFactory.prototype.hasChange = function (targetSection) {\n    var self = this;\n\n    if (!self.saveForEdition) {\n      return false;\n    }\n\n    if (targetSection) {\n      switch (targetSection) {\n        case 'name':\n          return self.name !== self.saveForEdition.name;\n\n        case 'flavors':\n          return self.flavor ? !self.saveForEdition.flavor || self.flavor.id !== self.saveForEdition.flavor.id : false;\n\n        case 'images':\n          return self.image ? !self.saveForEdition.image || self.image.id !== self.saveForEdition.image.id : false;\n\n        case 'monthlyBilling':\n          return !!self.monthlyBilling !== self.monthlyBillingBoolean;\n\n        default:\n      }\n    }\n\n    return self.hasChange('name') || self.hasChange('flavors') || self.hasChange('images') || self.hasChange('monthlyBilling');\n  };\n  /*= =========  Additionals actions  ========== */\n\n  /**\n     *  [API] Reinstall a vm.\n     */\n\n\n  VirtualMachineFactory.prototype.reinstall = function (imageId) {\n    var self = this;\n    var oldStatus = self.status;\n    return OvhApiCloudProjectInstance.v6().reinstall({\n      serviceName: self.serviceName,\n      instanceId: self.id\n    }, {\n      imageId: imageId || self.image.id\n    }).$promise.then(function (vmOptions) {\n      self.status = vmOptions.status;\n      $rootScope.$broadcast('compute.infrastructure.vm.status-update', self.status, oldStatus, self);\n      return self.getFullInformations();\n    }, function (error) {\n      return $q.reject({\n        error: error.data,\n        requestName: 'reinstall'\n      });\n    });\n  };\n  /**\n     *  [API] Rescue a virtual machine.\n     */\n\n\n  VirtualMachineFactory.prototype.rescueMode = function (enable, image) {\n    var self = this;\n    var oldStatus = self.status;\n    this.status = enable ? 'RESCUING' : 'UNRESCUING';\n    $rootScope.$broadcast('compute.infrastructure.vm.status-update', self.status, oldStatus, self);\n    return OvhApiCloudProjectInstance.v6().rescueMode({\n      serviceName: self.serviceName,\n      instanceId: self.id\n    }, {\n      imageId: image ? image.id : undefined,\n      rescue: enable\n    }).$promise;\n  };\n  /**\n     *  [API] Reboot [soft|hard] a virtual machine.\n     */\n\n\n  VirtualMachineFactory.prototype.reboot = function (type) {\n    var self = this;\n    var oldStatus = self.status;\n    return OvhApiCloudProjectInstance.v6().reboot({\n      serviceName: this.serviceName,\n      instanceId: this.id\n    }, {\n      type: type || 'soft'\n    }).$promise.then(function () {\n      self.status = type === 'hard' ? 'HARD_REBOOT' : 'REBOOT';\n      $rootScope.$broadcast('compute.infrastructure.vm.status-update', self.status, oldStatus, self);\n      return self;\n    });\n  };\n  /**\n     *  [API] Resume a virtual machine.\n     */\n\n\n  VirtualMachineFactory.prototype.resume = function () {\n    return OvhApiCloudProjectInstance.v6().resume({\n      serviceName: this.serviceName,\n      instanceId: this.id\n    }, {}).$promise;\n  };\n  /**\n     *  [API] Create snapshot.\n     */\n\n\n  VirtualMachineFactory.prototype.backup = function (snapshotName) {\n    var self = this;\n    var oldStatus = self.status;\n    return OvhApiCloudProjectInstance.v6().backup({\n      serviceName: this.serviceName,\n      instanceId: this.id\n    }, {\n      snapshotName: snapshotName\n    }).$promise.then(function (result) {\n      self.status = 'SNAPSHOTTING';\n      $rootScope.$broadcast('compute.infrastructure.vm.status-update', self.status, oldStatus, self);\n      return result;\n    });\n  };\n  /*= =========  ---  ========== */\n\n  /**\n     *  Prepare a vm to be JSON stringified by returning only attributes.\n     */\n\n\n  VirtualMachineFactory.prototype.prepareToJson = function () {\n    if (this.status === 'DRAFT') {\n      return {\n        id: this.id,\n        status: this.status,\n        name: this.name,\n        collapsed: this.collapsed,\n        collapsedVolumes: this.collapsedVolumes,\n        flavorId: this.flavorId || (this.flavor ? this.flavor.id : null),\n        imageId: this.imageId || (this.image ? this.image.id : null),\n        region: this.region || null,\n        routedTo: this.routedTo || [],\n        userData: this.userData\n      };\n    }\n\n    return {\n      id: this.id,\n      status: this.status,\n      collapsed: this.collapsed,\n      collapsedVolumes: this.collapsedVolumes\n    };\n  };\n\n  VirtualMachineFactory.prototype.generateMonitoringInference = function () {\n    var self = this;\n\n    if (self.monitoringData && self.monitoringData.raw) {\n      var rawData = this.monitoringData.raw;\n      var maxPeriod; // ----- CPU -----\n\n      if (rawData['cpu:used'] && !_.isEmpty(rawData['cpu:used'].values)) {\n        maxPeriod = _.max(rawData['cpu:used'].values, function (v) {\n          return angular.isNumber(v.value) ? v.value : Number.NEGATIVE_INFINITY;\n        });\n        this.monitoringData.cpu = {\n          now: _.last(rawData['cpu:used'].values),\n          // current CPU usage\n          // does CPU reach alerting threshold over period?\n          needUpgrade: maxPeriod.value >= CLOUD_MONITORING.vm.upgradeAlertThreshold,\n          maxPeriod: maxPeriod // max CPU usage over given period\n\n        };\n      } // ----- RAM -----\n\n\n      if (rawData['mem:used'] && rawData['mem:max'] && !_.isEmpty(rawData['mem:used'].values) && !_.isEmpty(rawData['mem:max'].values)) {\n        var memTotal = _.first(rawData['mem:max'].values);\n\n        maxPeriod = null;\n\n        if (memTotal && memTotal.value > 0) {\n          maxPeriod = _.max(rawData['mem:used'].values, function (v) {\n            return angular.isNumber(v.value) ? v.value : Number.NEGATIVE_INFINITY;\n          });\n        }\n\n        this.monitoringData.mem = {\n          now: _.last(rawData['mem:used'].values),\n          // current RAM usage\n          total: memTotal,\n          // total RAM available\n          // does RAM reach alerting threshold over period ?\n          needUpgrade: maxPeriod.value / memTotal.value * 100.0 >= CLOUD_MONITORING.vm.upgradeAlertThreshold,\n          maxPeriod: maxPeriod,\n          // max RAM usage over given period\n          unit: rawData['mem:used'].unit // RAM units (MB GB ...)\n\n        };\n\n        if (this.monitoringData.mem.now && memTotal) {\n          // current RAM usage in percent\n          this.monitoringData.mem.nowPercent = this.monitoringData.mem.now.value / memTotal.value;\n        }\n      }\n    }\n  };\n  /**\n     *  Get vm monitoring informations\n     */\n\n\n  VirtualMachineFactory.prototype.getMonitoringData = function () {\n    var self = this;\n    var promiseToExecute = [];\n\n    if (!self.monitoringData) {\n      self.monitoringData = {\n        raw: {},\n        cpu: {\n          needUpgrade: false\n        },\n        mem: {\n          needUpgrade: false\n        },\n        loading: true\n      };\n    }\n\n    CLOUD_MONITORING.vm.type.forEach(function (type) {\n      promiseToExecute.push(OvhApiCloudProjectInstance.v6().monitoring({\n        serviceName: self.serviceName,\n        instanceId: self.id,\n        period: CLOUD_MONITORING.vm.period,\n        type: type\n      }).$promise.then(function (data) {\n        self.monitoringData.raw[type] = data;\n        return data;\n      }));\n    });\n    return $q.allSettled(promiseToExecute).finally(function () {\n      self.generateMonitoringInference();\n      self.monitoringData.loading = false;\n    });\n  };\n\n  return VirtualMachineFactory;\n}]);",null]}