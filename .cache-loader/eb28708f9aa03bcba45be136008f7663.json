{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/aliases/link/aliases-link.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/aliases/link/aliases-link.controller.js","mtime":1539717142077},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsAliasesLinkCtrl {\n  constructor($q, $stateParams, $translate, LogsAliasesService, ControllerHelper,\n    LogsStreamsService, LogsIndexService, CloudMessage, ServiceHelper) {\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.serviceName = this.$stateParams.serviceName;\n    this.LogsAliasesService = LogsAliasesService;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsStreamsService = LogsStreamsService;\n    this.LogsIndexService = LogsIndexService;\n    this.CloudMessage = CloudMessage;\n    this.ServiceHelper = ServiceHelper;\n\n    this.initLoaders();\n  }\n\n  /**\n   * load data\n   *\n   * @memberof LogsAliasesLinkCtrl\n   */\n  initLoaders() {\n    this.availableStreams = this.$q.defer();\n    this.attachedStreams = this.$q.defer();\n    this.availableIndices = this.$q.defer();\n    this.attachedIndices = this.$q.defer();\n\n    this.alias = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsAliasesService\n        .getAliasWithStreamsAndIndices(this.serviceName, this.$stateParams.aliasId)\n        .then((alias) => {\n          if (alias.streams.length > 0) {\n            this.selectedContent = this.contents[0].value;\n          } else if (alias.indexes.length > 0) {\n            this.selectedContent = this.contents[1].value;\n          }\n          this.attachedStreams.resolve(alias.streams);\n          this.attachedIndices.resolve(alias.indexes);\n          return alias;\n        }),\n    });\n    this.alias.load();\n\n    this.streams = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsStreamsService.getStreams(this.serviceName),\n    });\n    this.streams.load();\n\n    this.indices = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsIndexService.getIndices(this.serviceName),\n    });\n    this.indices.load();\n\n\n    this.contents = this.LogsAliasesService.getContents();\n    if (this.$stateParams.defaultContent) {\n      this.selectedContent = this.$stateParams.defaultContent;\n    } else {\n      this.selectedContent = this.contents[0].value;\n    }\n\n    this.$q.all([this.alias.promise, this.streams.promise])\n      .then((result) => {\n        const diff = _.filter(\n          result[1],\n          aapiStream => aapiStream.info.isEditable\n            && !_.find(\n              result[0].streams,\n              attachedAapiStream => attachedAapiStream.info.streamId === aapiStream.info.streamId,\n            ),\n        );\n        this.availableStreams.resolve(diff);\n      });\n\n    this.$q.all([this.alias.promise, this.indices.promise])\n      .then((result) => {\n        const diff = _.filter(\n          result[1],\n          aapiIndex => aapiIndex.info.isEditable\n            && !_.find(\n              result[0].indexes,\n              attachedAapiIndex => attachedAapiIndex.info.indexId === aapiIndex.info.indexId,\n            ),\n        );\n        this.availableIndices.resolve(diff);\n      });\n  }\n\n  attachStream(items) {\n    this.CloudMessage.flushChildMessage();\n    this.saveStream = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsAliasesService\n        .attachStream(this.serviceName, this.alias.data.info, items[0].info)\n        .catch(() => {\n          this.CloudMessage.error(this.$translate.instant('logs_aliases_attach_stream_fail', { stream: items[0].info.title }));\n          this.$q.reject();\n        }),\n    });\n    return this.saveStream.load();\n  }\n\n  detachStream(items) {\n    this.CloudMessage.flushChildMessage();\n    this.saveStream = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsAliasesService\n        .detachStream(this.serviceName, this.alias.data.info, items[0].info)\n        .catch(() => {\n          this.CloudMessage.error(this.$translate.instant('logs_aliases_detach_stream_fail', { stream: items[0].info.title }));\n          this.$q.reject();\n        }),\n    });\n    return this.saveStream.load();\n  }\n\n  attachIndex(items) {\n    this.CloudMessage.flushChildMessage();\n    this.saveIndex = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsAliasesService\n        .attachIndex(this.serviceName, this.alias.data.info, items[0].info)\n        .catch(() => {\n          this.CloudMessage.error(this.$translate.instant('logs_aliases_attach_index_fail', { index: items[0].info.name }));\n          this.$q.reject();\n        }),\n    });\n    return this.saveIndex.load();\n  }\n\n  detachIndex(items) {\n    this.CloudMessage.flushChildMessage();\n    this.saveIndex = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsAliasesService\n        .detachIndex(this.serviceName, this.alias.data.info, items[0].info)\n        .catch(() => {\n          this.CloudMessage.error(this.$translate.instant('logs_aliases_detach_index_fail', { index: items[0].info.name }));\n          this.$q.reject();\n        }),\n    });\n    return this.saveIndex.load();\n  }\n\n  isContentDisabled(contentType) {\n    switch (contentType) {\n      case this.LogsAliasesService.contentTypeEnum.STREAMS:\n        return (this.alias.data.indexes && this.alias.data.indexes.length > 0)\n          || (this.saveIndex && this.saveIndex.loading);\n      case this.LogsAliasesService.contentTypeEnum.INDICES:\n        return (this.alias.data.streams && this.alias.data.streams.length > 0)\n          || (this.saveStream && this.saveStream.loading);\n      default:\n        return false;\n    }\n  }\n}\n\nangular.module('managerApp').controller('LogsAliasesLinkCtrl', LogsAliasesLinkCtrl);\n"]}