{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/iplb-cipher.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/iplb-cipher.service.js","mtime":1539717142204},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerCipherService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerCipherService.$inject = [\"$translate\", \"OvhApiIpLoadBalancing\", \"ServiceHelper\"];\n\n  function IpLoadBalancerCipherService($translate, OvhApiIpLoadBalancing, ServiceHelper) {\n    _classCallCheck(this, IpLoadBalancerCipherService);\n\n    this.$translate = $translate;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  _createClass(IpLoadBalancerCipherService, [{\n    key: \"getCipher\",\n    value: function getCipher(serviceName) {\n      var _this = this;\n\n      return this.IpLoadBalancing.v6().get({\n        serviceName: serviceName\n      }).$promise.then(function (response) {\n        return _this.transformCipher(response.sslConfiguration);\n      }).catch(this.ServiceHelper.errorHandler('iplb_modal_cipher_change_loading_error'));\n    }\n  }, {\n    key: \"getCipherTypes\",\n    value: function getCipherTypes() {\n      var _this2 = this;\n\n      return this.IpLoadBalancing.v6().schema().$promise.then(function (response) {\n        var types = response.models['ipLoadbalancing.SslConfigurationEnum'].enum;\n\n        var mappedTypes = _.map(types, function (type) {\n          return _this2.transformCipher(type);\n        });\n\n        return mappedTypes;\n      }).catch(this.ServiceHelper.errorHandler('iplb_modal_cipher_change_loading_error'));\n    }\n  }, {\n    key: \"transformCipher\",\n    value: function transformCipher(cipher) {\n      return {\n        type: cipher,\n        displayName: cipher ? this.$translate.instant(\"iplb_modal_cipher_change_cipher_\".concat(cipher, \"_title\")) : '',\n        description: cipher ? this.$translate.instant(\"iplb_modal_cipher_change_cipher_\".concat(cipher, \"_description\")) : null\n      };\n    }\n  }, {\n    key: \"updateCipher\",\n    value: function updateCipher(serviceName, newCipher) {\n      return this.IpLoadBalancing.v6().put({\n        serviceName: serviceName\n      }, {\n        sslConfiguration: newCipher\n      }).$promise.then(function (response) {\n        return response;\n      }).catch(this.ServiceHelper.errorHandler('iplb_modal_cipher_change_updating_error'));\n    }\n  }]);\n\n  return IpLoadBalancerCipherService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerCipherService', IpLoadBalancerCipherService);",null]}