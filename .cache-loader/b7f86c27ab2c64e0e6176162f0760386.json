{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/nasha.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/nasha.controller.js","mtime":1539717142235},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NashaCtrl =\n/*#__PURE__*/\nfunction () {\n  NashaCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"$translate\", \"CloudMessage\", \"OvhApiDedicatedNasha\", \"ovhDocUrl\", \"REDIRECT_URLS\"];\n\n  function NashaCtrl($q, $state, $stateParams, $translate, CloudMessage, OvhApiDedicatedNasha, ovhDocUrl, REDIRECT_URLS) {\n    _classCallCheck(this, NashaCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.OvhApiDedicatedNasha = OvhApiDedicatedNasha;\n    this.ovhDocUrl = ovhDocUrl;\n    this.REDIRECT_URLS = REDIRECT_URLS;\n    this.loading = false;\n    this.urlRenew = null;\n    this.data = {};\n    this.monitoring = {};\n    this.guides = {};\n    this.messages = [];\n    this.stateName = 'paas.nasha';\n  }\n\n  _createClass(NashaCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.data = {\n        information: null,\n        nasha: null,\n        bars: []\n      };\n      this.monitoring = {\n        enabled: false,\n        loading: false\n      };\n      this.initGuides();\n      this.loadNasha();\n      this.loadMessages();\n    }\n  }, {\n    key: \"loadNasha\",\n    value: function loadNasha() {\n      var _this = this;\n\n      this.loading = true;\n      this.$q.all({\n        nasha: this.OvhApiDedicatedNasha.Aapi().get({\n          serviceName: this.$stateParams.nashaId\n        }).$promise,\n        nashaInfo: this.OvhApiDedicatedNasha.v6().getServiceInfos({\n          serviceName: this.$stateParams.nashaId\n        }).$promise\n      }).then(function (data) {\n        _this.data.nasha = data.nasha;\n\n        _.forEach(_this.data.nasha.use, function (part, key) {\n          _.set(part, 'name', _this.$translate.instant(\"nasha_storage_usage_type_\".concat(key)));\n\n          return part;\n        });\n\n        _this.monitoring.enabled = data.nasha.monitored;\n        _this.data.information = data.nashaInfo;\n        _this.urlRenew = _this.REDIRECT_URLS.renew.replace('{serviceType}', 'DEDICATED_NASHA').replace('{serviceName}', _this.data.nasha.serviceName);\n\n        if (_this.data.information.status === 'expired') {\n          _this.CloudMessage.error(_this.$translate.instant('nasha_expired'));\n        }\n      }).catch(function () {\n        return _this.CloudMessage.error(_this.$translate.instant('nasha_dashboard_loading_error'));\n      }).finally(function () {\n        _this.loading = false;\n      });\n    }\n  }, {\n    key: \"initGuides\",\n    value: function initGuides() {\n      this.guides.title = this.$translate.instant('nasha_guide_title');\n      this.guides.footer = this.$translate.instant('nash_guide_footer');\n      this.guides.list = [];\n      this.guides.list.push({\n        name: this.$translate.instant('nash_guide_name'),\n        url: this.ovhDocUrl.getDocUrl('cloud/storage/nas')\n      });\n    }\n  }, {\n    key: \"updateMonitoringState\",\n    value: function updateMonitoringState(state) {\n      var _this2 = this;\n\n      if (!this.monitoring.loading) {\n        this.monitoring.enabled = state;\n        this.monitoring.loading = true;\n        this.OvhApiDedicatedNasha.v6().updateDetail({\n          serviceName: this.data.nasha.serviceName,\n          customName: this.data.nasha.customName,\n          monitored: state\n        }).$promise.then(function () {\n          _this2.monitoring.loading = false;\n\n          _this2.CloudMessage.success(_this2.$translate.instant(\"nasha_dashboard_update_success_\".concat(state ? 'enabled' : 'disabled')));\n        }).catch(function (error) {\n          _this2.monitoring.loading = false;\n          _this2.monitoring.enabled = !state;\n\n          _this2.CloudMessage.error(\"\".concat(_this2.$translate.instant('nasha_dashboard_update_error'), \" \").concat(error.message));\n        });\n      }\n    }\n  }, {\n    key: \"loadMessages\",\n    value: function loadMessages() {\n      var _this3 = this;\n\n      this.CloudMessage.unSubscribe(this.stateName);\n      this.messageHandler = this.CloudMessage.subscribe(this.stateName, {\n        onMessage: function onMessage() {\n          return _this3.refreshMessage();\n        }\n      });\n    }\n  }, {\n    key: \"refreshMessage\",\n    value: function refreshMessage() {\n      this.messages = this.messageHandler.getMessages();\n    }\n  }]);\n\n  return NashaCtrl;\n}();\n\nangular.module('managerApp').controller('NashaCtrl', NashaCtrl);",null]}