{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/logs-dashboards.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/logs-dashboards.controller.js","mtime":1539717142079},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsDashboardsCtrl {\n  constructor($state, $stateParams, $translate, LogsDashboardsService,\n    ControllerHelper, CloudMessage, LogsConstants, ControllerModalHelper) {\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.$translate = $translate;\n    this.LogsDashboardsService = LogsDashboardsService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsConstants = LogsConstants;\n    this.ControllerModalHelper = ControllerModalHelper;\n\n    this.initLoaders();\n  }\n\n  /**\n   * initializes dashboards and quota object by making API call to get data\n   *\n   * @memberof LogsDashboardsCtrl\n   */\n  initLoaders() {\n    this.quota = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsDashboardsService.getQuota(this.serviceName),\n    });\n    this.dashboards = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsDashboardsService.getDashboards(this.serviceName),\n    });\n    this.quota.load();\n    this.dashboards.load();\n  }\n\n  /**\n   * navigates to add dashboard page\n   *\n   * @memberof LogsDashboardsCtrl\n   */\n  add() {\n    this.$state.go('dbaas.logs.detail.dashboards.add', {\n      serviceName: this.serviceName,\n    });\n  }\n\n  /**\n   * navigates to edit dashboard page\n   *\n   * @param {any} dashboard\n   * @memberof LogsDashboardsCtrl\n   */\n  edit(dashboard) {\n    this.$state.go('dbaas.logs.detail.dashboards.edit', {\n      serviceName: this.serviceName,\n      dashboardId: dashboard.dashboardId,\n    });\n  }\n\n  /**\n   * navigates to duplicate dashboard page\n   *\n   * @param {any} dashboard\n   * @memberof LogsDashboardsCtrl\n   */\n  duplicate(dashboard) {\n    if (this.isBasicOffer(this.quota.data)) {\n      this.showOfferUpgradeInfo();\n    } else {\n      this.$state.go('dbaas.logs.detail.dashboards.duplicate', {\n        serviceName: this.serviceName,\n        dashboardId: dashboard.dashboardId,\n        dashboardName: dashboard.title,\n      });\n    }\n  }\n\n  /**\n   * show delete dashboard confirmation modal\n   *\n   * @param {any} dashboard to delete\n   * @memberof LogsDashboardsCtrl\n   */\n  showDeleteConfirm(dashboard) {\n    this.CloudMessage.flushChildMessage();\n    return this.ControllerHelper.modal.showDeleteModal({\n      titleText: this.$translate.instant('logs_dashboards_delete_title'),\n      textHtml: this.$translate.instant('logs_dashboards_delete_message', { dashboardName: dashboard.title }),\n    }).then(() => this.delete(dashboard));\n  }\n\n  /**\n   * delete dashboard\n   *\n   * @param {any} dashboard to delete\n   * @memberof LogsDashboardsCtrl\n   */\n  delete(dashboard) {\n    this.delete = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsDashboardsService.deleteDashboard(this.serviceName, dashboard)\n        .then(() => this.initLoaders())\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    this.delete.load();\n  }\n\n  /**\n   * extracts graylog web URL from dashboard\n   *\n   * @param {any} dashboard, dashboard for which URL needs to be extracted\n   * @return {string} graylog url\n   * @memberof LogsDashboardsCtrl\n   */\n  getGraylogUrl(aapiDashboard) {\n    return this.LogsDashboardsService.getDashboardGraylogUrl(aapiDashboard);\n  }\n\n  /**\n   * Checks if the user has a basic offer\n   *\n   * @returns true if the user is subscribed to a basic offer\n   * @memberof LogsDashboardsCtrl\n   */\n  isBasicOffer(offerObj) {\n    return offerObj.reference === this.LogsConstants.basicOffer;\n  }\n\n  /**\n   * show a modal dialog asking user to upgrade before creating more dashboards\n   *\n   * @memberof LogsDashboardsCtrl\n   */\n  showOfferUpgradeInfo() {\n    return this.ControllerModalHelper.showInfoModal({\n      titleText: this.$translate.instant('options_upgradequotalink_increase_quota_title'),\n      text: this.$translate.instant('logs_dashboards_basic_offer_info_message'),\n      okButtonText: this.$translate.instant('options_upgradequotalink_increase_quota_upgrade'),\n    })\n      .then(() => this.$state.go('dbaas.logs.detail.offer', { serveiceName: this.serviceName }));\n  }\n}\n\nangular.module('managerApp').controller('LogsDashboardsCtrl', LogsDashboardsCtrl);\n"]}