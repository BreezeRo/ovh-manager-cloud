{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/edit-permissions/edit-permissions.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/edit-permissions/edit-permissions.controller.js","mtime":1539717142140},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsRolesPermissionsCtrl {\n  constructor($q, $stateParams, CloudMessage, ControllerHelper, LogsRolesService) {\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.roleId = this.$stateParams.roleId;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsRolesService = LogsRolesService;\n    this.CloudMessage = CloudMessage;\n    this.initLoaders();\n  }\n\n  initLoaders() {\n    this.availableStreams = this.$q.defer();\n    this.attachedStreams = this.$q.defer();\n    this.availableIndices = this.$q.defer();\n    this.attachedIndices = this.$q.defer();\n    this.availableDashboards = this.$q.defer();\n    this.attachedDashboards = this.$q.defer();\n    this.availableAliases = this.$q.defer();\n    this.attachedAliases = this.$q.defer();\n\n    this.roleDetails = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService.getRoleDetails(this.serviceName, this.roleId)\n        .then((role) => {\n          this.loadAttachedPermissions(role.permissions);\n          this.loadAvailableAliases(role.permissions);\n          this.loadAvailableDashboards(role.permissions);\n          this.loadAvailableIndices(role.permissions);\n          this.loadAvailableStreams(role.permissions);\n          return role;\n        }),\n    });\n    this.roleDetails.load();\n  }\n\n  loadAvailableAliases(permissionList) {\n    this.allAliases = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService.getAllAliases(this.serviceName)\n        .then((result) => {\n          const diff = _.map(_.filter(result, alias => alias.info.isShareable && !_.find(permissionList, permission => permission.aliasId === alias.info.aliasId)), 'info');\n          this.availableAliases.resolve(diff);\n        }),\n    });\n    this.allAliases.load();\n  }\n\n  loadAvailableIndices(permissionList) {\n    this.allIndices = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService.getAllIndices(this.serviceName)\n        .then((result) => {\n          const diff = _.map(_.filter(result, index => index.info.isShareable && !_.find(permissionList, permission => permission.indexId === index.info.indexId)), 'info');\n          this.availableIndices.resolve(diff);\n        }),\n    });\n    this.allIndices.load();\n  }\n\n  loadAvailableDashboards(permissionList) {\n    this.allDashboards = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService.getAllDashboards(this.serviceName)\n        .then((result) => {\n          const diff = _.map(_.filter(result, dashboard => dashboard.info.isShareable && !_.find(permissionList, permission => permission.dashboardId === dashboard.info.dashboardId)), 'info');\n          this.availableDashboards.resolve(diff);\n        }),\n    });\n    this.allDashboards.load();\n  }\n\n  loadAvailableStreams(permissionList) {\n    this.allStreams = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService.getAllStreams(this.serviceName)\n        .then((result) => {\n          const diff = _.map(_.filter(result, stream => stream.info.isShareable && !_.find(permissionList, permission => permission.streamId === stream.info.streamId)), 'info');\n          this.availableStreams.resolve(diff);\n        }),\n    });\n    this.allStreams.load();\n  }\n\n  /**\n   * initializes and loads list of permissions\n   * adding permissionId to the object of index, alias, dashboard and stream so as to use it to\n   * remove permission later\n   * @memberof LogsRolesPermissionsCtrl\n   */\n  loadAttachedPermissions(permissionList) {\n    this.permissions = this.LogsRolesService.getNewPermissions();\n    permissionList.forEach((permission) => {\n      if (permission.index) {\n        _.extend(permission.index, { permissionId: permission.permissionId });\n        this.permissions.index.push(permission.index);\n      }\n      if (permission.alias) {\n        _.extend(permission.alias, { permissionId: permission.permissionId });\n        this.permissions.alias.push(permission.alias);\n      }\n      if (permission.stream) {\n        _.extend(permission.stream, { permissionId: permission.permissionId });\n        this.permissions.stream.push(permission.stream);\n      }\n      if (permission.dashboard) {\n        _.extend(permission.dashboard, { permissionId: permission.permissionId });\n        this.permissions.dashboard.push(permission.dashboard);\n      }\n    });\n    this.attachedIndices.resolve(this.permissions.index);\n    this.attachedAliases.resolve(this.permissions.alias);\n    this.attachedDashboards.resolve(this.permissions.dashboard);\n    this.attachedStreams.resolve(this.permissions.stream);\n  }\n\n  attachAlias(item) {\n    this.CloudMessage.flushChildMessage();\n    this.saveAlias = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService.addAlias(this.serviceName, this.roleId, item[0]),\n      successHandler: () => this.roleDetails.load(),\n      errorHandler: () => this.ControllerHelper.scrollPageToTop(),\n    });\n    return this.saveAlias.load();\n  }\n\n  attachIndex(item) {\n    this.CloudMessage.flushChildMessage();\n    this.saveIndex = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService.addIndex(this.serviceName, this.roleId, item[0]),\n      successHandler: () => this.roleDetails.load(),\n      errorHandler: () => this.ControllerHelper.scrollPageToTop(),\n    });\n    return this.saveIndex.load();\n  }\n\n  attachStream(item) {\n    this.CloudMessage.flushChildMessage();\n    this.saveStream = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService.addStream(this.serviceName, this.roleId, item[0]),\n      successHandler: () => this.roleDetails.load(),\n      errorHandler: () => this.ControllerHelper.scrollPageToTop(),\n    });\n    return this.saveStream.load();\n  }\n\n  attachDashboard(item) {\n    this.CloudMessage.flushChildMessage();\n    this.saveDashboard = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService\n        .addDashboard(this.serviceName, this.roleId, item[0]),\n      successHandler: () => this.roleDetails.load(),\n      errorHandler: () => this.ControllerHelper.scrollPageToTop(),\n    });\n    return this.saveDashboard.load();\n  }\n\n  removePermission(permission) {\n    this.CloudMessage.flushChildMessage();\n    this.deletePermission = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsRolesService\n        .removePermission(this.serviceName, this.roleId, permission),\n      errorHandler: () => this.ControllerHelper.scrollPageToTop(),\n    });\n    return this.deletePermission.load();\n  }\n}\n\nangular.module('managerApp').controller('LogsRolesPermissionsCtrl', LogsRolesPermissionsCtrl);\n"]}