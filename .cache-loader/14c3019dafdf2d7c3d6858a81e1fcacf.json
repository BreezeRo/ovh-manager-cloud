{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/import/vps.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/import/vps.service.js","mtime":1539717374626},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').service('VpsService', ['$http', '$q', '$timeout', '$cacheFactory', '$rootScope', 'additionalDisk.capacities', 'additionalDisk.hasNoOption', 'VpsTaskService', 'ServiceHelper', '$translate', function VpsService($http, $q, $timeout, cache, $rootScope, additionalDiskCapacities, additionalDiskHasNoOption, VpsTaskService, ServiceHelper, $translate) {\n  var _this2 = this;\n\n  var aapiRootPath = '/sws/vps';\n  var swsVpsProxypass = '/vps';\n  var swsOrderProxypass = '/order/vps';\n  var swsPriceProxypass = '/price/vps';\n  var vpsCache = cache('UNIVERS_WEB_VPS');\n  var vpsInfoCache = cache('VPS_INFO_CACHE');\n  var vpsTabVeeamCache = cache('UNIVERS_WEB_VPS_TABS_VEEAM');\n  var vpsTabBackupStorageCache = cache('UNIVERS_WEB_VPS_TABS_BACKUP_STORAGE');\n  var requests = {\n    vpsDetails: null\n  };\n  var self = this;\n  this.events = {\n    tabVeeamChanged: 'vps.tabs.veeam.changed'\n  };\n\n  this.getTaskInProgress = function (serviceName, type) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        return $http.get([aapiRootPath, vps.name, 'tasks/uncompleted'].join('/'), {\n          serviceType: 'aapi',\n          params: {\n            type: type\n          }\n        }).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      return result;\n    }, function (http) {\n      return $q.reject(http.data);\n    });\n  };\n\n  this.getTaskInError = function (serviceName) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        return $http.get([aapiRootPath, vps.name, 'tasks/error'].join('/'), {\n          serviceType: 'aapi'\n        }).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      return result;\n    }, function (http) {\n      return $q.reject(http.data);\n    });\n  };\n\n  function resetTabVeeam() {\n    vpsTabVeeamCache.removeAll();\n    $rootScope.$broadcast(self.events.tabVeeamChanged);\n  }\n  /*\n   * Private function to reset the cache\n   *\n   */\n\n\n  function resetCache(key) {\n    if (key !== undefined) {\n      if (requests[key] !== undefined) {\n        requests[key] = null;\n      }\n\n      vpsCache.remove(key);\n    } else {\n      vpsCache.removeAll();\n      vpsInfoCache.removeAll();\n      /* eslint-disable no-restricted-syntax, no-prototype-builtins */\n\n      for (var request in requests) {\n        if (requests.hasOwnProperty(request)) {\n          requests[request] = null;\n        }\n      }\n      /* eslint-enable no-restricted-syntax, no-prototype-builtins */\n\n    }\n  }\n  /*\n   * same as getSelected without using Products (it causes problem when changing vps\n   * using sidebar)\n   */\n\n\n  this.getSelectedVps = function (serviceName) {\n    return $http.get([aapiRootPath, serviceName, 'info'].join('/'), {\n      serviceType: 'aapi',\n      cache: vpsInfoCache\n    }).then(function (result) {\n      _.set(result, 'data.secondaryDns', result.data.secondaryDns === 0 ? $translate.instant('vps_dashboard_secondary_dns_count_0') : $translate.instant('vps_dashboard_secondary_dns_count_x', {\n        count: result.data.secondaryDns\n      }));\n\n      return result.data;\n    }).catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n  };\n  /*\n       * Get monitoring data\n       */\n\n\n  this.getMonitoring = function (serviceName, period) {\n    var monitoring = null;\n    var p = period != null ? period : 'lastday';\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        return $http.get([aapiRootPath, vps.name, 'monitoring'].join('/'), {\n          serviceType: 'aapi',\n          params: {\n            period: p\n          }\n        }).then(function (data) {\n          if (data) {\n            monitoring = data.data;\n          } else {\n            $q.reject(\"\".concat(aapiRootPath + vps.name, \"/monitoring?period=\").concat(p, \" : No data\"));\n          }\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      if (monitoring !== null) {\n        return monitoring;\n      }\n\n      return null;\n    }).catch(ServiceHelper.errorHandler('vps_configuration_monitoring_fail'));\n  };\n  /*\n       * reset VPS password\n       */\n\n\n  this.resetPassword = function (serviceName) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        return $http.post([swsVpsProxypass, vps.name, 'setPassword'].join('/')).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n      return result;\n    }, function (http) {\n      return $q.reject(http.data);\n    });\n  };\n  /*\n       * Reboot the VPS\n       */\n\n\n  this.reboot = function (serviceName, rescueMode) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        var netbootMode = rescueMode ? 'rescue' : 'local';\n\n        if (vps.netbootMode === netbootMode.toUpperCase()) {\n          return $http.post([swsVpsProxypass, vps.name, 'reboot'].join('/')).then(function (data) {\n            result = data.data;\n          });\n        } // The modification of netbootMode for a vps other than CLOUD 2014v1 model will make\n        // the VPS reboot. So ask an explicit reboot only if the VPS is a CLOUD 2014v1\n\n\n        if (vps.offerType === 'CLOUD' && vps.version === '_2014_V_1') {\n          // Sleep for 40 seconds because the netboot change take some seconds to apply.\n          // It's not a good solution, it's like that since the begin\n          return $http.put([swsVpsProxypass, vps.name].join('/'), {\n            netbootMode: netbootMode\n          }).then(function () {\n            return $timeout(function () {\n              return $http.post([swsVpsProxypass, vps.name, 'reboot'].join('/')).then(function (data) {\n                result = data.data;\n              });\n            }, 40000);\n          });\n        }\n\n        return $http.put([swsVpsProxypass, vps.name].join('/'), {\n          netbootMode: netbootMode\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache();\n      VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n      return result;\n    }, function (http) {\n      return $q.reject(http.data);\n    });\n  };\n  /*\n       * Get a KVM access for the VPS\n       */\n\n\n  this.getKVMAccess = function (serviceName) {\n    return $http.post([swsVpsProxypass, serviceName, 'openConsoleAccess'].join('/'), {\n      protocol: 'VNCOverWebSocket'\n    }).then(function (data) {\n      return data.data;\n    }).catch(ServiceHelper.errorHandler());\n  };\n\n  this.getKVMConsoleUrl = function (serviceName) {\n    var result = null;\n    return $http.post([swsVpsProxypass, serviceName, 'getConsoleUrl'].join('/')).then(function (response) {\n      result = response.data;\n    }, function (err) {\n      return $q.reject(err.data);\n    }).then(function () {\n      resetCache();\n      $rootScope.$broadcast('vps.dashboard.refresh');\n      return result;\n    }, function (http) {\n      return $q.reject(http.data);\n    });\n  };\n  /*\n       * return the templates list available for this VPS\n       */\n\n\n  this.getTemplates = function (serviceName) {\n    return $http.get([aapiRootPath, serviceName, 'templates'].join('/'), {\n      serviceType: 'aapi'\n    }).then(function (response) {\n      return response.data;\n    }).catch(ServiceHelper.errorHandler('vps_configuration_polling_fail'));\n  };\n  /*\n       * Reinstall the VPS using the template identified by templateId\n       */\n\n\n  this.reinstall = function (serviceName, templateId, language, softIds, sshKeys, doNotSendPassword) {\n    var _this = this;\n\n    if (!templateId) {\n      return $q.reject('No templateId');\n    }\n\n    return $http.post([swsVpsProxypass, serviceName, 'reinstall'].join('/'), {\n      language: language,\n      softwareId: softIds,\n      sshKey: sshKeys,\n      doNotSendPassword: Boolean(doNotSendPassword),\n      templateId: templateId\n    }).then(function (response) {\n      resetCache();\n      VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n      return response.data;\n    }).catch(ServiceHelper.errorHandler('vps_configuration_reinstall_fail')).finally(function () {\n      return _this.CloudMessage.success(_this.$translate.instant('vps_configuration_reinstall_success', {\n        serviceName: _this.serviceName\n      }));\n    });\n  };\n  /*\n       * return the ip list for this VPS\n       */\n\n\n  this.getIps = function (serviceName) {\n    return $http.get([aapiRootPath, serviceName, 'ips'].join('/'), {\n      serviceType: 'aapi'\n    }).then(function (data) {\n      return data.data;\n    }).catch(ServiceHelper.errorHandler());\n  };\n  /*\n       * Reinstall the VPS using the template identified by templateId\n       */\n\n\n  this.setReversesDns = function (serviceName, ips) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (!ips) {\n        return $q.reject('No ips');\n      }\n\n      if (vps && vps.name) {\n        return $http.post([aapiRootPath, vps.name, 'ips', 'reverse'].join('/'), ips, {\n          serviceType: 'aapi'\n        }).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache();\n      $rootScope.$broadcast('vps.dashboard.refresh');\n      return result;\n    }, function (http) {\n      return $q.reject(http.data);\n    });\n  };\n  /*\n       * Get content of summary tabs\n       */\n\n\n  this.getTabSummary = function (serviceName, forceRefresh) {\n    var vpsName = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name && !vps.isExpired) {\n        vpsName = vps.name;\n\n        if (forceRefresh) {\n          resetCache(\"tabSummary_\".concat(vpsName));\n        }\n\n        var tabSummary = vpsCache.get(\"tabSummary_\".concat(vpsName));\n\n        if (!tabSummary) {\n          vpsCache.put(\"tabSummary_\".concat(vps.name), true);\n          return $http.get([aapiRootPath, vps.name, 'tabsummary'].join('/'), {\n            serviceType: 'aapi'\n          }).then(function (response) {\n            if (response.status < 300) {\n              vpsCache.put(\"tabSummary_\".concat(vpsName), response.data);\n              return vpsCache.get(\"tabSummary_\".concat(vpsName));\n            }\n\n            return $q.reject(response);\n          });\n        }\n\n        return tabSummary;\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      var result = vpsCache.get(\"tabSummary_\".concat(vpsName));\n\n      if (result && (!result.messages || angular.isArray(result.messages) && result.messages.length === 0)) {\n        return result;\n      }\n\n      if (result && result.messages.length !== 0) {\n        return $q.reject(result.messages);\n      }\n\n      return $q.reject(result);\n    }).catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n  };\n  /*\n       * Get content of ips tabs\n       */\n\n\n  this.getTabIps = function (serviceName) {\n    var vpsName = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        vpsName = vps.name;\n        var tabSummary = vpsCache.get(\"tabIps_\".concat(vpsName));\n\n        if (!tabSummary) {\n          vpsCache.put(\"tabIps_\".concat(vps.name), true);\n          return $http.get([aapiRootPath, vps.name, 'tabips'].join('/'), {\n            serviceType: 'aapi'\n          }).then(function (response) {\n            if (response.status < 300) {\n              vpsCache.put(\"tabIps_\".concat(vpsName), response.data);\n              return vpsCache.get(\"tabIps_\".concat(vpsName));\n            }\n\n            return $q.reject(response);\n          });\n        }\n\n        return tabSummary;\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      var result = vpsCache.get(\"tabIps_\".concat(vpsName));\n\n      if (result && (!result.messages || angular.isArray(result.messages) && result.messages.length === 0)) {\n        return result;\n      }\n\n      if (result && result.messages.length !== 0) {\n        return $q.reject(result.messages);\n      }\n\n      return $q.reject(result);\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * Get content of secondary DNS tab\n       */\n\n\n  this.getTabSecondaryDns = function (serviceName, count, offset) {\n    var vpsName = null;\n    var offsetFinal = offset;\n    var countFinal = count;\n    var cacheKey = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        vpsName = vps.name;\n\n        if (!count) {\n          countFinal = 0;\n        }\n\n        if (!offset) {\n          offsetFinal = 0;\n        }\n\n        cacheKey = \"tabSecondaryDNS_\".concat(vpsName, \"_count=\").concat(countFinal, \"_offset=\").concat(offsetFinal);\n        var tabSummary = vpsCache.get(cacheKey);\n\n        if (!tabSummary) {\n          vpsCache.put(cacheKey, true);\n          return $http.get([aapiRootPath, vps.name, 'tabsecondarydns'].join('/'), {\n            serviceType: 'aapi'\n          }).then(function (response) {\n            if (response.status < 300) {\n              vpsCache.put(cacheKey, response.data);\n              return vpsCache.get(cacheKey);\n            }\n\n            return $q.reject(response);\n          });\n        }\n\n        return tabSummary;\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      var result = vpsCache.get(cacheKey);\n\n      if (result && (!result.messages || angular.isArray(result.messages) && result.messages.length === 0)) {\n        return result;\n      }\n\n      if (result && result.messages.length !== 0) {\n        return $q.reject(result.messages);\n      }\n\n      return $q.reject(result);\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * Get the secondary DNS available for this VPS\n       */\n\n\n  this.getSecondaryDNSAvailable = function (serviceName) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        var tabSummary = vpsCache.get('tabSecondaryDNS_dns_available');\n\n        if (!tabSummary) {\n          vpsCache.put('tabSecondaryDNS_dns_available', true);\n          return $http.get([swsVpsProxypass, vps.name, 'secondaryDnsNameServerAvailable'].join('/')).then(function (response) {\n            if (response.status < 300) {\n              vpsCache.put('tabSecondaryDNS_dns_available', response.data);\n              return vpsCache.get('tabSecondaryDNS_dns_available');\n            }\n\n            return $q.reject(response);\n          });\n        }\n\n        return tabSummary;\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      var result = vpsCache.get('tabSecondaryDNS_dns_available');\n\n      if (result && (!result.messages || angular.isArray(result.messages) && result.messages.length === 0)) {\n        return result;\n      }\n\n      if (result && result.messages.length !== 0) {\n        return $q.reject(result.messages);\n      }\n\n      return $q.reject(result);\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * Add a domain to the secondary DNS for the VPS\n       *\n       */\n\n\n  this.addSecondaryDnsDomain = function (serviceName, domain) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        return $http.post([swsVpsProxypass, vps.name, 'secondaryDnsDomains'].join('/'), {\n          domain: domain\n        }).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache();\n      $rootScope.$broadcast('vps.tabs.secondarydns.refresh');\n      $rootScope.$broadcast('vps.dashboard.vpsonly.refresh');\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * delete the domain from secondary DNS\n       */\n\n\n  this.deleteSecondaryDnsDomain = function (serviceName, domain) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name && domain) {\n        return $http.delete([swsVpsProxypass, vps.name, 'secondaryDnsDomains', domain].join('/')).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache();\n      $rootScope.$broadcast('vps.tabs.secondarydns.refresh');\n      $rootScope.$broadcast('vps.dashboard.vpsonly.refresh');\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * create a snapshot for the VPS\n       */\n\n\n  this.takeSnapshot = function (serviceName, description) {\n    var result = null;\n    var vpsName = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        vpsName = vps.name;\n        return $http.post([swsVpsProxypass, vps.name, 'createSnapshot'].join('/'), description).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache(\"tabSummary_\".concat(vpsName));\n      VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * restore a snapshot for the VPS\n       */\n\n\n  this.restoreSnapshot = function (serviceName) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        return $http.post([swsVpsProxypass, vps.name, 'snapshot/revert'].join('/')).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache();\n      VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * delete the snapshot for the VPS\n       */\n\n\n  this.deleteSnapshot = function (serviceName) {\n    var result = null;\n    var vpsName = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        vpsName = vps.name;\n        return $http.delete([swsVpsProxypass, vps.name, 'snapshot'].join('/')).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache(\"tabSummary_\".concat(vpsName));\n      VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * order an option for the VPS\n       */\n\n\n  this.orderOption = function (serviceName, option, duration) {\n    var result = null;\n    var vpsName = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name && option && duration) {\n        vpsName = vps.name;\n        return $http.post([aapiRootPath, vps.name, 'order', 'options'].join('/'), {\n          option: option,\n          duration: duration\n        }, {\n          serviceType: 'aapi'\n        }).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache(\"tabSummary_\".concat(vpsName));\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * get details for an option for the VPS\n       */\n\n\n  this.getOptionDetails = function (serviceName, option) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name && option) {\n        return $http.get([aapiRootPath, vps.name, 'options', option].join('/'), {\n          serviceType: 'aapi'\n        }).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n\n  this.getOptionSnapshotFormated = function (serviceName) {\n    return this.getOptionDetails(serviceName, 'snapshot').then(function (optionDetails) {\n      return _.first(optionDetails.results);\n    });\n  };\n\n  this.getPriceOptions = function (vps) {\n    return $http.get(['/price/vps', vps.version.toLowerCase().replace(/_/g, ''), vps.offerType.toLowerCase(), 'option/automatedBackup'].join('/'));\n  };\n\n  this.cancelOption = function (serviceName, option) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.delete([swsVpsProxypass, vps.name, 'option', option].join('/')).catch(function (err) {\n        return err && err.data ? $q.reject(err.data) : $q.reject(err);\n      });\n    });\n  };\n\n  this.getOptionStatus = function (serviceName, option) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.get([swsVpsProxypass, vps.name, 'option', option].join('/')).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n  /*\n       * upgrade the VPS tothe specified model\n       */\n\n\n  this.upgrade = function (serviceName, model, duration) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name && model && duration) {\n        return $http.post([swsOrderProxypass, vps.name, 'upgrade', duration].join('/'), {\n          model: model\n        }).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      resetCache();\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * get details for an option for the VPS\n       */\n\n\n  this.upgradesList = function (serviceName) {\n    var result = null;\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      if (vps && vps.name) {\n        return $http.get([aapiRootPath, vps.name, 'upgrade'].join('/'), {\n          serviceType: 'aapi'\n        }).then(function (data) {\n          result = data.data;\n        });\n      }\n\n      return $q.reject(vps);\n    }).then(function () {\n      return result;\n    }, function (reason) {\n      if (reason && reason.data !== undefined) {\n        return $q.reject(reason.data);\n      }\n\n      return $q.reject(reason);\n    });\n  };\n  /*\n       * Get content of veeam tab\n       */\n\n\n  this.getVeeamInfo = function (serviceName) {\n    return $http.get([swsVpsProxypass, serviceName, 'automatedBackup'].join('/')).then(function (response) {\n      return response.data;\n    });\n  };\n\n  this.getVeeamAttachedBackup = function (serviceName) {\n    return $http.get([swsVpsProxypass, serviceName, 'automatedBackup/attachedBackup'].join('/')).then(function (response) {\n      return response.data;\n    });\n  };\n\n  this.getVeeam = function (serviceName) {\n    var info;\n    return $q.all([self.getVeeamInfo(serviceName), self.getVeeamAttachedBackup(serviceName)]).then(function (response) {\n      if (response.length > 1) {\n        info = _.first(response);\n        info.accessInfos = _.first(response[1]);\n      }\n\n      return info;\n    }).catch(function () {\n      return {\n        state: 'disabled'\n      };\n    });\n  };\n\n  this.getTabVeeam = function (serviceName, state, forceRefresh) {\n    if (forceRefresh) {\n      resetTabVeeam();\n    }\n\n    return $http.get([swsVpsProxypass, serviceName, 'automatedBackup/restorePoints'].join('/'), {\n      params: {\n        state: state\n      },\n      cache: vpsTabVeeamCache\n    }).then(function (response) {\n      return response.data;\n    });\n  };\n\n  this.veeamRestorePointMount = function (serviceName, restorePoint) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.post([swsVpsProxypass, vps.name, 'automatedBackup/restore'].join('/'), {\n        changePassword: false,\n        restorePoint: restorePoint,\n        type: 'file'\n      }).then(function (response) {\n        resetTabVeeam();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return response.data;\n      });\n    });\n  };\n\n  this.veeamRestorePointRestore = function (serviceName, restorePoint, changePassword) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.post([swsVpsProxypass, vps.name, 'automatedBackup/restore'].join('/'), {\n        changePassword: changePassword,\n        restorePoint: restorePoint,\n        type: 'full'\n      }).then(function (response) {\n        resetTabVeeam();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return response.data;\n      });\n    });\n  };\n\n  this.veeamRestorePointUmount = function (serviceName, restorePoint) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.post([swsVpsProxypass, vps.name, 'automatedBackup/detachBackup'].join('/'), {\n        restorePoint: restorePoint\n      }).then(function (response) {\n        resetTabVeeam();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return response.data;\n      });\n    });\n  };\n  /**\n       * Get option veeam\n       */\n\n\n  this.getVeeamOption = function (serviceName) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.get([aapiRootPath, vps.name, 'automatedBackup'].join('/'), {\n        serviceType: 'aapi',\n        cache: vpsCache\n      }).then(function (response) {\n        return response.data;\n      }).catch(function (error) {\n        return error.data;\n      });\n    });\n  };\n  /**\n       * Order the option veeam\n       */\n\n\n  this.orderVeeamOption = function (serviceName, duration) {\n    return _this2.getSelectedVps(serviceName).then(function (vps) {\n      return $http.post([swsOrderProxypass, vps.name, 'automatedBackup', duration].join('/'), {});\n    }).then(function (response) {\n      return response.data;\n    });\n  };\n  /**\n       * Update the VPS\n       */\n\n\n  this.update = function (serviceName, newValue) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.put([swsVpsProxypass, vps.name].join('/'), newValue).then(function (response) {\n        resetCache();\n        VpsTaskService.initPoller(serviceName, 'iaas.vps.detail');\n        return response.data;\n      });\n    });\n  };\n  /**\n       * Update the VPS display name\n       */\n\n\n  this.updateDisplayName = function (serviceName, displayName) {\n    return $http.put([swsVpsProxypass, serviceName].join('/'), {\n      displayName: displayName\n    }).then(function (response) {\n      resetCache();\n      $rootScope.$broadcast('global_display_name_change', {\n        serviceName: serviceName,\n        displayName: displayName\n      });\n      return response.data;\n    });\n  }; // BackupStorage\n\n\n  this.getBackupStorageInformation = function (serviceName) {\n    return $http.get([aapiRootPath, serviceName, 'backupStorage'].join('/'), {\n      serviceType: 'aapi'\n    }).then(function (response) {\n      var backupInfo = response.data;\n\n      if (backupInfo.activated === true && backupInfo.quota) {\n        if (backupInfo.usage === 0) {\n          backupInfo.usage = {\n            unit: '%',\n            value: 0\n          };\n        }\n      }\n\n      return backupInfo;\n    }).catch(ServiceHelper.errorHandler());\n  };\n\n  this.getBackupStorageTab = function (serviceName, count, offset) {\n    vpsTabBackupStorageCache.removeAll();\n    return $http.get([aapiRootPath, serviceName, 'backupStorage/access'].join('/'), {\n      serviceType: 'aapi',\n      cache: vpsTabBackupStorageCache,\n      params: {\n        count: count,\n        offset: offset\n      }\n    }).then(function (response) {\n      return response.data;\n    });\n  };\n\n  this.getBackupStorageAuthorizableBlocks = function (serviceName) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.get([aapiRootPath, vps.name, 'backupStorage/access/authorizableBlocks'].join('/'), {\n        serviceType: 'aapi'\n      }).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.postBackupStorageAccess = function (serviceName, ipBlocksList, ftp, nfs, cifs) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.post([aapiRootPath, vps.name, 'backupStorage/access/add'].join('/'), {\n        ipBlocksList: ipBlocksList,\n        ftp: ftp,\n        nfs: nfs,\n        cifs: cifs\n      }, {\n        serviceType: 'aapi'\n      }).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.putBackupStorageAccess = function (serviceName, ipBlock, ftp, nfs, cifs) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.put([swsVpsProxypass, vps.name, 'backupftp', 'access', encodeURIComponent(ipBlock)].join('/'), {\n        ftp: ftp,\n        nfs: nfs,\n        cifs: cifs\n      }).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.deleteBackupStorageAccess = function (serviceName, ipBlock) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.delete([swsVpsProxypass, vps.name, 'backupftp', 'access', encodeURIComponent(ipBlock)].join('/')).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.requestFtpBackupPassword = function (serviceName) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.post([swsVpsProxypass, vps.name, 'backupftp/password'].join('/')).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.getWindowsOptionDurations = function (serviceName) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.get([swsOrderProxypass, vps.name, 'windows'].join('/')).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.getWindowsOptionOrder = function (serviceName, duration) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.get([swsOrderProxypass, vps.name, 'windows', duration].join('/')).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.postWindowsOptionOrder = function (serviceName, duration) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.post([swsOrderProxypass, vps.name, 'windows', duration].join('/')).then(function (response) {\n        return response.data;\n      });\n    });\n  }; // Additional disks\n\n\n  this.hasAdditionalDiskOption = function (serviceName) {\n    return _this2.getSelectedVps(serviceName).then(function (vps) {\n      if (!_.include(vps.availableOptions, 'ADDITIONAL_DISK')) {\n        return $q.reject(additionalDiskHasNoOption);\n      }\n\n      return _this2.canOrderOption(serviceName, 'additionalDisk');\n    });\n  };\n\n  this.canOrderOption = function (serviceName, optionName) {\n    return $http.get([swsOrderProxypass, serviceName].join('/')).then(function (response) {\n      if (_.include(response.data, optionName)) {\n        return response.data;\n      }\n\n      return $q.reject(additionalDiskHasNoOption);\n    });\n  };\n\n  this.getAdditionalDiskPrices = function getAdditionalDiskPrices(serviceName) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $q.all([$http.get([swsPriceProxypass, '2015v1', vps.offerType.toLowerCase(), 'option', additionalDiskCapacities[0].option].join('/')), $http.get([swsPriceProxypass, '2015v1', vps.offerType.toLowerCase(), 'option', additionalDiskCapacities[1].option].join('/')), $http.get([swsPriceProxypass, '2015v1', vps.offerType.toLowerCase(), 'option', additionalDiskCapacities[2].option].join('/')), $http.get([swsPriceProxypass, '2015v1', vps.offerType.toLowerCase(), 'option', additionalDiskCapacities[3].option].join('/'))]).then(function (responses) {\n        var prices = [];\n        var i = 0;\n        angular.forEach(responses, function (capacity) {\n          _.set(capacity, 'data.type', additionalDiskCapacities[i].option);\n\n          _.set(capacity, 'data.size', additionalDiskCapacities[i].size);\n\n          i += 1;\n          prices.push(capacity.data);\n        });\n        return prices;\n      });\n    });\n  };\n\n  this.getAllowedDuration = function (serviceName, capacity) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      var url = [swsOrderProxypass, vps.name, 'additionalDisk'].join('/');\n      return $http.get(url, {\n        params: {\n          additionalDiskSize: capacity\n        }\n      }).then(function (duration) {\n        return duration.data[0];\n      });\n    });\n  };\n\n  this.getAdditionalDiskFinalPrice = function (serviceName, capacity, duration) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      var url = [swsOrderProxypass, vps.name, 'additionalDisk', duration].join('/');\n      return $http.get(url, {\n        params: {\n          additionalDiskSize: capacity\n        }\n      }).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.postAdditionalDiskOrder = function (serviceName, capacity, duration) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      var url = [swsOrderProxypass, vps.name, 'additionalDisk', duration].join('/');\n      return $http.post(url, {\n        additionalDiskSize: capacity\n      }).then(function (response) {\n        return response.data;\n      });\n    });\n  };\n\n  this.getDisks = function (serviceName) {\n    return $http.get([swsVpsProxypass, serviceName, 'disks'].join('/')).then(function (response) {\n      return response.data;\n    }).catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n  };\n\n  this.getDiskInfo = function (serviceName, id) {\n    return $http.get([swsVpsProxypass, serviceName, 'disks', id].join('/')).then(function (response) {\n      return response.data;\n    }).catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n  };\n\n  this.showOnlyAdditionalDisk = function (disks) {\n    _.remove(disks, function (currentObject) {\n      return currentObject.type === 'primary';\n    });\n\n    return disks;\n  }; // Service info\n\n\n  this.getServiceInfos = function (serviceName) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return $http.get([swsVpsProxypass, serviceName, 'serviceInfos'].join('/')).then(function (response) {\n        response.data.offer = vps.model;\n        return response.data;\n      }).catch(ServiceHelper.errorHandler('vps_dashboard_loading_error'));\n    });\n  };\n\n  this.isAutoRenewable = function (serviceName) {\n    return this.getSelectedVps(serviceName).then(function (vps) {\n      return moment(vps.expiration).diff(moment().date(), 'days') > 0;\n    });\n  };\n}]);",null]}