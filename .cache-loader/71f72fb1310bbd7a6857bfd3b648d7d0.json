{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/volumes/volumes.factory.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/volumes/volumes.factory.js","mtime":1539717142392},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').factory('CloudProjectComputeVolumesFactory', [\"CloudProjectComputeVolumesVolumeFactory\", function (CloudProjectComputeVolumesVolumeFactory) {\n  /**\n   *  Defines a cloud project compute infrastructure\n   *\n   *  @param    {Object}  optionsParam\n   *                      Options for creating a new CloudProjectInfrastructure\n   *  @param    {Object}  optionsParam.volumes\n   *                      List of Volumes with its options\n   */\n  var VolumesFactory = function () {\n    return function CloudProjectComputeVolumesFactory(optionsParam) {\n      var options = optionsParam;\n      var self = this;\n\n      if (!options) {\n        options = {};\n      }\n\n      this.serviceName = options.serviceName || null;\n      this.volumes = {};\n\n      if (options.volumes && options.volumes.length) {\n        angular.forEach(options.volumes, function (volume, targetId) {\n          self.addVolumeToList(volume, targetId);\n        });\n      }\n    };\n  }(); // /////////////////////////////\n  // /         METHODS          //\n  // /////////////////////////////\n\n  /**\n   *  Check if item is already an instance or an options object\n   */\n\n\n  function checkVolume(volume) {\n    return volume instanceof CloudProjectComputeVolumesVolumeFactory ? volume : new CloudProjectComputeVolumesVolumeFactory(volume);\n  }\n  /**\n   *  Get volume by volume ID.\n   */\n\n\n  VolumesFactory.prototype.getVolumeById = function (volumeId) {\n    var vol;\n    angular.forEach(this.volumes, function (volume) {\n      if (!vol) {\n        vol = _.find(volume, {\n          id: volumeId\n        });\n      }\n    });\n    return vol;\n  };\n  /**\n   *  Add a volume into list\n   */\n\n\n  VolumesFactory.prototype.addVolumeToList = function (volume, targetIdParam) {\n    var targetId = targetIdParam;\n    targetId = targetId || 'unlinked';\n\n    _.set(volume, 'serviceName', this.serviceName); // Add projectId to item\n\n\n    volume = checkVolume(volume); // eslint-disable-line\n\n    volume.setInfos({\n      attachedTo: [targetId]\n    });\n\n    if (!this.volumes[targetId]) {\n      this.volumes[targetId] = [];\n    }\n\n    this.volumes[targetId].push(volume);\n    return volume;\n  };\n  /**\n   *  Remove given volume from list\n   */\n\n\n  VolumesFactory.prototype.removeVolumeFromList = function (volume, targetIdParam) {\n    var targetId = targetIdParam;\n    targetId = targetId || 'unlinked';\n\n    _.remove(this.volumes[targetId], {\n      id: volume.id\n    });\n\n    return volume;\n  }; // ---\n\n  /**\n   *  Prepare object to json encode function to avoid function being encoded\n   */\n\n\n  VolumesFactory.prototype.prepareToJson = function () {\n    var preparedToJson = {};\n    angular.forEach(this.volumes, function (volumes, targetId) {\n      preparedToJson[targetId] = _.map(volumes, function (volume) {\n        return volume.prepareToJson();\n      });\n    });\n    return {\n      volumes: preparedToJson\n    };\n  };\n\n  return VolumesFactory;\n}]);",null]}