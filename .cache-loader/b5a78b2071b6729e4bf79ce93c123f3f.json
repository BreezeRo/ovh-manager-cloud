{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vrack/move-dialog/vrack-move-dialog.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vrack/move-dialog/vrack-move-dialog.controller.js","mtime":1539717142311},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('VrackMoveDialogCtrl', [\"$scope\", \"$q\", \"$translate\", \"$uibModalInstance\", \"Toast\", \"OvhApiVrack\", \"OvhApiVrackDedicatedCloudDatacenter\", function VrackMoveDialogCtrl($scope, $q, $translate, $uibModalInstance, Toast, OvhApiVrack, OvhApiVrackDedicatedCloudDatacenter) {\n  var self = this;\n  self.form = null;\n  self.service = $scope.$resolve.service;\n  self.models = {\n    vrack: null\n  };\n  self.collections = {\n    allowedVracks: [],\n    vracks: []\n  };\n  self.loaders = {\n    allowedVrack: false,\n    vrack: false,\n    move: false\n  };\n\n  function init() {\n    self.fetchAllowedVracks();\n  }\n\n  self.fetchAllowedVracks = function () {\n    if (self.loaders.allowedVrack) {\n      return $q.when();\n    }\n\n    self.loaders.allowedVrack = true;\n    return OvhApiVrackDedicatedCloudDatacenter.v6().allowedVrack({\n      serviceName: self.service.vrack,\n      datacenter: self.service.id\n    }).$promise.then(function (allowedVracks) {\n      if (!allowedVracks.length) {\n        return $q.when();\n      }\n\n      self.collections.allowedVracks = allowedVracks;\n      return self.fetchVracks();\n    }).catch(function () {\n      self.collections.allowedVracks = [];\n    }).finally(function () {\n      self.loaders.allowedVrack = false;\n    });\n  };\n\n  self.fetchVracks = function () {\n    if (self.loaders.vracks) {\n      return;\n    }\n\n    self.loaders.vracks = true;\n    OvhApiVrack.Aapi().query().$promise.then(function (vracks) {\n      self.collections.vracks = vracks;\n    }).catch(function () {\n      self.collections.vracks = [];\n    }).finally(function () {\n      self.loaders.vracks = false;\n    });\n  };\n\n  self.getDisplayName = function (vrackId) {\n    var vrack = _.find(self.getVracks(), {\n      id: vrackId\n    });\n\n    if (vrack && !_.isEmpty(vrack.name)) {\n      return vrack.name;\n    }\n\n    return vrackId;\n  };\n\n  self.dismiss = function () {\n    $uibModalInstance.dismiss();\n  };\n\n  self.getAllowedVracks = function () {\n    return self.collections.allowedVracks;\n  };\n\n  self.getVracks = function () {\n    return self.collections.vracks;\n  };\n\n  self.submit = function () {\n    if (!self.form.$valid || self.loaders.move) {\n      return $q.when();\n    }\n\n    self.loaders.move = true;\n    return OvhApiVrackDedicatedCloudDatacenter.v6().move({\n      serviceName: self.service.vrack,\n      datacenter: self.service.id\n    }, {\n      targetServiceName: self.models.vrack\n    }).$promise.then(function (task) {\n      $scope.$emit('vrack:refresh-data');\n      $uibModalInstance.close({\n        task: task\n      });\n    }).catch(function () {\n      Toast.error($translate.instant('vrack_move_dialog_request_error'));\n    }).finally(function () {\n      self.loaders.move = false;\n    });\n  };\n\n  self.hasPendingRequests = function () {\n    return self.loaders.move;\n  };\n\n  init();\n}]);",null]}