{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/order-helper.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/order-helper.service.js","mtime":1539717142187},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class OrderHelperService {\n  constructor($httpParamSerializerJQLike, $window, OvhApiMe) {\n    this.$httpParamSerializerJQLike = $httpParamSerializerJQLike;\n    this.$window = $window;\n    this.User = OvhApiMe;\n  }\n\n  openExpressOrderUrl(config, urlParams = {}) {\n    this.getExpressOrderUrl(config, urlParams)\n      .then((href) => {\n        this.$window.location.href = href;\n      });\n  }\n\n  getUrlConfigPart(config, urlParams = {}) {\n    let formattedConfig = config;\n    if (!_.isArray(config)) {\n      // Transform configuration and option value if necessary\n      formattedConfig = _.assign({}, config);\n      if (formattedConfig.configuration && !_.isArray(formattedConfig.configuration)) {\n        formattedConfig.configuration = this.constructor\n          .transformToOrderValues(formattedConfig.configuration);\n      }\n\n      if (formattedConfig.option) {\n        const formattedOptions = formattedConfig.option.map((option) => {\n          if (option.configuration && !_.isArray(option.configuration)) {\n            _.set(option, 'configuration', this.constructor.transformToOrderValues(option.configuration));\n          }\n          return option;\n        });\n        formattedConfig.option = formattedOptions;\n      }\n      formattedConfig = [formattedConfig];\n    }\n\n    return this.$httpParamSerializerJQLike(_.assign({}, urlParams, {\n      products: JSURL.stringify(formattedConfig),\n    }));\n  }\n\n  /**\n   * Transform an object to an Order compliant array\n   * @param  {Object} config plain json\n   * @return {Array} an array compatible with Order\n   */\n  static transformToOrderValues(config) {\n    const orderConfig = [];\n    _.forEach(_.keys(config), (key) => {\n      const configParam = {\n        label: key,\n      };\n      if (_.isArray(config[key])) {\n        configParam.values = config[key];\n      } else {\n        configParam.values = [config[key]];\n      }\n      orderConfig.push(configParam);\n    });\n    return orderConfig;\n  }\n\n  getExpressOrderUrl(config, urlParams = {}) {\n    const path = '/order/express/#/new/express/resume';\n    const paramsPart = this.getUrlConfigPart(config, urlParams);\n    return this.buildUrl(`${path}?${paramsPart}`);\n  }\n\n  buildUrl(path) {\n    // Maybe this could be put in configuration\n    return this.User.v6().get()\n      .$promise\n      .then((user) => {\n        let targetURL;\n        switch (user.ovhSubsidiary) {\n          case 'FR':\n            targetURL = 'https://www.ovh.com/fr';\n            break;\n          case 'CZ':\n            targetURL = 'https://www.ovh.cz';\n            break;\n          case 'DE':\n            targetURL = 'https://www.ovh.de';\n            break;\n          case 'ES':\n            targetURL = 'https://www.ovh.es';\n            break;\n          case 'FI':\n            targetURL = 'https://www.ovh-hosting.fi';\n            break;\n          case 'GB':\n            targetURL = 'https://www.ovh.co.uk';\n            break;\n          case 'IE':\n            targetURL = 'https://www.ovh.ie';\n            break;\n          case 'IT':\n            targetURL = 'https://www.ovh.it';\n            break;\n          case 'LT':\n            targetURL = 'https://www.ovh.lt';\n            break;\n          case 'MA':\n            targetURL = 'https://www.ovh.ma';\n            break;\n          case 'NL':\n            targetURL = 'https://www.ovh.nl';\n            break;\n          case 'PL':\n            targetURL = 'https://www.ovh.pl';\n            break;\n          case 'PT':\n            targetURL = 'https://www.ovh.pt';\n            break;\n          case 'SN':\n            targetURL = 'https://www.ovh.sn';\n            break;\n          case 'TN':\n            targetURL = 'https://www.ovh.com/tn';\n            break;\n          case 'ASIA':\n            targetURL = 'https://ca.ovh.com/asia';\n            break;\n          case 'AU':\n            targetURL = 'https://www.ovh.com.au';\n            break;\n          case 'CA':\n            targetURL = 'https://ca.ovh.com/en';\n            break;\n          case 'SG':\n            targetURL = 'https://ca.ovh.com/sg';\n            break;\n          case 'WS':\n            targetURL = 'https://us.ovh.com/es';\n            break;\n          case 'WE':\n            targetURL = 'https://ca.ovh.com/en';\n            break;\n          case 'QC':\n            targetURL = 'https://ca.ovh.com/fr';\n            break;\n          default:\n            targetURL = 'https://www.ovh.com/fr';\n        }\n\n        return `${targetURL}${path}`;\n      });\n  }\n}\n\nangular.module('managerApp').service('OrderHelperService', OrderHelperService);\n"]}