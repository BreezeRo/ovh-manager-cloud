{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/failover/import/cloud-project-compute-infrastructure-ip-failover-import.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/failover/import/cloud-project-compute-infrastructure-ip-failover-import.controller.js","mtime":1539717141983},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectComputeInfrastructureIpFailoverImportCtrl', [\"$scope\", \"$uibModalInstance\", \"OvhApiIp\", \"$translate\", \"CloudMessage\", \"OvhApiCloudProjectInstance\", \"$stateParams\", \"$q\", \"OvhApiMe\", \"CLOUD_GEOLOCALISATION\", \"pendingImportIps\", function CloudProjectComputeInfrastructureIpFailoverImportCtrl($scope, $uibModalInstance, OvhApiIp, $translate, CloudMessage, OvhApiCloudProjectInstance, $stateParams, $q, OvhApiMe, CLOUD_GEOLOCALISATION, pendingImportIps) {\n  var self = this;\n  $scope.projectId = $stateParams.projectId;\n  self.datas = {\n    autoSelected: [],\n    ipsFo: [],\n    ipsFoDetail: [],\n    ipsFoDetailIds: [],\n    vms: [],\n    user: null,\n    selected: {},\n    selectedvm: null\n  };\n  self.loaders = {\n    table: {\n      ipsFo: false,\n      importIpsFo: false\n    },\n    vms: false\n  }; // ---------INIT---------\n\n  function getIpsFo(clearCache) {\n    if (!self.loaders.table.ipsFo) {\n      self.loaders.table.ipsFo = true;\n\n      if (clearCache) {\n        OvhApiIp.v6().resetQueryCache();\n        OvhApiIp.v6().resetCache();\n      }\n\n      return OvhApiIp.v6().query({\n        type: 'failover'\n      }).$promise.then(function (ipsParams) {\n        var ips = _.filter(ipsParams, function (ip) {\n          return _.indexOf(pendingImportIps, ip) < 0;\n        });\n\n        return self.initIps(ips);\n      }, function (err) {\n        CloudMessage.error([$translate.instant('cpciif_import_ips_error'), err.data && err.data.message || ''].join(' '));\n        self.datas.ipsFo = null;\n      }).finally(function () {\n        self.loaders.table.ipsFo = false;\n      });\n    }\n\n    return $q.when();\n  }\n\n  function init() {\n    return OvhApiMe.v6().get().$promise.then(function (user) {\n      self.datas.user = user;\n      return getIpsFo(true);\n    }, function (err) {\n      CloudMessage.error([$translate.instant('cpciif_import_ips_error'), err.data && err.data.message || ''].join(' '));\n    });\n  }\n  /**\n   * Fetch informations for every IPFO (we need to check if ipfo is already linked\n   * to current project and if his region is compatible)\n   */\n\n\n  self.initIps = function (ips) {\n    var queries = [];\n    self.datas.ipsFo = [];\n    angular.forEach(ips, function (ip) {\n      queries.push(OvhApiIp.v6().get({\n        ip: ip\n      }).$promise.then(function (ipParam) {\n        if (!(ipParam.routedTo && ipParam.routedTo.serviceName === $scope.projectId)) {\n          self.datas.ipsFo.push(ipParam);\n        }\n      }));\n    });\n    return $q.all(queries);\n  }; // ---------TOOLS---------\n\n\n  $scope.$watch('CPCIIpFailoverImportCtrl.datas.selected', function () {\n    // if some line were not move => recheck\n    if (self.datas.autoSelected.length) {\n      angular.forEach(self.datas.autoSelected, function (ip) {\n        self.datas.selected[ip] = true;\n      });\n      self.datas.autoSelected = [];\n    }\n  }, true);\n\n  self.refreshIpsFo = function () {\n    getIpsFo(true);\n  };\n\n  self.getSelectedCount = function () {\n    return Object.keys(self.datas.selected).length;\n  };\n\n  self.getInfoSelect = function () {\n    if (Object.keys(self.datas.selected).length === 1) {\n      return Object.keys(self.datas.selected)[0];\n    }\n\n    if (Object.keys(self.datas.selected).length > 1) {\n      return Object.keys(self.datas.selected).length;\n    }\n\n    return null;\n  }; // ---------MODAL---------\n\n\n  self.confirm = function () {\n    if (!self.loaders.table.importIpsFo) {\n      var listPromise = [];\n      var listIpsWithTasks = [];\n      var nbSelected = self.getSelectedCount();\n      var lastIp = '';\n      self.loaders.table.importIpsFo = true;\n      angular.forEach(self.datas.selected, function (value, ip) {\n        lastIp = ip;\n        listPromise.push(OvhApiIp.v6().move({\n          ip: ip\n        }, {\n          to: $scope.projectId\n        }).$promise.then(function (task) {\n          listIpsWithTasks.push({\n            // Ã  revoir\n            ip: ip,\n            task: task\n          });\n        }, function (error) {\n          return $q.reject({\n            ip: ip,\n            error: error\n          });\n        }));\n      });\n      $q.allSettled(listPromise).then(function () {\n        if (nbSelected > 1) {\n          CloudMessage.success($translate.instant('cpciif_import_vms_route_of_success_plural', {\n            nbIps: nbSelected\n          }));\n        } else {\n          CloudMessage.success($translate.instant('cpciif_import_vms_route_of_success', {\n            ip: lastIp\n          }));\n        }\n\n        $uibModalInstance.close(listIpsWithTasks);\n      }, function (error) {\n        var tabError = error.filter(function (val) {\n          return !!val.error;\n        });\n\n        var ipError = _.pluck(tabError, 'ip');\n\n        self.datas.autoSelected = angular.copy(ipError);\n\n        if (tabError.length > 1) {\n          CloudMessage.error($translate.instant('cpciif_import_vms_route_of_error_plural', {\n            ips: ipError.toString()\n          }));\n        } else {\n          var errorIp = tabError[0].error;\n          CloudMessage.error([$translate.instant('cpciif_import_vms_route_of_error', {\n            ip: tabError[0].ip\n          }), errorIp.data && errorIp.data.message || ''].join(' '));\n        }\n      }).finally(function () {\n        self.datas.selected = {};\n        self.loaders.table.importIpsFo = false;\n      });\n    }\n  };\n\n  self.cancel = function () {\n    $uibModalInstance.dismiss();\n  };\n\n  init();\n}]);",null]}