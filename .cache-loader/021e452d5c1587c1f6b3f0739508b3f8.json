{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/cloud-monitoring/monitoring-chart.directive.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/cloud-monitoring/monitoring-chart.directive.js","mtime":1539717142366},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp')\n/**\n * A simple monitoring chart directive using d3 js library for rendering.\n *\n * Example usage :\n *\n * var monitoringData = {\n *     data : [\n *         { timestamp: ..., value: ... },\n *         { timestamp: ..., value: ... },\n *         ...\n *     ],\n *     ymin : 0 (y axis minimum value OPTIONAL, default is minimum value of data series)\n *     ymax : 1 (y axis maximum value OPTIONAL, default is maximum value of data series)\n *     xmin : 0 (x axis minimum value OPTIONAL)\n *     xmax : 1 (x axis maximum value OPTIONAL)\n *     unit : \"Mb\" (y axis unit to be displayed OPTIONAL, default is none)\n *     timeScale : { unit: \"hours\", amount: 1, format: \"%H\" }\n *     yTicks : ticks count on y axis (OPTIONAL, default is 4)\n *     margin: {top: 10, right: 10, bottom: 10, left: 10} (chart margins, OPTIONAL)\n * };\n *\n * <div style=\"width: 400px; height: 300px\">\n *     <monitoring-chart model=\"myMonitoringData\"></monitoring-chart>\n * </div>\n *\n */\n.directive('monitoringChart', [\"$window\", function ($window) {\n  function Chart() {\n    this.width = 0;\n    this.height = 0; // default values, can be customized in model parameter\n\n    this.margin = {\n      top: 20,\n      right: 120,\n      bottom: 20,\n      left: 120\n    }; // d3js elements\n\n    this.x = null;\n    this.y = null;\n    this.xAxis = null;\n    this.yAxis = null;\n    this.line = null;\n    this.area = null;\n    this.data = []; // d3js graphics\n\n    this.g = {\n      svg: null,\n      x: null,\n      y: null,\n      line: null,\n      area: null,\n      bg: null\n    };\n  }\n\n  Chart.prototype.init = function (d3, el) {\n    this.x = d3.time.scale();\n    this.y = d3.scale.linear();\n    this.xAxis = d3.svg.axis().scale(this.x).orient('bottom');\n    this.yAxis = d3.svg.axis().scale(this.y).orient('left');\n    this.line = d3.svg.line();\n    this.area = d3.svg.area();\n    this.g.svg = d3.select(el).append('svg').attr('class', 'cloud-monitoring-chart');\n    this.g.bg = this.g.svg.append('rect').attr('class', 'bg');\n    this.g.area = this.g.svg.append('path').attr('class', 'area');\n    this.g.line = this.g.svg.append('path').attr('class', 'line');\n    this.g.x = this.g.svg.append('g').attr('class', 'axis');\n    this.g.y = this.g.svg.append('g').attr('class', 'axis');\n  };\n\n  Chart.prototype.resize = function () {\n    if (this.width > this.margin.left + this.margin.right && this.height > this.margin.top + this.margin.bottom) {\n      this.g.svg.attr({\n        width: this.width,\n        height: this.height\n      });\n      this.x.range([this.margin.left, this.width - this.margin.right]);\n      this.y.range([this.height - this.margin.bottom, this.margin.top]);\n      this.yAxis.tickSize(-(this.width - this.margin.left - this.margin.right));\n      this.g.bg.attr({\n        width: this.width - this.margin.left - this.margin.right,\n        height: this.height - this.margin.top - this.margin.bottom,\n        transform: \"translate(\".concat([this.margin.left, this.margin.top], \")\")\n      });\n      this.g.x.attr('transform', \"translate(\".concat([0, this.y.range()[0]], \")\"));\n      this.g.y.attr('transform', \"translate(\".concat([this.x.range()[0], 0], \")\"));\n      this.update();\n    }\n  };\n\n  Chart.prototype.update = function () {\n    // refresh scale\n    this.g.x.call(this.xAxis);\n    this.g.y.call(this.yAxis); // updates line chart\n\n    this.g.line.attr({\n      d: this.line(this.data)\n    }); // updates area chart\n\n    this.g.area.attr({\n      d: this.area(this.data)\n    });\n  };\n\n  function timestampOf(x) {\n    return x ? x.timestamp : null;\n  }\n\n  function valueOf(x) {\n    return x ? x.value : null;\n  }\n\n  Chart.prototype.setModel = function (model) {\n    var self = this;\n\n    var fx = function fx(p) {\n      return self.x(timestampOf(p));\n    };\n\n    var fy = function fy(p) {\n      return self.y(valueOf(p));\n    };\n\n    var ymin = Number.isNaN(+model.ymin) ? d3.min(model.data, valueOf) : +model.ymin;\n    var ymax = Number.isNaN(+model.ymax) ? d3.max(model.data, valueOf) : +model.ymax;\n    this.data = angular.isArray(model.data) ? model.data : [];\n    this.line.x(fx);\n    this.area.x(fx);\n    this.line.y(fy);\n    this.area.y0(function () {\n      return self.y.range()[0];\n    });\n    this.area.y1(fy);\n    this.x.domain([Number.isNaN(+model.xmin) ? d3.min(this.data, timestampOf) : +model.xmin, Number.isNaN(+model.xmax) ? d3.max(this.data, timestampOf) : +model.xmax]);\n    this.y.domain([ymin, ymax]);\n    this.yAxis.tickFormat(function (p) {\n      return p + (model.unit ? \" \".concat(model.unit) : '');\n    });\n\n    if (model.timeScale) {\n      if (model.timeScale.unit && model.timeScale.amount) {\n        this.xAxis.ticks(d3.time[model.timeScale.unit], model.timeScale.amount);\n      }\n\n      if (model.timeScale.format) {\n        this.xAxis.tickFormat(d3.time.format(model.timeScale.format));\n      }\n    } else {\n      this.xAxis.ticks('days');\n    }\n\n    this.yAxis.ticks(angular.isDefined(model.yTicks) ? model.yTicks : 4);\n    this.margin = model.margin || this.margin;\n    this.resize();\n    this.update();\n  };\n\n  return {\n    restrict: 'E',\n    scope: {\n      model: '=model'\n    },\n    link: function link($scope, $element) {\n      var d3 = $window.d3;\n\n      if (d3) {\n        var chart = new Chart(); // initialize new chart\n\n        chart.init(d3, $element[0]); // fill parent container on resize\n\n        $scope.$watch(function () {\n          if ($element.parent().width() > 0 && $element.parent().height() > 0) {\n            chart.width = $element.parent().width();\n            chart.height = $element.parent().height();\n          }\n\n          return chart.width + chart.height;\n        }, function () {\n          chart.resize();\n        }); // update on model change\n\n        $scope.$watch('model', function (model) {\n          chart.setModel(model);\n        });\n      } else {\n        throw new Error('Missing D3.js dependency');\n      }\n    }\n  };\n}]);",null]}