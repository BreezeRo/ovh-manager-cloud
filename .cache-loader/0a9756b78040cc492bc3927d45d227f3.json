{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/frontends/iplb-frontends-edit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/frontends/iplb-frontends-edit.controller.js","mtime":1539717142196},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerFrontendsEditCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerFrontendsEditCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"$translate\", \"CloudMessage\", \"ControllerHelper\", \"IpLoadBalancerConstant\", \"IpLoadBalancerFailoverIpService\", \"IpLoadBalancerFrontendsService\", \"IpLoadBalancerZoneService\"];\n\n  function IpLoadBalancerFrontendsEditCtrl($q, $state, $stateParams, $translate, CloudMessage, ControllerHelper, IpLoadBalancerConstant, IpLoadBalancerFailoverIpService, IpLoadBalancerFrontendsService, IpLoadBalancerZoneService) {\n    _classCallCheck(this, IpLoadBalancerFrontendsEditCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerFailoverIpService = IpLoadBalancerFailoverIpService;\n    this.IpLoadBalancerFrontendsService = IpLoadBalancerFrontendsService;\n    this.IpLoadBalancerZoneService = IpLoadBalancerZoneService;\n    this.initLoaders();\n  }\n\n  _createClass(IpLoadBalancerFrontendsEditCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.zones = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerZoneService.getZonesSelectData(_this.$stateParams.serviceName);\n        }\n      });\n      this.farms = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerFrontendsService.getFarmsChoices(_this.getFarmType(), _this.$stateParams.serviceName, _this.frontend.zone);\n        }\n      });\n      this.certificates = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerFrontendsService.getCertificatesChoices(_this.$stateParams.serviceName);\n        }\n      });\n      this.failoverIps = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerFailoverIpService.getFailoverIpsSelectData(_this.$stateParams.serviceName);\n        }\n      });\n      this.apiFrontend = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerFrontendsService.getAllFrontendsTypes(_this.$stateParams.serviceName).then(function (frontends) {\n            var frontend = _.find(frontends, {\n              id: parseInt(_this.$stateParams.frontendId, 10)\n            });\n\n            return _this.IpLoadBalancerFrontendsService.getFrontend(frontend.type, _this.$stateParams.serviceName, _this.$stateParams.frontendId);\n          }).then(function (frontend) {\n            return _this.parseFrontend(frontend);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"getFarmType\",\n    value: function getFarmType() {\n      switch (this.protocol) {\n        case 'http':\n        case 'https':\n          return 'http';\n\n        case 'tcp':\n        case 'tls':\n          return 'tcp';\n\n        default:\n          return this.protocol;\n      }\n    }\n  }, {\n    key: \"getFarmName\",\n    value: function getFarmName(farm) {\n      var farmName = farm.displayName || farm.farmId;\n\n      if (farm.farmId > 0) {\n        var farmType = this.$translate.instant(\"iplb_frontend_add_protocol_\".concat(farm.type));\n        return \"\".concat(farmName, \" (\").concat(farmType, \")\");\n      }\n\n      return farmName;\n    }\n  }, {\n    key: \"onProtocolChange\",\n    value: function onProtocolChange() {\n      this.farmType = this.getFarmType();\n\n      switch (this.protocol) {\n        case 'http':\n          this.type = 'http';\n          this.frontend.port = 80;\n          this.frontend.ssl = false;\n          break;\n\n        case 'https':\n          this.type = 'http';\n          this.frontend.port = 443;\n          this.frontend.ssl = true;\n          this.frontend.hsts = false;\n          break;\n\n        case 'tcp':\n          this.type = 'tcp';\n          delete this.frontend.port;\n          this.frontend.ssl = false;\n          break;\n\n        case 'udp':\n          this.type = 'udp';\n          delete this.frontend.port;\n          this.frontend.ssl = false;\n          break;\n\n        case 'tls':\n          this.type = 'tcp';\n          delete this.frontend.port;\n          this.frontend.ssl = true;\n          break;\n\n        default:\n          break;\n      }\n\n      if (this.frontend.ssl) {\n        this.certificates.load();\n      }\n\n      this.farms.load();\n    }\n  }, {\n    key: \"onZoneChange\",\n    value: function onZoneChange() {\n      this.frontend.defaultFarmId = null;\n      this.farms.load();\n    }\n  }, {\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this2 = this;\n\n      this.frontend = {\n        dedicatedIpfo: [],\n        defaultSslId: 0,\n        defaultFarmId: 0,\n        port: 80,\n        ssl: false,\n        hsts: false\n      };\n      this.type = 'http';\n      this.protocol = 'http';\n      this.saving = false;\n      this.protocols = this.IpLoadBalancerConstant.protocols;\n      this.portLimit = this.IpLoadBalancerConstant.portLimit;\n      this.zones.load();\n      this.failoverIps.load();\n\n      if (this.$stateParams.frontendId) {\n        this.edition = true;\n        this.apiFrontend.load().then(function () {\n          _this2.farms.load();\n        });\n      } else {\n        this.farms.load();\n      }\n    }\n  }, {\n    key: \"isProtocolDisabled\",\n    value: function isProtocolDisabled(protocol) {\n      if (!this.edition) {\n        return false;\n      }\n\n      if (this.type === 'http' && /http/.test(protocol)) {\n        return false;\n      }\n\n      if (this.protocol === protocol) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Parse frontend object from API and send it to form.\n     * @return parsed frontend object\n     */\n\n  }, {\n    key: \"parseFrontend\",\n    value: function parseFrontend(frontend) {\n      this.type = frontend.protocol;\n\n      switch (frontend.protocol) {\n        case 'http':\n          this.protocol = frontend.ssl ? 'https' : 'http';\n          break;\n\n        case 'tcp':\n          this.protocol = frontend.ssl ? 'tls' : 'tcp';\n          break;\n\n        case 'udp':\n          this.protocol = 'udp';\n          break;\n\n        default:\n          break;\n      }\n\n      if (_.has(frontend, 'allowedSource.length')) {\n        _.set(frontend, 'allowedSource', frontend.allowedSource.join(', '));\n      }\n\n      this.frontend = angular.copy(frontend);\n      return frontend;\n    }\n    /**\n     * Clean frontend from form and send it to API.\n     * @return clean frontend object\n     */\n\n  }, {\n    key: \"getCleanFrontend\",\n    value: function getCleanFrontend() {\n      var request = angular.copy(this.frontend);\n\n      if (this.type === 'udp') {\n        delete request.ssl;\n      }\n\n      if (_.includes(['udp', 'tcp'], this.type)) {\n        delete request.hsts;\n      }\n\n      if (!request.ssl || !request.defaultSslId) {\n        delete request.defaultSslId;\n      }\n\n      if (!request.defaultFarmId && request.defaultFarmId === 0) {\n        delete request.defaultFarmId;\n      } else if (request.defaultFarmId === 0) {\n        request.defaultFarmId = null;\n      }\n\n      if (this.frontend.allowedSource) {\n        request.allowedSource = _.map(this.frontend.allowedSource.split(','), function (source) {\n          return _.trim(source);\n        });\n      }\n\n      delete request.protocol;\n      return request;\n    }\n  }, {\n    key: \"sendForm\",\n    value: function sendForm() {\n      if (this.$stateParams.frontendId) {\n        this.updateFrontend();\n      } else {\n        this.addFrontend();\n      }\n    }\n  }, {\n    key: \"createFrontend\",\n    value: function createFrontend() {\n      var _this3 = this;\n\n      if (this.form.$invalid) {\n        return this.$q.reject();\n      }\n\n      this.saving = true;\n      this.CloudMessage.flushChildMessage();\n      return this.IpLoadBalancerFrontendsService.createFrontend(this.type, this.$stateParams.serviceName, this.getCleanFrontend()).then(function () {\n        return _this3.$state.go('network.iplb.detail.frontends');\n      }).finally(function () {\n        _this3.saving = false;\n      });\n    }\n  }, {\n    key: \"updateFrontend\",\n    value: function updateFrontend() {\n      var _this4 = this;\n\n      if (this.form.$invalid) {\n        return this.$q.reject();\n      }\n\n      this.saving = true;\n      this.CloudMessage.flushChildMessage();\n      return this.IpLoadBalancerFrontendsService.updateFrontend(this.type, this.$stateParams.serviceName, this.frontend.frontendId, this.getCleanFrontend()).then(function () {\n        return _this4.$state.go('network.iplb.detail.frontends');\n      }).finally(function () {\n        _this4.saving = false;\n      });\n    }\n  }], [{\n    key: \"getCertificateName\",\n    value: function getCertificateName(certificate) {\n      if (certificate.id <= 0) {\n        return certificate.displayName;\n      }\n\n      return certificate.displayName ? \"\".concat(certificate.displayName, \" (\").concat(certificate.id, \")\") : certificate.id;\n    }\n  }, {\n    key: \"validateSelection\",\n    value: function validateSelection(value) {\n      return value && value !== '0';\n    }\n  }]);\n\n  return IpLoadBalancerFrontendsEditCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerFrontendsEditCtrl', IpLoadBalancerFrontendsEditCtrl);",null]}