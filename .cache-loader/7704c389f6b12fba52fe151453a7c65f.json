{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/veeam/vps-veeam.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/veeam/vps-veeam.controller.js","mtime":1539717142305},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsVeeamCtrl =\n/*#__PURE__*/\nfunction () {\n  VpsVeeamCtrl.$inject = [\"$scope\", \"$stateParams\", \"$translate\", \"CloudMessage\", \"ControllerHelper\", \"VpsActionService\", \"VpsService\"];\n\n  function VpsVeeamCtrl($scope, $stateParams, $translate, CloudMessage, ControllerHelper, VpsActionService, VpsService) {\n    _classCallCheck(this, VpsVeeamCtrl);\n\n    this.$scope = $scope;\n    this.serviceName = $stateParams.serviceName;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.serviceName = $stateParams.serviceName;\n    this.VpsActionService = VpsActionService;\n    this.VpsService = VpsService;\n    this.loaders = {\n      init: false,\n      checkOrder: false,\n      polling: false,\n      veeamTab: false\n    };\n    this.vps = {\n      hasVeeam: false,\n      canOrder: false\n    };\n  }\n\n  _createClass(VpsVeeamCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.veeam = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.VpsService.getVeeam(_this.serviceName);\n        }\n      });\n      this.veeamTab = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.VpsService.getTabVeeam(_this.serviceName, 'available', true).then(function (data) {\n            return data.map(function (id) {\n              return {\n                id: id\n              };\n            });\n          });\n        }\n      });\n      this.vps = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.VpsService.getSelectedVps(_this.serviceName);\n        }\n      });\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this2 = this;\n\n      this.veeam.load().then(function () {\n        if (_this2.veeam.data.state !== 'disabled') {\n          _this2.veeamTab.load();\n\n          _this2.loadRestorePoint();\n        } else {\n          _this2.vps.load();\n        }\n      });\n    }\n  }, {\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this3 = this;\n\n      this.initLoaders();\n      this.load();\n      this.$scope.$on('tasks.pending', function (event, opt) {\n        if (opt === _this3.serviceName) {\n          _this3.loaders.polling = true;\n        }\n      });\n      this.$scope.$on('tasks.success', function (event, opt) {\n        if (opt === _this3.serviceName) {\n          _this3.loaders.polling = false;\n\n          _this3.load();\n        }\n      });\n    }\n  }, {\n    key: \"loadRestorePoint\",\n    value: function loadRestorePoint() {\n      var _this4 = this;\n\n      this.veeamTab.loading = true;\n      this.VpsService.getTabVeeam(this.serviceName, 'restoring', false).then(function (data) {\n        if (data.length) {\n          _this4.veeam.data.state = 'MOUNTING';\n        }\n      }).catch(function (err) {\n        return _this4.CloudMessage.error(err);\n      }).finally(function () {\n        _this4.veeamTab.loading = false;\n      });\n    }\n  }, {\n    key: \"restore\",\n    value: function restore(restorePoint) {\n      this.VpsActionService.restore(this.serviceName, restorePoint);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount(restorePoint) {\n      this.VpsActionService.mount(this.serviceName, restorePoint);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount(restorePoint) {\n      this.VpsActionService.unmount(this.serviceName, restorePoint);\n    }\n  }]);\n\n  return VpsVeeamCtrl;\n}();\n\nangular.module('managerApp').controller('VpsVeeamCtrl', VpsVeeamCtrl);",null]}