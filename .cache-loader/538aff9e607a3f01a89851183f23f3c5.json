{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/logs-streams.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/logs-streams.service.js","mtime":1539717142153},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsStreamsService =\n/*#__PURE__*/\nfunction () {\n  LogsStreamsService.$inject = [\"$q\", \"$translate\", \"CloudMessage\", \"ControllerHelper\", \"LogsHomeService\", \"LogsOptionsService\", \"LogsStreamsAlertsService\", \"LogsStreamsArchivesService\", \"LogsOrderService\", \"LogsConstants\", \"OvhApiDbaas\", \"UrlHelper\", \"LogsHelperService\"];\n\n  function LogsStreamsService($q, $translate, CloudMessage, ControllerHelper, LogsHomeService, LogsOptionsService, LogsStreamsAlertsService, LogsStreamsArchivesService, LogsOrderService, LogsConstants, OvhApiDbaas, UrlHelper, LogsHelperService) {\n    _classCallCheck(this, LogsStreamsService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.LogsApiService = OvhApiDbaas.Logs().v6();\n    this.StreamsApiService = OvhApiDbaas.Logs().Stream().v6();\n    this.StreamsAapiService = OvhApiDbaas.Logs().Stream().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.LogsHomeService = LogsHomeService;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsStreamsAlertsService = LogsStreamsAlertsService;\n    this.LogsStreamsArchivesService = LogsStreamsArchivesService;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsOrderService = LogsOrderService;\n    this.UrlHelper = UrlHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsConstants = LogsConstants;\n    this.LogsHelperService = LogsHelperService;\n    this.initializeData();\n  }\n\n  _createClass(LogsStreamsService, [{\n    key: \"initializeData\",\n    value: function initializeData() {\n      this.compressionAlgorithms = [{\n        value: this.LogsConstants.GZIP,\n        name: this.$translate.instant('logs_stream_compression_gzip')\n      }, {\n        value: this.LogsConstants.DEFLATED,\n        name: this.$translate.instant('logs_stream_compression_zip')\n      }, {\n        value: this.LogsConstants.LZMA,\n        name: this.$translate.instant('logs_stream_compression_lzma')\n      }, {\n        value: this.LogsConstants.ZSTD,\n        name: this.$translate.instant('logs_stream_compression_zstd')\n      }];\n      this.storageDurations = [{\n        value: 1,\n        name: this.$translate.instant('logs_stream_retention_1y')\n      }, {\n        value: 2,\n        name: this.$translate.instant('logs_stream_retention_2y')\n      }, {\n        value: 5,\n        name: this.$translate.instant('logs_stream_retention_5y')\n      }, {\n        value: 10,\n        name: this.$translate.instant('logs_stream_retention_10y')\n      }];\n    }\n    /**\n     * returns array of streams with details of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of streams.\n     *          each stream will have all details populated.\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getStreams\",\n    value: function getStreams(serviceName) {\n      var _this = this;\n\n      return this.getStreamDetails(serviceName).then(function (streams) {\n        return streams.map(function (stream) {\n          return _this.transformStream(serviceName, stream);\n        });\n      }).catch(function (err) {\n        return _this.LogsHelperService.handleError('logs_streams_get_error', err, {});\n      });\n    }\n    /**\n     * returns array of owned streams with details of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of streams.\n     *          each stream will have all details populated.\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getOwnStreams\",\n    value: function getOwnStreams(serviceName) {\n      var _this2 = this;\n\n      return this.getStreamDetails(serviceName).then(function (streams) {\n        return streams.filter(function (aapiStream) {\n          return aapiStream.info.isEditable;\n        });\n      }).catch(function (err) {\n        return _this2.LogsHelperService.handleError('logs_streams_get_error', err, {});\n      });\n    }\n    /**\n     * returns array of shareable streams with details of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of streams.\n     *          each stream will have all details populated.\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getShareableStreams\",\n    value: function getShareableStreams(serviceName) {\n      var _this3 = this;\n\n      return this.getStreamDetails(serviceName).then(function (streams) {\n        return streams.filter(function (aapiStream) {\n          return aapiStream.info.isShareable;\n        });\n      }).catch(function (err) {\n        return _this3.LogsHelperService.handleError('logs_streams_get_error', err, {});\n      });\n    }\n    /**\n     * gets stream details for each stream in array\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of streams\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getStreamDetails\",\n    value: function getStreamDetails(serviceName) {\n      var _this4 = this;\n\n      return this.getAllStreams(serviceName).then(function (streams) {\n        var promises = streams.map(function (stream) {\n          return _this4.getAapiStream(serviceName, stream);\n        });\n        return _this4.$q.all(promises);\n      });\n    }\n    /**\n     * returns details of a stream\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @returns promise which will be resolve to stream object\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getStream\",\n    value: function getStream(serviceName, streamId) {\n      var _this5 = this;\n\n      return this.StreamsApiService.get({\n        serviceName: serviceName,\n        streamId: streamId\n      }).$promise.catch(function (err) {\n        return _this5.LogsHelperService.handleError('logs_stream_get_error', err, {});\n      });\n    }\n    /**\n     * returns details of a stream making call to Aapi (2api) service\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @returns promise which will be resolve to stream object\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getAapiStream\",\n    value: function getAapiStream(serviceName, streamId) {\n      var _this6 = this;\n\n      return this.StreamsAapiService.get({\n        serviceName: serviceName,\n        streamId: streamId\n      }).$promise.catch(function (err) {\n        return _this6.LogsHelperService.handleError('logs_stream_get_error', err, {});\n      });\n    }\n    /**\n     * delete stream\n     *\n     * @param {any} serviceName\n     * @param {any} stream, stream object to be deleted\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"deleteStream\",\n    value: function deleteStream(serviceName, stream) {\n      var _this7 = this;\n\n      return this.StreamsApiService.delete({\n        serviceName: serviceName,\n        streamId: stream.streamId\n      }, stream).$promise.then(function (operation) {\n        _this7.resetAllCache();\n\n        return _this7.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_stream_delete_success', {\n          streamName: stream.title\n        });\n      }).catch(function (err) {\n        return _this7.LogsHelperService.handleError('logs_stream_delete_error', err, {\n          streamName: stream.title\n        });\n      });\n    }\n    /**\n     * create new stream\n     *\n     * @param {any} serviceName\n     * @param {any} stream, stream object to be created\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"createStream\",\n    value: function createStream(serviceName, stream) {\n      var _this8 = this;\n\n      return this.StreamsApiService.create({\n        serviceName: serviceName\n      }, stream).$promise.then(function (operation) {\n        _this8.resetAllCache();\n\n        return _this8.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_stream_create_success', {\n          streamName: stream.title\n        });\n      }).catch(function (err) {\n        return _this8.LogsHelperService.handleError('logs_stream_create_error', err, {\n          streamName: stream.title\n        });\n      });\n    }\n    /**\n     * update stream\n     *\n     * @param {any} serviceName\n     * @param {any} stream, stream object to be updated\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"updateStream\",\n    value: function updateStream(serviceName, stream) {\n      var _this9 = this;\n\n      return this.StreamsApiService.update({\n        serviceName: serviceName,\n        streamId: stream.streamId\n      }, stream).$promise.then(function (operation) {\n        _this9.resetAllCache();\n\n        return _this9.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_stream_update_success', {\n          streamName: stream.title\n        });\n      }).catch(function (err) {\n        return _this9.LogsHelperService.handleError('logs_stream_update_error', err, {\n          streamName: stream.title\n        });\n      });\n    }\n    /**\n     * returns array of stream id's of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of stream id's\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getAllStreams\",\n    value: function getAllStreams(serviceName) {\n      return this.LogsApiService.streams({\n        serviceName: serviceName\n      }).$promise;\n    }\n    /**\n     * returns objecy containing total number of streams and total number of streams used\n     *\n     * @param {any} serviceName\n     * @returns quota object containing V (total number streams)\n     *          and configured (number of streams used)\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getQuota\",\n    value: function getQuota(serviceName) {\n      var _this10 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        var quota = {\n          max: me.total.maxNbStream,\n          configured: me.total.curNbStream,\n          currentUsage: me.total.curNbStream * 100 / me.total.maxNbStream\n        };\n        return quota;\n      }).catch(function (err) {\n        return _this10.LogsHelperService.handleError('logs_streams_quota_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getMainOffer\",\n    value: function getMainOffer(serviceName) {\n      var _this11 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        return {\n          max: me.offer.maxNbStream,\n          current: me.offer.curNbStream,\n          planCode: me.offer.reference\n        };\n      }).catch(function (err) {\n        return _this11.LogsHelperService.handleError('logs_main_offer_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getCompressionAlgorithms\",\n    value: function getCompressionAlgorithms() {\n      return this.compressionAlgorithms;\n    }\n  }, {\n    key: \"getStorageDurations\",\n    value: function getStorageDurations() {\n      return this.storageDurations;\n    }\n  }, {\n    key: \"getSubscribedOptions\",\n    value: function getSubscribedOptions(serviceName) {\n      return this.LogsOptionsService.getSubscribedOptionsByType(serviceName, this.LogsConstants.STREAM_OPTION_REFERENCE);\n    }\n    /**\n     * creates new stream with default values\n     *\n     * @returns stream object with default values\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getNewStream\",\n    value: function getNewStream() {\n      return {\n        data: {\n          coldStorageCompression: this.compressionAlgorithms[0].value,\n          coldStorageRetention: this.storageDurations[0].value,\n          coldStorageNotifyEnabled: true,\n          coldStorageEnabled: false,\n          webSocketEnabled: true\n        },\n        loading: false\n      };\n    }\n    /**\n     * extracts graylog URL from stream. Shows error message on UI if no graylog URL is found.\n     *\n     * @param {any} stream\n     * @returns {string} graylog url, if not found empty string\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getStreamGraylogUrl\",\n    value: function getStreamGraylogUrl(stream) {\n      var url = this.UrlHelper.constructor.findUrl(stream, this.LogsConstants.GRAYLOG_WEBUI);\n\n      if (!url) {\n        this.CloudMessage.error(this.$translate.instant('logs_streams_get_graylog_url_error', {\n          stream: stream.info.title\n        }));\n      }\n\n      return url;\n    }\n    /**\n     * extracts and copies stream token to clipboard.\n     * Shows error message on UI if no no token found or browser does not support clipboard copy.\n     *\n     * @param {any} stream\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"copyStreamToken\",\n    value: function copyStreamToken(stream) {\n      var token = this.getStreamToken(stream);\n\n      if (token) {\n        var error = this.ControllerHelper.constructor.copyToClipboard(token);\n\n        if (error) {\n          this.CloudMessage.error(this.$translate.instant('logs_streams_copy_token_error', {\n            stream: stream.info.title,\n            token_value: token\n          }));\n        } else {\n          this.CloudMessage.info(this.$translate.instant('logs_streams_copy_token_success'));\n        }\n      }\n    }\n    /**\n     * Extracts X-OVH-TOKEN token from given stream.\n     * Throws exception on UI if token was not found.\n     * @param {object} stream\n     * @return {string} stream token if found, empty string otherwise\n     */\n\n  }, {\n    key: \"getStreamToken\",\n    value: function getStreamToken(stream) {\n      var token = this.findStreamTokenValue(stream);\n\n      if (!token) {\n        this.CloudMessage.error(this.$translate.instant('logs_streams_find_token_error', {\n          stream: stream.info.title\n        }));\n      }\n\n      return token;\n    }\n    /**\n     * extracts X-OVH-TOKEN token from given stream\n     * @param {object} stream\n     * @return {string} stream token if found, empty string otherwise\n     */\n\n  }, {\n    key: \"findStreamTokenValue\",\n    value: function findStreamTokenValue(stream) {\n      var _this12 = this;\n\n      var ruleObj = _.find(stream.rules, function (rule) {\n        return rule.field === _this12.LogsConstants.X_OVH_TOKEN;\n      });\n\n      return _.get(ruleObj, 'value');\n    }\n  }, {\n    key: \"getOrderCatalog\",\n    value: function getOrderCatalog(ovhSubsidiary) {\n      return this.LogsOrderService.getOrderCatalog(ovhSubsidiary);\n    }\n  }, {\n    key: \"getAccountDetails\",\n    value: function getAccountDetails(serviceName) {\n      return this.LogsHomeService.getAccountDetails(serviceName);\n    }\n    /**\n     * add additional data to stream before sending back to controller\n     * 1. asynchronously gets notifications of a stream\n     * 2. asynchronously gets archives of a stream\n     * 3. updates operationStreamMap to get number of streams assigned to each operation\n     *\n     * @param {any} serviceName\n     * @param {any} stream\n     * @returns stream object after adding notifications\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"transformStream\",\n    value: function transformStream(serviceName, stream) {\n      _.set(stream, 'info.notifications', []);\n\n      _.set(stream, 'info.archives', []); // asynchronously fetch all notification of a stream\n\n\n      this.LogsStreamsAlertsService.getAlertIds(serviceName, stream.info.streamId).then(function (notifications) {\n        _.set(stream, 'info.notifications', notifications);\n      }); // asynchronously fetch all archives of a stream\n\n      this.LogsStreamsArchivesService.getArchiveIds(serviceName, stream.info.streamId).then(function (archives) {\n        _.set(stream, 'info.archives', archives);\n      });\n      return stream;\n    }\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.LogsApiService.resetAllCache();\n      this.StreamsApiService.resetAllCache();\n      this.StreamsAapiService.resetAllCache();\n      this.AccountingAapiService.resetAllCache(); // refresh home page last modified stream\n\n      this.DetailsAapiService.resetAllCache();\n    }\n  }]);\n\n  return LogsStreamsService;\n}();\n\nangular.module('managerApp').service('LogsStreamsService', LogsStreamsService);",null]}