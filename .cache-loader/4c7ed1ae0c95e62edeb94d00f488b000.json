{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/virtualMachine/add/cloud-project-compute-infrastructure-virtualMachine-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/virtualMachine/add/cloud-project-compute-infrastructure-virtualMachine-add.controller.js","mtime":1539717374476},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeInfrastructureVirtualMachineAddCtrl {\n  constructor($q, $state, $stateParams,\n    CloudFlavorService, CloudImageService, CloudProjectVirtualMachineAddService, CloudRegionService,\n    OvhCloudPriceHelper, OvhApiCloudProjectFlavor, OvhApiCloudProjectImage,\n    OvhApiCloudProjectInstance, OvhApiCloudProjectNetworkPrivate, OvhApiCloudProjectNetworkPublic,\n    OvhApiCloudProjectQuota, OvhApiCloudProjectRegion, OvhApiCloudProjectSnapshot,\n    OvhApiCloudProjectSshKey, CurrencyService, RegionService, ServiceHelper, ovhDocUrl, TARGET,\n    URLS) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.CloudFlavorService = CloudFlavorService;\n    this.CloudImageService = CloudImageService;\n    this.OvhCloudPriceHelper = OvhCloudPriceHelper;\n    this.CloudRegionService = CloudRegionService;\n    this.OvhApiCloudProjectFlavor = OvhApiCloudProjectFlavor;\n    this.OvhApiCloudProjectImage = OvhApiCloudProjectImage;\n    this.OvhApiCloudProjectInstance = OvhApiCloudProjectInstance;\n    this.OvhApiCloudProjectNetworkPrivate = OvhApiCloudProjectNetworkPrivate;\n    this.OvhApiCloudProjectNetworkPublic = OvhApiCloudProjectNetworkPublic;\n    this.OvhApiCloudProjectQuota = OvhApiCloudProjectQuota;\n    this.OvhApiCloudProjectRegion = OvhApiCloudProjectRegion;\n    this.OvhApiCloudProjectSnapshot = OvhApiCloudProjectSnapshot;\n    this.OvhApiCloudProjectSshKey = OvhApiCloudProjectSshKey;\n    this.CurrencyService = CurrencyService;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n    this.VirtualMachineAddService = CloudProjectVirtualMachineAddService;\n    this.ovhDocUrl = ovhDocUrl;\n    this.TARGET = TARGET;\n    this.URLS = URLS;\n  }\n\n  $onInit() {\n    this.serviceName = this.$stateParams.projectId;\n    this.currentCurrency = this.CurrencyService.getCurrentCurrency();\n    this.loaders = {\n      adding: false,\n    };\n    this.model = {\n      billingPeriod: null,\n      flavor: null,\n      imageType: null,\n      name: '',\n      networkId: '',\n      number: 0,\n      region: null,\n      sshKey: null,\n      userData: null,\n    };\n    this.enums = {\n      billingPeriods: ['monthly', 'hourly'],\n      flavorsTypes: [],\n      imagesTypes: [],\n    };\n    this.isNameUpdated = false;\n    this.isPostScriptEnabled = false;\n    this.mostRecentVm = null;\n    this.newSshKey = {\n      name: null,\n      publicKey: null,\n    };\n    this.state = {\n      hasVRack: false,\n    };\n    this.submitted = {};\n    this.urls = {};\n  }\n\n  initProject() {\n    this.promiseQuota = this.OvhApiCloudProjectQuota.v6()\n      .query({ serviceName: this.serviceName }).$promise;\n    this.promisePublicNetworks = this.OvhApiCloudProjectNetworkPublic.v6()\n      .query({ serviceName: this.serviceName }).$promise;\n    this.urls.vLansApiGuide = this.ovhDocUrl.getDocUrl('g2162.public_cloud_et_vrack_-_comment_utiliser_le_vrack_et_les_reseaux_prives_avec_les_instances_public_cloud');\n    if (this.TARGET === 'US') {\n      this.urls.guidesSshkey = this.URLS.guides.ssh.create.US;\n    } else {\n      this.urls.guidesSshkey = this.ovhDocUrl.getDocUrl('g1769.creating_ssh_keys');\n    }\n\n    this.initOsList();\n  }\n\n  cancel() {\n    this.$state.go('iaas.pci-project.compute.infrastructure.list');\n  }\n\n  confirm() {\n    this.addVirtualMachine();\n  }\n\n  /*----------------------------------\n     |  Step 1 : OS or SnapShot choice  |\n     ----------------------------------*/\n\n  initOsList() {\n    this.loaders.step1 = true;\n    return this.$q.all({\n      images: this.OvhApiCloudProjectImage.v6().query({ serviceName: this.serviceName }).$promise\n        .then((images) => {\n          // Image types (linux, windows, ...)\n          this.enums.imagesTypes = this.CloudImageService.constructor.getImageTypes(images);\n          this.images = this.VirtualMachineAddService.getAugmentedImages(images);\n        })\n        .catch(this.ServiceHelper.errorHandler('cpcivm_add_step1_images_ERROR')),\n      snapshots: this.OvhApiCloudProjectSnapshot.v6()\n        .query({ serviceName: this.serviceName }).$promise\n        .then((snapshots) => {\n          this.snapshots = _.map(snapshots, snapshot => _.set(snapshot, 'distribution', _.get(snapshot, 'type', 'linux')));\n        })\n        .catch(this.ServiceHelper.errorHandler('cpcivm_add_step1_shapshots_ERROR')),\n      sshKeys: this.OvhApiCloudProjectSshKey.v6().query({ serviceName: this.serviceName }).$promise,\n      instances: this.OvhApiCloudProjectInstance.v6()\n        .query({ serviceName: this.serviceName }).$promise,\n    })\n      .then(({ sshKeys, instances }) => {\n        this.displayedSnapshots = _.filter(this.snapshots, { status: 'active' });\n        this.displayedImages = this.CloudImageService.groupImagesByType(\n          this.images,\n          this.enums.imagesTypes,\n        );\n        this.displayedApps = this.VirtualMachineAddService.getImageApps(this.images);\n        this.displayedSshKeys = sshKeys;\n\n        this.mostRecentVm = this.VirtualMachineAddService.constructor.getMostRecentVm(instances);\n        if (this.mostRecentVm) {\n          this.model.sshKey = _.find(sshKeys, { id: this.mostRecentVm.sshKeyId });\n        }\n      })\n      .catch(this.ServiceHelper.errorHandler('cpcivm_add_step1_general_ERROR'))\n      .finally(() => {\n        this.loaders.step1 = false;\n      });\n  }\n\n  onSelectChange() {\n    if (this.model.imageType.type === 'windows') {\n      this.addingSshKey = false;\n    }\n  }\n\n  isStep1Valid() {\n    return this.model.imageType && !this.addingSshKey && (this.model.imageType.type !== 'linux' || this.model.sshKey);\n  }\n\n  resetStep1() {\n    this.submitted.step1 = false;\n    this.resetStep2();\n  }\n\n  addSshKey() {\n    if (this.newSshKey.name && this.newSshKey.publicKey) {\n      this.loaders.addingSsh = true;\n      return this.OvhApiCloudProjectSshKey.v6()\n        .save({ serviceName: this.serviceName }, this.newSshKey).$promise\n        .then((newSshKey) => {\n          this.OvhApiCloudProjectSshKey.v6().resetQueryCache();\n          return this.$q.all({\n            newSshKey,\n            sshKeys: this.OvhApiCloudProjectSshKey.v6()\n              .query({ serviceName: this.serviceName }).$promise,\n          });\n        })\n        .then(({ newSshKey, sshKeys }) => {\n          this.displayedSshKeys = sshKeys;\n          this.model.sshKey = newSshKey;\n          this.checkSshKeyByRegion(newSshKey.regions);\n        })\n        .catch(this.ServiceHelper.errorHandler('cpcivm_add_step1_sshKey_adding_ERROR'))\n        .finally(() => {\n          this.resetAddingSshKey();\n          this.loaders.addingSsh = false;\n        });\n    }\n    return false;\n  }\n\n  resetAddingSshKey() {\n    this.model.sshKey = null;\n    this.newSshKey.name = null;\n    this.newSshKey.publicKey = null;\n    this.addingSshKey = false;\n  }\n\n  /*-----------------------------------------\n     |  Step 2 : Region and DataCenter choice  |\n     -----------------------------------------*/\n\n  initRegionsAndDataCenters() {\n    this.loaders.step2 = true;\n    this.submitted.step2 = false;\n    this.resetStep3();\n\n    return this.$q.all({\n      regions: this.OvhApiCloudProjectRegion.v6().query({ serviceName: this.serviceName }).$promise\n        .then((regions) => {\n          this.regions = _.map(regions, region => this.RegionService.getRegion(region));\n          return this.VirtualMachineAddService.getRegionsByImageType(this.regions, this.images, _.get(this.model, 'imageType'));\n        }),\n      quota: this.promiseQuota\n        .then((quota) => { this.quota = quota; })\n        .catch(this.ServiceHelper.errorHandler('cpcivm_add_step2_quota_ERROR')),\n    })\n      .then(({ regions }) => {\n        _.forEach(regions, (region) => {\n          // Add quota info\n          this.CloudRegionService.constructor.addOverQuotaInfos(region, this.quota);\n\n          // Check SSH Key opportunity\n          if (_.get(this.model, 'sshKey.regions', false)) {\n            this.CloudRegionService.constructor.checkSshKey(region, this.model.sshKey.regions);\n          }\n        });\n\n        this.displayedRegions = this.VirtualMachineAddService.constructor\n          .groupRegionsByDatacenter(regions);\n        this.groupedRegions = _.groupBy(this.displayedRegions, 'continent');\n      })\n      .catch(this.ServiceHelper.errorHandler('cpcivm_add_step2_regions_ERROR'))\n      .finally(() => {\n        this.loaders.step2 = false;\n      });\n  }\n\n  isStep2Valid() {\n    return this.model.region && this.model.imageId;\n  }\n\n  resetStep2() {\n    this.submitted.step2 = false;\n    this.model.region = null;\n    this.resetStep3();\n  }\n\n  setImageId() {\n    if (this.CloudImageService.constructor.isSnapshot(this.model.imageType)) {\n      this.model.imageId = this.model.imageType;\n    } else {\n      this.model.imageId = _.find(this.images, {\n        apps: _.get(this.model, 'imageType.apps', false),\n        distribution: this.model.imageType.distribution,\n        nameGeneric: this.model.imageType.nameGeneric,\n        region: this.model.region.microRegion.code,\n        status: 'active',\n        type: _.get(this.model, 'imageType.type', 'linux'),\n      });\n    }\n  }\n\n  checkSshKeyByRegion(sshKeyRegions) {\n    _.forEach(this.displayedRegions, (region) => {\n      _.forEach(region.dataCenters, (dataCenter) => {\n        this.CloudRegionService.constructor.checkSshKey(dataCenter, sshKeyRegions);\n      });\n    });\n  }\n\n  updateSshKeyRegion() {\n    return this.VirtualMachineAddService.openSshKeyRegionModal(this.model.sshKey)\n      .then(() => {\n        this.loaders.step2 = true;\n        return this.OvhApiCloudProjectSshKey.v6().remove({\n          serviceName: this.serviceName,\n          keyId: this.model.sshKey.id,\n        }).$promise;\n      })\n      .then(() => this.OvhApiCloudProjectSshKey.v6().save({ serviceName: this.serviceName }, {\n        name: this.model.sshKey.name,\n        publicKey: this.model.sshKey.publicKey,\n      }).$promise)\n      .then((sshKey) => {\n        this.model.sshKey = sshKey;\n        _.set(_.find(this.displayedSshKeys, { id: sshKey.id }), 'regions', sshKey.regions);\n        this.checkSshKeyByRegion(sshKey.regions);\n      })\n      .finally(() => {\n        this.loaders.step2 = false;\n      });\n  }\n\n  /*---------------------\n     |  Step 3: Instances  |\n     ---------------------*/\n\n  fetchingAugmentedFlavors() {\n    return this.OvhApiCloudProjectFlavor.v6()\n      .query({\n        serviceName: this.serviceName,\n        region: this.model.region.microRegion.code,\n      }).$promise\n      .then((flavors) => {\n        this.flavors = flavors;\n        const augmentedFlavors = this.VirtualMachineAddService.filterFlavorsByType(\n          flavors,\n          this.model.imageType.type,\n        );\n        this.enums.flavorsTypes = this.CloudFlavorService.constructor\n          .getFlavorTypes(augmentedFlavors);\n        return augmentedFlavors;\n      });\n  }\n\n  initInstances() {\n    this.loaders.step3 = true;\n    this.submitted.step3 = false;\n    this.resetStep4();\n\n    return this.$q.all({\n      flavors: this.fetchingAugmentedFlavors(),\n      hasVRack: this.VirtualMachineAddService.hasVRack(this.serviceName),\n      prices: this.OvhCloudPriceHelper.getPrices(this.serviceName),\n    })\n      .then(({ flavors, hasVRack, prices }) => {\n        this.prices = prices;\n        this.state.hasVRack = hasVRack;\n\n        // Load private networks asynchronously\n        if (hasVRack) {\n          this.getPrivateNetworks();\n        }\n\n        // Add price and quota info to each instance type\n        _.forEach(flavors, (flavor) => {\n          this.CloudFlavorService.constructor.addPriceInfos(flavor, this.prices);\n          this.CloudFlavorService.constructor.addOverQuotaInfos(flavor, this.quota, _.get(this.model, 'imageId.minDisk', 0), _.get(this.model, 'imageId.minRam', 0));\n        });\n\n        // Remove flavor without price (not in the catalog)\n        _.remove(flavors, flavor => _.isEmpty(_.get(flavor, 'price.price.text', '')));\n\n        let filteredFlavors = this.VirtualMachineAddService.constructor.getFilteredFlavorsByRegion(\n          flavors,\n          this.model.region.microRegion.code,\n        );\n\n        // Remove flavors if OS has restricted\n        const restrictedFlavors = _.get(this.model, 'imageId.flavorType') || [];\n        if (restrictedFlavors.length > 0) {\n          filteredFlavors = _.filter(\n            filteredFlavors,\n            flavor => _.indexOf(restrictedFlavors, flavor.shortType) > -1,\n          );\n        }\n\n        // Remove incompatible flavors with selected image\n        filteredFlavors = _.filter(filteredFlavors, (flavor) => {\n          const restrictedImages = _.get(flavor, 'imageType', false);\n          return restrictedImages === false || _.some(restrictedImages, name => (new RegExp(name, 'gi')).test(this.model.imageType.name));\n        });\n\n        this.groupedFlavors = this.VirtualMachineAddService.groupFlavorsByCategory(\n          filteredFlavors,\n          this.enums.flavorsTypes,\n        );\n      })\n      .catch(this.ServiceHelper.errorHandler('cpcivm_add_step3_flavors_ERROR'))\n      .finally(() => {\n        this.loaders.step3 = false;\n      });\n  }\n\n  isStep3Valid() {\n    return this.model.flavor != null;\n  }\n\n  resetStep3() {\n    this.model.flavor = null;\n    this.submitted.step3 = false;\n    this.resetStep4();\n  }\n\n  /*--------------------------\n     |  Step 4: Instance config |\n     --------------------------*/\n\n  initInstanceConfiguration() {\n    this.loaders.step4 = true;\n    this.submitted.step4 = false;\n    // Set instance creation number to 1 and name\n    this.model.number = 1;\n    this.setInstanceName();\n\n    return this.promisePublicNetworks\n      .then((publicNetworks) => { this.publicNetworks = publicNetworks; })\n      .catch(() => { this.publicNetworks = []; })\n      .finally(() => {\n        this.loaders.step4 = false;\n      });\n  }\n\n  isStep4Valid() {\n    return !_.isEmpty(this.model.name)\n      && this.model.number > 0\n      && (!this.state.hasVRack || !_.isEmpty(this.model.networkId));\n  }\n\n  resetStep4() {\n    this.model.network = null;\n    this.model.number = 1;\n    if (!this.isNameUpdated) {\n      this.model.name = '';\n    }\n    this.submitted.step4 = false;\n    this.resetStep5();\n  }\n\n  enablePostScript() {\n    this.isPostScriptEnabled = true;\n  }\n\n  getPrivateNetworks() {\n    this.loaders.privateNetworks = true;\n    return this.OvhApiCloudProjectNetworkPrivate.v6()\n      .query({ serviceName: this.serviceName }).$promise\n      .then((networks) => {\n        this.privateNetworks = networks;\n        return this.VirtualMachineAddService.getPrivateNetworksSubNets(\n          this.serviceName,\n          this.privateNetworks,\n        );\n      }).then((subNets) => {\n        this.displayedPrivateNetworks = this.VirtualMachineAddService.constructor\n          .getFilteredPrivateNetworksByRegion(\n            this.privateNetworks,\n            this.model.region.microRegion.code,\n            subNets,\n          );\n      }).catch(() => {\n        this.displayedPrivateNetworks = [];\n      }).finally(() => {\n        this.loaders.privateNetworks = false;\n      });\n  }\n\n  setInstanceName() {\n    if (_.isEmpty(this.model.name) || !this.isNameUpdated) {\n      this.model.name = `${_.get(this.model, 'flavor.name', '')}-${_.get(this.model, 'region.microRegion.code', '')}`.toLowerCase();\n    }\n  }\n\n  /*--------------------------\n     |  Step 5: Billing period  |\n     --------------------------*/\n\n  initBillingPeriod() {\n    this.resetStep5();\n  }\n\n  isStep5Valid() {\n    return _.isString(this.model.billingPeriod) && !_.isEmpty(this.model.billingPeriod);\n  }\n\n  resetStep5() {\n    this.model.billingPeriod = null;\n    this.submitted.step5 = false;\n  }\n\n  /*-------------------\n     |  Submit the form  |\n     -------------------*/\n\n  addVirtualMachine() {\n    this.loaders.adding = true;\n    this.submitted.step4 = true;\n\n    if (!_.isEmpty(this.model.networkId) && this.model.networkId !== 'none') {\n      this.model.networks = [\n        { networkId: this.model.networkId },\n        { networkId: _.first(this.publicNetworks).id },\n      ];\n    }\n\n    return this.VirtualMachineAddService.createVirtualMachine(this.serviceName, this.model)\n      .then(() => {\n        this.$state.go('iaas.pci-project.compute.infrastructure.list');\n      })\n      .catch(this.ServiceHelper.errorHandler('cpcivm_add_launch_ERROR'))\n      .catch(() => {\n        this.submitted.step4 = false;\n        this.loaders.adding = false;\n      });\n  }\n}\n\nangular.module('managerApp').controller('CloudProjectComputeInfrastructureVirtualMachineAddCtrl', CloudProjectComputeInfrastructureVirtualMachineAddCtrl);\n"]}