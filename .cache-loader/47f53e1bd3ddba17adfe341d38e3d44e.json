{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/history/details/cloud-project-billing-history-details.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/history/details/cloud-project-billing-history-details.controller.js","mtime":1539717141959},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectBillingHistoryDetailsCtrl',\n  function CloudProjectBillingHistoryDetailsCtrl($state, $q, $translate, $stateParams, validParams,\n    CloudMessage, CloudProjectBillingService, OvhApiCloudProjectUsageHistory,\n    OvhApiCloudProjectUsageCurrent, OvhApiCloudProject, OvhApiMe, REDIRECT_URLS) {\n    const self = this;\n    self.year = null;\n    self.month = null;\n    self.data = {};\n    self.monthBilling = null;\n    self.billingUrl = REDIRECT_URLS.billing;\n\n    self.getHourlyBillingDateInfo = function () {\n      const prev = moment(self.monthBilling).subtract(1, 'month');\n      return {\n        month: prev.format('MMMM'),\n        year: prev.year(),\n      };\n    };\n\n    self.getBillingDateInfo = function () {\n      return {\n        month: self.monthBilling.format('MMMM'),\n        year: self.monthBilling.year(),\n      };\n    };\n\n    function getConsumptionDetails(periods) {\n      const detailPromises = _.map(periods, period => OvhApiCloudProjectUsageHistory.v6().get({\n        serviceName: $stateParams.projectId,\n        usageId: period.id,\n      }).$promise);\n\n      return $q.all(detailPromises)\n        .then((periodDetails) => {\n          let monthlyDetails;\n\n          if (moment.utc().isSame(self.monthBilling, 'month')) {\n            monthlyDetails = OvhApiCloudProjectUsageCurrent.v6()\n              .get({ serviceName: $stateParams.projectId }).$promise;\n          } else {\n            monthlyDetails = _.find(periodDetails, detail => moment.utc(detail.period.from).isSame(self.monthBilling, 'month'));\n          }\n\n          const hourlyDetails = _.find(\n            periodDetails,\n            detail => moment.utc(detail.period.from).isSame(self.previousMonth, 'month'),\n          );\n\n          return {\n            hourly: hourlyDetails,\n            monthly: monthlyDetails,\n          };\n        })\n        .then(details => $q.all(details)\n          .then(allDetails => CloudProjectBillingService.getConsumptionDetails(\n            allDetails.hourly, allDetails.monthly,\n          )));\n    }\n\n    function initConsumptionHistory() {\n      return OvhApiCloudProjectUsageHistory.v6().query({\n        serviceName: $stateParams.projectId,\n        from: self.previousMonth.format(),\n        to: self.monthBilling.format(),\n      }).$promise\n        .then(historyPeriods => getConsumptionDetails(historyPeriods))\n        .then((details) => {\n          self.data = details;\n        });\n    }\n\n    function init() {\n      self.loading = true;\n\n      self.year = validParams.year;\n      self.month = validParams.month;\n\n      self.monthBilling = moment.utc({ y: validParams.year, M: validParams.month - 1, d: 1 });\n      self.previousMonth = moment.utc(self.monthBilling).subtract(1, 'month');\n\n      initConsumptionHistory()\n        .catch((err) => {\n          CloudMessage.error([$translate.instant('cpb_error_message'), (err.data && err.data.message) || ''].join(' '));\n          return $q.reject(err);\n        })\n        .finally(() => {\n          self.loading = false;\n        });\n    }\n\n    init();\n  });\n"]}