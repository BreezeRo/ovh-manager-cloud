{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/deskaas/deskaas-details/deskaas-details.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/deskaas/deskaas-details/deskaas-details.controller.js","mtime":1539717142175},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('DeskaasDetailsCtrl',\n  function DeskaasDetailsCtrl(OvhApiDeskaasService, $stateParams, $scope, ControllerHelper,\n    CloudMessage, $translate, $state, $q, DESKAAS_ACTIONS, $uibModal, OvhApiMe, deskaasSidebar,\n    DeskaasService, DESKAAS_REFERENCES, SidebarMenu, FeatureAvailabilityService, ServiceHelper) {\n    const self = this;\n\n    self.services = {};\n    self.details = {};\n    self.messages = [];\n    self.user = {};\n    self.upgradeOptions = [];\n    self.selectedUpgrade = '';\n    self.tasksHandler = null;\n    self.ServiceHelper = ServiceHelper;\n\n    self.references = DESKAAS_REFERENCES;\n\n    self.OrderPlanOffers = [];\n\n    self.actions = {\n      reinit: {\n        text: $translate.instant('vdi_btn_restore'),\n        callback: () => self.restoreService($stateParams.serviceName),\n        isAvailable: () => self.flags.editable(),\n      },\n      restart: {\n        text: $translate.instant('vdi_btn_reboot'),\n        callback: () => self.rebootService($stateParams.serviceName),\n        isAvailable: () => self.flags.editable(),\n      },\n      changePassword: {\n        text: $translate.instant('vdi_btn_reset_password'),\n        callback: () => self.resetPassword($stateParams.serviceName),\n        isAvailable: () => self.flags.editable(),\n      },\n      remove: {\n        text: $translate.instant('vdi_btn_delete'),\n        callback: () => self.deleteService($stateParams.serviceName),\n        isAvailable: () => self.flags.editable(),\n      },\n      accessConsole: {\n        text: $translate.instant('vdi_btn_console'),\n        callback: () => self.getConsole($stateParams.serviceName),\n        isAvailable: () => self.flags.editable(),\n      },\n      changeOffer: {\n        text: $translate.instant('vdi_btn_upgrade'),\n        callback: () => self.upgrade($stateParams.serviceName),\n        isAvailable: () => self.flags.editable() && self.flags.can_upgrade(),\n      },\n      changeAlias: {\n        text: $translate.instant('common_modify'),\n        callback: () => self.changeAlias($stateParams.serviceName),\n        isAvailable: () => self.flags.editable(),\n      },\n      manageAutorenew: {\n        text: $translate.instant('common_manage'),\n        href: ControllerHelper.navigation.getUrl('renew', { serviceName: $stateParams.serviceName, serviceType: 'DESKAAS' }),\n        isAvailable: () => true,\n      },\n      manageContact: {\n        text: $translate.instant('common_manage'),\n        href: ControllerHelper.navigation.getUrl('contacts', { serviceName: $stateParams.serviceName }),\n        isAvailable: () => FeatureAvailabilityService.hasFeature('CONTACTS', 'manage'),\n      },\n    };\n\n\n    self.loadMessage = function () {\n      CloudMessage.unSubscribe('deskaas.details');\n      self.messageHandler = CloudMessage.subscribe('deskaas.details', { onMessage: () => self.refreshMessage() });\n    };\n\n    self.refreshMessage = function () {\n      self.messages = self.messageHandler.getMessages();\n    };\n\n    /*\n      restartInstance: {\n        text: this.$translate.instant(\"cloud_db_home_tile_status_instance_restart\"),\n        callback: () => this.CloudDbActionService.showInstanceRestartModal(\n          this.projectId,\n          this.instanceId\n        ),\n        isAvailable: () => !this.instance.loading && !this.instance.data.taskId\n      }\n    */\n\n    function handleCancelConfirmation() {\n      if ($stateParams.action === 'confirmTerminate') {\n        return self.confirmTerminate($stateParams.serviceName);\n      }\n      return $q.when();\n    }\n\n    function updateTasksStatus(taskDetail, isUserTask) {\n      self.tasksHandler.addOrUpdate(taskDetail, isUserTask);\n    }\n\n    function handleTask(taskId, isUserTask) {\n      return OvhApiDeskaasService.v6()\n        .getTask({ serviceName: $stateParams.serviceName, taskId }, null).$promise\n        .then((taskDetails) => {\n          updateTasksStatus(taskDetails, isUserTask);\n        });\n    }\n\n    function init(initTasks) {\n      self.tasksHandler = new TasksHandler(); // eslint-disable-line\n\n      self.serviceName = $stateParams.serviceName;\n      self.token = $stateParams.token;\n\n      self.flags.init.serviceInfos = true;\n      self.flags.init.details = true;\n      self.loadMessage();\n\n      $q.all([\n        self.serviceInfos().then(() => {\n          self.getDetails().then(() => {\n            DeskaasService.getMe().then((me) => {\n              self.OrderPlanOffers = DeskaasService.fetchProductPlans(me);\n            });\n            if (self.services.status === 'ok') {\n              self.flags.init.getTasks = true;\n              self.flags.init.user = true;\n              $q.all([\n                handleCancelConfirmation(),\n                initTasks ? self.getRunningTasks() : $q.when(),\n                self.getUser(),\n                $stateParams.followTask ? handleTask($stateParams.followTask) : $q.when(),\n              ]);\n            }\n          });\n        }),\n      ]);\n    }\n\n    function reinit(taskName) {\n      switch (taskName) {\n        case DESKAAS_ACTIONS.RESTORE:\n        case DESKAAS_ACTIONS.REBOOT:\n        case DESKAAS_ACTIONS.DELETE:\n        case DESKAAS_ACTIONS.UPDATE_USER_PWD:\n          // do nothing\n          break;\n\n        case DESKAAS_ACTIONS.UPGRADE:\n          init(false);\n          break;\n\n        case DESKAAS_ACTIONS.UPDATE_ALIAS:\n        case DESKAAS_ACTIONS.UPDATE_USERNAME:\n          self.getDetails()\n            .then(() => {\n              self.changeMenuTitle(self.details.serviceName, self.details.alias !== 'noAlias' ? self.details.alias : self.details.serviceName);\n            });\n          break;\n        default:\n          break;\n      }\n    }\n\n    function onTaskError(taskDetails) {\n      if (!_.isEmpty(taskDetails)) {\n        CloudMessage.error($translate.instant('vdi_task_error', taskDetails));\n      } else {\n        CloudMessage.error($translate.instant('common_api_error'));\n      }\n\n      self.flags.restoring = false;\n      self.flags.deleting = false;\n      self.flags.upgrading = false;\n      self.flags.resettingPassword = false;\n      // self.flags.error = true;\n    }\n\n    function onTaskSuccess(taskDetails) {\n      switch (taskDetails.name) {\n        case DESKAAS_ACTIONS.RESTORE:\n          self.flags.restoring = false;\n          CloudMessage.success($translate.instant('vdi_restored'));\n          break;\n\n        case DESKAAS_ACTIONS.REBOOT:\n          self.flags.rebooting = false;\n          CloudMessage.success($translate.instant('vdi_rebooted'));\n          break;\n\n        case DESKAAS_ACTIONS.DELETE:\n          self.flags.deleting = false;\n          CloudMessage.success($translate.instant('vdi_deleted'));\n          break;\n\n        case DESKAAS_ACTIONS.UPGRADE:\n          self.flags.upgrading = false;\n          CloudMessage.success($translate.instant('vdi_upgraded'));\n          break;\n\n        case DESKAAS_ACTIONS.UPDATE_USER_PWD:\n          self.flags.resettingPassword = false;\n          CloudMessage.success($translate.instant('vdi_pwd_resetted'));\n          break;\n\n        case DESKAAS_ACTIONS.UPDATE_ALIAS:\n          self.flags.changingAlias = false;\n          CloudMessage.success($translate.instant('vdi_alias_changed'));\n          break;\n\n        case DESKAAS_ACTIONS.UPDATE_USERNAME:\n          self.flags.changingUsername = false;\n          CloudMessage.success($translate.instant('vdi_username_changed'));\n          break;\n\n        case DESKAAS_ACTIONS.CONSOLE_ACCESS:\n          CloudMessage.success($translate.instant('vdi_console_done'));\n          break;\n        default:\n          break;\n      }\n\n      reinit(taskDetails.name);\n    }\n\n    // Task handler\n    const TasksHandler = function () {\n      // FIXME we do not check if some new task are created in another session\n      // List of tasks to poll\n      const selfTask = this;\n      selfTask.tasks = {};\n      selfTask.cleanTasks = [];\n      const allowedTask = []; // use getAllowedTask to populate the array\n\n      this.getAllowedTasks = function () {\n        if (allowedTask.length === 0) {\n          // Get taskName from actions constant\n          Object.keys(DESKAAS_ACTIONS).forEach((taskName) => {\n            allowedTask.push(DESKAAS_ACTIONS[taskName]);\n          });\n        }\n        return allowedTask;\n      };\n\n      // Do we already know this task\n      this.isIn = function (task) {\n        return typeof selfTask.tasks[task.taskId] !== 'undefined';\n      };\n\n      this.length = function () {\n        return Object.keys(selfTask.tasks).length;\n      };\n\n      // Check if we have running task\n      this.tasksIsRunning = function () {\n        let isRunning = false;\n        Object.keys(selfTask.tasks).forEach((key) => {\n          const value = selfTask.tasks[key];\n          // We do not block if the console_access is not done\n          if (value.name !== DESKAAS_ACTIONS.CONSOLE_ACCESS && value.state !== 'done' && value.state !== 'canceled') {\n            isRunning = true;\n          }\n        });\n        return isRunning;\n      };\n\n      this.getCleanTasks = function () {\n        return _.mapValues(selfTask.tasks, value => value);\n      };\n\n      // Check if we have a task on error\n      this.taskOnError = function () {\n        let onError = false;\n        Object.keys(selfTask.tasks).forEach((key) => {\n          const value = selfTask.tasks[key];\n          if (value.state === 'error') {\n            onError = true;\n          }\n        });\n        return onError;\n      };\n\n      this.addOrUpdate = function (task, isUserTask) {\n        if (typeof task.taskId === 'undefined') {\n          return;\n        }\n        if (selfTask.getAllowedTasks().indexOf(task.name) === -1) {\n          return; // task not allowed\n        }\n\n        const opts = {\n          serviceName: $stateParams.serviceName,\n          taskId: task.taskId,\n          isUserTask,\n        };\n        _.set(task, 'displayState', $translate.instant(`vdi_task_state_${task.state}`));\n        _.set(task, 'displayName', $translate.instant(`vdi_task_name_${task.name}`));\n        _.set(task, 'status', task.state);\n        if (selfTask.isIn(task)) {\n          // we have the task, we need to update\n          // TODO If task change from one status to error or problem we need to display a message\n          if ((task.state === 'error' || task.state === 'problem') && selfTask.tasks[task.taskId].state !== task.state) {\n            // Display message and set flags\n            onTaskError(task);\n          }\n          selfTask.tasks[task.taskId].state = task.state;\n          selfTask.tasks[task.taskId].displayState = task.displayState;\n          selfTask.tasks[task.taskId].displayName = task.displayName;\n          selfTask.tasks[task.taskId].lastModificationDate = task.lastModificationDate;\n          selfTask.tasks[task.taskId].progress = task.progress;\n          selfTask.tasks[task.taskId].status = task.state;\n          // TODO remove task if status == 'done' and display a message\n          if (task.state === 'done') {\n            OvhApiDeskaasService.stopPollTask($scope, opts);\n            onTaskSuccess(task);\n          } else if (task.state === 'canceled') {\n            OvhApiDeskaasService.stopPollTask($scope, opts);\n          }\n          return;\n        }\n        _.set(task, 'serviceName', $stateParams.serviceName);\n        _.set(task, 'isUserTask', false);\n        _.set(task, 'poller', OvhApiDeskaasService.pollTask($scope, opts).then(selfTask.addOrUpdate, selfTask.addOrUpdate, selfTask.addOrUpdate));\n        // Add a new entry in the map\n        selfTask.tasks[task.taskId] = task;\n        selfTask.cleanTasks.push(task);\n      };\n    };\n\n    self.flags = {\n      init: {\n        getTasks: false,\n        details: false,\n        serviceInfos: false,\n        user: false,\n      },\n      can_upgrade() {\n        let ref = [];\n        // Tasks are retrieved, no upgrading and planCode and offers are retrieved\n        if (!self.flags.init.getTasks && !self.flags.upgrading && _.has(self, 'details.planCode') && self.OrderPlanOffers.length !== 0) {\n          ref = DeskaasService.getUpgradeOptions(self.details.planCode);\n        }\n        self.upgradeOptions = ref;\n        return self.upgradeOptions.length !== 0;\n      },\n      initializing() {\n        return self.flags.init.getTasks\n          || self.flags.init.details\n          || self.flags.init.serviceInfos\n          || self.flags.init.user;\n      },\n      restoring: false,\n      rebooting: false,\n      upgrading: false,\n      resettingPassword: false,\n      changingAlias: false,\n      changingUsername: false,\n      deleting: false,\n      error() { return self.tasksHandler.taskOnError(); },\n      taskRunning() { return self.tasksHandler.tasksIsRunning(); },\n      ready() { return !self.flags.taskRunning(); },\n      actionable() { return self.services.status === 'ok'; },\n      editable() {\n        return self.flags.ready() && !self.flags.initializing()\n                && !self.flags.error() && self.flags.actionable();\n      },\n    };\n\n    function handleMethodCall(promise, success) {\n      return promise\n        .then(success)\n        .catch((err) => {\n          const msg = _.get(err, 'data.message', '');\n          CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n          return $q.reject(err);\n        });\n    }\n\n    function handleServiceMethodCall(promise, successMessage, flagName) {\n      self.flags[flagName] = true;\n\n      return handleMethodCall(\n        promise,\n        (response) => {\n          CloudMessage.success(successMessage);\n          return response;\n        },\n      )\n        .catch((err) => {\n          self.flags[flagName] = false;\n          return $q.reject(err);\n        });\n    }\n\n    function getConsole() {\n      const promise = OvhApiDeskaasService.v6()\n        .console({ serviceName: $stateParams.serviceName }, null).$promise;\n\n      return handleServiceMethodCall(\n        promise,\n        $translate.instant('vdi_console_task'),\n        'getConsoleAccess',\n      )\n        .then((response) => {\n          handleTask(response.taskId, true);\n        });\n    }\n\n    self.getConsole = function () {\n      return ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/deskaas/deskaas-get-console-access/deskaas-get-console-access.html',\n          controller: 'DeskaasGetConsoleAccessCtrl',\n          controllerAs: 'DeskaasGetConsoleAccessCtrl',\n          backdrop: 'static',\n          size: 'md',\n        },\n      })\n        .then(() => {\n          getConsole().catch((err) => {\n            const msg = _.get(err, 'data.message', '');\n            CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n          });\n        });\n    };\n\n    self.deleteService = function () {\n      return ControllerHelper.modal.showConfirmationModal({\n        titleText: $translate.instant('vdi_btn_delete'),\n        text: $translate.instant('vdi_confirm_delete'),\n      })\n        .then(() => {\n          const promise = OvhApiDeskaasService.v6()\n            .deleteService({ serviceName: $stateParams.serviceName }, null).$promise;\n\n          return handleServiceMethodCall(\n            promise,\n            $translate.instant('vdi_deleting'),\n            'deleting',\n          );\n        });\n    };\n\n    function resetPassword(passwordParams) {\n      let promise;\n\n      if (passwordParams.generatePwd) {\n        promise = OvhApiDeskaasService.v6()\n          .resetPassword({ serviceName: $stateParams.serviceName }, null).$promise;\n      } else if (passwordParams.password) {\n        promise = OvhApiDeskaasService.v6()\n          .resetPassword({\n            serviceName: $stateParams.serviceName,\n          }, {\n            password: passwordParams.password,\n          }).$promise;\n      } else {\n        return $q.when();\n      }\n\n      return handleServiceMethodCall(\n        promise,\n        $translate.instant('vdi_resetting_password'),\n        'resettingPassword',\n      )\n        .then((response) => {\n          handleTask(response.taskId, true);\n        });\n    }\n\n    self.resetPassword = function () {\n      const modal = $uibModal.open({\n        templateUrl: 'app/deskaas/deskaas-change-password/deskaas-change-password.html',\n        controller: 'DeskaasChangePasswordCtrl',\n        controllerAs: 'vm',\n        backdrop: 'static',\n        size: 'lg',\n        resolve: {\n          service() { return self.serviceName; },\n        },\n      });\n\n      modal.result.then((modalValues) => {\n        resetPassword(modalValues)\n          .catch((err) => {\n            const msg = _.get(err, 'data.message', '');\n            CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n          });\n      });\n    };\n\n    self.restoreService = function () {\n      return ControllerHelper.modal.showConfirmationModal({\n        titleText: $translate.instant('vdi_btn_restore'),\n        text: $translate.instant('vdi_confirm_restore'),\n      })\n        .then(() => {\n          const promise = OvhApiDeskaasService.v6()\n            .restoreService({ serviceName: $stateParams.serviceName }, null).$promise;\n\n          return handleServiceMethodCall(\n            promise,\n            $translate.instant('vdi_restoring'),\n            'restoring',\n          )\n            .then((response) => {\n              handleTask(response.taskId);\n            });\n        });\n    };\n\n    self.rebootService = function () {\n      return ControllerHelper.modal.showConfirmationModal({\n        titleText: $translate.instant('vdi_btn_reboot'),\n        text: $translate.instant('vdi_confirm_reboot'),\n      })\n        .then(() => {\n          const promise = OvhApiDeskaasService.v6()\n            .rebootService({ serviceName: $stateParams.serviceName }, null).$promise;\n\n          return handleServiceMethodCall(\n            promise,\n            $translate.instant('vdi_rebooting'),\n            'rebooting',\n          )\n            .then((response) => {\n              handleTask(response.taskId);\n            });\n        });\n    };\n\n    self.serviceInfos = function () {\n      self.flags.init.serviceInfos = true;\n\n      const promise = OvhApiDeskaasService.v6()\n        .serviceInfos({ serviceName: $stateParams.serviceName }).$promise;\n\n      return handleMethodCall(\n        promise,\n        (response) => {\n          self.services = response;\n        },\n      )\n        .finally(() => {\n          self.flags.init.serviceInfos = false;\n        });\n    };\n\n    self.hasValidAlias = function () {\n      const alias = _.get(self, 'details.alias', 'noAlias');\n      return alias && alias !== 'noAlias';\n    };\n\n    function changeAlias(newDisplayName) {\n      let promise;\n\n      if (newDisplayName) {\n        promise = OvhApiDeskaasService.v6()\n          .changeAlias({\n            serviceName: $stateParams.serviceName,\n          }, {\n            alias: newDisplayName,\n          }).$promise;\n      } else {\n        return $q.when();\n      }\n\n      return handleServiceMethodCall(\n        promise,\n        $translate.instant('vdi_alias_changing'),\n        'changingAlias',\n      )\n        .then((response) => {\n          handleTask(response.taskId, false);\n        });\n    }\n\n    self.changeAlias = function () {\n      ControllerHelper.modal.showNameChangeModal({\n        serviceName: self.details.serviceName,\n        displayName: self.details.alias !== 'noAlias' ? self.details.alias : '',\n      })\n        .then((newDisplayName) => {\n          changeAlias(newDisplayName).catch((err) => {\n            const msg = _.get(err, 'data.message', '');\n            CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n          });\n        });\n    };\n\n    self.upgrade = function () {\n      $state.go('deskaas.details.upgrade', {\n        serviceName: self.serviceName,\n        references: self.upgradeOptions,\n      });\n    };\n\n    function changeUsername(modalData) {\n      let promise;\n\n      if (modalData.newUsername) {\n        promise = OvhApiDeskaasService.v6()\n          .changeUsername({\n            serviceName: $stateParams.serviceName,\n          }, {\n            username: modalData.newUsername,\n          }).$promise;\n      } else {\n        return $q.when();\n      }\n\n      return handleServiceMethodCall(\n        promise,\n        $translate.instant('vdi_username_changing'),\n        'changingUsername',\n      )\n        .then((response) => {\n          handleTask(response.taskId, true);\n        });\n    }\n\n    self.changeUsername = function () {\n      const modal = $uibModal.open({\n        templateUrl: 'app/deskaas/deskaas-change-username/deskaas-change-username.html',\n        controller: 'DeskaasChangeUsernameCtrl',\n        controllerAs: 'DeskaasChangeUsernameCtrl',\n        backdrop: 'static',\n        size: 'md',\n        resolve: {\n          service() { return self.serviceName; },\n        },\n      });\n\n      modal.result.then((modalData) => {\n        changeUsername(modalData).catch((err) => {\n          const msg = _.get(err, 'data.message', '');\n          CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n        });\n      });\n    };\n\n    function confirmTerminate(terminateParams) {\n      let promise;\n\n      if (terminateParams.token && terminateParams.reason) {\n        promise = OvhApiDeskaasService.v6()\n          .confirmTerminate({\n            serviceName: $stateParams.serviceName,\n          }, {\n            token: terminateParams.token,\n            reason: terminateParams.reason,\n            commentary: terminateParams.commentary,\n          }).$promise;\n      } else {\n        return $q.when();\n      }\n\n      return handleServiceMethodCall(\n        promise,\n        $translate.instant('vdi_terminate_confirming'),\n        'confirmingTerminate',\n      )\n        .then((response) => {\n          handleTask(response.taskId, true);\n        });\n    }\n\n    self.confirmTerminate = function () {\n      return ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/deskaas/deskaas-confirm-terminate/deskaas-confirm-terminate.html',\n          controller: 'DeskaasConfirmTerminateCtrl',\n          controllerAs: 'DeskaasConfirmTerminateCtrl',\n          backdrop: 'static',\n          size: 'md',\n          resolve: {\n            service() { return self.serviceName; },\n            token() { return $stateParams.token; },\n          },\n        },\n      })\n        .then((modalData) => {\n          confirmTerminate(modalData).catch((err) => {\n            const msg = _.get(err, 'data.message', '');\n            CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n          });\n        });\n    };\n\n    self.getDetails = function () {\n      self.flags.init.details = true;\n\n      const promise = DeskaasService.getDetails($stateParams.serviceName);\n\n      return handleMethodCall(\n        promise,\n        (response) => {\n          response.displayName = response.alias === 'noAlias' ? response.serviceName : response.alias;\n          self.services.offer = _.get(self.references[response.planCode], 'name');\n          self.details = response;\n        },\n      )\n        .finally(() => {\n          self.flags.init.details = false;\n        });\n    };\n\n    self.getUser = function () {\n      self.flags.init.user = true;\n\n      const promise = OvhApiDeskaasService.v6()\n        .getUser({ serviceName: $stateParams.serviceName }).$promise;\n\n      return handleMethodCall(\n        promise,\n        (response) => {\n          self.user = response;\n        },\n      )\n        .finally(() => {\n          self.flags.init.user = false;\n        });\n    };\n\n    self.taskBackgroud = function (task) {\n      if (task.state === 'error') {\n        return 'bg-danger';\n      }\n      if (task.state === 'todo') {\n        return 'bg-info';\n      }\n      if (task.state === 'done') {\n        return 'bg-success';\n      }\n      return 'bg-warning';\n    };\n\n\n    function getInitTasks(taskIds) {\n      if (taskIds.length === 0) {\n        self.flags.init.getTasks = false;\n        return $q.when();\n      } if (taskIds.length > 1) {\n        return OvhApiDeskaasService.v6()\n          .getTaskBatch({ serviceName: $stateParams.serviceName, taskId: taskIds }, null).$promise\n          .then((tasksDetails) => {\n            tasksDetails.forEach((taskDetail) => {\n              updateTasksStatus(taskDetail.value);\n            });\n            self.flags.init.getTasks = false;\n          });\n      }\n      return OvhApiDeskaasService.v6()\n        .getTask({ serviceName: $stateParams.serviceName, taskId: taskIds }, null).$promise\n        .then((tasksDetail) => {\n          updateTasksStatus(tasksDetail);\n          self.flags.init.getTasks = false;\n        });\n    }\n\n    self.changeMenuTitle = function (serviceName, displayName) {\n      const menuItem = SidebarMenu.getItemById(serviceName);\n      if (menuItem) {\n        menuItem.title = displayName;\n      }\n    };\n\n    self.getRunningTasks = function () {\n      self.flags.init.getTasks = true;\n\n      return $q.all([\n\n        OvhApiDeskaasService.v6()\n          .getAllTasks({ serviceName: $stateParams.serviceName }, null).$promise,\n        OvhApiDeskaasService.v6()\n          .getDoneTasks({ serviceName: $stateParams.serviceName }, null).$promise,\n        OvhApiDeskaasService.v6()\n          .getCanceledTasks({ serviceName: $stateParams.serviceName }, null).$promise,\n\n      ]).then((elements) => {\n        let tasks = elements[0];\n\n        tasks = _.difference(tasks, elements[1]);\n        tasks = _.difference(tasks, elements[2]);\n\n        return tasks;\n      }).then((runningTasks) => {\n        getInitTasks(runningTasks);\n      });\n    };\n\n    init(true);\n  });\n"]}