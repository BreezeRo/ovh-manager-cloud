{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/server/iplb-server-edit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/server/iplb-server-edit.controller.js","mtime":1539717142212},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerServerEditCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerServerEditCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"CloudMessage\", \"ControllerHelper\", \"IpLoadBalancerConstant\", \"IpLoadBalancerServerService\"];\n\n  function IpLoadBalancerServerEditCtrl($q, $state, $stateParams, CloudMessage, ControllerHelper, IpLoadBalancerConstant, IpLoadBalancerServerService) {\n    _classCallCheck(this, IpLoadBalancerServerEditCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerServerService = IpLoadBalancerServerService;\n    this.initLoaders();\n  }\n\n  _createClass(IpLoadBalancerServerEditCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.farmTypeLoader = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerServerService.getFarmType(_this.$stateParams.serviceName, _this.$stateParams.farmId).then(function (type) {\n            _this.farmType = type;\n          }).catch(function (err) {\n            if (err === 'NOTFOUND') {\n              return _this.$state.go('network.iplb.detail.server-farm');\n            }\n\n            return _this.ServiceHelper.errorHandler('iplb_server_request_error');\n          });\n        }\n      });\n      this.proxyProtocolVersions = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerServerService.getProxyProtocolVersions(_this.$stateParams.serviceName);\n        }\n      });\n      this.apiServer = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerServerService.getServer(_this.$stateParams.serviceName, _this.$stateParams.farmId, _this.$stateParams.serverId).then(function (server) {\n            return _this.parseServer(server);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.server = {\n        backup: false,\n        probe: false,\n        ssl: false,\n        status: 'active'\n      };\n      this.portLimit = this.IpLoadBalancerConstant.portLimit;\n      this.lbWeightMax = this.IpLoadBalancerConstant.lbWeightMax;\n      this.farmTypeLoader.load();\n      this.proxyProtocolVersions.load();\n\n      if (this.$stateParams.serverId) {\n        this.edition = true;\n        this.apiServer.load();\n      }\n    }\n  }, {\n    key: \"parseServer\",\n    value: function parseServer(server) {\n      var _this2 = this;\n\n      this.server = angular.copy(server);\n      ['backup', 'probe', 'ssl'].forEach(function (property) {\n        if (_this2.server[property] === null) {\n          _this2.server[property] = false;\n        }\n      });\n    }\n  }, {\n    key: \"getCleanServer\",\n    value: function getCleanServer() {\n      if (this.farmType === 'udp') {\n        return _.omit(this.server, ['ssl', 'cookie', 'chain', 'weight', 'backup', 'probe']);\n      }\n\n      delete this.server.serverState;\n      return this.server;\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this3 = this;\n\n      if (this.form.$invalid) {\n        return this.$q.reject();\n      }\n\n      this.saving = true;\n      this.CloudMessage.flushChildMessage();\n      return this.IpLoadBalancerServerService.create(this.farmType, this.$stateParams.serviceName, this.$stateParams.farmId, this.getCleanServer()).then(function () {\n        _this3.$state.go('network.iplb.detail.server-farm');\n      }).finally(function () {\n        _this3.saving = false;\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this4 = this;\n\n      if (this.form.$invalid) {\n        return this.$q.reject();\n      }\n\n      this.saving = true;\n      this.CloudMessage.flushChildMessage();\n      return this.IpLoadBalancerServerService.update(this.farmType, this.$stateParams.serviceName, this.$stateParams.farmId, this.server.serverId, this.getCleanServer()).then(function () {\n        _this4.$state.go('network.iplb.detail.server-farm');\n      }).finally(function () {\n        _this4.saving = false;\n      });\n    }\n  }]);\n\n  return IpLoadBalancerServerEditCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerServerEditCtrl', IpLoadBalancerServerEditCtrl);",null]}