{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/volume/addEdit/cloud-project-compute-infrastructure-volume-addEdit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/volume/addEdit/cloud-project-compute-infrastructure-volume-addEdit.controller.js","mtime":1539717142023},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectComputeInfrastructureVolumeAddEditCtrl', [\"$scope\", \"CloudProjectComputeVolumesOrchestrator\", \"$rootScope\", \"$timeout\", \"OvhApiCloudProjectRegion\", \"$translate\", \"CloudMessage\", \"$stateParams\", \"CLOUD_VOLUME_TYPES\", \"OvhApiCloudProjectQuota\", \"$location\", \"atInternet\", \"OvhApiMe\", \"RegionService\", \"CLOUD_VOLUME_MAX_SIZE\", \"CLOUD_VOLUME_MIN_SIZE\", \"CLOUD_VOLUME_UNLIMITED_QUOTA\", function CloudProjectComputeInfrastructureVolumeAddEditCtrl($scope, CloudProjectComputeVolumesOrchestrator, $rootScope, $timeout, OvhApiCloudProjectRegion, $translate, CloudMessage, $stateParams, CLOUD_VOLUME_TYPES, OvhApiCloudProjectQuota, $location, atInternet, OvhApiMe, RegionService, CLOUD_VOLUME_MAX_SIZE, CLOUD_VOLUME_MIN_SIZE, CLOUD_VOLUME_UNLIMITED_QUOTA) {\n  var self = this;\n  var serviceName = $stateParams.projectId;\n  self.regionService = RegionService;\n  self.activeSwitchPageIndex = 0;\n  self.volumeInEditionParam = null;\n  self.volumeInEdition = {};\n  self.model = {\n    name: null\n  };\n  self.toggle = {\n    editVolumeName: false,\n    accordions: {\n      // accordions toggles\n      regions: {}\n    }\n  };\n  self.loaders = {\n    launch: false,\n    save: false,\n    panelsData: {\n      regions: false\n    },\n    quota: false\n  };\n  self.panelsData = {\n    regions: [],\n    types: CLOUD_VOLUME_TYPES,\n    quotas: []\n  };\n  self.states = {\n    hasEnoughQuota: true\n  };\n  self.slider = {\n    min: 10,\n    max: 0,\n    step: 1\n  }; // --------- INIT ---------\n\n  function init() {\n    self.getRegions();\n    self.volumeInEditionParam = CloudProjectComputeVolumesOrchestrator.getEditVolumeParam();\n    CloudProjectComputeVolumesOrchestrator.setEditVolumeParam(null);\n    self.volumeInEdition = CloudProjectComputeVolumesOrchestrator.getEditedVolume(); // set model values\n\n    self.model.name = self.volumeInEdition.name ? self.volumeInEdition.name : null; // minimum upscale is current volume size otherwise it would be a downscale\n\n    if (self.volumeInEdition.status !== 'DRAFT') {\n      self.slider.min = self.volumeInEdition.size || self.slider.min;\n    }\n\n    $rootScope.$broadcast('highlighed-element.show', \"compute, \".concat(self.volumeInEdition.id)); // Tab loop into the popover\n\n    $timeout(function () {\n      var $popover = $('.cloud-volume-popover');\n      $popover.find(':tabbable:first').focus();\n      $popover.on('keydown', function (e) {\n        if (e.keyCode === 9) {\n          if (e.shiftKey) {\n            // shift+tab\n            if ($(e.target).is($popover.find(':tabbable:first'))) {\n              $popover.find(':tabbable:last').focus();\n              e.preventDefault();\n            }\n          } else if ($(e.target).is($popover.find(':tabbable:last'))) {\n            $popover.find(':tabbable:first').focus();\n            e.preventDefault();\n          }\n        }\n      });\n    }, 99);\n\n    function editWithParam() {\n      switch (self.volumeInEditionParam) {\n        case 'NAME':\n          self.toggleEditVolumeName();\n          break;\n\n        case 'SIZE':\n          if (self.sectionCanBeModifiedInEdition('size') && self.states.hasEnoughQuota) {\n            $timeout(function () {\n              self.openEditDetail('size');\n            }, 500);\n          }\n\n          break;\n\n        default:\n      }\n    } // Load quota to get availableGygabytes and compute the maximum resize value\n\n\n    self.loaders.quota = true;\n    OvhApiCloudProjectQuota.v6().query({\n      serviceName: serviceName\n    }).$promise.then(function (quotas) {\n      if (quotas) {\n        self.panelsData.quotas = quotas;\n        self.computeQuotas(self.volumeInEdition.region);\n      }\n\n      editWithParam();\n    }, function (err) {\n      CloudMessage.error([$translate.instant('cpci_volume_addedit_get_quota_error'), err.data.message || ''].join(' '));\n      self.cancelVolume();\n    }).finally(function () {\n      self.loaders.quota = false;\n    });\n  } // --------- TOOLS ---------\n\n\n  var oldVolumeName = null;\n\n  self.toggleEditVolumeName = function (cancel, ev) {\n    // If [escape], close name edition\n    if (ev) {\n      if (ev.keyCode === 27) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      } else {\n        return;\n      }\n    } // Save/Restore previous value\n\n\n    if (cancel) {\n      self.model.name = oldVolumeName;\n    } else {\n      oldVolumeName = self.model.name;\n    } // mo√©...\n\n\n    self.volumeInEdition.name = self.model.name;\n    self.toggle.editVolumeName = !self.toggle.editVolumeName; // Focus first elem\n\n    $timeout(function () {\n      $('.cloud-volume-popover').find(':tabbable:first').focus();\n    }, 99);\n  };\n\n  $scope.$on('responsive.switch.created', function (evt, switcher) {\n    self.switcher = switcher;\n    init();\n  }); // Open panel if toggle.editDetail is different of editDetail otherwise close this panel\n\n  self.openEditDetail = function (editDetail) {\n    self.toggle.editDetail = editDetail;\n    self.activeSwitchPageIndex = 1;\n  };\n\n  self.backToMenu = function () {\n    if (self.switcher.getDisplayMode() === 'switch') {\n      self.activeSwitchPageIndex = 0;\n      self.toggle.editDetail = null;\n    }\n  };\n\n  self.isSwitchMode = function () {\n    return self.switcher.getDisplayMode() === 'switch';\n  };\n\n  var closeOnEscapeKey = function closeOnEscapeKey(evt) {\n    if (evt.which === 27) {\n      self.cancelVolume();\n    }\n\n    $scope.$apply();\n  };\n\n  $(document).on('keyup', closeOnEscapeKey);\n  $scope.$on('$destroy', function () {\n    $(document).off('keyup', closeOnEscapeKey);\n  }); // --------- TYPE panel ---------\n\n  $scope.$watch('VolumeAddEditCtrl.volumeInEdition.type', function (value, oldValue) {\n    if (value) {\n      if (oldValue && value !== oldValue) {\n        self.backToMenu();\n      }\n    }\n  }); // --------- REGIONS panel ---------\n\n  self.getRegions = function () {\n    if (!self.loaders.panelsData.regions) {\n      self.loaders.panelsData.regions = true;\n      OvhApiCloudProjectRegion.v6().query({\n        serviceName: serviceName\n      }).$promise.then(function (regionsList) {\n        self.panelsData.regions = regionsList;\n      }, function (err) {\n        self.panelsData.regions = null;\n        CloudMessage.error([$translate.instant('cpci_volume_addedit_image_error'), err.data.message || ''].join(' '));\n      }).finally(function () {\n        self.loaders.panelsData.regions = false;\n      });\n    }\n  };\n\n  $scope.$watch('VolumeAddEditCtrl.volumeInEdition.region', function (value, oldValue) {\n    if (value) {\n      self.toggle.accordions.regions = {};\n      self.toggle.accordions.regions.public = true; // @todo\n\n      self.computeQuotas(value);\n\n      if (oldValue && value !== oldValue) {\n        self.backToMenu();\n      }\n    }\n  }); // --------- QUOTAS ---------\n\n  self.computeQuotas = function (region) {\n    if (self.panelsData.quotas) {\n      var quota = _.find(self.panelsData.quotas, {\n        region: region\n      });\n\n      if (quota && quota.volume) {\n        self.states.hasEnoughQuota = true;\n        var availableGigabytes = CLOUD_VOLUME_MAX_SIZE;\n\n        if (quota.volume.maxGigabytes !== CLOUD_VOLUME_UNLIMITED_QUOTA) {\n          availableGigabytes = Math.min(CLOUD_VOLUME_MAX_SIZE, quota.volume.maxGigabytes - quota.volume.usedGigabytes);\n\n          if (availableGigabytes < CLOUD_VOLUME_MIN_SIZE) {\n            self.states.hasEnoughQuota = false;\n          }\n        }\n\n        self.slider.max = availableGigabytes;\n\n        if (self.volumeInEdition.status === 'DRAFT') {\n          // we cannot automatically resize volume if it is a snapshot restoration\n          if (!self.volumeInEdition.snapshot) {\n            self.volumeInEdition.size = Math.min(self.volumeInEdition.size, self.slider.max);\n            self.volumeInEdition.size = Math.max(self.volumeInEdition.size, self.slider.min);\n          }\n        } else {\n          self.slider.max = Math.min(CLOUD_VOLUME_MAX_SIZE, self.volumeInEdition.size + availableGigabytes);\n        }\n      }\n    }\n  }; // --------- VOLUME actions ---------\n\n\n  self.putPostVolume = function putPostVolume() {\n    self.loaders.launch = true; // POST\n\n    if (self.volumeInEdition.status === 'DRAFT') {\n      CloudProjectComputeVolumesOrchestrator.saveNewVolume(self.volumeInEdition).then(function () {\n        $rootScope.$broadcast('highlighed-element.hide');\n        CloudProjectComputeVolumesOrchestrator.turnOffVolumeEdition();\n        atInternet.trackOrder({\n          name: \"[VOLUME]::\".concat(self.volumeInEdition.type.replace(/[\\W_]+/g, ''), \"[\").concat(self.volumeInEdition.type, \"-\").concat(self.volumeInEdition.size, \"]\"),\n          page: 'iaas::pci-project::compute::infrastructure::order',\n          priceTaxFree: self.volumeInEdition.calculatePrice().monthlyPrice.value,\n          orderId: self.volumeInEdition.id\n        });\n      }, function (err) {\n        CloudMessage.error([$translate.instant('cpci_volume_addedit_post_error'), err.data && err.data.message || ''].join(' '));\n        self.loaders.launch = false;\n      });\n    } else {\n      // PUT\n      CloudProjectComputeVolumesOrchestrator.saveEditedVolume(self.volumeInEdition).then(function () {\n        $rootScope.$broadcast('highlighed-element.hide');\n        CloudProjectComputeVolumesOrchestrator.turnOffVolumeEdition();\n      }, function (err) {\n        CloudMessage.error([$translate.instant('cpci_volume_addedit_put_error'), err.data && err.data.message || ''].join(' '));\n        self.loaders.launch = false;\n      });\n    }\n  };\n\n  self.cancelVolume = function cancelVolume() {\n    if (self.volumeInEdition.status === 'DRAFT') {\n      CloudProjectComputeVolumesOrchestrator.deleteVolume(self.volumeInEdition.id);\n    }\n\n    $rootScope.$broadcast('highlighed-element.hide', \"compute,\".concat(self.volumeInEdition.id));\n    CloudProjectComputeVolumesOrchestrator.turnOffVolumeEdition(true);\n    $rootScope.$broadcast('infra.refresh.links.delayed');\n  };\n\n  self.isValid = function isValid() {\n    // in case of snapshot, check if we have space available\n    if (self.volumeInEdition.snapshot && self.volumeInEdition.size > self.slider.max) {\n      return false;\n    }\n\n    return self.volumeInEdition.name && self.volumeInEdition.type && self.volumeInEdition.size && self.volumeInEdition.region;\n  };\n\n  self.canEditSize = function canEditSize() {\n    return !self.loaders.quota && self.states.hasEnoughQuota && self.sectionCanBeModifiedInEdition('size');\n  }; // we cannot change size and type at the same time\n\n\n  this.sectionCanBeModifiedInEdition = function (section) {\n    switch (section) {\n      case 'region':\n        return !self.volumeInEdition.snapshot;\n\n      case 'size':\n        return !self.volumeInEdition.hasChange('type') && !self.volumeInEdition.snapshot;\n\n      case 'type':\n        return !self.volumeInEdition.hasChange('size') && !self.volumeInEdition.snapshot;\n\n      default:\n        return null;\n    }\n  };\n}]);",null]}