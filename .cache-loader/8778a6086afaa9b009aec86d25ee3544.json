{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/snapshot/cloud-project-compute-snapshot.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/snapshot/cloud-project-compute-snapshot.controller.js","mtime":1539717142033},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nangular.module('managerApp').controller('CloudProjectComputeSnapshotCtrl', [\"$uibModal\", \"OvhCloudPriceHelper\", \"OvhApiCloudProjectSnapshot\", \"OvhApiCloudProjectInstance\", \"OvhApiCloudProjectVolume\", \"OvhApiCloudProjectVolumeSnapshot\", \"OvhApiCloudProjectImage\", \"$translate\", \"CloudMessage\", \"$scope\", \"$filter\", \"$q\", \"$timeout\", \"CloudProjectOrchestrator\", \"$state\", \"$stateParams\", \"Poller\", \"RegionService\", \"CLOUD_UNIT_CONVERSION\", function CloudProjectComputeSnapshotCtrl($uibModal, OvhCloudPriceHelper, OvhApiCloudProjectSnapshot, OvhApiCloudProjectInstance, OvhApiCloudProjectVolume, OvhApiCloudProjectVolumeSnapshot, OvhApiCloudProjectImage, $translate, CloudMessage, $scope, $filter, $q, $timeout, CloudProjectOrchestrator, $state, $stateParams, Poller, RegionService, CLOUD_UNIT_CONVERSION) {\n  var self = this;\n  var _serviceName = $stateParams.projectId;\n  var instances = [];\n  var images = [];\n  var orderBy = $filter('orderBy');\n  self.regionService = RegionService; // Datas\n\n  self.table = {\n    snapshot: [],\n    snapshotFilter: [],\n    snapshotFilterCheckbox: [],\n    snapshotFilterCheckboxPage: [],\n    selected: {},\n    autoSelected: []\n  };\n  self.toggle = {\n    snapshotDeleteId: null,\n    // Curent snapshot to delete\n    openDeleteMultiConfirm: false\n  }; // Loader during Datas requests\n\n  self.loaders = {\n    table: {\n      snapshot: false\n    },\n    remove: {\n      snapshot: false,\n      snapshotMulti: false\n    }\n  };\n  self.order = {\n    by: 'creationDate',\n    reverse: true\n  };\n  self.GIBIBYTE_TO_BYTE = CLOUD_UNIT_CONVERSION.GIBIBYTE_TO_BYTE;\n\n  function initSearchBar() {\n    self.search = {\n      name: null,\n      size: null,\n      creationStart: null,\n      creationEnd: null\n    };\n  }\n\n  function init() {\n    self.getSnapshot(true); // set clear cache to true because we need fresh data\n\n    initSearchBar();\n  }\n\n  self.snapshotPriceStruct = {\n    prices: null,\n    size: 0,\n    total: {}\n  };\n\n  function getMonthlyPrice(size, planCode) {\n    // get the price for first location comming\n    var price = self.snapshotPriceStruct.prices[planCode];\n\n    if (!price) {\n      return {\n        value: 0,\n        text: '?'\n      };\n    }\n\n    var priceStruct = angular.copy(price.price); // price for all size\n\n    priceStruct.value = price.priceInUcents * moment.duration(1, 'months').asHours() * size / 100000000;\n    priceStruct.text = priceStruct.text.replace(/\\d+(?:[.,]\\d+)?/, \"\".concat(priceStruct.value.toFixed(2)));\n    return priceStruct;\n  }\n\n  function setPrice() {\n    var totalSize = 0;\n    var totalPrice = 0;\n\n    if (!self.table.snapshot.length) {\n      return;\n    }\n\n    angular.forEach(self.table.snapshot, function (snapshot) {\n      totalSize += snapshot.size;\n\n      _.set(snapshot, 'price', getMonthlyPrice(snapshot.size, snapshot.planCode));\n\n      if (snapshot.price) {\n        totalPrice += snapshot.price.value;\n      }\n    });\n    self.snapshotPriceStruct.size = totalSize; // Copy from formatted price to keep currencyCode\n\n    self.snapshotPriceStruct.total = angular.copy(self.table.snapshot[0].price);\n    self.snapshotPriceStruct.total.value = totalPrice;\n    self.snapshotPriceStruct.total.text = self.snapshotPriceStruct.total.text.replace(/\\d+(?:[.,]\\d+)?/, \"\".concat(totalPrice.toFixed(2)));\n  } // ---------TOOLS---------\n\n\n  self.getSelectedCount = function () {\n    return Object.keys(self.table.selected).length;\n  };\n\n  $scope.$watch('CloudProjectComputeSnapshotCtrl.table.snapshotFilterPage', function (pageSnapshots) {\n    self.table.snapshotFilterCheckboxPage = _.filter(pageSnapshots, function (snapshot) {\n      return (snapshot.status === 'active' || snapshot.status === 'available') && !snapshot.isInstalledOnVm;\n    });\n  });\n  $scope.$watch('CloudProjectComputeSnapshotCtrl.table.selected', function () {\n    // if some line were not removed => recheck\n    self.toggle.openDeleteMultiConfirm = false;\n\n    if (self.table.autoSelected.length) {\n      angular.forEach(self.table.autoSelected, function (snapshotId) {\n        var isInSnapshotTable = _.findIndex(self.table.snapshot, function (snapshot) {\n          return snapshot.id === snapshotId;\n        });\n\n        if (isInSnapshotTable >= 0) {\n          self.table.selected[snapshotId] = true;\n        }\n      });\n      self.table.autoSelected = [];\n    } else {\n      self.toggle.openDeleteMultiConfirm = false;\n    }\n  }, true);\n\n  self.toggleDeleteMultiConfirm = function () {\n    if (self.toggle.openDeleteMultiConfirm) {\n      self.table.selected = {};\n    }\n\n    self.toggle.snapshotDeleteId = null;\n    self.toggle.openDeleteMultiConfirm = !self.toggle.openDeleteMultiConfirm;\n  }; // ---------SEARCH BAR---------\n\n\n  function filterSnapshot() {\n    if ($scope.searchSnapshotForm && $scope.searchSnapshotForm.$valid) {\n      var tab = self.table.snapshot;\n      tab = _.filter(self.table.snapshot, function (snapshot) {\n        var result = true;\n\n        if (self.search.name && snapshot.name) {\n          var index = snapshot.name.toLowerCase().indexOf(self.search.name.toLowerCase());\n          result = result && index !== -1;\n        }\n\n        if (self.search.size) {\n          result = result && self.search.size >= Math.round(snapshot.size * 100) / 100;\n        }\n\n        if (self.search.creationStart) {\n          result = result && moment(self.search.creationStart) <= moment(snapshot.creationDate);\n        }\n\n        if (self.search.creationEnd) {\n          result = result && moment(self.search.creationEnd) > moment(snapshot.creationDate);\n        }\n\n        return result;\n      });\n      self.table.snapshotFilter = tab;\n      self.table.snapshotFilterCheckbox = _.filter(tab, function (snapshot) {\n        return (snapshot.status === 'active' || snapshot.status === 'available') && !snapshot.isInstalledOnVm;\n      });\n\n      if (self.table.snapshotFilter.length) {\n        self.orderBy();\n      }\n    }\n  }\n\n  $scope.$watch('CloudProjectComputeSnapshotCtrl.search', function () {\n    // otherwise filterSnapshot launched before form validation\n    $timeout(function () {\n      filterSnapshot();\n    }, 0);\n  }, true); // ---------ORDER---------\n\n  self.orderBy = function (by) {\n    if (by) {\n      if (self.order.by === by) {\n        self.order.reverse = !self.order.reverse;\n      } else {\n        self.order.by = by;\n      }\n    }\n\n    self.table.snapshotFilter = orderBy(self.table.snapshotFilter, self.order.by, self.order.reverse);\n    self.table.snapshotFilterCheckbox = orderBy(self.table.snapshotFilterCheckbox, self.order.by, self.order.reverse);\n  };\n\n  function snapshotStateChange(oldSnapshots, newSnapshots) {\n    var stateChanged = false;\n\n    _.forEach(newSnapshots, function (snapshot) {\n      var old = _.find(oldSnapshots, {\n        id: snapshot.id\n      });\n\n      stateChanged = stateChanged || !old || old.status !== snapshot.status;\n    });\n\n    return stateChanged;\n  } // transform snapshot type > snapshot is an image custom if this present in image as private\n\n\n  function checkImagesCustom(snapshots) {\n    return _.map(snapshots, function (snapshot) {\n      return _.assign(snapshot, {\n        type: (_.find(images, {\n          id: snapshot.id,\n          visibility: 'private'\n        }) ? 'image' : '') + snapshot.type\n      });\n    });\n  }\n\n  function checkImageInstalled() {\n    angular.forEach(self.table.snapshot, function (snapshot) {\n      _.set(snapshot, 'isInstalledOnVm', !!_.find(instances, {\n        imageId: snapshot.id\n      }));\n\n      _.set(snapshot, 'installedVm', _.filter(instances, {\n        imageId: snapshot.id\n      }));\n\n      _.set(snapshot, 'installedVmNames', _.pluck(snapshot.installedVm, 'name'));\n    });\n  }\n\n  function pollSnapshots() {\n    Poller.poll(\"/cloud/project/\".concat(_serviceName, \"/snapshot\"), null, {\n      successRule: function successRule(snapshots) {\n        return _.every(snapshots, function (snapshot) {\n          return snapshot.status === 'active';\n        });\n      },\n      namespace: 'cloud.snapshots',\n      notifyOnError: false\n    }).then(function (snapshotList) {\n      OvhApiCloudProjectSnapshot.v6().resetQueryCache(); // get volume snapshots and concat new state instance snapshots\n\n      var volumeSnapshots = _.filter(self.table.snapshot, {\n        type: 'volume'\n      });\n\n      self.table.snapshot = snapshotList.concat(volumeSnapshots);\n      checkImageInstalled();\n      filterSnapshot(); // orderBy is call by filterSnapshot();\n\n      setPrice();\n    }, function (err) {\n      if (err && err.status) {\n        self.table.snapshot = _.filter(self.table.snapshot, {\n          type: 'volume'\n        });\n        CloudMessage.error([$translate.instant('cpc_snapshot_error'), err.data && err.data.message || ''].join(' '));\n      }\n    }, function (snapshotList) {\n      var currentImageSnapshots = _.filter(self.table.snapshot, function (snapshot) {\n        return snapshot.type !== 'volume';\n      });\n\n      if (currentImageSnapshots.length !== snapshotList.length || snapshotStateChange(self.table.snapshot, snapshotList)) {\n        OvhApiCloudProjectSnapshot.v6().resetQueryCache();\n\n        var volumeSnapshots = _.filter(self.table.snapshot, {\n          type: 'volume'\n        });\n\n        self.table.snapshot = snapshotList.concat(volumeSnapshots);\n        checkImageInstalled();\n        filterSnapshot(); // orderBy is call by filterSnapshot();\n\n        setPrice();\n      }\n    });\n  }\n\n  function mapVolumeSnapshots(snapshots) {\n    return _.map(snapshots, function (volumeSnapshot) {\n      return _.assign(volumeSnapshot, {\n        visibility: 'private',\n        size: volumeSnapshot.size,\n        type: 'volume'\n      });\n    });\n  }\n\n  function pollVolumeSnapshots() {\n    Poller.poll(\"/cloud/project/\".concat(_serviceName, \"/volume/snapshot\"), null, {\n      successRule: function successRule(snapshots) {\n        return _.every(snapshots, function (snapshot) {\n          return snapshot.status === 'available';\n        });\n      },\n      namespace: 'cloud.snapshots',\n      notifyOnError: false\n    }).then(function (snapshotList) {\n      OvhApiCloudProjectVolumeSnapshot.v6().resetAllCache(); // get instance snapshots and concat new state volume snapshots\n\n      var imageSnapshots = _.filter(self.table.snapshot, function (snapshot) {\n        return snapshot.type !== 'volume';\n      });\n\n      var snapshots = checkImagesCustom(snapshotList);\n      self.table.snapshot = imageSnapshots.concat(mapVolumeSnapshots(snapshots));\n      filterSnapshot(); // orderBy is call by filterSnapshot();\n\n      setPrice();\n    }, function (err) {\n      if (err && err.status) {\n        self.table.snapshot = _.filter(self.table.snapshot, function (snapshot) {\n          return snapshot.type !== 'volume';\n        });\n        CloudMessage.error([$translate.instant('cpc_snapshot_error'), err.data && err.data.message || ''].join(' '));\n      }\n    }, function (snapshotList) {\n      var currentVolumeSnapshots = _.filter(self.table.snapshot, {\n        type: 'volume'\n      });\n\n      if (currentVolumeSnapshots.length !== snapshotList.length || snapshotStateChange(self.table.snapshot, snapshotList)) {\n        OvhApiCloudProjectVolumeSnapshot.v6().resetAllCache();\n\n        var imageSnapshots = _.filter(self.table.snapshot, function (snapshot) {\n          return snapshot.type !== 'volume';\n        });\n\n        var snapshots = checkImagesCustom(snapshotList);\n        self.table.snapshot = imageSnapshots.concat(mapVolumeSnapshots(snapshots));\n        filterSnapshot(); // orderBy is call by filterSnapshot();\n\n        setPrice();\n      }\n    });\n  }\n\n  $scope.$on('$destroy', function () {\n    Poller.kill({\n      namespace: 'cloud.snapshots'\n    });\n  }); // ---------SNAPSHOT---------\n\n  function getInstancePromise() {\n    return OvhApiCloudProjectInstance.v6().query({\n      serviceName: _serviceName\n    }).$promise;\n  }\n\n  function getSnapshotPromise() {\n    return OvhApiCloudProjectSnapshot.v6().query({\n      serviceName: _serviceName\n    }).$promise;\n  }\n\n  function getImagePromise() {\n    return OvhApiCloudProjectImage.v6().query({\n      serviceName: _serviceName\n    }).$promise;\n  }\n\n  function getPricesPromise() {\n    return OvhCloudPriceHelper.getPrices(_serviceName);\n  }\n\n  function getVolumeSnapshotPromise() {\n    return OvhApiCloudProjectVolumeSnapshot.v6().query({\n      serviceName: _serviceName\n    }).$promise.then(function (result) {\n      return mapVolumeSnapshots(result);\n    }); // transform\n  }\n\n  self.getSnapshot = function getSnapshot(clearCache) {\n    if (!self.loaders.table.snapshot) {\n      self.table.snapshot = [];\n      self.toggle.snapshotDeleteId = null;\n      self.loaders.table.snapshot = true;\n\n      if (clearCache) {\n        OvhApiCloudProjectSnapshot.v6().resetQueryCache();\n        OvhApiCloudProjectInstance.v6().resetQueryCache(); // because with check if snapshot is installed on instances\n\n        OvhApiCloudProjectVolume.v6().resetAllCache();\n      }\n\n      $q.all([getInstancePromise(), getSnapshotPromise(), getPricesPromise(), getVolumeSnapshotPromise(), getImagePromise()]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 5),\n            instancesParam = _ref2[0],\n            snapShots = _ref2[1],\n            prices = _ref2[2],\n            volumes = _ref2[3],\n            imagesParam = _ref2[4];\n\n        instances = instancesParam;\n        images = imagesParam;\n        var snapshots = checkImagesCustom(snapShots);\n        self.table.snapshot = snapshots.concat(volumes);\n        checkImageInstalled();\n        filterSnapshot(); // orderBy is call by filterSnapshot();\n\n        var instanceSnapshotsToPoll = _.filter(self.table.snapshot, function (snapshot) {\n          return snapshot.type !== 'volume' && snapshot.status !== 'active';\n        });\n\n        var volumeSnapshotsToPoll = _.filter(self.table.snapshot, function (snapshot) {\n          return snapshot.type === 'volume' && snapshot.status !== 'available';\n        });\n\n        if (instanceSnapshotsToPoll) {\n          pollSnapshots();\n        }\n\n        if (volumeSnapshotsToPoll) {\n          pollVolumeSnapshots();\n        }\n\n        self.snapshotPriceStruct.prices = prices;\n        setPrice();\n      }, function (err) {\n        self.table.snapshot = null;\n        CloudMessage.error([$translate.instant('cpc_snapshot_error'), err.data && err.data.message || ''].join(' '));\n      }).finally(function () {\n        self.loaders.table.snapshot = false;\n      });\n    }\n  };\n\n  self.createVmBySnapshot = function (snapshot) {\n    CloudMessage.info($translate.instant('cpc_snapshot_create_vm_button_info'));\n    CloudProjectOrchestrator.askToCreateInstanceFromSnapshot(snapshot);\n    $state.go('iaas.pci-project.compute.infrastructure.diagram');\n  };\n\n  self.createVolumeBySnapshot = function (snapshot) {\n    CloudMessage.info($translate.instant('cpc_snapshot_create_volume_button_info'));\n    $timeout(function () {\n      $state.go('iaas.pci-project.compute.infrastructure.diagram', {\n        createNewVolumeFromSnapshot: {\n          snapshot: snapshot\n        }\n      });\n    }, 99);\n  };\n\n  self.openDeleteSnapshot = function (_snapshot) {\n    $uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/snapshot/delete/compute-snapshot-delete.html',\n      controller: 'CloudProjectComputeSnapshotDeleteCtrl',\n      controllerAs: 'CloudProjectComputeSnapshotDeleteCtrl',\n      resolve: {\n        serviceName: function serviceName() {\n          return _serviceName;\n        },\n        snapshot: function snapshot() {\n          return _snapshot;\n        }\n      },\n      successHandler: function successHandler() {\n        self.getSnapshot(true);\n        CloudMessage.success($translate.instant('cpc_snapshot_delete_success'));\n        pollSnapshots();\n        pollVolumeSnapshots();\n      },\n      errorHandler: function errorHandler(err) {\n        return CloudMessage.error([$translate.instant('cpc_snapshot_delete_error'), err.data && err.data.message || ''].join(' '));\n      }\n    });\n  };\n\n  init();\n}]);",null]}