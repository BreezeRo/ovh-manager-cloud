{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/edit-permissions/edit-permissions.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/edit-permissions/edit-permissions.controller.js","mtime":1539717142140},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsRolesPermissionsCtrl =\n/*#__PURE__*/\nfunction () {\n  LogsRolesPermissionsCtrl.$inject = [\"$q\", \"$stateParams\", \"CloudMessage\", \"ControllerHelper\", \"LogsRolesService\"];\n\n  function LogsRolesPermissionsCtrl($q, $stateParams, CloudMessage, ControllerHelper, LogsRolesService) {\n    _classCallCheck(this, LogsRolesPermissionsCtrl);\n\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.roleId = this.$stateParams.roleId;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsRolesService = LogsRolesService;\n    this.CloudMessage = CloudMessage;\n    this.initLoaders();\n  }\n\n  _createClass(LogsRolesPermissionsCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.availableStreams = this.$q.defer();\n      this.attachedStreams = this.$q.defer();\n      this.availableIndices = this.$q.defer();\n      this.attachedIndices = this.$q.defer();\n      this.availableDashboards = this.$q.defer();\n      this.attachedDashboards = this.$q.defer();\n      this.availableAliases = this.$q.defer();\n      this.attachedAliases = this.$q.defer();\n      this.roleDetails = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsRolesService.getRoleDetails(_this.serviceName, _this.roleId).then(function (role) {\n            _this.loadAttachedPermissions(role.permissions);\n\n            _this.loadAvailableAliases(role.permissions);\n\n            _this.loadAvailableDashboards(role.permissions);\n\n            _this.loadAvailableIndices(role.permissions);\n\n            _this.loadAvailableStreams(role.permissions);\n\n            return role;\n          });\n        }\n      });\n      this.roleDetails.load();\n    }\n  }, {\n    key: \"loadAvailableAliases\",\n    value: function loadAvailableAliases(permissionList) {\n      var _this2 = this;\n\n      this.allAliases = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.LogsRolesService.getAllAliases(_this2.serviceName).then(function (result) {\n            var diff = _.map(_.filter(result, function (alias) {\n              return alias.info.isShareable && !_.find(permissionList, function (permission) {\n                return permission.aliasId === alias.info.aliasId;\n              });\n            }), 'info');\n\n            _this2.availableAliases.resolve(diff);\n          });\n        }\n      });\n      this.allAliases.load();\n    }\n  }, {\n    key: \"loadAvailableIndices\",\n    value: function loadAvailableIndices(permissionList) {\n      var _this3 = this;\n\n      this.allIndices = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this3.LogsRolesService.getAllIndices(_this3.serviceName).then(function (result) {\n            var diff = _.map(_.filter(result, function (index) {\n              return index.info.isShareable && !_.find(permissionList, function (permission) {\n                return permission.indexId === index.info.indexId;\n              });\n            }), 'info');\n\n            _this3.availableIndices.resolve(diff);\n          });\n        }\n      });\n      this.allIndices.load();\n    }\n  }, {\n    key: \"loadAvailableDashboards\",\n    value: function loadAvailableDashboards(permissionList) {\n      var _this4 = this;\n\n      this.allDashboards = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this4.LogsRolesService.getAllDashboards(_this4.serviceName).then(function (result) {\n            var diff = _.map(_.filter(result, function (dashboard) {\n              return dashboard.info.isShareable && !_.find(permissionList, function (permission) {\n                return permission.dashboardId === dashboard.info.dashboardId;\n              });\n            }), 'info');\n\n            _this4.availableDashboards.resolve(diff);\n          });\n        }\n      });\n      this.allDashboards.load();\n    }\n  }, {\n    key: \"loadAvailableStreams\",\n    value: function loadAvailableStreams(permissionList) {\n      var _this5 = this;\n\n      this.allStreams = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this5.LogsRolesService.getAllStreams(_this5.serviceName).then(function (result) {\n            var diff = _.map(_.filter(result, function (stream) {\n              return stream.info.isShareable && !_.find(permissionList, function (permission) {\n                return permission.streamId === stream.info.streamId;\n              });\n            }), 'info');\n\n            _this5.availableStreams.resolve(diff);\n          });\n        }\n      });\n      this.allStreams.load();\n    }\n    /**\n     * initializes and loads list of permissions\n     * adding permissionId to the object of index, alias, dashboard and stream so as to use it to\n     * remove permission later\n     * @memberof LogsRolesPermissionsCtrl\n     */\n\n  }, {\n    key: \"loadAttachedPermissions\",\n    value: function loadAttachedPermissions(permissionList) {\n      var _this6 = this;\n\n      this.permissions = this.LogsRolesService.getNewPermissions();\n      permissionList.forEach(function (permission) {\n        if (permission.index) {\n          _.extend(permission.index, {\n            permissionId: permission.permissionId\n          });\n\n          _this6.permissions.index.push(permission.index);\n        }\n\n        if (permission.alias) {\n          _.extend(permission.alias, {\n            permissionId: permission.permissionId\n          });\n\n          _this6.permissions.alias.push(permission.alias);\n        }\n\n        if (permission.stream) {\n          _.extend(permission.stream, {\n            permissionId: permission.permissionId\n          });\n\n          _this6.permissions.stream.push(permission.stream);\n        }\n\n        if (permission.dashboard) {\n          _.extend(permission.dashboard, {\n            permissionId: permission.permissionId\n          });\n\n          _this6.permissions.dashboard.push(permission.dashboard);\n        }\n      });\n      this.attachedIndices.resolve(this.permissions.index);\n      this.attachedAliases.resolve(this.permissions.alias);\n      this.attachedDashboards.resolve(this.permissions.dashboard);\n      this.attachedStreams.resolve(this.permissions.stream);\n    }\n  }, {\n    key: \"attachAlias\",\n    value: function attachAlias(item) {\n      var _this7 = this;\n\n      this.CloudMessage.flushChildMessage();\n      this.saveAlias = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this7.LogsRolesService.addAlias(_this7.serviceName, _this7.roleId, item[0]);\n        },\n        successHandler: function successHandler() {\n          return _this7.roleDetails.load();\n        },\n        errorHandler: function errorHandler() {\n          return _this7.ControllerHelper.scrollPageToTop();\n        }\n      });\n      return this.saveAlias.load();\n    }\n  }, {\n    key: \"attachIndex\",\n    value: function attachIndex(item) {\n      var _this8 = this;\n\n      this.CloudMessage.flushChildMessage();\n      this.saveIndex = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this8.LogsRolesService.addIndex(_this8.serviceName, _this8.roleId, item[0]);\n        },\n        successHandler: function successHandler() {\n          return _this8.roleDetails.load();\n        },\n        errorHandler: function errorHandler() {\n          return _this8.ControllerHelper.scrollPageToTop();\n        }\n      });\n      return this.saveIndex.load();\n    }\n  }, {\n    key: \"attachStream\",\n    value: function attachStream(item) {\n      var _this9 = this;\n\n      this.CloudMessage.flushChildMessage();\n      this.saveStream = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this9.LogsRolesService.addStream(_this9.serviceName, _this9.roleId, item[0]);\n        },\n        successHandler: function successHandler() {\n          return _this9.roleDetails.load();\n        },\n        errorHandler: function errorHandler() {\n          return _this9.ControllerHelper.scrollPageToTop();\n        }\n      });\n      return this.saveStream.load();\n    }\n  }, {\n    key: \"attachDashboard\",\n    value: function attachDashboard(item) {\n      var _this10 = this;\n\n      this.CloudMessage.flushChildMessage();\n      this.saveDashboard = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this10.LogsRolesService.addDashboard(_this10.serviceName, _this10.roleId, item[0]);\n        },\n        successHandler: function successHandler() {\n          return _this10.roleDetails.load();\n        },\n        errorHandler: function errorHandler() {\n          return _this10.ControllerHelper.scrollPageToTop();\n        }\n      });\n      return this.saveDashboard.load();\n    }\n  }, {\n    key: \"removePermission\",\n    value: function removePermission(permission) {\n      var _this11 = this;\n\n      this.CloudMessage.flushChildMessage();\n      this.deletePermission = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this11.LogsRolesService.removePermission(_this11.serviceName, _this11.roleId, permission);\n        },\n        errorHandler: function errorHandler() {\n          return _this11.ControllerHelper.scrollPageToTop();\n        }\n      });\n      return this.deletePermission.load();\n    }\n  }]);\n\n  return LogsRolesPermissionsCtrl;\n}();\n\nangular.module('managerApp').controller('LogsRolesPermissionsCtrl', LogsRolesPermissionsCtrl);",null]}