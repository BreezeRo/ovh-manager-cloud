{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/common/cloud-main-controller.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/common/cloud-main-controller.controller.js","mtime":1539717142057},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudMainController =\n/*#__PURE__*/\nfunction () {\n  CloudMainController.$inject = [\"$document\", \"$interval\", \"$rootScope\", \"$translate\", \"ProductsService\"];\n\n  function CloudMainController($document, $interval, $rootScope, $translate, ProductsService) {\n    _classCallCheck(this, CloudMainController);\n\n    this.$document = $document;\n    this.$interval = $interval;\n    this.$rootScope = $rootScope;\n    this.$translate = $translate;\n    this.ProductsService = ProductsService;\n  }\n\n  _createClass(CloudMainController, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.expiringProject = null;\n      this.init();\n      this.$rootScope.$on('CloudMainController:refresh', function () {\n        _this.init();\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      this.ProductsService.getProducts().then(function () {\n        return _this2.ProductsService.getProductsOfType('PROJECT');\n      }).then(function (products) {\n        return products.filter(function (product) {\n          return product.expiration;\n        });\n      }).then(function (products) {\n        if (products && products.length) {\n          _this2.expiringProject = _.first(products);\n          _this2.expiringProjectInterval = _this2.$interval(function () {\n            _this2.updateRemainingTime();\n          }, 1000);\n        }\n      });\n    }\n  }, {\n    key: \"updateRemainingTime\",\n    value: function updateRemainingTime() {\n      var expirationMoment = moment(this.expiringProject.expiration);\n\n      if (expirationMoment.isBefore(moment().utc()) && angular.isDefined(this.expiringProjectInterval)) {\n        this.$interval.cancel(this.expiringProjectInterval);\n      }\n\n      this.remainingTime = this.getRemainingTime(this.expiringProject.expiration);\n    }\n  }, {\n    key: \"getRemainingTime\",\n    value: function getRemainingTime(expiration) {\n      var expirationMoment = moment(expiration);\n      var ms = Math.max(0, moment(expirationMoment).diff(moment().utc()));\n      var duration = moment.duration(ms);\n      this.expirationDays = duration.days();\n      this.expirationHours = duration.hours();\n      this.expirationMinutes = duration.minutes();\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(id) {\n      // Set focus to target\n      this.$document.find(\"#\".concat(id))[0].focus();\n    }\n  }]);\n\n  return CloudMainController;\n}();\n\nangular.module('managerApp').controller('CloudMainController', CloudMainController);",null]}