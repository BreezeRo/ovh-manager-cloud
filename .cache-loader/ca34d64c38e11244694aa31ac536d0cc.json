{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm.controller.js","mtime":1539717142215},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerServerFarmCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerServerFarmCtrl.$inject = [\"$filter\", \"$state\", \"$stateParams\", \"$translate\", \"ControllerHelper\", \"IpLoadBalancerActionService\", \"IpLoadBalancerServerService\", \"IpLoadBalancerServerFarmService\"];\n\n  function IpLoadBalancerServerFarmCtrl($filter, $state, $stateParams, $translate, ControllerHelper, IpLoadBalancerActionService, IpLoadBalancerServerService, IpLoadBalancerServerFarmService) {\n    _classCallCheck(this, IpLoadBalancerServerFarmCtrl);\n\n    this.$filter = $filter;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerActionService = IpLoadBalancerActionService;\n    this.IpLoadBalancerServerService = IpLoadBalancerServerService;\n    this.IpLoadBalancerServerFarmService = IpLoadBalancerServerFarmService;\n    this.serviceName = this.$stateParams.serviceName;\n    this.initLoaders();\n  }\n\n  _createClass(IpLoadBalancerServerFarmCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.i18n = {\n        preview: this.$translate.instant('common_preview_see'),\n        update: this.$translate.instant('common_modify'),\n        remove: this.$translate.instant('delete')\n      };\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.farms.load();\n    }\n  }, {\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.farms = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerServerFarmService.getServerFarms(_this.serviceName).then(function (farms) {\n            _this.createFarmActions(farms);\n\n            return farms;\n          });\n        },\n        successHandler: function successHandler() {\n          return _this.loadServers();\n        }\n      });\n    }\n  }, {\n    key: \"addServer\",\n    value: function addServer(farm) {\n      this.$state.go('network.iplb.detail.server-farm.server-add', {\n        farmId: farm.id\n      });\n    }\n  }, {\n    key: \"loadServers\",\n    value: function loadServers() {\n      var _this2 = this;\n\n      _.forEach(this.farms.data, function (farm) {\n        _.set(farm, 'servers', _this2.ControllerHelper.request.getArrayLoader({\n          loaderFunction: function loaderFunction() {\n            return _this2.IpLoadBalancerServerFarmService.getServerFarmServers(_this2.serviceName, farm.farmId, farm.type);\n          }\n        }));\n\n        farm.servers.load();\n      });\n    }\n  }, {\n    key: \"seeServerPreview\",\n    value: function seeServerPreview(_server) {\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/server/preview/iplb-server-preview.html',\n          controller: 'IpLoadBalancerServerPreviewCtrl',\n          controllerAs: 'IpLoadBalancerServerPreviewCtrl',\n          resolve: {\n            server: function server() {\n              return _server;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"seeServerStatus\",\n    value: function seeServerStatus(_server2) {\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/server/status/iplb-server-status-detail.html',\n          controller: 'IpLoadBalancerServerStatusDetailCtrl',\n          controllerAs: 'IpLoadBalancerServerStatusDetailCtrl',\n          resolve: {\n            server: function server() {\n              return _server2;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"deleteServer\",\n    value: function deleteServer(farm, server) {\n      var _this3 = this;\n\n      this.IpLoadBalancerActionService.deleteServer(this.$stateParams.serviceName, farm, server).then(function () {\n        return _this3.init();\n      });\n    }\n  }, {\n    key: \"farmPreview\",\n    value: function farmPreview(_farm) {\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/serverFarm/preview/iplb-server-farm-preview.html',\n          controller: 'IpLoadBalancerServerFarmPreviewCtrl',\n          controllerAs: 'IpLoadBalancerServerFarmPreviewCtrl',\n          resolve: {\n            farm: function farm() {\n              return _farm;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(farm) {\n      this.$state.go('network.iplb.detail.server-farm.update', {\n        serviceName: this.$stateParams.serviceName,\n        farmId: farm.farmId\n      });\n    }\n  }, {\n    key: \"updateServer\",\n    value: function updateServer(farmId, serverId) {\n      this.$state.go('network.iplb.detail.server-farm.server-update', {\n        farmId: farmId,\n        serverId: serverId\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(farm) {\n      var _this4 = this;\n\n      this.IpLoadBalancerActionService.deleteFarm(this.$stateParams.serviceName, farm).then(function () {\n        return _this4.init();\n      });\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(farm, server) {\n      var newStatus = server.status === 'active' ? 'inactive' : 'active';\n      this.IpLoadBalancerServerService.update(farm.type, this.$stateParams.serviceName, farm.farmId, server.serverId, {\n        status: newStatus\n      }).then(function () {\n        // Apply value on model\n        _.set(server, 'status', newStatus);\n      });\n    }\n  }, {\n    key: \"createFarmActions\",\n    value: function createFarmActions(farms) {\n      var _this5 = this;\n\n      this.farmActions = {};\n      farms.forEach(function (farm) {\n        _this5.farmActions[farm.farmId] = [[{\n          text: _this5.i18n.preview,\n          callback: function callback() {\n            return _this5.farmPreview(farm);\n          }\n        }], [{\n          text: _this5.i18n.update,\n          callback: function callback() {\n            return _this5.update(farm);\n          }\n        }, {\n          text: _this5.i18n.remove,\n          callback: function callback() {\n            return _this5.delete(farm);\n          }\n        }]];\n      });\n    }\n  }, {\n    key: \"getFarmText\",\n    value: function getFarmText(farm) {\n      var serverText = '';\n\n      if (!_.get(farm.servers, 'loading', false)) {\n        var serverNumber = farm.servers.data.length;\n        var serverLabel = serverNumber > 1 ? this.$translate.instant('iplb_farm_list_accordion_aside_server_many', {\n          serverNumber: serverNumber\n        }) : this.$translate.instant('iplb_farm_list_accordion_aside_server_single', {\n          serverNumber: serverNumber\n        });\n        serverText = \" / \".concat(this.$translate.instant(serverLabel, {\n          serverNumber: serverNumber\n        }));\n      }\n\n      var zone = farm.zoneText.microRegion.text;\n\n      if (farm.zone === 'all') {\n        zone = this.$translate.instant('iplb_zone_all');\n      }\n\n      return \"\".concat(this.$filter('uppercase')(farm.type) + (farm.port ? \":\".concat(farm.port) : ''), \" / \").concat(zone).concat(serverText);\n    }\n  }, {\n    key: \"getFarmName\",\n    value: function getFarmName(farm) {\n      if (!farm.displayName) {\n        return this.$translate.instant('iplb_farm_list_accordion_title', {\n          farmId: farm.farmId\n        });\n      }\n\n      return \"\".concat(farm.displayName, \" (\").concat(farm.farmId, \")\");\n    }\n  }]);\n\n  return IpLoadBalancerServerFarmCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerServerFarmCtrl', IpLoadBalancerServerFarmCtrl);",null]}