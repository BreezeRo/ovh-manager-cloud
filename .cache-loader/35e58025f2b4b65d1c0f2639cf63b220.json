{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/alerts/streams-alerts.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/alerts/streams-alerts.service.js","mtime":1539717142148},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsStreamsAlertsService {\n  constructor($q, CloudPoll, OvhApiDbaas, ServiceHelper, LogsConstants, LogsHelperService) {\n    this.$q = $q;\n    this.CloudPoll = CloudPoll;\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.AlertsApiService = OvhApiDbaas.Logs().Alert().v6();\n    this.ServiceHelper = ServiceHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsHelperService = LogsHelperService;\n  }\n\n  /**\n   * Adds a new alert\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} alert - the alert object\n   * @returns promise which will be resolve to an operation object\n   * @memberof LogsStreamsAlertsService\n   */\n  addAlert(serviceName, streamId, alert) {\n    return this.AlertsApiService.post({ serviceName, streamId }, alert).$promise\n      .then(operation => this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'streams_alerts_add_success', { alertName: alert.title }))\n      .catch(err => this.LogsHelperService.handleError('streams_alerts_add_error', err, { alertName: alert.title }));\n  }\n\n  /**\n   * Deletes an alert\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} alert - alert to be deleted\n   * @returns promise which will be resolve to an operation object\n   * @memberof LogsStreamsAlertsService\n   */\n  deleteAlert(serviceName, streamId, alert) {\n    return this.AlertsApiService.delete({ serviceName, streamId, alertId: alert.alertId }).$promise\n      .then(operation => this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'streams_alerts_delete_success', { alertName: alert.title }))\n      .catch(err => this.LogsHelperService.handleError('streams_alerts_delete_error', err, { alertName: alert.title }));\n  }\n\n  /**\n   * Get the IDs of all alerts\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @returns promise which will be resolve with a list of alert IDs\n   * @memberof LogsStreamsAlertsService\n   */\n  getAlertIds(serviceName, streamId) {\n    return this.AlertsApiService.query({\n      serviceName,\n      streamId,\n    }).$promise\n      .catch(err => this.LogsHelperService.handleError('streams_alerts_ids_loading_error', err, {}));\n  }\n\n  /**\n   * Gets the alert objects corresponding to the alertIds\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} alertIds - list of alert IDs for which alert object is to be fetched\n   * @returns promise which will be resolve with the list of alerts\n   * @memberof LogsStreamsAlertsService\n   */\n  getAlerts(serviceName, streamId, alertIds) {\n    return this.getAlertDetails(serviceName, streamId, alertIds)\n      .catch(err => this.LogsHelperService.handleError('streams_alerts_loading_error', err, {}));\n  }\n\n  /**\n   * Gets the alert objects corresponding to the alertIds\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} alertIds - list of alert IDs for which alert object is to be fetched\n   * @returns promise which will be resolve with the list of alerts\n   * @memberof LogsStreamsAlertsService\n   */\n  getAlertDetails(serviceName, streamId, alertIds) {\n    const promises = alertIds.map(alertId => this.getAlert(serviceName, streamId, alertId));\n    return this.$q.all(promises);\n  }\n\n  /**\n   * Gets the alert object corresponding to the alertId\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} alertId - the alert ID for which alert object is to be fetched\n   * @returns promise which will be resolve with the alert\n   * @memberof LogsStreamsAlertsService\n   */\n  getAlert(serviceName, streamId, alertId) {\n    return this.AlertsApiService.get({ serviceName, streamId, alertId })\n      .$promise.then(alert => this.constructor.transformAlert(alert));\n  }\n\n  /**\n   * Returns a new alert object with the default properties\n   *\n   * @param {any} conditionType - the type of the condition (one of LogsConstants.alertType)\n   * @returns the default alert object\n   * @memberof LogsStreamsAlertsService\n   */\n  getNewAlert(conditionType) {\n    const thresholdType = conditionType === this.LogsConstants.alertType.numeric\n      ? this.LogsConstants.thresholdType.lower\n      : this.LogsConstants.thresholdType.more;\n    const constraintType = this.LogsConstants.constraintType.mean;\n    return this.$q.when({\n      data: {\n        conditionType,\n        thresholdType,\n        threshold: 1,\n        time: 1,\n        grace: 1,\n        backlog: 1,\n        repeatNotificationsEnabled: false,\n        constraintType,\n      },\n      loading: false,\n    });\n  }\n\n  /**\n   * Edit and save an alert\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} alert - the alert object\n   * @returns promise which will be resolve to an operation object\n   * @memberof LogsStreamsAlertsService\n   */\n  updateAlert(serviceName, streamId, alert) {\n    return this.AlertsApiService\n      .put({ serviceName, streamId, alertId: alert.alertId }, alert).$promise\n      .then(operation => this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'streams_alerts_update_success', { alertName: alert.title }))\n      .catch(err => this.LogsHelperService.handleError('streams_alerts_update_error', err, { alertName: alert.title }));\n  }\n\n  /**\n   * Applies transformation to the alert\n   *\n   * @param {any} alert - the alert object\n   * @returns the transformed alert\n   * @memberof LogsStreamsAlertsService\n   */\n  static transformAlert(alert) {\n    Object.keys(alert).forEach((property) => {\n      if (alert[property] === null) {\n        alert[property] = undefined; // eslint-disable-line\n      }\n    });\n    return alert;\n  }\n}\n\nangular.module('managerApp').service('LogsStreamsAlertsService', LogsStreamsAlertsService);\n"]}