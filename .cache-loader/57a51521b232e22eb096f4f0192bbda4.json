{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/access/nasha-partition-access.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/access/nasha-partition-access.controller.js","mtime":1539717142241},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('NashaPartitionAccessCtrl', [\"$scope\", \"$state\", \"$stateParams\", \"$translate\", \"$uibModal\", \"$q\", \"OvhApiDedicatedNasha\", \"Poller\", \"CloudMessage\", function ($scope, $state, $stateParams, $translate, $uibModal, $q, OvhApiDedicatedNasha, Poller, CloudMessage) {\n  var self = this;\n  self.$state = $state;\n  self.data = {\n    nasha: {},\n    partition: {},\n    addAccessInProgress: [],\n    taskForAccess: []\n  };\n  self.table = {\n    accessIps: [],\n    refresh: false\n  };\n  self.loaders = {\n    table: false\n  };\n\n  self.load = function (resetCache) {\n    self.loaders.table = true;\n\n    if (resetCache) {\n      OvhApiDedicatedNasha.Partition().Access().v6().resetCache();\n    }\n\n    $q.all({\n      nasha: OvhApiDedicatedNasha.v6().get({\n        serviceName: $stateParams.nashaId\n      }).$promise,\n      partition: OvhApiDedicatedNasha.Partition().v6().get({\n        serviceName: $stateParams.nashaId,\n        partitionName: $stateParams.partitionName\n      }).$promise,\n      accesses: OvhApiDedicatedNasha.Partition().Access().v6().query({\n        serviceName: $stateParams.nashaId,\n        partitionName: $stateParams.partitionName\n      }).$promise\n    }).then(function (data) {\n      self.data.nasha = data.nasha;\n      self.data.partition = data.partition;\n      self.table.accessIps = data.accesses.map(function (ip) {\n        return {\n          ip: ip\n        };\n      });\n\n      if (resetCache) {\n        self.table.refresh = !self.table.refresh;\n      }\n    }).catch(function (err) {\n      CloudMessage.error($translate.instant('nasha_partitions_access_no_data_error'));\n      return $q.reject(err);\n    }).finally(function () {\n      self.loaders.table = false;\n    });\n  };\n\n  self.getAccessForIp = function (accessIp) {\n    // If the access is being added, return the local data\n    var accessAddInProgress = _.find(self.data.addAccessInProgress, function (item) {\n      return item.ip === accessIp;\n    });\n\n    if (accessAddInProgress) {\n      return accessAddInProgress;\n    } // if not we get the details form the api\n\n\n    return OvhApiDedicatedNasha.Partition().Access().v6().get({\n      serviceName: self.data.nasha.serviceName,\n      partitionName: self.data.partition.partitionName,\n      ip: accessIp\n    }).$promise.then(function (data) {\n      return data;\n    });\n  };\n\n  self.transformItem = function (access) {\n    return self.getAccessForIp(access.ip);\n  };\n\n  self.removeAccess = function (access) {\n    self.openModal('app/nasha/partition/access/delete/nasha-partition-access-delete.html', 'NashaPartitionAccessDeleteCtrl', {\n      serviceName: self.data.nasha.serviceName,\n      access: access,\n      partitionName: self.data.partition.partitionName\n    });\n  };\n\n  self.addAccess = function () {\n    self.openModal('app/nasha/partition/access/add/nasha-partition-access-add.html', 'NashaPartitionAccessAddCtrl', {\n      serviceName: self.data.nasha.serviceName,\n      partition: self.data.partition\n    });\n  };\n  /*= =====================================\n     =                Polling              =\n     ====================================== */\n\n\n  function launchPolling(taskId) {\n    return Poller.poll(\"/dedicated/nasha/\".concat(self.data.nasha.serviceName, \"/task/\").concat(taskId), null, {\n      successRule: function successRule(task) {\n        return task.status === 'done';\n      },\n      errorRule: function errorRule(task) {\n        return ['doing', 'todo', 'done'].indexOf(task.status) === -1;\n      },\n      namespace: 'nasha.access'\n    });\n  }\n\n  function pollTasksForAccess(access, taskId) {\n    launchPolling(taskId).finally(function () {\n      // Remove from the polling list\n      _.remove(self.data.taskForAccess, function (item) {\n        return item.task === taskId;\n      }); // If the partition was in creation, remove it from the creation list\n\n\n      _.remove(self.data.addAccessInProgress, function (item) {\n        return item.ip === access.ip;\n      });\n\n      self.updateAccess(access);\n    });\n  }\n\n  $scope.$on('$destroy', function () {\n    Poller.kill({\n      namespace: 'nasha.access'\n    });\n  });\n\n  self.openModal = function (template, controller, params) {\n    var modal = $uibModal.open({\n      templateUrl: template,\n      controller: controller,\n      controllerAs: controller,\n      resolve: {\n        items: function items() {\n          return params;\n        }\n      }\n    });\n    modal.result.then(function (data) {\n      if (data.isNew) {\n        self.table.accessIps.push(data.access);\n        self.data.addAccessInProgress.push(data.access);\n      }\n\n      self.data.taskForAccess.push({\n        task: data.task,\n        access: data.access\n      });\n      pollTasksForAccess(data.access, data.task);\n    });\n  };\n\n  self.updateAccess = function () {\n    self.load(true);\n  };\n\n  self.hasTaskInProgress = function (access) {\n    return _.some(self.data.taskForAccess, {\n      access: access\n    });\n  };\n\n  self.load();\n}]);",null]}