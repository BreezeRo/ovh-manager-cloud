{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm.controller.js","mtime":1539717142215},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerServerFarmCtrl {\n  constructor($filter, $state, $stateParams, $translate, ControllerHelper,\n    IpLoadBalancerActionService, IpLoadBalancerServerService,\n    IpLoadBalancerServerFarmService) {\n    this.$filter = $filter;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerActionService = IpLoadBalancerActionService;\n    this.IpLoadBalancerServerService = IpLoadBalancerServerService;\n    this.IpLoadBalancerServerFarmService = IpLoadBalancerServerFarmService;\n\n    this.serviceName = this.$stateParams.serviceName;\n\n    this.initLoaders();\n  }\n\n  $onInit() {\n    this.i18n = {\n      preview: this.$translate.instant('common_preview_see'),\n      update: this.$translate.instant('common_modify'),\n      remove: this.$translate.instant('delete'),\n    };\n\n    this.init();\n  }\n\n  init() {\n    this.farms.load();\n  }\n\n  initLoaders() {\n    this.farms = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerServerFarmService.getServerFarms(this.serviceName)\n        .then((farms) => {\n          this.createFarmActions(farms);\n          return farms;\n        }),\n      successHandler: () => this.loadServers(),\n    });\n  }\n\n  addServer(farm) {\n    this.$state.go('network.iplb.detail.server-farm.server-add', {\n      farmId: farm.id,\n    });\n  }\n\n  loadServers() {\n    _.forEach(this.farms.data, (farm) => {\n      _.set(farm, 'servers', this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: () => this.IpLoadBalancerServerFarmService\n          .getServerFarmServers(this.serviceName, farm.farmId, farm.type),\n      }));\n      farm.servers.load();\n    });\n  }\n\n  seeServerPreview(server) {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/iplb/server/preview/iplb-server-preview.html',\n        controller: 'IpLoadBalancerServerPreviewCtrl',\n        controllerAs: 'IpLoadBalancerServerPreviewCtrl',\n        resolve: {\n          server: () => server,\n        },\n      },\n    });\n  }\n\n  seeServerStatus(server) {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/iplb/server/status/iplb-server-status-detail.html',\n        controller: 'IpLoadBalancerServerStatusDetailCtrl',\n        controllerAs: 'IpLoadBalancerServerStatusDetailCtrl',\n        resolve: {\n          server: () => server,\n        },\n      },\n    });\n  }\n\n  deleteServer(farm, server) {\n    this.IpLoadBalancerActionService.deleteServer(\n      this.$stateParams.serviceName,\n      farm,\n      server,\n    ).then(() => this.init());\n  }\n\n  farmPreview(farm) {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/iplb/serverFarm/preview/iplb-server-farm-preview.html',\n        controller: 'IpLoadBalancerServerFarmPreviewCtrl',\n        controllerAs: 'IpLoadBalancerServerFarmPreviewCtrl',\n        resolve: {\n          farm: () => farm,\n        },\n      },\n    });\n  }\n\n  update(farm) {\n    this.$state.go('network.iplb.detail.server-farm.update', {\n      serviceName: this.$stateParams.serviceName,\n      farmId: farm.farmId,\n    });\n  }\n\n  updateServer(farmId, serverId) {\n    this.$state.go('network.iplb.detail.server-farm.server-update', {\n      farmId,\n      serverId,\n    });\n  }\n\n  delete(farm) {\n    this.IpLoadBalancerActionService.deleteFarm(\n      this.$stateParams.serviceName,\n      farm,\n    ).then(() => this.init());\n  }\n\n  toggle(farm, server) {\n    const newStatus = server.status === 'active' ? 'inactive' : 'active';\n    this.IpLoadBalancerServerService.update(\n      farm.type,\n      this.$stateParams.serviceName,\n      farm.farmId,\n      server.serverId, {\n        status: newStatus,\n      },\n    ).then(() => {\n      // Apply value on model\n      _.set(server, 'status', newStatus);\n    });\n  }\n\n  createFarmActions(farms) {\n    this.farmActions = {};\n    farms.forEach((farm) => {\n      this.farmActions[farm.farmId] = [\n        [{\n          text: this.i18n.preview,\n          callback: () => this.farmPreview(farm),\n        }],\n        [{\n          text: this.i18n.update,\n          callback: () => this.update(farm),\n        }, {\n          text: this.i18n.remove,\n          callback: () => this.delete(farm),\n        }],\n      ];\n    });\n  }\n\n  getFarmText(farm) {\n    let serverText = '';\n    if (!_.get(farm.servers, 'loading', false)) {\n      const serverNumber = farm.servers.data.length;\n      const serverLabel = serverNumber > 1\n        ? this.$translate.instant('iplb_farm_list_accordion_aside_server_many', { serverNumber })\n        : this.$translate.instant('iplb_farm_list_accordion_aside_server_single', { serverNumber });\n      serverText = ` / ${this.$translate.instant(serverLabel, { serverNumber })}`;\n    }\n\n    let zone = farm.zoneText.microRegion.text;\n    if (farm.zone === 'all') {\n      zone = this.$translate.instant('iplb_zone_all');\n    }\n\n    return `${this.$filter('uppercase')(farm.type) + (farm.port ? `:${farm.port}` : '')} / ${zone}${serverText}`;\n  }\n\n  getFarmName(farm) {\n    if (!farm.displayName) {\n      return this.$translate.instant('iplb_farm_list_accordion_title', {\n        farmId: farm.farmId,\n      });\n    }\n\n    return `${farm.displayName} (${farm.farmId})`;\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerServerFarmCtrl', IpLoadBalancerServerFarmCtrl);\n"]}