{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/index/logs-index.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/index/logs-index.service.js","mtime":1539717142084},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsIndexService =\n/*#__PURE__*/\nfunction () {\n  LogsIndexService.$inject = [\"$q\", \"$translate\", \"CloudPoll\", \"ControllerHelper\", \"LogsHelperService\", \"OvhApiDbaas\", \"ServiceHelper\", \"LogsOptionsService\", \"LogsConstants\"];\n\n  function LogsIndexService($q, $translate, CloudPoll, ControllerHelper, LogsHelperService, OvhApiDbaas, ServiceHelper, LogsOptionsService, LogsConstants) {\n    _classCallCheck(this, LogsIndexService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudPoll = CloudPoll;\n    this.ServiceHelper = ServiceHelper;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsHelperService = LogsHelperService;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsConstants = LogsConstants;\n    this.IndexApiService = OvhApiDbaas.Logs().Index().v6();\n    this.IndexAapiService = OvhApiDbaas.Logs().Index().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.newIndex = {\n      description: '',\n      alertNotifyEnabled: false\n    };\n  }\n\n  _createClass(LogsIndexService, [{\n    key: \"getNewIndex\",\n    value: function getNewIndex() {\n      return this.newIndex;\n    }\n  }, {\n    key: \"getQuota\",\n    value: function getQuota(serviceName) {\n      var _this = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        var quota = {\n          max: me.total.maxNbIndex,\n          configured: me.total.curNbIndex,\n          currentUsage: me.total.curNbIndex * 100 / me.total.maxNbIndex,\n          mainOfferMax: me.offer.maxNbIndex,\n          mainOfferCurrent: me.offer.curNbIndex\n        };\n        return quota;\n      }).catch(function (err) {\n        return _this.LogsHelperService.handleError('logs_streams_quota_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getIndices\",\n    value: function getIndices(serviceName) {\n      var _this2 = this;\n\n      return this.IndexApiService.query({\n        serviceName: serviceName\n      }).$promise.then(function (indices) {\n        var promises = indices.map(function (indexId) {\n          return _this2.getIndexDetails(serviceName, indexId);\n        });\n        return _this2.$q.all(promises);\n      }).catch(function (err) {\n        return _this2.LogsHelperService.handleError('logs_index_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getOwnIndices\",\n    value: function getOwnIndices(serviceName) {\n      var _this3 = this;\n\n      return this.getIndices(serviceName).then(function (indices) {\n        return indices.filter(function (index) {\n          return index.info.isEditable;\n        });\n      }).catch(function (err) {\n        return _this3.LogsHelperService.handleError('logs_index_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getShareableIndices\",\n    value: function getShareableIndices(serviceName) {\n      var _this4 = this;\n\n      return this.getIndices(serviceName).then(function (indices) {\n        return indices.filter(function (index) {\n          return index.info.isShareable;\n        });\n      }).catch(function (err) {\n        return _this4.LogsHelperService.handleError('logs_index_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getIndexDetails\",\n    value: function getIndexDetails(serviceName, indexId) {\n      var _this5 = this;\n\n      return this.IndexAapiService.get({\n        serviceName: serviceName,\n        indexId: indexId\n      }).$promise.then(function (index) {\n        return _this5.constructor.transformAapiIndex(index);\n      });\n    }\n  }, {\n    key: \"deleteModal\",\n    value: function deleteModal(indexName) {\n      return this.ControllerHelper.modal.showDeleteModal({\n        titleText: this.$translate.instant('logs_modal_delete_title'),\n        textHtml: this.$translate.instant('logs_modal_delete_question', {\n          name: indexName\n        })\n      });\n    }\n  }, {\n    key: \"getSubscribedOptions\",\n    value: function getSubscribedOptions(serviceName) {\n      return this.LogsOptionsService.getSubscribedOptionsByType(serviceName, this.LogsConstants.INDEX_OPTION_REFERENCE);\n    }\n  }, {\n    key: \"createIndex\",\n    value: function createIndex(serviceName, object) {\n      var _this6 = this;\n\n      return this.IndexApiService.post({\n        serviceName: serviceName\n      }, object).$promise.then(function (operation) {\n        _this6.resetAllCache();\n\n        return _this6.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_index_create_success', {\n          name: object.suffix\n        });\n      }).catch(function (err) {\n        return _this6.LogsHelperService.handleError('logs_index_create_error', err, {\n          name: object.suffix\n        });\n      });\n    }\n  }, {\n    key: \"updateIndex\",\n    value: function updateIndex(serviceName, index, indexInfo) {\n      var _this7 = this;\n\n      return this.IndexApiService.put({\n        serviceName: serviceName,\n        indexId: index.indexId\n      }, indexInfo).$promise.then(function (operation) {\n        _this7.resetAllCache();\n\n        return _this7.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_index_edit_success', {\n          name: index.name\n        });\n      }).catch(function (err) {\n        return _this7.LogsHelperService.handleError('logs_index_edit_error', err, {\n          name: index.name\n        });\n      });\n    }\n  }, {\n    key: \"deleteIndex\",\n    value: function deleteIndex(serviceName, index) {\n      var _this8 = this;\n\n      return this.IndexApiService.delete({\n        serviceName: serviceName,\n        indexId: index.indexId\n      }).$promise.then(function (operation) {\n        _this8.resetAllCache();\n\n        return _this8.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_index_delete_success', {\n          name: index.name\n        });\n      }).catch(function (err) {\n        return _this8.LogsHelperService.handleError('logs_index_delete_error', err, {\n          name: index.name\n        });\n      });\n    }\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.IndexApiService.resetAllCache();\n      this.IndexAapiService.resetAllCache();\n      this.AccountingAapiService.resetAllCache();\n    }\n  }], [{\n    key: \"transformAapiIndex\",\n    value: function transformAapiIndex(index) {\n      if (index.info.currentStorage < 0) {\n        _.set(index, 'info.currentStorage', 0);\n      }\n\n      if (index.info.maxSize < 0) {\n        _.set(index, 'info.maxSize', 0);\n      }\n\n      return index;\n    }\n  }]);\n\n  return LogsIndexService;\n}();\n\nangular.module('managerApp').service('LogsIndexService', LogsIndexService);",null]}