{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/controller-request-helper.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/controller-request-helper.service.js","mtime":1539717142186},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class ControllerRequestHelper {\n  constructor($q) {\n    this.$q = $q;\n  }\n\n  getHashLoader(config) {\n    const loader = {\n      loading: false,\n      data: {},\n      hasErrors: false,\n    };\n\n    return this.getLoader(loader, config);\n  }\n\n  getArrayLoader(config) {\n    const loader = {\n      loading: false,\n      data: undefined,\n      promise: undefined,\n      hasErrors: false,\n    };\n\n    return this.getLoader(loader, config);\n  }\n\n  getLoader(initialData = {}, configParam) {\n    const loader = initialData;\n    let config = configParam;\n\n    if (_.isFunction(config)) {\n      config = {\n        loaderFunction: config,\n      };\n    }\n\n    loader.load = () => {\n      if (_.isArray(initialData.data) || _.keys(initialData.data).length === 0) {\n        loader.loading = true;\n      }\n      const promise = this.$q.when(config.loaderFunction())\n        .then((response) => {\n          loader.data = response.data || response;\n          loader.hasErrors = false;\n\n          if (config.successHandler) {\n            config.successHandler(response);\n          }\n\n          return response;\n        })\n        .catch((response) => {\n          loader.hasErrors = true;\n\n          if (config.errorHandler) {\n            config.errorHandler(response);\n          }\n\n          return this.$q.reject(response);\n        })\n        .finally(() => {\n          loader.loading = false;\n        });\n      loader.promise = promise;\n      return promise;\n    };\n\n    return loader;\n  }\n}\n\nangular.module('managerApp').service('ControllerRequestHelper', ControllerRequestHelper);\n"]}