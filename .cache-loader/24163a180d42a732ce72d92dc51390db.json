{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/common/OvhPoll.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/common/OvhPoll.service.js","mtime":1539717142057},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class OvhPoll {\n  constructor($q, $interval) {\n    this.$q = $q;\n    this.$interval = $interval;\n  }\n\n  poll(opts) {\n    opts = _.extend({}, _.omit(opts, 'item'), { items: [opts.item] }); // eslint-disable-line\n    return this.pollArray(opts);\n  }\n\n  // Polling opts. Contains items to poll, pollFunction callback, stopCondition callback\n  // and interval (optional, default 5000).\n  // Ex =>\n  // {\n  //   item: [1, 2, 3],\n  //   pollFunction: item => doSomething(),\n  //   stopCondition: item => doSomething(),\n  //   interval: 10000,\n  // }\n  pollArray(opts) {\n    const poller = {};\n    let { items } = opts;\n    _.set(opts, 'onItemDone', opts.onItemDone ? opts.onItemDone : _.noop);\n    _.set(opts, 'onItemUpdated', opts.onItemUpdated ? opts.onItemUpdated : _.noop);\n    _.set(opts, 'stopCondition', opts.stopCondition ? opts.stopCondition : _.noop);\n\n    const deferred = this.$q.defer();\n    poller.pollInterval = this.$interval(() => {\n      const promises = _.map(items, item => this.$q.when(opts.pollFunction(item))\n        .then((newItem) => {\n          if (newItem) {\n            const newItemKeys = _.keys(newItem);\n            _.forEach(_.keys(item), (key) => {\n              if (!_.includes(newItemKeys, key)) {\n                delete item[key]; // eslint-disable-line\n              }\n            });\n            _.merge(item, newItem.data ? newItem.data : newItem);\n\n            opts.onItemUpdated(item);\n          }\n\n          return this.$q.when(opts.stopCondition(item));\n        }).catch(() => { // If an error is encountered, we end the polling.\n          item = null; // eslint-disable-line\n          return true;\n        })\n        .then((stopCondition) => {\n          if (stopCondition) {\n            opts.onItemDone(item);\n          }\n\n          return {\n            stopping: stopCondition,\n            item,\n          };\n        }));\n\n      this.$q.all(promises)\n        .then((results) => {\n          items = _.map(_.filter(results, result => !result.stopping), result => result.item);\n\n          if (!items.length) {\n            poller.kill();\n            deferred.resolve(results);\n          }\n        });\n    }, opts.interval || 5000);\n\n    poller.kill = () => {\n      this.$interval.cancel(poller.pollInterval);\n    };\n\n    poller.$promise = deferred.promise;\n\n    return poller;\n  }\n}\n\nangular.module('managerApp').service('OvhPoll', OvhPoll);\n"]}