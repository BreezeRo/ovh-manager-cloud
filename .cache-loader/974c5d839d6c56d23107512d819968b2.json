{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/logs-roles.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/logs-roles.service.js","mtime":1539717142142},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsRolesService =\n/*#__PURE__*/\nfunction () {\n  LogsRolesService.$inject = [\"$q\", \"$translate\", \"CloudPoll\", \"ControllerHelper\", \"LogsAliasesService\", \"LogsDashboardsService\", \"LogsHelperService\", \"LogsIndexService\", \"LogsOptionsService\", \"LogsConstants\", \"LogsStreamsService\", \"OvhApiDbaas\", \"ServiceHelper\"];\n\n  function LogsRolesService($q, $translate, CloudPoll, ControllerHelper, LogsAliasesService, LogsDashboardsService, LogsHelperService, LogsIndexService, LogsOptionsService, LogsConstants, LogsStreamsService, OvhApiDbaas, ServiceHelper) {\n    _classCallCheck(this, LogsRolesService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.ServiceHelper = ServiceHelper;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsDashboardsService = LogsDashboardsService;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsAliasesService = LogsAliasesService;\n    this.LogsIndexService = LogsIndexService;\n    this.LogsStreamsService = LogsStreamsService;\n    this.LogsHelperService = LogsHelperService;\n    this.LogsConstants = LogsConstants;\n    this.CloudPoll = CloudPoll;\n    this.LogsApiService = OvhApiDbaas.Logs().v6();\n    this.MembersApiService = OvhApiDbaas.Logs().Role().Member().v6();\n    this.PermissionsApiService = OvhApiDbaas.Logs().Role().Permission().v6();\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.RolesApiService = OvhApiDbaas.Logs().Role().v6();\n    this.RolesAapiService = OvhApiDbaas.Logs().Role().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.newRole = {\n      description: '',\n      name: '',\n      optionId: null\n    };\n    this.permissions = {\n      dashboard: [],\n      alias: [],\n      index: [],\n      stream: []\n    };\n  }\n\n  _createClass(LogsRolesService, [{\n    key: \"getNewPermissions\",\n    value: function getNewPermissions() {\n      this.permissions.dashboard.length = 0;\n      this.permissions.alias.length = 0;\n      this.permissions.index.length = 0;\n      this.permissions.stream.length = 0;\n      return this.permissions;\n    }\n  }, {\n    key: \"getAllStreams\",\n    value: function getAllStreams(serviceName) {\n      return this.LogsStreamsService.getShareableStreams(serviceName);\n    }\n  }, {\n    key: \"getAllAliases\",\n    value: function getAllAliases(serviceName) {\n      return this.LogsAliasesService.getShareableAliases(serviceName);\n    }\n  }, {\n    key: \"getAllDashboards\",\n    value: function getAllDashboards(serviceName) {\n      return this.LogsDashboardsService.getShareableDashboards(serviceName);\n    }\n  }, {\n    key: \"getAllIndices\",\n    value: function getAllIndices(serviceName) {\n      return this.LogsIndexService.getShareableIndices(serviceName);\n    }\n  }, {\n    key: \"addAlias\",\n    value: function addAlias(serviceName, roleId, alias) {\n      var _this = this;\n\n      return this.PermissionsApiService.addAlias({\n        serviceName: serviceName,\n        roleId: roleId,\n        aliasId: alias.aliasId\n      }).$promise.then(function (operation) {\n        _this.RolesAapiService.resetAllCache();\n\n        return _this.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this.LogsHelperService.handleError('logs_roles_add_alias_error', err, {\n          tokenName: alias.name\n        });\n      });\n    }\n  }, {\n    key: \"addDashboard\",\n    value: function addDashboard(serviceName, roleId, dashboard) {\n      var _this2 = this;\n\n      return this.PermissionsApiService.addDashboard({\n        serviceName: serviceName,\n        roleId: roleId,\n        dashboardId: dashboard.dashboardId\n      }).$promise.then(function (operation) {\n        _this2.RolesAapiService.resetAllCache();\n\n        return _this2.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this2.LogsHelperService.handleError('logs_roles_add_dashboard_error', err, {\n          tokenName: dashboard.title\n        });\n      });\n    }\n  }, {\n    key: \"addIndex\",\n    value: function addIndex(serviceName, roleId, index) {\n      var _this3 = this;\n\n      return this.PermissionsApiService.addIndex({\n        serviceName: serviceName,\n        roleId: roleId,\n        indexId: index.indexId\n      }).$promise.then(function (operation) {\n        _this3.RolesAapiService.resetAllCache();\n\n        return _this3.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this3.LogsHelperService.handleError('logs_roles_add_index_error', err, {\n          tokenName: index.name\n        });\n      });\n    }\n  }, {\n    key: \"addStream\",\n    value: function addStream(serviceName, roleId, stream) {\n      var _this4 = this;\n\n      return this.PermissionsApiService.addStream({\n        serviceName: serviceName,\n        roleId: roleId,\n        streamId: stream.streamId\n      }).$promise.then(function (operation) {\n        _this4.RolesAapiService.resetAllCache();\n\n        return _this4.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this4.LogsHelperService.handleError('logs_roles_add_stream_error', err, {\n          tokenName: stream.title\n        });\n      });\n    }\n  }, {\n    key: \"removePermission\",\n    value: function removePermission(serviceName, roleId, permission) {\n      var _this5 = this;\n\n      return this.PermissionsApiService.remove({\n        serviceName: serviceName,\n        roleId: roleId\n      }, {\n        permissionId: permission[0].permissionId\n      }).$promise.then(function (operation) {\n        return _this5.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      }).catch(function (err) {\n        return _this5.LogsHelperService.handleError('logs_remove_permission_error', err, {\n          tokenName: permission[0].name || permission[0].title\n        });\n      });\n    }\n  }, {\n    key: \"getNewRole\",\n    value: function getNewRole() {\n      return this.newRole;\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs() {\n      var _this6 = this;\n\n      return this.LogsApiService.query().$promise.then(function (logs) {\n        var promises = logs.map(function (serviceName) {\n          return _this6.getLogDetails(serviceName);\n        });\n        return _this6.$q.all(promises);\n      }).catch(this.ServiceHelper.errorHandler('logs_get_error'));\n    }\n  }, {\n    key: \"getLogDetails\",\n    value: function getLogDetails(serviceName) {\n      return this.LogsApiService.logDetail({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"getQuota\",\n    value: function getQuota(serviceName) {\n      var _this7 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        var quota = {\n          max: me.total.maxNbRole,\n          mainOfferMax: me.offer.maxNbRole,\n          mainOfferCurrent: me.offer.curNbRole,\n          configured: me.total.curNbRole,\n          currentUsage: me.total.curNbRole * 100 / me.total.maxNbRole\n        };\n        return quota;\n      }).catch(function (err) {\n        return _this7.LogsHelperService.handleError('logs_roles_quota_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getRoles\",\n    value: function getRoles(serviceName) {\n      var _this8 = this;\n\n      return this.RolesApiService.query({\n        serviceName: serviceName\n      }).$promise.then(function (roles) {\n        var promises = roles.map(function (roleId) {\n          return _this8.getRoleDetails(serviceName, roleId);\n        });\n        return _this8.$q.all(promises);\n      }).catch(function (err) {\n        return _this8.LogsHelperService.handleError('logs_roles_get_error', err, {});\n      });\n    }\n  }, {\n    key: \"getRoleDetails\",\n    value: function getRoleDetails(serviceName, roleId) {\n      return this.RolesAapiService.get({\n        serviceName: serviceName,\n        roleId: roleId\n      }).$promise;\n    }\n  }, {\n    key: \"getSubscribedOptions\",\n    value: function getSubscribedOptions(serviceName) {\n      return this.LogsOptionsService.getSubscribedOptionsByType(serviceName, this.LogsConstants.ROLE_OPTION_REFERENCE);\n    }\n  }, {\n    key: \"addRole\",\n    value: function addRole(serviceName, object) {\n      var _this9 = this;\n\n      return this.RolesApiService.create({\n        serviceName: serviceName\n      }, object).$promise.then(function (operation) {\n        _this9.resetAllCache();\n\n        return _this9.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_add_success', {\n          name: object.name\n        });\n      }).catch(function (err) {\n        return _this9.LogsHelperService.handleError('logs_role_add_error', err, {\n          name: object.name\n        });\n      });\n    }\n  }, {\n    key: \"updateRole\",\n    value: function updateRole(serviceName, roleId, object) {\n      var _this10 = this;\n\n      return this.RolesApiService.update({\n        serviceName: serviceName,\n        roleId: roleId\n      }, object).$promise.then(function (operation) {\n        _this10.resetAllCache();\n\n        return _this10.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_update_success', {\n          name: object.name\n        });\n      }).catch(function (err) {\n        return _this10.LogsHelperService.handleError('logs_role_update_error', err, {\n          name: object.name\n        });\n      });\n    }\n  }, {\n    key: \"deleteRole\",\n    value: function deleteRole(serviceName, role) {\n      var _this11 = this;\n\n      return this.RolesApiService.remove({\n        serviceName: serviceName,\n        roleId: role.roleId\n      }).$promise.then(function (operation) {\n        _this11.resetAllCache();\n\n        return _this11.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_delete_success', {\n          name: role.name\n        });\n      }).catch(function (err) {\n        return _this11.LogsHelperService.handleError('logs_role_delete_error', err, {\n          name: role.name\n        });\n      });\n    }\n  }, {\n    key: \"deleteModal\",\n    value: function deleteModal(role) {\n      return this.ControllerHelper.modal.showDeleteModal({\n        titleText: this.$translate.instant('logs_role_modal_delete_title'),\n        textHtml: this.$translate.instant('logs_role_modal_delete_question', {\n          name: role.name\n        })\n      });\n    }\n  }, {\n    key: \"createMember\",\n    value: function createMember(serviceName, roleId, userDetails) {\n      var _this12 = this;\n\n      return this.MembersApiService.create({\n        serviceName: serviceName,\n        roleId: roleId\n      }, userDetails).$promise.then(function (operation) {\n        _this12.resetAllCache();\n\n        return _this12.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_member_add_success', {\n          name: userDetails.username\n        });\n      }).catch(function (err) {\n        return _this12.LogsHelperService.handleError('logs_role_member_add_error', err, {\n          name: userDetails.username\n        });\n      });\n    }\n  }, {\n    key: \"removeMember\",\n    value: function removeMember(serviceName, roleId, username) {\n      var _this13 = this;\n\n      return this.MembersApiService.remove({\n        serviceName: serviceName,\n        roleId: roleId,\n        username: username\n      }).$promise.then(function (operation) {\n        _this13.resetAllCache();\n\n        return _this13.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_member_remove_success', {\n          name: username\n        });\n      }).catch(function (err) {\n        return _this13.LogsHelperService.handleError('logs_role_member_remove_error', err, {\n          name: username\n        });\n      });\n    }\n  }, {\n    key: \"deleteMemberModal\",\n    value: function deleteMemberModal(username) {\n      return this.ControllerHelper.modal.showDeleteModal({\n        titleText: this.$translate.instant('logs_member_delete_title'),\n        textHtml: this.$translate.instant('logs_member_delete_question', {\n          username: username\n        })\n      });\n    }\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.RolesApiService.resetAllCache();\n      this.RolesAapiService.resetAllCache();\n      this.MembersApiService.resetAllCache();\n      this.AccountingAapiService.resetAllCache();\n    }\n  }]);\n\n  return LogsRolesService;\n}();\n\nangular.module('managerApp').service('LogsRolesService', LogsRolesService);",null]}