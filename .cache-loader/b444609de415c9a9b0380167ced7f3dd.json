{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/dbaas-metrics/dashboard/metrics-dashboard.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/dbaas-metrics/dashboard/metrics-dashboard.controller.js","mtime":1539717142067},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["(() => {\n  class MetricsDashboardCtrl {\n    constructor($scope, $stateParams, $q, $translate, CloudMessage, ControllerHelper,\n      FeatureAvailabilityService, MetricService, METRICS_ENDPOINTS,\n      RegionService, SidebarMenu) {\n      this.$scope = $scope;\n      this.$stateParams = $stateParams;\n      this.$q = $q;\n      this.$translate = $translate;\n      this.serviceName = $stateParams.serviceName;\n      this.ControllerHelper = ControllerHelper;\n      this.CloudMessage = CloudMessage;\n      this.FeatureAvailabilityService = FeatureAvailabilityService;\n      this.MetricService = MetricService;\n      this.graphs = METRICS_ENDPOINTS.graphs;\n      this.RegionService = RegionService;\n      this.SidebarMenu = SidebarMenu;\n\n      this.loading = {};\n      this.limit = {\n        warning: 70,\n        danger: 85,\n      };\n      this.usage = {};\n      this.configuration = {};\n      this.plan = {};\n      this.actions = {};\n    }\n\n    $onInit() {\n      this.loading.service = true;\n      this.loading.consumption = true;\n      this.loading.plan = true;\n      this.initTiles();\n    }\n\n    initTiles() {\n      this.initActions();\n      this.MetricService.getService(this.serviceName)\n        .then((service) => {\n          this.usage.quota = {\n            mads: service.data.quota.mads,\n            ddp: service.data.quota.ddp,\n          };\n          this.configuration = {\n            name: service.data.name,\n            description: service.data.description,\n            retention: service.data.quota.retention,\n            datacenter: this.transformRegion(service.data.region.name),\n          };\n          this.plan.offer = service.data.offer;\n        })\n        .finally(() => {\n          this.loading.service = false;\n        });\n\n      this.MetricService.getConsumption(this.serviceName)\n        .then((cons) => {\n          this.usage.conso = { mads: cons.data.mads, ddp: cons.data.ddp };\n          this.initMessages();\n        })\n        .finally(() => {\n          this.loading.consumption = false;\n        });\n\n      this.MetricService.getServiceInfos(this.serviceName)\n        .then((info) => {\n          this.plan = info.data;\n          return this.MetricService.getService(this.serviceName);\n        })\n        .then((service) => {\n          this.plan.offer = service.data.offer;\n        })\n        .finally(() => {\n          this.loading.plan = false;\n        });\n    }\n\n    initMessages() {\n      if (this.constructor.computeUsage(\n        this.usage.conso.mads,\n        this.usage.quota.mads,\n      ) > this.limit.warning) {\n        this.CloudMessage.warning(this.$translate.instant('metrics_quota_mads_warning_message'));\n      }\n      if (this.constructor.computeUsage(\n        this.usage.conso.ddp,\n        this.usage.quota.ddp,\n      ) > this.limit.warning) {\n        this.CloudMessage.warning(this.$translate.instant('metrics_quota_ddp_warning_message'));\n      }\n    }\n\n    initActions() {\n      this.actions = {\n        autorenew: {\n          text: this.$translate.instant('common_manage'),\n          href: this.ControllerHelper.navigation.getUrl('renew', { serviceName: this.serviceName, serviceType: 'METRICS' }),\n          isAvailable: () => true,\n        },\n        contacts: {\n          text: this.$translate.instant('common_manage'),\n          href: this.ControllerHelper.navigation.getUrl('contacts', { serviceName: this.serviceName }),\n          isAvailable: () => this.FeatureAvailabilityService.hasFeature('CONTACTS', 'manage'),\n        },\n        editName: {\n          text: this.$translate.instant('metrics_tiles_modify'),\n          callback: () => this.showEditName(this.configuration.description),\n          isAvailable: () => true,\n        },\n      };\n    }\n\n    static computeUsage(value, total) {\n      return value / total * 100;\n    }\n\n    static displayUsage(value, total) {\n      if (!value && !total) {\n        return '0';\n      }\n      return `${value}/${total}`;\n    }\n\n    computeColor(value, total) {\n      const green = '#B0CA67';\n      const yellow = '#E3CD4D';\n      const red = '#B04020';\n      if (this.constructor.computeUsage(value, total) > this.limit.danger) {\n        return red;\n      } if (this.constructor.computeUsage(value, total) > this.limit.warning) {\n        return yellow;\n      }\n      return green;\n    }\n\n    transformRegion(regionCode) {\n      const region = this.RegionService.getRegion(regionCode);\n      return { name: region.microRegion.text, country: region.country, flag: region.icon };\n    }\n\n    updateName(newDisplayName) {\n      return this.MetricService.setServiceDescription(this.serviceName, newDisplayName)\n        .then((result) => {\n          this.configuration.description = result.data.description;\n          this.$scope.$emit('changeDescription', this.configuration.description);\n\n          const menuItem = this.SidebarMenu.getItemById(this.serviceName);\n          menuItem.title = this.configuration.description;\n        });\n    }\n\n    showEditName(name) {\n      this.ControllerHelper.modal.showNameChangeModal({\n        serviceName: this.serviceName,\n        displayName: name,\n        onSave: newDisplayName => this.updateName(newDisplayName),\n      });\n    }\n  }\n\n  angular.module('managerApp').controller('MetricsDashboardCtrl', MetricsDashboardCtrl);\n})();\n"]}