{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/tokens/logs-tokens.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/tokens/logs-tokens.service.js","mtime":1539717142155},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsTokensService =\n/*#__PURE__*/\nfunction () {\n  LogsTokensService.$inject = [\"$q\", \"OvhApiDbaas\", \"LogsHelperService\"];\n\n  function LogsTokensService($q, OvhApiDbaas, LogsHelperService) {\n    _classCallCheck(this, LogsTokensService);\n\n    this.$q = $q;\n    this.TokenApiService = OvhApiDbaas.Logs().Token().v6();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.LogsHelperService = LogsHelperService;\n  }\n  /**\n   * returns array of tokens with details\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of tokens.\n   *          Each alias will have all details populated.\n   * @memberof LogsTokensService\n   */\n\n\n  _createClass(LogsTokensService, [{\n    key: \"getTokens\",\n    value: function getTokens(serviceName) {\n      var _this = this;\n\n      return this.getTokensDetails(serviceName).catch(function (err) {\n        return _this.LogsHelperService.handleError('logs_tokens_get_error', err, {});\n      });\n    }\n    /**\n     * gets details for each token in array\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to an array of token objects\n     * @memberof LogsTokensService\n     */\n\n  }, {\n    key: \"getTokensDetails\",\n    value: function getTokensDetails(serviceName) {\n      var _this2 = this;\n\n      return this.getTokensIds(serviceName).then(function (tokens) {\n        var promises = tokens.map(function (tokenId) {\n          return _this2.getToken(serviceName, tokenId);\n        });\n        return _this2.$q.all(promises);\n      });\n    }\n    /**\n     * returns array of tokens id's of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of tokens id's\n     * @memberof LogsTokensService\n     */\n\n  }, {\n    key: \"getTokensIds\",\n    value: function getTokensIds(serviceName) {\n      return this.TokenApiService.query({\n        serviceName: serviceName\n      }).$promise;\n    }\n    /**\n     * returns details of an token\n     *\n     * @param {any} serviceName\n     * @param {any} tokenId\n     * @returns promise which will be resolve to token object\n     * @memberof LogsTokensService\n     */\n\n  }, {\n    key: \"getToken\",\n    value: function getToken(serviceName, tokenId) {\n      var _this3 = this;\n\n      return this.TokenApiService.get({\n        serviceName: serviceName,\n        tokenId: tokenId\n      }).$promise.catch(function (err) {\n        return _this3.LogsHelperService.handleError('logs_tokens_get_detail_error', err, {});\n      });\n    }\n    /**\n     * delete token\n     *\n     * @param {any} serviceName\n     * @param {any} token, token object to be deleted\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsTokensService\n     */\n\n  }, {\n    key: \"deleteToken\",\n    value: function deleteToken(serviceName, token) {\n      var _this4 = this;\n\n      return this.TokenApiService.delete({\n        serviceName: serviceName,\n        tokenId: token.tokenId\n      }).$promise.then(function (operation) {\n        _this4.resetAllCache();\n\n        return _this4.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_tokens_delete_success', {\n          tokenName: token.name\n        });\n      }).catch(function (err) {\n        return _this4.LogsHelperService.handleError('logs_tokens_delete_error', err, {\n          tokenName: token.name\n        });\n      });\n    }\n    /**\n     * create new token\n     *\n     * @param {any} serviceName\n     * @param {any} token, token object to be created\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsTokensService\n     */\n\n  }, {\n    key: \"createToken\",\n    value: function createToken(serviceName, token) {\n      var _this5 = this;\n\n      return this.TokenApiService.create({\n        serviceName: serviceName\n      }, token).$promise.then(function (operation) {\n        _this5.resetAllCache();\n\n        return _this5.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_tokens_create_success', {\n          tokenName: token.name\n        });\n      }).catch(function (err) {\n        return _this5.LogsHelperService.handleError('logs_tokens_create_error', err, {\n          tokenName: token.name\n        });\n      });\n    }\n    /**\n     * returns array of Input IDs of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of input IDs\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getClusters\",\n    value: function getClusters(serviceName, errorMessageParam) {\n      var _this6 = this;\n\n      var errorMessage = errorMessageParam || 'logs_tokens_cluster_get_error';\n      return this.DetailsAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (details) {\n        return details.clusters;\n      }).catch(function (err) {\n        return _this6.LogsHelperService.handleError(errorMessage, err, {\n          accountName: serviceName\n        });\n      });\n    }\n    /**\n     * returns default cluster associated with user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to default cluster\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getDefaultCluster\",\n    value: function getDefaultCluster(serviceName, errorMessage) {\n      return this.getClusters(serviceName, errorMessage).then(function (clusters) {\n        var defaultClusters = clusters.filter(function (cluster) {\n          return cluster.isDefault;\n        });\n        return defaultClusters.length > 0 ? defaultClusters[0] : null;\n      });\n    }\n    /**\n     * creates new token with default values\n     *\n     * @returns token object with default values\n     * @memberof LogsTokensService\n     */\n\n  }, {\n    key: \"getNewToken\",\n    value: function getNewToken(serviceName) {\n      return this.getDefaultCluster(serviceName).then(function (defaultCluster) {\n        return {\n          name: null,\n          clusterId: defaultCluster ? defaultCluster.clusterId : null\n        };\n      });\n    }\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.TokenApiService.resetAllCache();\n    }\n  }]);\n\n  return LogsTokensService;\n}();\n\nangular.module('managerApp').service('LogsTokensService', LogsTokensService);",null]}