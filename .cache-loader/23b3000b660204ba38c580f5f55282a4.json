{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/virtualMachine/add/cloud-project-compute-infrastructure-virtualMachine-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/virtualMachine/add/cloud-project-compute-infrastructure-virtualMachine-add.controller.js","mtime":1539717374476},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeInfrastructureVirtualMachineAddCtrl =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeInfrastructureVirtualMachineAddCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"CloudFlavorService\", \"CloudImageService\", \"CloudProjectVirtualMachineAddService\", \"CloudRegionService\", \"OvhCloudPriceHelper\", \"OvhApiCloudProjectFlavor\", \"OvhApiCloudProjectImage\", \"OvhApiCloudProjectInstance\", \"OvhApiCloudProjectNetworkPrivate\", \"OvhApiCloudProjectNetworkPublic\", \"OvhApiCloudProjectQuota\", \"OvhApiCloudProjectRegion\", \"OvhApiCloudProjectSnapshot\", \"OvhApiCloudProjectSshKey\", \"CurrencyService\", \"RegionService\", \"ServiceHelper\", \"ovhDocUrl\", \"TARGET\", \"URLS\"];\n\n  function CloudProjectComputeInfrastructureVirtualMachineAddCtrl($q, $state, $stateParams, CloudFlavorService, CloudImageService, CloudProjectVirtualMachineAddService, CloudRegionService, OvhCloudPriceHelper, OvhApiCloudProjectFlavor, OvhApiCloudProjectImage, OvhApiCloudProjectInstance, OvhApiCloudProjectNetworkPrivate, OvhApiCloudProjectNetworkPublic, OvhApiCloudProjectQuota, OvhApiCloudProjectRegion, OvhApiCloudProjectSnapshot, OvhApiCloudProjectSshKey, CurrencyService, RegionService, ServiceHelper, ovhDocUrl, TARGET, URLS) {\n    _classCallCheck(this, CloudProjectComputeInfrastructureVirtualMachineAddCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.CloudFlavorService = CloudFlavorService;\n    this.CloudImageService = CloudImageService;\n    this.OvhCloudPriceHelper = OvhCloudPriceHelper;\n    this.CloudRegionService = CloudRegionService;\n    this.OvhApiCloudProjectFlavor = OvhApiCloudProjectFlavor;\n    this.OvhApiCloudProjectImage = OvhApiCloudProjectImage;\n    this.OvhApiCloudProjectInstance = OvhApiCloudProjectInstance;\n    this.OvhApiCloudProjectNetworkPrivate = OvhApiCloudProjectNetworkPrivate;\n    this.OvhApiCloudProjectNetworkPublic = OvhApiCloudProjectNetworkPublic;\n    this.OvhApiCloudProjectQuota = OvhApiCloudProjectQuota;\n    this.OvhApiCloudProjectRegion = OvhApiCloudProjectRegion;\n    this.OvhApiCloudProjectSnapshot = OvhApiCloudProjectSnapshot;\n    this.OvhApiCloudProjectSshKey = OvhApiCloudProjectSshKey;\n    this.CurrencyService = CurrencyService;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n    this.VirtualMachineAddService = CloudProjectVirtualMachineAddService;\n    this.ovhDocUrl = ovhDocUrl;\n    this.TARGET = TARGET;\n    this.URLS = URLS;\n  }\n\n  _createClass(CloudProjectComputeInfrastructureVirtualMachineAddCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.serviceName = this.$stateParams.projectId;\n      this.currentCurrency = this.CurrencyService.getCurrentCurrency();\n      this.loaders = {\n        adding: false\n      };\n      this.model = {\n        billingPeriod: null,\n        flavor: null,\n        imageType: null,\n        name: '',\n        networkId: '',\n        number: 0,\n        region: null,\n        sshKey: null,\n        userData: null\n      };\n      this.enums = {\n        billingPeriods: ['monthly', 'hourly'],\n        flavorsTypes: [],\n        imagesTypes: []\n      };\n      this.isNameUpdated = false;\n      this.isPostScriptEnabled = false;\n      this.mostRecentVm = null;\n      this.newSshKey = {\n        name: null,\n        publicKey: null\n      };\n      this.state = {\n        hasVRack: false\n      };\n      this.submitted = {};\n      this.urls = {};\n    }\n  }, {\n    key: \"initProject\",\n    value: function initProject() {\n      this.promiseQuota = this.OvhApiCloudProjectQuota.v6().query({\n        serviceName: this.serviceName\n      }).$promise;\n      this.promisePublicNetworks = this.OvhApiCloudProjectNetworkPublic.v6().query({\n        serviceName: this.serviceName\n      }).$promise;\n      this.urls.vLansApiGuide = this.ovhDocUrl.getDocUrl('g2162.public_cloud_et_vrack_-_comment_utiliser_le_vrack_et_les_reseaux_prives_avec_les_instances_public_cloud');\n\n      if (this.TARGET === 'US') {\n        this.urls.guidesSshkey = this.URLS.guides.ssh.create.US;\n      } else {\n        this.urls.guidesSshkey = this.ovhDocUrl.getDocUrl('g1769.creating_ssh_keys');\n      }\n\n      this.initOsList();\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.$state.go('iaas.pci-project.compute.infrastructure.list');\n    }\n  }, {\n    key: \"confirm\",\n    value: function confirm() {\n      this.addVirtualMachine();\n    }\n    /*----------------------------------\n       |  Step 1 : OS or SnapShot choice  |\n       ----------------------------------*/\n\n  }, {\n    key: \"initOsList\",\n    value: function initOsList() {\n      var _this = this;\n\n      this.loaders.step1 = true;\n      return this.$q.all({\n        images: this.OvhApiCloudProjectImage.v6().query({\n          serviceName: this.serviceName\n        }).$promise.then(function (images) {\n          // Image types (linux, windows, ...)\n          _this.enums.imagesTypes = _this.CloudImageService.constructor.getImageTypes(images);\n          _this.images = _this.VirtualMachineAddService.getAugmentedImages(images);\n        }).catch(this.ServiceHelper.errorHandler('cpcivm_add_step1_images_ERROR')),\n        snapshots: this.OvhApiCloudProjectSnapshot.v6().query({\n          serviceName: this.serviceName\n        }).$promise.then(function (snapshots) {\n          _this.snapshots = _.map(snapshots, function (snapshot) {\n            return _.set(snapshot, 'distribution', _.get(snapshot, 'type', 'linux'));\n          });\n        }).catch(this.ServiceHelper.errorHandler('cpcivm_add_step1_shapshots_ERROR')),\n        sshKeys: this.OvhApiCloudProjectSshKey.v6().query({\n          serviceName: this.serviceName\n        }).$promise,\n        instances: this.OvhApiCloudProjectInstance.v6().query({\n          serviceName: this.serviceName\n        }).$promise\n      }).then(function (_ref) {\n        var sshKeys = _ref.sshKeys,\n            instances = _ref.instances;\n        _this.displayedSnapshots = _.filter(_this.snapshots, {\n          status: 'active'\n        });\n        _this.displayedImages = _this.CloudImageService.groupImagesByType(_this.images, _this.enums.imagesTypes);\n        _this.displayedApps = _this.VirtualMachineAddService.getImageApps(_this.images);\n        _this.displayedSshKeys = sshKeys;\n        _this.mostRecentVm = _this.VirtualMachineAddService.constructor.getMostRecentVm(instances);\n\n        if (_this.mostRecentVm) {\n          _this.model.sshKey = _.find(sshKeys, {\n            id: _this.mostRecentVm.sshKeyId\n          });\n        }\n      }).catch(this.ServiceHelper.errorHandler('cpcivm_add_step1_general_ERROR')).finally(function () {\n        _this.loaders.step1 = false;\n      });\n    }\n  }, {\n    key: \"onSelectChange\",\n    value: function onSelectChange() {\n      if (this.model.imageType.type === 'windows') {\n        this.addingSshKey = false;\n      }\n    }\n  }, {\n    key: \"isStep1Valid\",\n    value: function isStep1Valid() {\n      return this.model.imageType && !this.addingSshKey && (this.model.imageType.type !== 'linux' || this.model.sshKey);\n    }\n  }, {\n    key: \"resetStep1\",\n    value: function resetStep1() {\n      this.submitted.step1 = false;\n      this.resetStep2();\n    }\n  }, {\n    key: \"addSshKey\",\n    value: function addSshKey() {\n      var _this2 = this;\n\n      if (this.newSshKey.name && this.newSshKey.publicKey) {\n        this.loaders.addingSsh = true;\n        return this.OvhApiCloudProjectSshKey.v6().save({\n          serviceName: this.serviceName\n        }, this.newSshKey).$promise.then(function (newSshKey) {\n          _this2.OvhApiCloudProjectSshKey.v6().resetQueryCache();\n\n          return _this2.$q.all({\n            newSshKey: newSshKey,\n            sshKeys: _this2.OvhApiCloudProjectSshKey.v6().query({\n              serviceName: _this2.serviceName\n            }).$promise\n          });\n        }).then(function (_ref2) {\n          var newSshKey = _ref2.newSshKey,\n              sshKeys = _ref2.sshKeys;\n          _this2.displayedSshKeys = sshKeys;\n          _this2.model.sshKey = newSshKey;\n\n          _this2.checkSshKeyByRegion(newSshKey.regions);\n        }).catch(this.ServiceHelper.errorHandler('cpcivm_add_step1_sshKey_adding_ERROR')).finally(function () {\n          _this2.resetAddingSshKey();\n\n          _this2.loaders.addingSsh = false;\n        });\n      }\n\n      return false;\n    }\n  }, {\n    key: \"resetAddingSshKey\",\n    value: function resetAddingSshKey() {\n      this.model.sshKey = null;\n      this.newSshKey.name = null;\n      this.newSshKey.publicKey = null;\n      this.addingSshKey = false;\n    }\n    /*-----------------------------------------\n       |  Step 2 : Region and DataCenter choice  |\n       -----------------------------------------*/\n\n  }, {\n    key: \"initRegionsAndDataCenters\",\n    value: function initRegionsAndDataCenters() {\n      var _this3 = this;\n\n      this.loaders.step2 = true;\n      this.submitted.step2 = false;\n      this.resetStep3();\n      return this.$q.all({\n        regions: this.OvhApiCloudProjectRegion.v6().query({\n          serviceName: this.serviceName\n        }).$promise.then(function (regions) {\n          _this3.regions = _.map(regions, function (region) {\n            return _this3.RegionService.getRegion(region);\n          });\n          return _this3.VirtualMachineAddService.getRegionsByImageType(_this3.regions, _this3.images, _.get(_this3.model, 'imageType'));\n        }),\n        quota: this.promiseQuota.then(function (quota) {\n          _this3.quota = quota;\n        }).catch(this.ServiceHelper.errorHandler('cpcivm_add_step2_quota_ERROR'))\n      }).then(function (_ref3) {\n        var regions = _ref3.regions;\n\n        _.forEach(regions, function (region) {\n          // Add quota info\n          _this3.CloudRegionService.constructor.addOverQuotaInfos(region, _this3.quota); // Check SSH Key opportunity\n\n\n          if (_.get(_this3.model, 'sshKey.regions', false)) {\n            _this3.CloudRegionService.constructor.checkSshKey(region, _this3.model.sshKey.regions);\n          }\n        });\n\n        _this3.displayedRegions = _this3.VirtualMachineAddService.constructor.groupRegionsByDatacenter(regions);\n        _this3.groupedRegions = _.groupBy(_this3.displayedRegions, 'continent');\n      }).catch(this.ServiceHelper.errorHandler('cpcivm_add_step2_regions_ERROR')).finally(function () {\n        _this3.loaders.step2 = false;\n      });\n    }\n  }, {\n    key: \"isStep2Valid\",\n    value: function isStep2Valid() {\n      return this.model.region && this.model.imageId;\n    }\n  }, {\n    key: \"resetStep2\",\n    value: function resetStep2() {\n      this.submitted.step2 = false;\n      this.model.region = null;\n      this.resetStep3();\n    }\n  }, {\n    key: \"setImageId\",\n    value: function setImageId() {\n      if (this.CloudImageService.constructor.isSnapshot(this.model.imageType)) {\n        this.model.imageId = this.model.imageType;\n      } else {\n        this.model.imageId = _.find(this.images, {\n          apps: _.get(this.model, 'imageType.apps', false),\n          distribution: this.model.imageType.distribution,\n          nameGeneric: this.model.imageType.nameGeneric,\n          region: this.model.region.microRegion.code,\n          status: 'active',\n          type: _.get(this.model, 'imageType.type', 'linux')\n        });\n      }\n    }\n  }, {\n    key: \"checkSshKeyByRegion\",\n    value: function checkSshKeyByRegion(sshKeyRegions) {\n      var _this4 = this;\n\n      _.forEach(this.displayedRegions, function (region) {\n        _.forEach(region.dataCenters, function (dataCenter) {\n          _this4.CloudRegionService.constructor.checkSshKey(dataCenter, sshKeyRegions);\n        });\n      });\n    }\n  }, {\n    key: \"updateSshKeyRegion\",\n    value: function updateSshKeyRegion() {\n      var _this5 = this;\n\n      return this.VirtualMachineAddService.openSshKeyRegionModal(this.model.sshKey).then(function () {\n        _this5.loaders.step2 = true;\n        return _this5.OvhApiCloudProjectSshKey.v6().remove({\n          serviceName: _this5.serviceName,\n          keyId: _this5.model.sshKey.id\n        }).$promise;\n      }).then(function () {\n        return _this5.OvhApiCloudProjectSshKey.v6().save({\n          serviceName: _this5.serviceName\n        }, {\n          name: _this5.model.sshKey.name,\n          publicKey: _this5.model.sshKey.publicKey\n        }).$promise;\n      }).then(function (sshKey) {\n        _this5.model.sshKey = sshKey;\n\n        _.set(_.find(_this5.displayedSshKeys, {\n          id: sshKey.id\n        }), 'regions', sshKey.regions);\n\n        _this5.checkSshKeyByRegion(sshKey.regions);\n      }).finally(function () {\n        _this5.loaders.step2 = false;\n      });\n    }\n    /*---------------------\n       |  Step 3: Instances  |\n       ---------------------*/\n\n  }, {\n    key: \"fetchingAugmentedFlavors\",\n    value: function fetchingAugmentedFlavors() {\n      var _this6 = this;\n\n      return this.OvhApiCloudProjectFlavor.v6().query({\n        serviceName: this.serviceName,\n        region: this.model.region.microRegion.code\n      }).$promise.then(function (flavors) {\n        _this6.flavors = flavors;\n\n        var augmentedFlavors = _this6.VirtualMachineAddService.filterFlavorsByType(flavors, _this6.model.imageType.type);\n\n        _this6.enums.flavorsTypes = _this6.CloudFlavorService.constructor.getFlavorTypes(augmentedFlavors);\n        return augmentedFlavors;\n      });\n    }\n  }, {\n    key: \"initInstances\",\n    value: function initInstances() {\n      var _this7 = this;\n\n      this.loaders.step3 = true;\n      this.submitted.step3 = false;\n      this.resetStep4();\n      return this.$q.all({\n        flavors: this.fetchingAugmentedFlavors(),\n        hasVRack: this.VirtualMachineAddService.hasVRack(this.serviceName),\n        prices: this.OvhCloudPriceHelper.getPrices(this.serviceName)\n      }).then(function (_ref4) {\n        var flavors = _ref4.flavors,\n            hasVRack = _ref4.hasVRack,\n            prices = _ref4.prices;\n        _this7.prices = prices;\n        _this7.state.hasVRack = hasVRack; // Load private networks asynchronously\n\n        if (hasVRack) {\n          _this7.getPrivateNetworks();\n        } // Add price and quota info to each instance type\n\n\n        _.forEach(flavors, function (flavor) {\n          _this7.CloudFlavorService.constructor.addPriceInfos(flavor, _this7.prices);\n\n          _this7.CloudFlavorService.constructor.addOverQuotaInfos(flavor, _this7.quota, _.get(_this7.model, 'imageId.minDisk', 0), _.get(_this7.model, 'imageId.minRam', 0));\n        }); // Remove flavor without price (not in the catalog)\n\n\n        _.remove(flavors, function (flavor) {\n          return _.isEmpty(_.get(flavor, 'price.price.text', ''));\n        });\n\n        var filteredFlavors = _this7.VirtualMachineAddService.constructor.getFilteredFlavorsByRegion(flavors, _this7.model.region.microRegion.code); // Remove flavors if OS has restricted\n\n\n        var restrictedFlavors = _.get(_this7.model, 'imageId.flavorType') || [];\n\n        if (restrictedFlavors.length > 0) {\n          filteredFlavors = _.filter(filteredFlavors, function (flavor) {\n            return _.indexOf(restrictedFlavors, flavor.shortType) > -1;\n          });\n        } // Remove incompatible flavors with selected image\n\n\n        filteredFlavors = _.filter(filteredFlavors, function (flavor) {\n          var restrictedImages = _.get(flavor, 'imageType', false);\n\n          return restrictedImages === false || _.some(restrictedImages, function (name) {\n            return new RegExp(name, 'gi').test(_this7.model.imageType.name);\n          });\n        });\n        _this7.groupedFlavors = _this7.VirtualMachineAddService.groupFlavorsByCategory(filteredFlavors, _this7.enums.flavorsTypes);\n      }).catch(this.ServiceHelper.errorHandler('cpcivm_add_step3_flavors_ERROR')).finally(function () {\n        _this7.loaders.step3 = false;\n      });\n    }\n  }, {\n    key: \"isStep3Valid\",\n    value: function isStep3Valid() {\n      return this.model.flavor != null;\n    }\n  }, {\n    key: \"resetStep3\",\n    value: function resetStep3() {\n      this.model.flavor = null;\n      this.submitted.step3 = false;\n      this.resetStep4();\n    }\n    /*--------------------------\n       |  Step 4: Instance config |\n       --------------------------*/\n\n  }, {\n    key: \"initInstanceConfiguration\",\n    value: function initInstanceConfiguration() {\n      var _this8 = this;\n\n      this.loaders.step4 = true;\n      this.submitted.step4 = false; // Set instance creation number to 1 and name\n\n      this.model.number = 1;\n      this.setInstanceName();\n      return this.promisePublicNetworks.then(function (publicNetworks) {\n        _this8.publicNetworks = publicNetworks;\n      }).catch(function () {\n        _this8.publicNetworks = [];\n      }).finally(function () {\n        _this8.loaders.step4 = false;\n      });\n    }\n  }, {\n    key: \"isStep4Valid\",\n    value: function isStep4Valid() {\n      return !_.isEmpty(this.model.name) && this.model.number > 0 && (!this.state.hasVRack || !_.isEmpty(this.model.networkId));\n    }\n  }, {\n    key: \"resetStep4\",\n    value: function resetStep4() {\n      this.model.network = null;\n      this.model.number = 1;\n\n      if (!this.isNameUpdated) {\n        this.model.name = '';\n      }\n\n      this.submitted.step4 = false;\n      this.resetStep5();\n    }\n  }, {\n    key: \"enablePostScript\",\n    value: function enablePostScript() {\n      this.isPostScriptEnabled = true;\n    }\n  }, {\n    key: \"getPrivateNetworks\",\n    value: function getPrivateNetworks() {\n      var _this9 = this;\n\n      this.loaders.privateNetworks = true;\n      return this.OvhApiCloudProjectNetworkPrivate.v6().query({\n        serviceName: this.serviceName\n      }).$promise.then(function (networks) {\n        _this9.privateNetworks = networks;\n        return _this9.VirtualMachineAddService.getPrivateNetworksSubNets(_this9.serviceName, _this9.privateNetworks);\n      }).then(function (subNets) {\n        _this9.displayedPrivateNetworks = _this9.VirtualMachineAddService.constructor.getFilteredPrivateNetworksByRegion(_this9.privateNetworks, _this9.model.region.microRegion.code, subNets);\n      }).catch(function () {\n        _this9.displayedPrivateNetworks = [];\n      }).finally(function () {\n        _this9.loaders.privateNetworks = false;\n      });\n    }\n  }, {\n    key: \"setInstanceName\",\n    value: function setInstanceName() {\n      if (_.isEmpty(this.model.name) || !this.isNameUpdated) {\n        this.model.name = \"\".concat(_.get(this.model, 'flavor.name', ''), \"-\").concat(_.get(this.model, 'region.microRegion.code', '')).toLowerCase();\n      }\n    }\n    /*--------------------------\n       |  Step 5: Billing period  |\n       --------------------------*/\n\n  }, {\n    key: \"initBillingPeriod\",\n    value: function initBillingPeriod() {\n      this.resetStep5();\n    }\n  }, {\n    key: \"isStep5Valid\",\n    value: function isStep5Valid() {\n      return _.isString(this.model.billingPeriod) && !_.isEmpty(this.model.billingPeriod);\n    }\n  }, {\n    key: \"resetStep5\",\n    value: function resetStep5() {\n      this.model.billingPeriod = null;\n      this.submitted.step5 = false;\n    }\n    /*-------------------\n       |  Submit the form  |\n       -------------------*/\n\n  }, {\n    key: \"addVirtualMachine\",\n    value: function addVirtualMachine() {\n      var _this10 = this;\n\n      this.loaders.adding = true;\n      this.submitted.step4 = true;\n\n      if (!_.isEmpty(this.model.networkId) && this.model.networkId !== 'none') {\n        this.model.networks = [{\n          networkId: this.model.networkId\n        }, {\n          networkId: _.first(this.publicNetworks).id\n        }];\n      }\n\n      return this.VirtualMachineAddService.createVirtualMachine(this.serviceName, this.model).then(function () {\n        _this10.$state.go('iaas.pci-project.compute.infrastructure.list');\n      }).catch(this.ServiceHelper.errorHandler('cpcivm_add_launch_ERROR')).catch(function () {\n        _this10.submitted.step4 = false;\n        _this10.loaders.adding = false;\n      });\n    }\n  }]);\n\n  return CloudProjectComputeInfrastructureVirtualMachineAddCtrl;\n}();\n\nangular.module('managerApp').controller('CloudProjectComputeInfrastructureVirtualMachineAddCtrl', CloudProjectComputeInfrastructureVirtualMachineAddCtrl);",null]}