{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/account/logs-account.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/account/logs-account.service.js","mtime":1539717142074},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsAccountService {\n  constructor(OvhApiDbaas, LogsHelperService, LogsConstants) {\n    this.UserApiService = OvhApiDbaas.Logs().User().v6();\n    this.LogsLexiService = OvhApiDbaas.Logs().v6();\n    this.LogsHelperService = LogsHelperService;\n    this.LogsConstants = LogsConstants;\n    this.initializePasswordRules();\n  }\n\n  getPasswordRules(reset) {\n    if (reset) {\n      this.initializePasswordRules();\n    }\n    return this.passwordRules;\n  }\n\n  initializePasswordRules() {\n    this.passwordRules = [\n      {\n        message: 'logs_password_rule_length',\n        isValid: false,\n        isValidated: false,\n        validator: password => password && password.length >= 12,\n      },\n      {\n        message: 'logs_password_rule_contains_number',\n        isValid: false,\n        isValidated: false,\n        validator: password => password && password.match('.*[0-9].*'),\n      },\n      {\n        message: 'logs_password_rule_contains_uppercase',\n        isValid: false,\n        isValidated: false,\n        validator: password => password && password.match('.*[A-Z].*'),\n      },\n      {\n        message: 'logs_password_rule_contains_lowercase',\n        isValid: false,\n        isValidated: false,\n        validator: password => password && password.match('(?=.*[a-z])'),\n      },\n      {\n        message: 'logs_password_rule_contains_special',\n        translateParams: { specialCharacters: this.LogsConstants.PASSWORD_SPECIAL_CHARACTERS },\n        isValid: false,\n        isValidated: false,\n        validator: password => password && password.match(`.*[${this.constructor.escapeRegExp(this.LogsConstants.PASSWORD_SPECIAL_CHARACTERS)}].*`),\n      },\n    ];\n  }\n\n  changePassword(serviceName, newPassword, isSetup) {\n    return this.UserApiService.changePassword({ serviceName }, { password: newPassword })\n      .$promise\n      .then((operation) => {\n        if (isSetup) {\n          this.resetAllCache();\n        }\n        const message = isSetup ? 'logs_password_setup_success' : 'logs_password_change_success';\n        return this.LogsHelperService.handleOperation(\n          serviceName,\n          operation.data || operation, message,\n          {},\n        );\n      })\n      .catch(err => this.LogsHelperService.handleError(isSetup ? 'logs_password_setup_error' : 'logs_password_change_error', err, {}));\n  }\n\n  static escapeRegExp(msg) {\n    return msg.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n\n  resetAllCache() {\n    this.LogsLexiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsAccountService', LogsAccountService);\n"]}