{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/add/cloud-project-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/add/cloud-project-add.controller.js","mtime":1539717141951},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectAddCtrl',\n  function CloudProjectAddCtrl($q, $state, $translate, $rootScope, Toast, REDIRECT_URLS,\n    FeatureAvailabilityService, OvhApiCloud, OvhApiMe, OvhApiVrack, $window,\n    OvhApiMePaymentMeanCreditCard, SidebarMenu, CloudProjectSidebar,\n    CloudProjectAdd) {\n    const self = this;\n\n    this.loaders = {\n      init: true,\n      creating: false,\n    };\n\n    this.data = {\n      projectsCount: 0,\n      status: null, // project creation status\n      agreements: [], // contracts agreements\n      defaultPaymentMean: null,\n      projectPrice: null, // price for creating a new project with BC\n      availablePaymentMeans: { // list of available payment means\n        creditCard: false,\n        bankAccount: false,\n        paypal: false,\n      },\n      hasDebt: false, // true if user has debt (fidelity account balance < 0)\n      hasBill: false, // true if user has at least one bill\n    };\n\n    this.model = {\n      description: '', // new project name\n      contractsAccepted: false,\n      voucher: null,\n      paymentMethod: null, // user choosen payment method (either MEAN or BC)\n      noPaymentMethodEnum: _.indexBy(['MEAN', 'BC']),\n      catalogVersion: null, //  null == latest 1 === old catalog\n    };\n\n    // PaymentMean URL (v6 dedicated) with sessionv6\n    this.paymentmeanUrl = REDIRECT_URLS.paymentMeans;\n    // Add credit card URL\n    this.addCreditCardUrl = REDIRECT_URLS.addCreditCard;\n\n    function updateManager(projectId) {\n      CloudProjectSidebar.addToSection({\n        project_id: projectId, // jshint ignore:line\n        description: self.model.description,\n      });\n      OvhApiVrack.v6().resetCache();\n      OvhApiVrack.CloudProject().v6().resetQueryCache();\n    }\n\n    /**\n     * Launch project creation process\n     */\n    this.createProject = function () {\n      let promiseContracts = true;\n      const queue = [];\n      self.loaders.creating = true;\n\n      // If contracts: accept them\n      if (self.model.contractsAccepted && self.data.agreements.length) {\n        const queueContracts = [];\n        angular.forEach(self.data.agreements, (contract) => {\n          queueContracts.push(OvhApiMe.Agreements().v6().accept({\n            id: contract.id,\n          }, {}).$promise.then(() => {\n            _.remove(self.data.agreements, {\n              id: contract.id,\n            });\n          }));\n        });\n        promiseContracts = $q.all(queueContracts);\n      }\n\n      return $q.when(promiseContracts).then(() => OvhApiCloud.v6().createProject({}, {\n        voucher: self.model.voucher || undefined,\n        description: self.model.description || undefined,\n        catalogVersion: self.model.catalogVersion || undefined,\n      }).$promise.then((response) => {\n        self.data.status = response.status;\n\n        switch (response.status) {\n          case 'creating':\n            OvhApiMe.Order().v6().get({\n              orderId: response.orderId,\n            }).$promise.then((order) => {\n              $window.open(order.url, '_blank');\n              updateManager(response.project);\n              $state.go('iaas.pci-project.details', {\n                projectId: response.project,\n                fromProjectAdd: true,\n              });\n              return Toast.success($translate.instant('cpa_success', { url: order.url }));\n            }, () => Toast.error($translate.instant('cpa_error')));\n            break;\n          case 'ok':\n            if (response.project) {\n              // Success: go to it\n              updateManager(response.project);\n              return $state.go('iaas.pci-project.details', {\n                projectId: response.project,\n                fromProjectAdd: true,\n              });\n            }\n            // Because it's not normal\n            return Toast.error($translate.instant('cpa_error'));\n          case 'waitingAgreementsValidation':\n            self.data.agreements = [];\n            // Get all contracts\n            if (response.agreements && response.agreements.length) {\n              angular.forEach(response.agreements, (contractId) => {\n                queue.push(OvhApiMe.Agreements().v6().contract({\n                  id: contractId,\n                }).$promise.then((contract) => {\n                  _.set(contract, 'id', contractId);\n                  self.data.agreements.push(contract);\n                }));\n              });\n            }\n\n            // for multi-project: say to user that there are contracts to sign\n            if (!self.loaders.init) {\n              Toast.info($translate.instant('cpa_error_contracts_tosign'));\n            }\n\n            return $q.all(queue);\n\n            // case \"validationPending\":\n          default:\n            return null;\n        }\n\n        return null;\n      })).catch((err) => {\n        if (err && err.status) {\n          switch (err.status) {\n            case 400:\n              return Toast.error($translate.instant('cpa_error_invalid_paymentmean'));\n            case 409:\n              return Toast.error($translate.instant('cpa_error_over_quota'));\n            default:\n              return Toast.error($translate.instant('cpa_error') + (err.data && err.data.message ? ` (${err.data.message})` : ''));\n          }\n        }\n        return null;\n      }).finally(() => {\n        self.loaders.creating = false;\n      });\n    };\n\n    // returns true if user has at least one bill and no debt\n    this.isTrustedUser = function () {\n      return this.has3dsCreditCard() || (self.data.hasBill && !self.data.hasDebt);\n    };\n\n    // returns true if user has at least one 3D secure registered credit card\n    this.has3dsCreditCard = function () {\n      return angular.isDefined(_.find(self.data.creditCards, 'threeDsValidated'));\n    };\n\n    this.canCreateProject = function () {\n      let canCreate = false;\n      if (self.model.voucher) {\n        canCreate = true;\n      } else if (self.model.paymentMethod === self.model.noPaymentMethodEnum.BC) {\n        canCreate = true;\n      } else if (this.isTrustedUser()) {\n        canCreate = angular.isDefined(self.data.defaultPaymentMean);\n      }\n      return canCreate;\n    };\n\n    function initUserFidelityAccount() {\n      return OvhApiMe.FidelityAccount().v6()\n        .get().$promise\n        .then(account => $q.when(account), err => (err && err.status === 404\n          ? $q.when(null)\n          : $q.reject(err)));\n    }\n\n    function initContracts() {\n      return CloudProjectAdd.getProjectInfo()\n        .then((projectInfo) => {\n          self.data.agreements = projectInfo.agreementsToAccept;\n        });\n    }\n\n    function initProject() {\n      return $q.all({\n        projectIds: OvhApiCloud.Project().v6().query().$promise,\n        price: OvhApiCloud.Price().v6().query().$promise,\n        user: OvhApiMe.v6().get().$promise,\n        defaultPayment: OvhApiMe.PaymentMean().v6().getDefaultPaymentMean(),\n        availablePayment: OvhApiMe.AvailableAutomaticPaymentMeans().v6().get().$promise,\n        fidelityAccount: initUserFidelityAccount(),\n        bill: OvhApiMe.Bill().v6().query().$promise,\n        creditCards: OvhApiMePaymentMeanCreditCard.v6().getCreditCards(),\n      }).then((result) => {\n        self.data.projectsCount = result.projectIds.length;\n        self.data.projectPrice = result.price.projectCreation;\n        self.data.defaultPaymentMean = result.defaultPayment;\n        self.data.availablePaymentMeans = result.availablePayment;\n        self.data.hasDebt = result.fidelityAccount && result.fidelityAccount.balance < 0;\n        self.data.hasBill = result.bill.length > 0;\n        self.data.creditCards = result.creditCards;\n        self.model.description = $translate.instant('cloud_menu_project_num', { num: self.data.projectsCount + 1 });\n        self.model.paymentMethod = self.model.noPaymentMethodEnum.MEAN;\n      });\n    }\n\n    function init() {\n      self.loaders.init = true;\n      // Redirect US to onboarding\n      if (FeatureAvailabilityService.hasFeature('PROJECT', 'expressOrder')) {\n        $state.go('iaas.pci-project-onboarding', { location: 'replace' });\n        return;\n      }\n      initContracts().then(initProject).catch((err) => {\n        self.unknownError = true;\n        Toast.error($translate.instant('cpa_error') + (err && err.data && err.data.message ? ` (${err.data.message})` : ''));\n      }).finally(() => {\n        self.loaders.init = false;\n      });\n    }\n\n    init();\n  });\n"]}