{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/home/logs-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/home/logs-home.controller.js","mtime":1539717142082},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsHomeCtrl {\n  constructor($q, $scope, $state, $stateParams, $translate, bytesFilter, ControllerHelper,\n    LogsConstants, LogsHomeService, LogsTokensService, LogsHelperService, LogsDetailService) {\n    this.$q = $q;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.$translate = $translate;\n    this.bytesFilter = bytesFilter;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsHomeService = LogsHomeService;\n    this.LogsTokensService = LogsTokensService;\n    this.LogsHelperService = LogsHelperService;\n    this.LogsDetailService = LogsDetailService;\n    this.LogsConstants = LogsConstants;\n  }\n\n  $onInit() {\n    this.service = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsDetailService.getServiceDetails(this.serviceName)\n        .then((service) => {\n          this.initLoaders();\n          this.isAccountDisabled = this.LogsHelperService.isAccountDisabled(service);\n          this.lastUpdatedDate = moment(service.updatedAt).format('LL');\n          if (service.state === this.LogsConstants.SERVICE_STATE_TO_CONFIG) {\n            this.goToAccountSetupPage();\n          } else {\n            this.dataUsageGraphData = this.LogsConstants.DATA_USAGE_GRAPH_CONFIGURATION;\n            this.runLoaders()\n              .then(() => this.prepareDataUsageGraphData());\n          }\n          return service;\n        }),\n    });\n    this.service.load();\n  }\n\n  goToAccountSetupPage() {\n    return this.gotoState('dbaas.logs.detail.setup');\n  }\n\n  /**\n   * opens UI modal to change password\n   *\n   * @memberof LogsHomeCtrl\n   */\n  openChangePasswordModal() {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/dbaas/logs/detail/account/password/logs-account-password.html',\n        controller: 'LogsAccountPasswordCtrl',\n        controllerAs: 'ctrl',\n        backdrop: 'static',\n      },\n    }).finally(() => this.ControllerHelper.scrollPageToTop());\n  }\n\n  /**\n   * Prepares the data usage graph\n   *\n   * @memberof LogsHomeCtrl\n   */\n  prepareDataUsageGraphData() {\n    const offerLimit = this.account.data.offer\n      .esStorage * this.LogsConstants.OFFER_STORAGE_MULTIPLIER;\n    const maxDataReceived = _.max(this.storageData.data.usageData[0]);\n    this.dataUsageGraphData.labels = this.storageData.data.timestamps.map(timestamp => moment(timestamp).format('DD MMM'));\n    this.dataUsageGraphData.data = this.storageData.data.usageData;\n    this.dataUsageGraphData.series = [this.$translate.instant('logs_home_data_received'), this.$translate.instant('logs_home_number_of_documents')];\n    if (offerLimit <= maxDataReceived * 1.5) {\n      this.dataUsageGraphData.data.push(this.storageData.data.timestamps.map(() => offerLimit));\n      this.dataUsageGraphData.series.push(this.$translate.instant('logs_home_offer_limit'));\n    }\n    this.dataUsageGraphData.options.scales.yAxes[0].ticks = {\n      suggestedMin: 0,\n      suggestedMax: maxDataReceived * 1.3 || 5,\n      callback: value => (value % 1 === 0 ? this.bytesFilter(value, 2, true) : ''),\n    };\n    this.dataUsageGraphData.options.scales.yAxes[1].ticks = {\n      suggestedMin: 0,\n      suggestedMax: _.max(this.dataUsageGraphData.data[1]) * 1.3 || 5,\n      callback: value => (value % 1 === 0 ? value : ''),\n    };\n\n    this.dataUsageGraphData.options.tooltips.callbacks = {\n      label: (tooltipItem, data) => {\n        if (tooltipItem.datasetIndex > 1) {\n          return '';\n        }\n        let label = data.datasets[tooltipItem.datasetIndex].label || '';\n        if (label) {\n          label += ': ';\n        }\n        label += tooltipItem.datasetIndex === 0\n          ? this.bytesFilter(tooltipItem.yLabel, 2, true)\n          : this.LogsHomeService.constructor.humanizeNumber(tooltipItem.yLabel);\n        return label;\n      },\n    };\n  }\n\n  changeName() {\n    return this.gotoState('dbaas.logs.detail.home.account');\n  }\n\n  goToAllStreams() {\n    return this.gotoState('dbaas.logs.detail.streams');\n  }\n\n  goToAllDashboards() {\n    return this.gotoState('dbaas.logs.detail.dashboards');\n  }\n\n  goToChangeOffer() {\n    return this.gotoState('dbaas.logs.detail.offer');\n  }\n\n  /**\n   * takes to options UI page if account is pro else shows offer upgrade required modal\n   */\n  goToOptionsPage() {\n    if (this.LogsHelperService.constructor.isBasicOffer(this.account.data)) {\n      return this.LogsHelperService.showOfferUpgradeModal(this.serviceName);\n    }\n    return this.gotoState('dbaas.logs.detail.options');\n  }\n\n  /**\n   * Redirects to the tokens page\n   *\n   * @memberof LogsHomeCtrl\n   */\n  editTokens() {\n    return this.gotoState('dbaas.logs.detail.tokens');\n  }\n\n  /**\n   * Opens the edit password dialog\n   *\n   * @memberof LogsHomeCtrl\n   */\n  editPassword() {\n    this.openChangePasswordModal();\n  }\n\n  gotoState(state) {\n    return this.$state.go(state, {\n      serviceName: this.serviceName,\n    });\n  }\n\n  /**\n   * initializes the loaders\n   *\n   * @memberof LogsHomeCtrl\n   */\n  initLoaders() {\n    this.accountDetails = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsHomeService.getAccountDetails(this.serviceName),\n    });\n    this.account = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsHomeService.getAccount(this.serviceName),\n    });\n    this.options = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsHomeService.getOptions(this.serviceName),\n    });\n    this.serviceInfos = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsHomeService.getServiceInfos(this.serviceName),\n    });\n    if (!this.isAccountDisabled) {\n      this.tokenIds = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: () => this.LogsTokensService.getTokensIds(this.serviceName),\n      });\n      this.defaultCluster = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.LogsTokensService.getDefaultCluster(this.serviceName),\n      });\n      this.storageData = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.LogsHomeService.getDataUsage(this.serviceName),\n      });\n      this.coldStorage = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.LogsHomeService.getColdstorage(this.serviceName),\n      });\n    }\n  }\n\n  /**\n   * Opens the Messages and Ports information dialog\n   *\n   * @memberof LogsHomeCtrl\n   */\n  openMessagesAndPorts() {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/dbaas/logs/detail/home/formatsports/logs-home-formatsports.html',\n        controller: 'LogsHomeFormatsportsCtrl',\n        controllerAs: 'ctrl',\n        resolve: {\n          accountDetails: () => this.accountDetails.data,\n        },\n      },\n    });\n  }\n\n  /**\n   * Runs the loaders\n   *\n   * @memberof LogsHomeCtrl\n   */\n  runLoaders() {\n    const loaderPromises = [];\n    loaderPromises.push(this.accountDetails.load());\n    loaderPromises.push(this.account.load());\n    loaderPromises.push(this.options.load());\n    loaderPromises.push(this.serviceInfos.load());\n    if (!this.isAccountDisabled) {\n      loaderPromises.push(this.tokenIds.load());\n      loaderPromises.push(this.defaultCluster.load());\n      loaderPromises.push(this.storageData.load());\n      loaderPromises.push(this.coldStorage.load());\n    }\n    return this.$q.all(loaderPromises);\n  }\n}\n\nangular.module('managerApp').controller('LogsHomeCtrl', LogsHomeCtrl);\n"]}