{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/list/cloud-project-compute-infrastructure-list.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/list/cloud-project-compute-infrastructure-list.controller.js","mtime":1539717141985},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeInfrastructureListCtrl =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeInfrastructureListCtrl.$inject = [\"$scope\", \"$q\", \"$stateParams\", \"$translate\", \"$timeout\", \"CloudMessage\", \"CloudNavigation\", \"CloudProjectOrchestrator\", \"CloudProjectComputeInfrastructureService\", \"OvhApiCloudProjectVolume\", \"RegionService\", \"OvhApiCloudProjectFlavor\", \"TARGET\"];\n\n  function CloudProjectComputeInfrastructureListCtrl($scope, $q, $stateParams, $translate, $timeout, CloudMessage, CloudNavigation, CloudProjectOrchestrator, CloudProjectComputeInfrastructureService, OvhApiCloudProjectVolume, RegionService, OvhApiCloudProjectFlavor, TARGET) {\n    _classCallCheck(this, CloudProjectComputeInfrastructureListCtrl);\n\n    this.$scope = $scope;\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.CloudNavigation = CloudNavigation;\n    this.CloudProjectOrchestrator = CloudProjectOrchestrator;\n    this.InfrastructureService = CloudProjectComputeInfrastructureService;\n    this.OvhApiCloudProjectVolume = OvhApiCloudProjectVolume;\n    this.RegionService = RegionService;\n    this.OvhApiCloudProjectFlavor = OvhApiCloudProjectFlavor;\n    this.TARGET = TARGET;\n  }\n\n  _createClass(CloudProjectComputeInfrastructureListCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.serviceName = this.$stateParams.projectId;\n      this.CloudNavigation.init({\n        state: 'iaas.pci-project.compute.infrastructure.list',\n        stateParams: {\n          serviceName: this.serviceName\n        }\n      });\n      this.loaders = {\n        infra: false\n      };\n      this.table = {\n        items: undefined\n      };\n      this.statusOptions = {\n        values: {\n          OK: this.$translate.instant('cpci_vm_status_OK'),\n          UPDATING: this.$translate.instant('cpci_vm_status_UPDATING'),\n          REBOOT: this.$translate.instant('cpci_vm_status_REBOOT'),\n          BUILD: this.$translate.instant('cpci_vm_status_BUILD'),\n          REBUILD: this.$translate.instant('cpci_vm_status_REBUILD'),\n          RESCUE: this.$translate.instant('cpci_vm_status_RESCUE'),\n          SNAPSHOTTING: this.$translate.instant('cpci_vm_status_SNAPSHOTTING'),\n          ERROR: this.$translate.instant('cpci_vm_status_ERROR'),\n          DELETING: this.$translate.instant('cpci_vm_status_DELETING')\n        }\n      };\n      this.regionOptions = {\n        values: this.RegionService.getAllTranslatedMacroRegion()\n      };\n      this.$scope.$watchCollection(function () {\n        return _.get(_this.infra, 'vrack.publicCloud.sortedKeys');\n      }, function (newValues, oldValues) {\n        _this.addOrRemoveInstance(newValues, oldValues);\n      });\n      this.$scope.$on('compute.infrastructure.vm.status-update', function (evt, newStatus, oldStatus, vm) {\n        _this.updateInstance(vm, vm.flavor);\n      });\n      this.$scope.$on('compute.infrastructure.vm.monthlyBilling.status-update', function (evt, newStatus, oldStatus, vm) {\n        _this.updateInstance(vm, vm.flavor);\n      });\n      this.InfrastructureService.setPreferredView('list');\n      return this.initInfra();\n    }\n  }, {\n    key: \"initInfra\",\n    value: function initInfra() {\n      var _this2 = this;\n\n      this.loaders.infra = true;\n      return this.$q.all({\n        infra: this.CloudProjectOrchestrator.initInfrastructure({\n          serviceName: this.serviceName\n        }),\n        volumes: this.CloudProjectOrchestrator.initVolumes({\n          serviceName: this.serviceName\n        }).then(function (volumes) {\n          _this2.volumes = _.get(volumes, 'volumes');\n        })\n      }).then(function (_ref) {\n        var infra = _ref.infra;\n        _this2.infra = infra;\n        return _this2.$q.all(_.map(_this2.infra.vrack.publicCloud.items, function (instance) {\n          return _this2.OvhApiCloudProjectFlavor.v6().get({\n            serviceName: _this2.serviceName,\n            flavorId: instance.flavorId\n          }).$promise.then(function (flavor) {\n            return _this2.updateInstance(instance, flavor);\n          });\n        })).then(function (instances) {\n          _this2.table.items = instances;\n        });\n      }).catch(function (err) {\n        _this2.table.items = [];\n\n        _this2.CloudMessage.error(\"\".concat(_this2.$translate.instant('cpci_errors_init_title'), \" : \").concat(_.get(err, 'data.message', '')));\n\n        return _this2.$q.reject(err);\n      }).finally(function () {\n        _this2.loaders.infra = false;\n      });\n    }\n  }, {\n    key: \"updateInstance\",\n    value: function updateInstance(instance, flavor) {\n      _.set(instance, 'volumes', _.get(this.volumes, instance.id, []));\n\n      _.set(instance, 'ipv4', instance.getPublicIpv4());\n\n      _.set(instance, 'ipv6', instance.getPublicIpv6());\n\n      _.set(instance, 'statusToTranslate', this.constructor.getStatusToTranslate(instance));\n\n      _.set(instance, 'macroRegion', this.RegionService.constructor.getMacroRegion(instance.region)); // patch for some translations that have &#160; html entities\n\n\n      _.set(instance, 'flavorTranslated', this.$translate.instant(\"cpci_vm_flavor_category_\".concat(flavor.name)).replace('&#160;', ' '));\n\n      return instance;\n    }\n  }, {\n    key: \"addOrRemoveInstance\",\n    value: function addOrRemoveInstance(newIds, oldIds) {\n      if (oldIds != null) {\n        if (newIds.length > oldIds.length) {\n          var foundId = _.find(newIds, function (key) {\n            return _.indexOf(oldIds, key) === -1;\n          });\n\n          var foundItem = this.infra.vrack.publicCloud.items[foundId];\n\n          if (foundItem) {\n            _.set(foundItem, 'volumes', _.get(this.volumes, foundItem.id, []));\n\n            this.table.items.push(foundItem);\n          }\n        } else if (newIds.length < oldIds.length) {\n          var _foundId = _.find(oldIds, function (key) {\n            return _.indexOf(newIds, key) === -1;\n          });\n\n          _.remove(this.table.items, function (item) {\n            return item.id === _foundId;\n          });\n        }\n      }\n    }\n  }], [{\n    key: \"getStatusToTranslate\",\n    value: function getStatusToTranslate(instance) {\n      if (instance.status === 'ACTIVE' && instance.monthlyBilling && instance.monthlyBilling.status === 'activationPending') {\n        return 'UPDATING';\n      }\n\n      if (instance.status === 'ACTIVE') {\n        return 'OK';\n      }\n\n      if (instance.status === 'REBOOT' || instance.status === 'HARD_REBOOT' || instance.status === 'RESCUING' || instance.status === 'UNRESCUING') {\n        return 'REBOOT';\n      }\n\n      return instance.status;\n    }\n  }]);\n\n  return CloudProjectComputeInfrastructureListCtrl;\n}();\n\nangular.module('managerApp').controller('CloudProjectComputeInfrastructureListCtrl', CloudProjectComputeInfrastructureListCtrl);",null]}