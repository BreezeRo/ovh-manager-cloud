{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/task/iplb-task.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/task/iplb-task.controller.js","mtime":1539717142222},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerTaskCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerTaskCtrl.$inject = [\"$scope\", \"$stateParams\", \"ControllerHelper\", \"CloudPoll\", \"IpLoadBalancerTaskService\", \"ServiceHelper\"];\n\n  function IpLoadBalancerTaskCtrl($scope, $stateParams, ControllerHelper, CloudPoll, IpLoadBalancerTaskService, ServiceHelper) {\n    var _this = this;\n\n    _classCallCheck(this, IpLoadBalancerTaskCtrl);\n\n    this.$scope = $scope;\n    this.$stateParams = $stateParams;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudPoll = CloudPoll;\n    this.IpLoadBalancerTaskService = IpLoadBalancerTaskService;\n    this.ServiceHelper = ServiceHelper;\n    this.serviceName = this.$stateParams.serviceName;\n    this.tasks = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: function loaderFunction() {\n        return _this.IpLoadBalancerTaskService.getTasks(_this.serviceName);\n      },\n      successHandler: function successHandler() {\n        return _this.startTaskPolling();\n      }\n    });\n    this.$scope.$on('$destroy', function () {\n      return _this.stopTaskPolling();\n    });\n  }\n\n  _createClass(IpLoadBalancerTaskCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.tasks.load();\n    }\n  }, {\n    key: \"startTaskPolling\",\n    value: function startTaskPolling() {\n      var _this2 = this;\n\n      this.stopTaskPolling();\n      this.poller = this.CloudPoll.pollArray({\n        items: this.tasks.data,\n        pollFunction: function pollFunction(task) {\n          return _this2.IpLoadBalancerTaskService.getTask(_this2.serviceName, task.id);\n        },\n        stopCondition: function stopCondition(task) {\n          return _.includes(['done', 'error'], task.status);\n        }\n      });\n    }\n  }, {\n    key: \"stopTaskPolling\",\n    value: function stopTaskPolling() {\n      if (this.poller) {\n        this.poller.kill();\n      }\n    }\n  }, {\n    key: \"showTaskPreview\",\n    value: function showTaskPreview(_task) {\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/task/preview/iplb-task-preview.html',\n          controller: 'IpLoadBalancerTaskPreviewCtrl',\n          controllerAs: '$ctrl',\n          resolve: {\n            task: function task() {\n              return _task;\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return IpLoadBalancerTaskCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerTaskCtrl', IpLoadBalancerTaskCtrl);",null]}