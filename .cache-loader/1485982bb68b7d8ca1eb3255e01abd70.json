{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/alerts/streams-alerts.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/alerts/streams-alerts.service.js","mtime":1539717142148},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsStreamsAlertsService =\n/*#__PURE__*/\nfunction () {\n  LogsStreamsAlertsService.$inject = [\"$q\", \"CloudPoll\", \"OvhApiDbaas\", \"ServiceHelper\", \"LogsConstants\", \"LogsHelperService\"];\n\n  function LogsStreamsAlertsService($q, CloudPoll, OvhApiDbaas, ServiceHelper, LogsConstants, LogsHelperService) {\n    _classCallCheck(this, LogsStreamsAlertsService);\n\n    this.$q = $q;\n    this.CloudPoll = CloudPoll;\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.AlertsApiService = OvhApiDbaas.Logs().Alert().v6();\n    this.ServiceHelper = ServiceHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsHelperService = LogsHelperService;\n  }\n  /**\n   * Adds a new alert\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} alert - the alert object\n   * @returns promise which will be resolve to an operation object\n   * @memberof LogsStreamsAlertsService\n   */\n\n\n  _createClass(LogsStreamsAlertsService, [{\n    key: \"addAlert\",\n    value: function addAlert(serviceName, streamId, alert) {\n      var _this = this;\n\n      return this.AlertsApiService.post({\n        serviceName: serviceName,\n        streamId: streamId\n      }, alert).$promise.then(function (operation) {\n        return _this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'streams_alerts_add_success', {\n          alertName: alert.title\n        });\n      }).catch(function (err) {\n        return _this.LogsHelperService.handleError('streams_alerts_add_error', err, {\n          alertName: alert.title\n        });\n      });\n    }\n    /**\n     * Deletes an alert\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @param {any} alert - alert to be deleted\n     * @returns promise which will be resolve to an operation object\n     * @memberof LogsStreamsAlertsService\n     */\n\n  }, {\n    key: \"deleteAlert\",\n    value: function deleteAlert(serviceName, streamId, alert) {\n      var _this2 = this;\n\n      return this.AlertsApiService.delete({\n        serviceName: serviceName,\n        streamId: streamId,\n        alertId: alert.alertId\n      }).$promise.then(function (operation) {\n        return _this2.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'streams_alerts_delete_success', {\n          alertName: alert.title\n        });\n      }).catch(function (err) {\n        return _this2.LogsHelperService.handleError('streams_alerts_delete_error', err, {\n          alertName: alert.title\n        });\n      });\n    }\n    /**\n     * Get the IDs of all alerts\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @returns promise which will be resolve with a list of alert IDs\n     * @memberof LogsStreamsAlertsService\n     */\n\n  }, {\n    key: \"getAlertIds\",\n    value: function getAlertIds(serviceName, streamId) {\n      var _this3 = this;\n\n      return this.AlertsApiService.query({\n        serviceName: serviceName,\n        streamId: streamId\n      }).$promise.catch(function (err) {\n        return _this3.LogsHelperService.handleError('streams_alerts_ids_loading_error', err, {});\n      });\n    }\n    /**\n     * Gets the alert objects corresponding to the alertIds\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @param {any} alertIds - list of alert IDs for which alert object is to be fetched\n     * @returns promise which will be resolve with the list of alerts\n     * @memberof LogsStreamsAlertsService\n     */\n\n  }, {\n    key: \"getAlerts\",\n    value: function getAlerts(serviceName, streamId, alertIds) {\n      var _this4 = this;\n\n      return this.getAlertDetails(serviceName, streamId, alertIds).catch(function (err) {\n        return _this4.LogsHelperService.handleError('streams_alerts_loading_error', err, {});\n      });\n    }\n    /**\n     * Gets the alert objects corresponding to the alertIds\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @param {any} alertIds - list of alert IDs for which alert object is to be fetched\n     * @returns promise which will be resolve with the list of alerts\n     * @memberof LogsStreamsAlertsService\n     */\n\n  }, {\n    key: \"getAlertDetails\",\n    value: function getAlertDetails(serviceName, streamId, alertIds) {\n      var _this5 = this;\n\n      var promises = alertIds.map(function (alertId) {\n        return _this5.getAlert(serviceName, streamId, alertId);\n      });\n      return this.$q.all(promises);\n    }\n    /**\n     * Gets the alert object corresponding to the alertId\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @param {any} alertId - the alert ID for which alert object is to be fetched\n     * @returns promise which will be resolve with the alert\n     * @memberof LogsStreamsAlertsService\n     */\n\n  }, {\n    key: \"getAlert\",\n    value: function getAlert(serviceName, streamId, alertId) {\n      var _this6 = this;\n\n      return this.AlertsApiService.get({\n        serviceName: serviceName,\n        streamId: streamId,\n        alertId: alertId\n      }).$promise.then(function (alert) {\n        return _this6.constructor.transformAlert(alert);\n      });\n    }\n    /**\n     * Returns a new alert object with the default properties\n     *\n     * @param {any} conditionType - the type of the condition (one of LogsConstants.alertType)\n     * @returns the default alert object\n     * @memberof LogsStreamsAlertsService\n     */\n\n  }, {\n    key: \"getNewAlert\",\n    value: function getNewAlert(conditionType) {\n      var thresholdType = conditionType === this.LogsConstants.alertType.numeric ? this.LogsConstants.thresholdType.lower : this.LogsConstants.thresholdType.more;\n      var constraintType = this.LogsConstants.constraintType.mean;\n      return this.$q.when({\n        data: {\n          conditionType: conditionType,\n          thresholdType: thresholdType,\n          threshold: 1,\n          time: 1,\n          grace: 1,\n          backlog: 1,\n          repeatNotificationsEnabled: false,\n          constraintType: constraintType\n        },\n        loading: false\n      });\n    }\n    /**\n     * Edit and save an alert\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @param {any} alert - the alert object\n     * @returns promise which will be resolve to an operation object\n     * @memberof LogsStreamsAlertsService\n     */\n\n  }, {\n    key: \"updateAlert\",\n    value: function updateAlert(serviceName, streamId, alert) {\n      var _this7 = this;\n\n      return this.AlertsApiService.put({\n        serviceName: serviceName,\n        streamId: streamId,\n        alertId: alert.alertId\n      }, alert).$promise.then(function (operation) {\n        return _this7.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'streams_alerts_update_success', {\n          alertName: alert.title\n        });\n      }).catch(function (err) {\n        return _this7.LogsHelperService.handleError('streams_alerts_update_error', err, {\n          alertName: alert.title\n        });\n      });\n    }\n    /**\n     * Applies transformation to the alert\n     *\n     * @param {any} alert - the alert object\n     * @returns the transformed alert\n     * @memberof LogsStreamsAlertsService\n     */\n\n  }], [{\n    key: \"transformAlert\",\n    value: function transformAlert(alert) {\n      Object.keys(alert).forEach(function (property) {\n        if (alert[property] === null) {\n          alert[property] = undefined; // eslint-disable-line\n        }\n      });\n      return alert;\n    }\n  }]);\n\n  return LogsStreamsAlertsService;\n}();\n\nangular.module('managerApp').service('LogsStreamsAlertsService', LogsStreamsAlertsService);",null]}