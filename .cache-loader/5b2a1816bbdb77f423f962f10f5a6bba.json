{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/list/logs-list.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/list/logs-list.service.js","mtime":1539717142157},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsListService {\n  constructor($q, OvhApiDbaas, LogsHelperService, LogsTokensService) {\n    this.$q = $q;\n    this.LogsListApiService = OvhApiDbaas.Logs().v6();\n    this.LogsHelperService = LogsHelperService;\n    this.LogsTokensService = LogsTokensService;\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n  }\n\n  /**\n   * returns array of accounts with details\n   *\n   * @returns promise which will be resolve to array of accounts.\n   *          Each account will have all details populated.\n   * @memberof LogsListService\n   */\n  getServices() {\n    return this.getServicesDetails()\n      .catch(err => this.LogsHelperService.handleError('logs_accounts_get_accounts_error', err, {}));\n  }\n\n  /**\n   * gets details for each account in array\n   *\n   * @returns promise which will be resolve to an array of account objects\n   * @memberof LogsListService\n   */\n  getServicesDetails() {\n    return this.getServicesIds()\n      .then((accounts) => {\n        const promises = accounts.map(serviceName => this.getService(serviceName));\n        return this.$q.all(promises);\n      });\n  }\n\n  /**\n   * returns array of id's of all accounts\n   *\n   * @returns promise which will be resolve to array of accounts id's\n   * @memberof LogsListService\n   */\n  getServicesIds() {\n    return this.LogsListApiService.query().$promise;\n  }\n\n  /**\n   * returns details of an account\n   *\n   * @param {any} accountId\n   * @returns promise which will be resolve to account object\n   * @memberof LogsListService\n   */\n  getService(serviceName) {\n    return this.LogsListApiService.logDetail({ serviceName })\n      .$promise\n      .then(service => this.transformService(service))\n      .catch(err => this.LogsHelperService.handleError('logs_accounts_get_detail_error', err, { accountName: serviceName }));\n  }\n\n  getQuota(service) {\n    return this.AccountingAapiService.me({ serviceName: service.serviceName })\n      .$promise\n      .catch(err => this.LogsHelperService.handleError('logs_accounts_get_quota_error', err, { accountName: service.displayName || service.serviceName }));\n  }\n\n  /**\n   * returns default cluster associated with user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to default cluster\n   * @memberof LogsInputsService\n   */\n  getDefaultCluster(serviceName) {\n    return this.LogsTokensService.getDefaultCluster(serviceName, 'logs_accounts_get_entry_point_error');\n  }\n\n  transformService(service) {\n    _.set(service, 'name', service.displayName || service.serviceName);\n    if (this.LogsHelperService.isAccountDisabled(service)) {\n      _.set(service, 'isDisabled', true);\n    } else {\n      _.set(service, 'isDisabled', false);\n    }\n    _.set(service, 'quota', {\n      isLoadingQuota: true,\n      offerType: '-',\n    });\n    _.set(service, 'cluster', {\n      isLoadingCluster: true,\n      hostname: '-',\n    });\n    this.getQuota(service)\n      .then((me) => {\n        if (!_.isEmpty(me.total)) {\n          _.set(service, 'quota.streams', {\n            current: me.total.curNbStream,\n            max: me.total.maxNbStream,\n          });\n          _.set(service, 'quota.indices', {\n            current: me.total.curNbIndex,\n            max: me.total.maxNbIndex,\n          });\n          _.set(service, 'quota.dashboards', {\n            current: me.total.curNbDashboard,\n            max: me.total.maxNbDashboard,\n          });\n          _.set(service, 'isBasicOffer', this.LogsHelperService.isBasicOffer(me));\n          _.set(service, 'quota.offerType', service.isBasicOffer ? 'Basic' : 'Pro');\n        }\n      })\n      .finally(() => {\n        _.set(service, 'quota.isLoadingQuota', false);\n      });\n    this.getDefaultCluster(service.serviceName)\n      .then((cluster) => {\n        _.set(service, 'cluster.hostname', cluster.hostname);\n      })\n      .finally(() => {\n        _.set(service, 'cluster.isLoadingCluster', false);\n      });\n    return service;\n  }\n\n  _resetAllCache() {\n    this.TokenApiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsListService', LogsListService);\n"]}