{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/vps-header.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/vps-header.controller.js","mtime":1539717374640},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VpsHeaderCtrl {\n  constructor(\n    $rootScope,\n    $stateParams,\n    $translate,\n    CloudMessage,\n    OvhApiMe,\n    VpsNotificationIpv6,\n    STOP_NOTIFICATION_USER_PREF,\n    VpsService,\n    ProductsService,\n  ) {\n    this.$rootScope = $rootScope;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.OvhApiMe = OvhApiMe;\n    this.VpsNotificationIpv6 = VpsNotificationIpv6;\n    this.STOP_NOTIFICATION_USER_PREF = STOP_NOTIFICATION_USER_PREF;\n    this.serviceName = $stateParams.serviceName;\n    this.description = $stateParams.serviceName;\n    this.VpsService = VpsService;\n    this.ProductsService = ProductsService;\n\n    this.loaders = {\n      init: false,\n    };\n    this.vps = {};\n    this.stopNotification = {\n      autoRenew: true,\n      ipV6: true,\n    };\n\n    this.OvhApiMe.v6()\n      .get().$promise\n      .then((me) => {\n        this.user = me;\n      });\n  }\n\n  $onInit() {\n    this.loaders.init = true;\n    this.$rootScope.$on('changeDescription', (event, data) => {\n      this.description = data;\n    });\n    this.VpsService.getSelectedVps(this.serviceName)\n      .then((vps) => {\n        this.vps = vps;\n        this.description = vps.displayName;\n        this.checkMessages(vps);\n        this.$rootScope.$on('tasks.success', (event, opt) => {\n          if (opt === this.serviceName) {\n            this.checkMessages(vps);\n          }\n        });\n      })\n      .catch(() => this.CloudMessage.error(this.$translate.instant('vps_dashboard_loading_error')))\n      .finally(() => { this.loaders.init = false; });\n    this.description = this.ProductsService.getDisplayName('VPS', this.serviceName);\n  }\n\n  checkMessages(vps) {\n    this.isExpired(vps);\n    this.isInRescueMode(vps.netbootMode);\n    this.checkIfStopNotification('ipV6', true, vps);\n  }\n\n  isExpired(vps) {\n    if (vps.isExpired) {\n      this.CloudMessage.warning(this.$translate.instant('vps_service_expired', { vps: vps.name }), 'iaas.vps.detail');\n    } else if (vps.messages.length > 0) {\n      this.CloudMessage.error(this.$translate.instant('vps_dashboard_loading_error'), vps);\n    }\n  }\n\n  isInRescueMode(netbootMode) {\n    if (netbootMode === 'RESCUE') {\n      this.CloudMessage.warning({\n        textHtml: this.$translate.instant('vps_configuration_reboot_rescue_warning_text'),\n      }, 'iaas.vps.detail');\n    }\n  }\n\n  showIpV6Banner(version, ipv6) {\n    const oldVersion = _.contains(version, '2014') || _.contains(version, '2013');\n    const userAcknowledged = this.stopNotification.ipV6;\n    if (!userAcknowledged && !oldVersion && ipv6) {\n      this.CloudMessage.info({\n        textHtml: this.$translate.instant('vps_configuration_ipV6_info_text'),\n        dismissed: this.stopNotification.ipV6,\n        dismiss: () => this.stopNotificationIpV6(),\n      }, 'iaas.vps.detail.dashboard');\n    }\n  }\n\n  checkIfStopNotification(message, isArray, vps) {\n    const item = vps.name;\n    return this.VpsNotificationIpv6\n      .checkIfStopNotification(this.STOP_NOTIFICATION_USER_PREF[message], isArray, item)\n      .then((showNotification) => {\n        this.stopNotification[message] = showNotification;\n        this.showIpV6Banner(vps.version, vps.ipv6);\n      })\n      .catch(() => { this.stopNotification[message] = false; });\n  }\n\n  stopNotificationIpV6() {\n    this.stopNotification.ipV6 = true;\n    this.VpsNotificationIpv6.stopNotification(this.STOP_NOTIFICATION_USER_PREF.ipV6, this.vps.name)\n      .catch(() => this.CloudMessage.error(this.$translate.instant('vps_stop_bother_error')));\n  }\n}\n\nangular.module('managerApp').controller('VpsHeaderCtrl', VpsHeaderCtrl);\n"]}