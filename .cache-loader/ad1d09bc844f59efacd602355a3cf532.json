{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/manage/logs-options-manage.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/manage/logs-options-manage.controller.js","mtime":1539717142137},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsOptionsManageCtrl =\n/*#__PURE__*/\nfunction () {\n  LogsOptionsManageCtrl.$inject = [\"$state\", \"$stateParams\", \"$window\", \"CloudMessage\", \"ControllerHelper\", \"LogsOptionsService\", \"LogsOptionsManageService\", \"CurrencyService\", \"OrderHelperService\"];\n\n  function LogsOptionsManageCtrl($state, $stateParams, $window, CloudMessage, ControllerHelper, LogsOptionsService, LogsOptionsManageService, CurrencyService, OrderHelperService) {\n    _classCallCheck(this, LogsOptionsManageCtrl);\n\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$window = $window;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsOptionsManageService = LogsOptionsManageService;\n    this.CurrencyService = CurrencyService;\n    this.OrderHelperService = OrderHelperService;\n    this.serviceName = this.$stateParams.serviceName;\n    this.initLoaders();\n  }\n\n  _createClass(LogsOptionsManageCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.getManagedOptions = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsService.getManagedOptions(_this.serviceName);\n        }\n      });\n      this.getAllDashboards = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsManageService.getAllDashboards(_this.serviceName);\n        }\n      });\n      this.getAllStreams = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsManageService.getAllStreams(_this.serviceName);\n        }\n      });\n      this.getAllIndices = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsManageService.getAllIndices(_this.serviceName);\n        }\n      });\n      this.getAllAliases = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsManageService.getAllAliases(_this.serviceName);\n        }\n      });\n      this.getAllRoles = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsManageService.getAllRoles(_this.serviceName);\n        }\n      });\n      this.getAllInputs = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsOptionsManageService.getAllInputs(_this.serviceName);\n        }\n      });\n      this.getManagedOptions.load();\n      this.getAllAliases.load();\n      this.getAllDashboards.load();\n      this.getAllIndices.load();\n      this.getAllStreams.load();\n      this.getAllRoles.load();\n      this.getAllInputs.load();\n    }\n  }, {\n    key: \"terminateOption\",\n    value: function terminateOption(option) {\n      var _this2 = this;\n\n      this.removeOption = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.LogsOptionsService.terminateOption(_this2.serviceName, option);\n        }\n      });\n    }\n  }, {\n    key: \"overview\",\n    value: function overview(info) {\n      var _this3 = this;\n\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/dbaas/logs/detail/options/manage/overview/logs-options-overview.html',\n          controller: 'LogsOptionsManageOverviewCtrl',\n          controllerAs: 'ctrl',\n          resolve: {\n            option: function option() {\n              return info;\n            },\n            aliases: function aliases() {\n              return _this3.getAllAliases.data;\n            },\n            dashboards: function dashboards() {\n              return _this3.getAllDashboards.data;\n            },\n            indices: function indices() {\n              return _this3.getAllIndices.data;\n            },\n            streams: function streams() {\n              return _this3.getAllStreams.data;\n            },\n            roles: function roles() {\n              return _this3.getAllRoles.data;\n            },\n            inputs: function inputs() {\n              return _this3.getAllInputs.data;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(option) {\n      var _this4 = this;\n\n      this.CloudMessage.flushChildMessage();\n      this.LogsOptionsService.terminateModal(option).then(function () {\n        _this4.delete = _this4.ControllerHelper.request.getHashLoader({\n          loaderFunction: function loaderFunction() {\n            return _this4.LogsOptionsService.terminateOption(_this4.serviceName, option).then(function () {\n              return _this4.initLoaders();\n            }).finally(function () {\n              return _this4.ControllerHelper.scrollPageToTop();\n            });\n          }\n        });\n\n        _this4.delete.load();\n      });\n    }\n  }, {\n    key: \"reactivate\",\n    value: function reactivate(option) {\n      this.LogsOptionsService.showReactivateInfo(option);\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      this.$state.go('dbaas.logs.detail.options.home', {\n        serviceName: this.serviceName\n      });\n    }\n  }]);\n\n  return LogsOptionsManageCtrl;\n}();\n\nangular.module('managerApp').controller('LogsOptionsManageCtrl', LogsOptionsManageCtrl);",null]}