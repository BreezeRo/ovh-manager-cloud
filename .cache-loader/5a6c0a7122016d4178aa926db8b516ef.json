{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vrack/add/vrack-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vrack/add/vrack-add.controller.js","mtime":1539717142310},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["\n\nangular.module('managerApp').controller('VrackAddCtrl',\n  function ($q, $translate, $state, $rootScope, CloudMessage, VrackService, OvhApiOrder, TARGET) {\n    const self = this;\n\n    self.TARGET = TARGET;\n\n    this.loaders = {\n      loading: false,\n      validationPending: false,\n    };\n\n    this.model = {\n      agreements: [],\n      contractsAccepted: false,\n      purchaseOrderUrl: '',\n    };\n\n    this.getVrackContract = function () {\n      return OvhApiOrder.Vrack().New().v6().get({\n        quantity: 1,\n      }).$promise.then((data) => {\n        self.model.agreements = data.contracts;\n      }).catch((error) => {\n        CloudMessage.error($translate.instant('vrack_error_reason', { message: error.data.message }));\n      });\n    };\n\n    this.addVrack = function () {\n      self.loaders.loading = true;\n      return OvhApiOrder.Vrack().New().v6().create({\n        quantity: this.model.quantityToOrder,\n      }, {}).$promise.then((data) => {\n        CloudMessage.success($translate.instant('vrack_adding_success', { data: _.pick(data, ['url', 'orderId']) }));\n        self.model.purchaseOrderUrl = data.url;\n        self.loaders.validationPending = true;\n      }).catch((error) => {\n        CloudMessage.error($translate.instant('vrack_error_reason', { message: error.data.message }));\n      }).finally(() => {\n        self.loaders.loading = false;\n      });\n    };\n\n    function init() {\n      self.loaders.loading = true;\n      self.vrackOrderUrl = null;\n\n      const promise = {\n        vrackOrderUrl: VrackService.getOrderUrl(),\n      };\n\n      if (self.TARGET !== 'US') {\n        promise.vrackContract = self.getVrackContract();\n      }\n\n      return $q\n        .all(promise)\n        .then((results) => {\n          self.vrackOrderUrl = results.vrackOrderUrl;\n        })\n        .finally(() => {\n          self.loaders.loading = false;\n        });\n    }\n\n    init();\n  });\n"]}