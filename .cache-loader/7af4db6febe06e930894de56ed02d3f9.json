{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/failover/import/cloud-project-compute-infrastructure-ip-failover-import.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/failover/import/cloud-project-compute-infrastructure-ip-failover-import.controller.js","mtime":1539717141983},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["\n\nangular.module('managerApp')\n  .controller('CloudProjectComputeInfrastructureIpFailoverImportCtrl', function CloudProjectComputeInfrastructureIpFailoverImportCtrl(\n    $scope, $uibModalInstance, OvhApiIp, $translate, CloudMessage, OvhApiCloudProjectInstance,\n    $stateParams, $q, OvhApiMe, CLOUD_GEOLOCALISATION, pendingImportIps,\n  ) {\n    const self = this;\n\n    $scope.projectId = $stateParams.projectId;\n\n    self.datas = {\n      autoSelected: [],\n      ipsFo: [],\n      ipsFoDetail: [],\n      ipsFoDetailIds: [],\n      vms: [],\n      user: null,\n\n      selected: {},\n      selectedvm: null,\n    };\n\n    self.loaders = {\n      table: {\n        ipsFo: false,\n        importIpsFo: false,\n      },\n      vms: false,\n    };\n\n    // ---------INIT---------\n\n    function getIpsFo(clearCache) {\n      if (!self.loaders.table.ipsFo) {\n        self.loaders.table.ipsFo = true;\n        if (clearCache) {\n          OvhApiIp.v6().resetQueryCache();\n          OvhApiIp.v6().resetCache();\n        }\n        return OvhApiIp.v6().query({\n          type: 'failover',\n        }).$promise.then((ipsParams) => {\n          const ips = _.filter(ipsParams, ip => _.indexOf(pendingImportIps, ip) < 0);\n          return self.initIps(ips);\n        }, (err) => {\n          CloudMessage.error([$translate.instant('cpciif_import_ips_error'), (err.data && err.data.message) || ''].join(' '));\n          self.datas.ipsFo = null;\n        }).finally(() => {\n          self.loaders.table.ipsFo = false;\n        });\n      }\n      return $q.when();\n    }\n\n    function init() {\n      return OvhApiMe.v6().get().$promise.then((user) => {\n        self.datas.user = user;\n        return getIpsFo(true);\n      }, (err) => {\n        CloudMessage.error([$translate.instant('cpciif_import_ips_error'), (err.data && err.data.message) || ''].join(' '));\n      });\n    }\n\n    /**\n     * Fetch informations for every IPFO (we need to check if ipfo is already linked\n     * to current project and if his region is compatible)\n     */\n    self.initIps = function (ips) {\n      const queries = [];\n      self.datas.ipsFo = [];\n\n      angular.forEach(ips, (ip) => {\n        queries.push(OvhApiIp.v6().get({\n          ip,\n        }).$promise.then((ipParam) => {\n          if (!(ipParam.routedTo && ipParam.routedTo.serviceName === $scope.projectId)) {\n            self.datas.ipsFo.push(ipParam);\n          }\n        }));\n      });\n\n      return $q.all(queries);\n    };\n\n    // ---------TOOLS---------\n\n    $scope.$watch('CPCIIpFailoverImportCtrl.datas.selected', () => {\n      // if some line were not move => recheck\n      if (self.datas.autoSelected.length) {\n        angular.forEach(self.datas.autoSelected, (ip) => {\n          self.datas.selected[ip] = true;\n        });\n        self.datas.autoSelected = [];\n      }\n    }, true);\n\n    self.refreshIpsFo = function () {\n      getIpsFo(true);\n    };\n\n    self.getSelectedCount = function () {\n      return Object.keys(self.datas.selected).length;\n    };\n\n    self.getInfoSelect = function () {\n      if (Object.keys(self.datas.selected).length === 1) {\n        return Object.keys(self.datas.selected)[0];\n      }\n      if (Object.keys(self.datas.selected).length > 1) {\n        return Object.keys(self.datas.selected).length;\n      }\n      return null;\n    };\n\n    // ---------MODAL---------\n\n    self.confirm = function () {\n      if (!self.loaders.table.importIpsFo) {\n        const listPromise = [];\n\n\n        const listIpsWithTasks = [];\n\n\n        const nbSelected = self.getSelectedCount();\n\n\n        let lastIp = '';\n\n        self.loaders.table.importIpsFo = true;\n\n        angular.forEach(self.datas.selected, (value, ip) => {\n          lastIp = ip;\n\n          listPromise.push(OvhApiIp.v6().move(\n            { ip },\n            { to: $scope.projectId },\n          ).$promise.then((task) => {\n            listIpsWithTasks.push({ // Ã  revoir\n              ip,\n              task,\n            });\n          }, error => $q.reject({\n            ip,\n            error,\n          })));\n        });\n\n        $q.allSettled(listPromise).then(() => {\n          if (nbSelected > 1) {\n            CloudMessage.success($translate.instant('cpciif_import_vms_route_of_success_plural', { nbIps: nbSelected }));\n          } else {\n            CloudMessage.success($translate.instant('cpciif_import_vms_route_of_success', { ip: lastIp }));\n          }\n          $uibModalInstance.close(listIpsWithTasks);\n        }, (error) => {\n          const tabError = error.filter(val => !!val.error);\n\n          const ipError = _.pluck(tabError, 'ip');\n\n          self.datas.autoSelected = angular.copy(ipError);\n\n          if (tabError.length > 1) {\n            CloudMessage.error($translate.instant('cpciif_import_vms_route_of_error_plural', { ips: ipError.toString() }));\n          } else {\n            const errorIp = tabError[0].error;\n            CloudMessage.error([$translate.instant('cpciif_import_vms_route_of_error', { ip: tabError[0].ip }), (errorIp.data && errorIp.data.message) || ''].join(' '));\n          }\n        }).finally(() => {\n          self.datas.selected = {};\n\n          self.loaders.table.importIpsFo = false;\n        });\n      }\n    };\n\n    self.cancel = function () {\n      $uibModalInstance.dismiss();\n    };\n\n    init();\n  });\n"]}