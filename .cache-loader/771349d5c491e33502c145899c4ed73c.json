{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/list/cloud-project-compute-infrastructure-list.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/list/cloud-project-compute-infrastructure-list.controller.js","mtime":1539717141985},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeInfrastructureListCtrl {\n  constructor($scope, $q, $stateParams, $translate, $timeout,\n    CloudMessage, CloudNavigation, CloudProjectOrchestrator,\n    CloudProjectComputeInfrastructureService,\n    OvhApiCloudProjectVolume, RegionService, OvhApiCloudProjectFlavor, TARGET) {\n    this.$scope = $scope;\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.CloudNavigation = CloudNavigation;\n    this.CloudProjectOrchestrator = CloudProjectOrchestrator;\n    this.InfrastructureService = CloudProjectComputeInfrastructureService;\n    this.OvhApiCloudProjectVolume = OvhApiCloudProjectVolume;\n    this.RegionService = RegionService;\n    this.OvhApiCloudProjectFlavor = OvhApiCloudProjectFlavor;\n    this.TARGET = TARGET;\n  }\n\n  $onInit() {\n    this.serviceName = this.$stateParams.projectId;\n\n    this.CloudNavigation.init({\n      state: 'iaas.pci-project.compute.infrastructure.list',\n      stateParams: {\n        serviceName: this.serviceName,\n      },\n    });\n\n    this.loaders = {\n      infra: false,\n    };\n\n    this.table = {\n      items: undefined,\n    };\n\n    this.statusOptions = {\n      values: {\n        OK: this.$translate.instant('cpci_vm_status_OK'),\n        UPDATING: this.$translate.instant('cpci_vm_status_UPDATING'),\n        REBOOT: this.$translate.instant('cpci_vm_status_REBOOT'),\n        BUILD: this.$translate.instant('cpci_vm_status_BUILD'),\n        REBUILD: this.$translate.instant('cpci_vm_status_REBUILD'),\n        RESCUE: this.$translate.instant('cpci_vm_status_RESCUE'),\n        SNAPSHOTTING: this.$translate.instant('cpci_vm_status_SNAPSHOTTING'),\n        ERROR: this.$translate.instant('cpci_vm_status_ERROR'),\n        DELETING: this.$translate.instant('cpci_vm_status_DELETING'),\n      },\n    };\n\n    this.regionOptions = {\n      values: this.RegionService.getAllTranslatedMacroRegion(),\n    };\n\n    this.$scope.$watchCollection(() => _.get(this.infra, 'vrack.publicCloud.sortedKeys'), (newValues, oldValues) => {\n      this.addOrRemoveInstance(newValues, oldValues);\n    });\n\n    this.$scope.$on('compute.infrastructure.vm.status-update', (evt, newStatus, oldStatus, vm) => {\n      this.updateInstance(vm, vm.flavor);\n    });\n\n    this.$scope.$on('compute.infrastructure.vm.monthlyBilling.status-update', (evt, newStatus, oldStatus, vm) => {\n      this.updateInstance(vm, vm.flavor);\n    });\n\n    this.InfrastructureService.setPreferredView('list');\n\n    return this.initInfra();\n  }\n\n  initInfra() {\n    this.loaders.infra = true;\n    return this.$q.all({\n      infra: this.CloudProjectOrchestrator.initInfrastructure({ serviceName: this.serviceName }),\n      volumes: this.CloudProjectOrchestrator\n        .initVolumes({ serviceName: this.serviceName })\n        .then((volumes) => {\n          this.volumes = _.get(volumes, 'volumes');\n        }),\n    }).then(({ infra }) => {\n      this.infra = infra;\n      return this.$q\n        .all(_.map(\n          this.infra.vrack.publicCloud.items,\n          instance => this.OvhApiCloudProjectFlavor.v6()\n            .get({ serviceName: this.serviceName, flavorId: instance.flavorId }).$promise\n            .then(flavor => this.updateInstance(instance, flavor)),\n        ))\n        .then((instances) => { this.table.items = instances; });\n    }).catch((err) => {\n      this.table.items = [];\n      this.CloudMessage.error(`${this.$translate.instant('cpci_errors_init_title')} : ${_.get(err, 'data.message', '')}`);\n      return this.$q.reject(err);\n    }).finally(() => {\n      this.loaders.infra = false;\n    });\n  }\n\n  updateInstance(instance, flavor) {\n    _.set(instance, 'volumes', _.get(this.volumes, instance.id, []));\n    _.set(instance, 'ipv4', instance.getPublicIpv4());\n    _.set(instance, 'ipv6', instance.getPublicIpv6());\n    _.set(instance, 'statusToTranslate', this.constructor.getStatusToTranslate(instance));\n    _.set(instance, 'macroRegion', this.RegionService.constructor.getMacroRegion(instance.region));\n    // patch for some translations that have &#160; html entities\n    _.set(instance, 'flavorTranslated', this.$translate.instant(`cpci_vm_flavor_category_${flavor.name}`).replace('&#160;', ' '));\n    return instance;\n  }\n\n  static getStatusToTranslate(instance) {\n    if (instance.status === 'ACTIVE' && instance.monthlyBilling && instance.monthlyBilling.status === 'activationPending') {\n      return 'UPDATING';\n    } if (instance.status === 'ACTIVE') {\n      return 'OK';\n    } if (instance.status === 'REBOOT' || instance.status === 'HARD_REBOOT' || instance.status === 'RESCUING' || instance.status === 'UNRESCUING') {\n      return 'REBOOT';\n    }\n    return instance.status;\n  }\n\n  addOrRemoveInstance(newIds, oldIds) {\n    if (oldIds != null) {\n      if (newIds.length > oldIds.length) {\n        const foundId = _.find(newIds, key => _.indexOf(oldIds, key) === -1);\n        const foundItem = this.infra.vrack.publicCloud.items[foundId];\n        if (foundItem) {\n          _.set(foundItem, 'volumes', _.get(this.volumes, foundItem.id, []));\n          this.table.items.push(foundItem);\n        }\n      } else if (newIds.length < oldIds.length) {\n        const foundId = _.find(oldIds, key => _.indexOf(newIds, key) === -1);\n        _.remove(this.table.items, item => item.id === foundId);\n      }\n    }\n  }\n}\n\nangular.module('managerApp').controller('CloudProjectComputeInfrastructureListCtrl', CloudProjectComputeInfrastructureListCtrl);\n"]}