{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.service.js","mtime":1539717142194},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerConfigurationService {\n  constructor($q, $state, $translate, CloudMessage, OvhApiIpLoadBalancing, RegionService,\n    ServiceHelper) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  getPendingChanges(serviceName) {\n    return this.IpLoadBalancing.v6().pendingChanges({ serviceName })\n      .$promise;\n  }\n\n  getAllZonesChanges(serviceName) {\n    return this.$q.all({\n      description: this.IpLoadBalancing.v6().get({ serviceName }),\n      pendingChanges: this.getPendingChanges(serviceName),\n      tasks: this.getRefreshTasks(serviceName),\n    })\n      .then(({ description, pendingChanges, tasks }) => description.zone.map((zone) => {\n        const pending = _.find(pendingChanges, { zone });\n        return {\n          id: zone,\n          name: this.RegionService.getRegion(zone).microRegion.text,\n          changes: pending ? pending.number : 0,\n          task: this.constructor.getLastUndoneTask(tasks, zone),\n        };\n      }))\n      .catch(this.ServiceHelper.errorHandler('iplb_configuration_info_error'));\n  }\n\n  getZoneChanges(serviceName, zone) {\n    return this.$q.all({\n      pendingChanges: this.getPendingChanges(serviceName),\n      tasks: this.getRefreshTasks(serviceName, ['todo', 'doing', 'done']),\n    })\n      .then(({ pendingChanges, tasks }) => {\n        const pending = _.find(pendingChanges, { zone });\n        return {\n          id: zone,\n          name: this.RegionService.getRegion(zone).microRegion.text,\n          changes: pending ? pending.number : 0,\n          task: this.constructor.getLastUndoneTask(tasks, zone),\n        };\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_configuration_info_error'));\n  }\n\n  static getLastUndoneTask(tasks, zone) {\n    const result = tasks.sort((a, b) => {\n      if (a.creationDate > b.creationDate) {\n        return -1;\n      } if (a.creationDate === b.creationDate) {\n        return 0;\n      }\n\n      return 1;\n    });\n    return _.find(result, task => task.zones && task.zones.indexOf(zone) > -1);\n  }\n\n  refresh(serviceName, zone) {\n    return this.IpLoadBalancing.v6().refresh({\n      serviceName,\n    }, {\n      zone,\n    })\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_configuration_apply_success'))\n      .catch(this.ServiceHelper.errorHandler('iplb_configuration_apply_error'));\n  }\n\n  batchRefresh(serviceName, zones) {\n    const promises = zones.map(zone => this.IpLoadBalancing.v6().refresh({\n      serviceName,\n    }, {\n      zone,\n    }).$promise);\n    return this.$q.all(promises)\n      .then(this.ServiceHelper.successHandler('iplb_configuration_apply_success'))\n      .catch(this.ServiceHelper.errorHandler('iplb_configuration_apply_error'));\n  }\n\n  getRefreshTasks(serviceName, statuses) {\n    let tasksPromise;\n\n    if (statuses) {\n      tasksPromise = this.$q.all(statuses.map(status => this.IpLoadBalancing.Task().v6().query({\n        serviceName,\n        action: 'refreshIplb',\n        status,\n      }).$promise))\n        .then(tasksResults => _.flatten(tasksResults));\n    } else {\n      tasksPromise = this.IpLoadBalancing.Task().v6().query({\n        serviceName,\n        action: 'refreshIplb',\n      }).$promise;\n    }\n\n    return tasksPromise\n      .then(ids => this.$q.all(ids.map(id => this.IpLoadBalancing.Task().v6().get({\n        serviceName,\n        taskId: id,\n      }).$promise)));\n  }\n\n  showRefreshWarning() {\n    this.CloudMessage.warning({\n      text: this.$translate.instant('iplb_configuration_pending_changes'),\n      link: {\n        type: 'state',\n        text: this.$translate.instant('iplb_configuration_action_apply'),\n        state: 'network.iplb.detail.configuration',\n      },\n    }, 'network.iplb.detail');\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerConfigurationService', IpLoadBalancerConfigurationService);\n"]}