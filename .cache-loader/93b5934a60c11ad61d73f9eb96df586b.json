{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/infrastructure/vrack/vrack.factory.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/infrastructure/vrack/vrack.factory.js","mtime":1539717142389},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').factory('CloudProjectComputeInfraVrackFactory',\n  (CloudProjectComputeInfraVrackVmFactory, OrderedHashFactory) => {\n    /**\n     *  Defines a cloud project compute infrastructure vrack\n     *\n     *  @param    {Object}  options\n     *                      Options for creating a new CloudProjectInfraVrack\n     *  @param    {Array}   options.publicCloud\n     *                      List of VirtualMachine options or VirtualMachine instances\n     */\n    const VrackFactory = (function () {\n      return function CloudProjectComputeInfraVrackFactory(optionsParam) {\n        const self = this;\n        let options = optionsParam;\n\n        if (!options) {\n          options = {};\n        }\n\n        this.serviceName = options.serviceName || null;\n        this.publicCloud = new OrderedHashFactory();\n\n        // init public cloud\n        if (options.publicCloud && options.publicCloud.length) {\n          angular.forEach(options.publicCloud, (publicVm) => {\n            self.addVmToPublicCloudList(publicVm);\n          });\n        }\n      };\n    }());\n\n    // /////////////////////\n    //      METHODS      //\n    // /////////////////////\n\n    /**\n     *  Get a vm from its id. Check first in public cloud and then in private cloud.\n     */\n    VrackFactory.prototype.getVmById = function (vmId) {\n      return this.publicCloud.get(vmId);\n    };\n\n    /**\n     *  Get next index of vm in current Vrack (used for giving the default vm name option)\n     */\n    VrackFactory.prototype.getNextIndex = function () {\n      return this.publicCloud.length();\n    };\n\n    // ---\n\n    /**\n     *  Add a public vm into Vrack list\n     */\n    VrackFactory.prototype.addVmToPublicCloudList = function (vm) {\n      _.set(vm, 'serviceName', this.serviceName); // Add projectId to VM\n      vm = checkVm(vm); // eslint-disable-line\n      // Avoid conflict of adding an existing vm\n      if (!this.publicCloud.get(vm)) {\n        this.publicCloud.push(vm);\n      }\n      return vm;\n    };\n\n\n    /**\n     *  Remove given Virtual Machine from vrack public cloud list\n     */\n    VrackFactory.prototype.removeVmFromPublicCloudList = function (vm) {\n      this.publicCloud.removeItem(vm);\n      return vm;\n    };\n\n\n    /**\n     *  Collapse all Vms\n     */\n    VrackFactory.prototype.collapseAll = function () {\n      const items = this.publicCloud.getItems();\n      angular.forEach(items, (vm) => {\n        _.set(vm, 'collapsed', true);\n      });\n    };\n\n    /**\n     *  Uncollapse all Vms\n     */\n    VrackFactory.prototype.uncollapseAll = function () {\n      const items = this.publicCloud.getItems();\n      angular.forEach(items, (vm) => {\n        _.set(vm, 'collapsed', false);\n      });\n    };\n\n    /**\n     *  Prepare object to json encode function to avoid function being encoded.\n     */\n    VrackFactory.prototype.prepareToJson = function () {\n      const self = this;\n      return {\n        publicCloud: _.map(\n          this.publicCloud.sortedKeys,\n          vmId => self.publicCloud.get(vmId).prepareToJson(),\n        ),\n      };\n    };\n\n    // /////////////////////\n    //      FUNCTIONS    //\n    // /////////////////////\n\n    /**\n     *  Check if vm is already an instance or an options object\n     */\n    function checkVm(vm) {\n      return vm instanceof CloudProjectComputeInfraVrackVmFactory\n        ? vm\n        : new CloudProjectComputeInfraVrackVmFactory(vm);\n    }\n\n    return VrackFactory;\n  });\n"]}