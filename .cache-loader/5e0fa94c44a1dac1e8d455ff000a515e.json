{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/sshKeyMin/sshKeyMin.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/sshKeyMin/sshKeyMin.js","mtime":1539717142430},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').constant('SSHKEY_REGEX', [\n  /* {\n        name  : 'RSA1',\n        regex : /^([0-9]+)\\s+([0-9]+)\\s+([0-9]+)\\s+([^ @]+@[^@]+)$/\n    }, */\n  {\n    name: 'RSA',\n    regex: /^(ssh-rsa)\\s+(A{4}[0-9A-Za-z +/]+[=]{0,3})\\s+([^ @]+@[^@]+)$/,\n  },\n  {\n    name: 'DSA',\n    regex: /^(ssh-ds[sa])\\s+(A{4}[0-9A-Za-z +/]+[=]{0,3})\\s+([^ @]+@[^@]+)$/,\n  },\n  {\n    name: 'ECDSA',\n    regex: /^(ecdsa-sha2-nistp[0-9]+)\\s+(A{4}[0-9A-Za-z +/]+[=]{0,3})\\s+([^ @]+@[^@]+)$/,\n  },\n]).filter('sshKeyMin', ['SSHKEY_REGEX', function (SSHKEY_REGEX) {\n  let splitted;\n  let minLength;\n  let innerkeyLength;\n  let subLength;\n  const toLength = 50;\n  const dots = '...';\n  let type = false;\n  let i;\n\n  return function (keyParam) {\n    let key = keyParam;\n    key = key.trim().replace(/\\n/, '');\n    type = false;\n\n    /* eslint-disable no-cond-assign */\n    for (i = SSHKEY_REGEX.length; i -= 1;) {\n      if (SSHKEY_REGEX[i].regex.test(key)) {\n        type = SSHKEY_REGEX[i];\n        splitted = key.match(SSHKEY_REGEX[i].regex);\n        break;\n      }\n    }\n    /* eslint-enable no-cond-assign */\n\n    if (type && type.name === 'RSA1' && splitted.length === 5) { // special rule...\n      minLength = splitted[1].length\n        + splitted[2].length\n        + splitted[4].length\n        + 3; // '3' = 3 spaces\n\n      if (minLength < (toLength - dots.length - 2)) { //  ('2' = min 2 chars each side of dots)\n        innerkeyLength = splitted[3].length;\n        subLength = (toLength - minLength - dots.length) / 2;\n        return `${splitted[1]} ${splitted[2]} ${splitted[3].substr(0, subLength)}${dots}${splitted[3].substr(innerkeyLength - subLength, innerkeyLength)} ${splitted[4]}`;\n      }\n    } else if (type && splitted.length === 4) {\n      minLength = splitted[1].length + splitted[3].length + 2; // '2' = 2 spaces\n\n      if (minLength < (toLength - dots.length - 2)) { //  ('2' = min 2 chars each side of dots)\n        innerkeyLength = splitted[2].length;\n        subLength = (toLength - minLength - dots.length) / 2;\n        return `${splitted[1]} ${splitted[2].substr(0, subLength)}${dots}${splitted[2].substr(innerkeyLength - subLength, innerkeyLength)} ${splitted[3]}`;\n      }\n    }\n\n    // else...Split /2\n    return key.substr(0, (toLength / 2) - dots.length)\n      + dots\n      + (key.substr((key.length - toLength / 2) + dots.length, key.length));\n  };\n}]);\n"]}