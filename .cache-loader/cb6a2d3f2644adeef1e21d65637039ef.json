{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/account/setup/logs-account-setup.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/account/setup/logs-account-setup.controller.js","mtime":1539717142075},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsAccountSetupCtrl =\n/*#__PURE__*/\nfunction () {\n  LogsAccountSetupCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"ControllerHelper\", \"CloudMessage\", \"LogsAccountService\", \"LogsHomeService\", \"LogsDetailService\"];\n\n  function LogsAccountSetupCtrl($q, $state, $stateParams, ControllerHelper, CloudMessage, LogsAccountService, LogsHomeService, LogsDetailService) {\n    _classCallCheck(this, LogsAccountSetupCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsAccountService = LogsAccountService;\n    this.LogsHomeService = LogsHomeService;\n    this.LogsDetailService = LogsDetailService;\n    this.passwordValid = false;\n    this.passwordRules = this.LogsAccountService.getPasswordRules(false);\n    this.initLoaders();\n  }\n\n  _createClass(LogsAccountSetupCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.service = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsDetailService.getServiceDetails(_this.serviceName).then(function (service) {\n            _this.userName = service.username;\n            return service;\n          });\n        }\n      }).load();\n      this.accountDetails = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsHomeService.getAccountDetails(_this.serviceName).then(function (account) {\n            _this.fullName = \"\".concat(account.me.firstname, \" \").concat(account.me.name);\n            return account;\n          });\n        }\n      }).load();\n    }\n  }, {\n    key: \"resetPasswordRules\",\n    value: function resetPasswordRules() {\n      this.passwordRules = this.LogsAccountService.getPasswordRules(true);\n    }\n  }, {\n    key: \"validatePassword\",\n    value: function validatePassword() {\n      var _this2 = this;\n\n      var allValid = true;\n\n      _.each(this.passwordRules, function (rule) {\n        _.set(rule, 'isValid', rule.validator(_this2.newPassword));\n\n        if (allValid) {\n          allValid = rule.isValid;\n        }\n\n        _.set(rule, 'isValidated', true);\n      });\n\n      this.passwordValid = allValid;\n    }\n  }, {\n    key: \"changePassword\",\n    value: function changePassword() {\n      var _this3 = this;\n\n      if (this.form.$invalid || !this.passwordValid) {\n        return this.$q.reject();\n      }\n\n      this.CloudMessage.flushChildMessage();\n      this.saving = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this3.LogsAccountService.changePassword(_this3.serviceName, _this3.newPassword, true).then(function () {\n            _this3.$state.go('dbaas.logs.detail.home', {\n              serviceName: _this3.serviceName\n            }, {\n              reload: true\n            });\n          });\n        }\n      });\n      return this.saving.load();\n    }\n  }]);\n\n  return LogsAccountSetupCtrl;\n}();\n\nangular.module('managerApp').controller('LogsAccountSetupCtrl', LogsAccountSetupCtrl);",null]}