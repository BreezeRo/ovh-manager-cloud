{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/add/configure/logs-inputs-add-configure.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/add/configure/logs-inputs-add-configure.controller.js","mtime":1539717142085},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsInputsAddConfigureCtrl {\n  constructor($q, $state, $stateParams, $translate, ControllerModalHelper, ControllerHelper,\n    LogsInputsService, LogsConstants, CloudMessage) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.serviceName = this.$stateParams.serviceName;\n    this.inputId = this.$stateParams.inputId;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsInputsService = LogsInputsService;\n    this.LogsConstants = LogsConstants;\n    this.CloudMessage = CloudMessage;\n    this.configuration = {\n      engineType: '',\n      flowgger: {},\n      logstash: {},\n    };\n    this.initLoaders();\n  }\n\n  /**\n   * initializes the input log url\n   *\n   * @memberof LogsInputsAddConfigureCtrl\n   */\n  initLoaders() {\n    this.input = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService.getInput(this.serviceName, this.inputId)\n        .then((input) => {\n          this.configuration.engineType = input.info.engine.name;\n          if (this.configuration.engineType === this.LogsConstants.logstash) {\n            this.initLogstash(input.info.engine.configuration);\n          } else {\n            this.initFlowgger(input.info.engine.configuration);\n          }\n          return input;\n        }),\n    });\n\n    this.test = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService\n        .getTestResults(this.serviceName, this.input.data),\n    });\n    this.previousTest = this.test;\n\n    this.input.load()\n      .then(() => this.previousTest.load());\n  }\n\n  initFlowgger(configuration) {\n    this.configuration.flowgger.kafkaCoalesce = configuration.kafkaCoalesce;\n    this.configuration.flowgger.logFormat = configuration.logFormat;\n    this.configuration.flowgger.logFraming = configuration.logFraming;\n    this.configuration.flowgger.tlsMethod = configuration.tlsMethod;\n    this.configuration.flowgger.type = configuration.type;\n  }\n\n  static findRowLength(str) {\n    const lines = str.split(/\\r\\n|\\r|\\n/);\n    return lines.length;\n  }\n\n  initLogstash(configuration) {\n    this.configuration.logstash.inputSection = this.ControllerHelper.constructor\n      .htmlDecode(configuration.inputSection);\n    this.configuration.logstash.filterSection = this.ControllerHelper.constructor\n      .htmlDecode(configuration.filterSection);\n    this.configuration.logstash.patternSection = this.ControllerHelper.constructor\n      .htmlDecode(configuration.patternSection);\n  }\n\n  applyConfiguration(name) {\n    this.configuration.logstash.inputSection = this.LogsConstants.logStashWizard[name].input.replace('INPUT_PORT', this.input.data.info.exposedPort);\n    this.configuration.logstash.filterSection = this.LogsConstants.logStashWizard[name].filter;\n    this.configuration.logstash.patternSection = this.LogsConstants.logStashWizard[name].patterns;\n  }\n\n  executeTest() {\n    this.CloudMessage.flushChildMessage();\n    this.test = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => (this.logstashForm.$dirty\n        ? this.LogsInputsService.updateLogstash(\n          this.serviceName,\n          this.input.data,\n          this.configuration.logstash,\n        )\n        : this.$q.when({})\n      )\n        .then(() => this.LogsInputsService.executeTest(this.serviceName, this.input.data))\n        .catch(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    this.test.load();\n  }\n\n  saveFlowgger() {\n    if (this.flowggerForm.$invalid) {\n      return this.$q.reject();\n    } if (!this.flowggerForm.$dirty) {\n      return this.goToNetworkPage();\n    }\n    this.CloudMessage.flushChildMessage();\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService\n        .updateFlowgger(this.serviceName, this.input.data, this.configuration.flowgger)\n        .then(() => this.goToNetworkPage())\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    return this.saving.load();\n  }\n\n  saveLogstash() {\n    if (this.logstashForm.$invalid) {\n      return this.$q.reject();\n    } if (!this.test.data.stdout) {\n      return this.ControllerModalHelper.showWarningModal({\n        title: this.$translate.instant('logs_inputs_logstash_save_warning_title'),\n        message: this.test.data.updatedAt ? this.$translate.instant('logs_inputs_logstash_save_warning_unsuccessful') : this.$translate.instant('logs_inputs_logstash_save_warning_no_test'),\n      });\n    } if (!this.logstashForm.$dirty) {\n      return this.goToNetworkPage();\n    }\n    this.CloudMessage.flushChildMessage();\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService\n        .updateLogstash(this.serviceName, this.input.data, this.configuration.logstash)\n        .then(() => this.goToNetworkPage())\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    return this.saving.load();\n  }\n\n  goToNetworkPage() {\n    this.$state.go('dbaas.logs.detail.inputs.editwizard.networks', {\n      serviceName: this.serviceName,\n      inputId: this.inputId,\n    });\n    return this.$q.resolve();\n  }\n\n  getFlowggerLogFormats() {\n    return this.LogsInputsService.getFlowggerLogFormats();\n  }\n\n  getLogstashLogFormats() {\n    return this.LogsInputsService.getLogstashLogFormats();\n  }\n\n  getDelimiters() {\n    return this.LogsInputsService.getDelimiters();\n  }\n}\n\nangular.module('managerApp').controller('LogsInputsAddConfigureCtrl', LogsInputsAddConfigureCtrl);\n"]}