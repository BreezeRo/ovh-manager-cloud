{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/nodes/kubernetes-nodes.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/nodes/kubernetes-nodes.controller.js","mtime":1539717374577},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('KubernetesNodesCtrl', class KubernetesNodesCtrl {\n  constructor(\n    $q, $state, $stateParams, $timeout, $translate, $uibModal,\n    CloudMessage, Kubernetes,\n    KUBERNETES,\n  ) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = $translate;\n    this.$uibModal = $uibModal;\n    this.CloudMessage = CloudMessage;\n    this.Kubernetes = Kubernetes;\n    this.KUBERNETES = KUBERNETES;\n  }\n\n  $onInit() {\n    this.loading = false;\n\n    this.getPublicCloudProject()\n      .then(() => this.getNodes())\n      .then(() => this.loadMessages());\n  }\n\n  loadMessages() {\n    this.CloudMessage.unSubscribe('paas.kube.nodes');\n    this.messageHandler = this.CloudMessage.subscribe('paas.kube.nodes', { onMessage: () => this.refreshMessages() });\n  }\n\n  refreshMessages() {\n    this.messages = this.messageHandler.getMessages();\n  }\n\n  getNodes() {\n    this.loading = true;\n    return this.Kubernetes.getNodes(this.serviceName)\n      .then((nodes) => { this.nodes = nodes; })\n      .catch(() => this.CloudMessage.error(this.$translate.instant('kube_nodes_error')))\n      .finally(() => { this.loading = false; });\n  }\n\n  getAssociatedFlavor(node) {\n    if (node.instanceId) {\n      return this.Kubernetes.getAssociatedInstance(node.projectId, node.instanceId)\n        .then(instance => _.set(node, 'formattedFlavor', this.Kubernetes.formatFlavor(instance.flavor)))\n        .catch(() => {\n          _.set(node, 'formattedFlavor', this.$translate.instant('kube_nodes_flavor_error'));\n        });\n    }\n\n    return this.$q.when(_.set(node, 'formattedFlavor', node.flavor));\n  }\n\n  getPublicCloudProject() {\n    return this.Kubernetes.getAssociatedPublicCloudProjects(this.serviceName)\n      .then(projects => this.Kubernetes.getProject(_.first(projects).projectId))\n      .then((project) => {\n        this.project = project;\n      })\n      .catch(() => {\n        this.CloudMessage.error(this.$translate.instant('kube_nodes_project_error'));\n      });\n  }\n\n  confirmNodeDeletion(nodeId) {\n    return this.$uibModal.open({\n      templateUrl: 'app/kubernetes/nodes/delete/kubernetes-nodes-delete.html',\n      controller: 'KubernetesNodesDeleteCtrl',\n      controllerAs: '$ctrl',\n      backdrop: 'static',\n      resolve: {\n        nodeId() {\n          return nodeId;\n        },\n      },\n    }).result\n      .then(() => {\n        this.displaySuccessMessage('kube_nodes_delete_success');\n        return this.refreshNodes();\n      })\n      .catch((error) => {\n        if (error) {\n          this.CloudMessage.error(this.$translate.instant('kube_nodes_delete_error', { message: error }));\n        }\n      });\n  }\n\n  openAddNodeForm(projectId) {\n    return this.$uibModal.open({\n      templateUrl: 'app/kubernetes/nodes/add/kubernetes-nodes-add.html',\n      controller: 'KubernetesNodesAddCtrl',\n      controllerAs: '$ctrl',\n      backdrop: 'static',\n      resolve: {\n        projectId() {\n          return projectId;\n        },\n      },\n    }).result\n      .then(() => {\n        this.displaySuccessMessage('kube_nodes_add_success');\n        return this.refreshNodes();\n      })\n      .catch((error) => {\n        if (error) {\n          this.CloudMessage.error(error);\n        }\n      });\n  }\n\n  displaySuccessMessage(message) {\n    this.CloudMessage.success(this.$translate.instant(message));\n    this.$timeout(() => this.CloudMessage.flushMessages(), 3000);\n  }\n\n  refreshNodes() {\n    this.Kubernetes.resetNodesCache();\n    return this.getNodes();\n  }\n});\n"]}