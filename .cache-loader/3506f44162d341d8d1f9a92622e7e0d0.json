{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/monitoring/vps-monitoring.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/monitoring/vps-monitoring.controller.js","mtime":1539717142303},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VpsMonitoringCtrl {\n  constructor($q, $stateParams, $translate, CloudMessage, VpsActionService, VpsMonitoringConstant,\n    VpsService) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.serviceName = $stateParams.serviceName;\n    this.VpsActionService = VpsActionService;\n    this.VpsMonitoringConstant = VpsMonitoringConstant;\n    this.VpsService = VpsService;\n\n    this.loaders = {\n      init: false,\n    };\n    this.data = {};\n    this.period = 'LASTDAY';\n  }\n\n  $onInit() {\n    this.loadOptions();\n    this.loadMonitoring();\n  }\n\n  loadMonitoring() {\n    this.loaders.init = true;\n    this.reset();\n    this.VpsService.getMonitoring(this.serviceName, this.period)\n      .then((data) => {\n        this.data = data;\n        this.constructor.humanizeData(data.cpu.values[0].points, this.monitoring.cpu);\n        this.constructor.humanizeData(data.ram.values[0].points, this.monitoring.ram);\n        this.constructor.humanizeData(data.netRx.values[0].points, this.monitoring.net[0]);\n        this.constructor.humanizeData(data.netTx.values[0].points, this.monitoring.net[1]);\n        this.constructor.generateLabels(\n          data.cpu.values[0].points,\n          data.cpu.pointInterval,\n          data.cpu.pointStart,\n          this.monitoring.labels,\n        );\n        this.noCpuData = _.find(_.get(this.data, 'messages'), type => _.get(type, 'params.type').indexOf('cpu') !== -1);\n        this.noRamData = _.find(_.get(this.data, 'messages'), type => _.get(type, 'params.type').indexOf('mem') !== -1);\n        this.noNetData = _.find(_.get(this.data, 'messages'), type => _.get(type, 'params.type').indexOf('net') !== -1);\n      })\n      .catch(() => { this.error = true; })\n      .finally(() => { this.loaders.init = false; });\n  }\n\n  reset() {\n    this.monitoring = {\n      cpu: [],\n      ram: [],\n      net: [[], []],\n      labels: [],\n    };\n  }\n\n  static humanizeData(data, tab) {\n    _.forEach(data, (element) => {\n      if (element && element.y) {\n        tab.push(element.y);\n      } else {\n        tab.push(0);\n      }\n    });\n  }\n\n  static generateLabels(data, interval, start, tab) {\n    const unitInterval = 'minutes';\n    const pointInterval = interval.standardMinutes;\n    let date = moment(start);\n    _.forEach(data, () => {\n      tab.push(date.format('MM/DD/YY - HH:mm:ss'));\n      date = moment(date).add(unitInterval, pointInterval);\n    });\n  }\n\n  loadOptions() {\n    this.colors = this.VpsMonitoringConstant.colors;\n    this.series = [this.$translate.instant('vps_monitoring_network_netRx'), this.$translate.instant('vps_monitoring_network_netTx')];\n    this.percentOption = this.VpsMonitoringConstant.percentOption;\n    this.bpsOption = this.VpsMonitoringConstant.bpsOption;\n  }\n}\n\nangular.module('managerApp').controller('VpsMonitoringCtrl', VpsMonitoringCtrl);\n"]}