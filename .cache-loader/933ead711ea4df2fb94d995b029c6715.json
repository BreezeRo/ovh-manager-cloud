{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/frontends/iplb-frontends.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/frontends/iplb-frontends.service.js","mtime":1539717142197},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerFrontendsService {\n  constructor($q, $translate, IpLoadBalancerConfigurationService, IpLoadBalancerZoneService,\n    OvhApiIpLoadBalancing,\n    RegionService, ServiceHelper) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.IpLoadBalancerConfigurationService = IpLoadBalancerConfigurationService;\n    this.IpLoadBalancerZoneService = IpLoadBalancerZoneService;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n\n    this.Frontend = {\n      all: this.IpLoadBalancing.Frontend().v6(),\n      tcp: this.IpLoadBalancing.Frontend().Tcp().v6(),\n      udp: this.IpLoadBalancing.Frontend().Udp().v6(),\n      http: this.IpLoadBalancing.Frontend().Http().v6(),\n    };\n\n    this.Farm = {\n      tcp: this.IpLoadBalancing.Farm().Tcp().v6(),\n      udp: this.IpLoadBalancing.Farm().Udp().v6(),\n      http: this.IpLoadBalancing.Farm().Http().v6(),\n    };\n  }\n\n  getFrontends(serviceName) {\n    return this.getFrontendIndex(serviceName)\n      .then(frontends => frontends.map(frontend => this.transformFrontend(frontend)))\n      .catch(this.ServiceHelper.errorHandler('iplb_frontend_list_error'));\n  }\n\n  getFrontendIndex(serviceName) {\n    return this.getAllFrontendsTypes(serviceName)\n      .then((frontends) => {\n        const promises = frontends\n          .map(frontend => this.getFrontend(frontend.type, serviceName, frontend.id));\n        return this.$q.all(promises);\n      });\n  }\n\n  getFrontend(type, serviceName, frontendId) {\n    return this.Frontend[type].get({\n      serviceName,\n      frontendId,\n    })\n      .$promise\n      .then((frontend) => {\n        _.set(frontend, 'protocol', type);\n        return frontend;\n      });\n  }\n\n  getAllFrontendsTypes(serviceName) {\n    return this.Frontend.all.query({ serviceName })\n      .$promise;\n  }\n\n  transformFrontend(frontend) {\n    if (frontend.zone === 'all') {\n      _.set(frontend, 'region', {\n        macroRegion: {\n          code: null,\n          text: this.$translate.instant('iplb_zone_all'),\n        },\n      });\n    } else {\n      _.set(frontend, 'region', this.RegionService.getRegion(frontend.zone));\n    }\n\n    // Needed to trigger row loading with datagrid.\n    delete frontend.$promise; // eslint-disable-line\n\n    return frontend;\n  }\n\n  getFarm(type, serviceName, farmId) {\n    return this.Farm[type].get({\n      serviceName,\n      farmId,\n    }).$promise;\n  }\n\n  getFarms(type, serviceName) {\n    return this.Farm[type].query({ serviceName })\n      .$promise\n      .then(ids => this.$q.all(ids.map(id => this.getFarm(type, serviceName, id))))\n      .then(farms => farms.map(farm => this.constructor.transformFarm(farm, type)));\n  }\n\n  static transformFarm(farm, type) {\n    _.set(farm, 'type', type);\n    return farm;\n  }\n\n  getFarmsChoices(type, serviceName, zone) {\n    return this.getFarms(type, serviceName)\n      .then((farmsParam) => {\n        let farms = farmsParam;\n        if (zone) {\n          farms = _.filter(farms, { zone });\n        }\n        farms.unshift({\n          displayName: this.$translate.instant('iplb_frontend_add_farm_no_farm'),\n          farmId: null,\n        });\n        farms.unshift({\n          displayName: this.$translate.instant('iplb_frontend_add_select_placeholder'),\n          farmId: 0,\n        });\n        return farms;\n      });\n  }\n\n  getZones() {\n    return this.IpLoadBalancerZoneService.getIPLBZones()\n      .then(zones => zones.reduce((zonesMapParam, zoneName) => {\n        const zonesMap = zonesMapParam;\n        zonesMap[zoneName] = this.RegionService.getRegion(zoneName).microRegion.text;\n        return zonesMap;\n      }, {}))\n      .then((zones) => {\n        _.set(zones, 'all', this.$translate.instant('iplb_frontend_add_datacenter_all'));\n        return Object.keys(zones).map(zoneKey => ({\n          id: zoneKey,\n          name: zones[zoneKey],\n        }));\n      });\n  }\n\n  getCertificatesChoices(serviceName) {\n    return this.getCertificates(serviceName)\n      .then((certificates) => {\n        certificates.unshift({\n          displayName: this.$translate.instant('iplb_frontend_add_default_certificate_no_certificate'),\n          id: 0,\n        });\n        return certificates;\n      });\n  }\n\n  getCertificates(serviceName) {\n    return this.IpLoadBalancing.Ssl().v6().query({ serviceName }).$promise\n      .then(ids => this.$q.all(ids.map(id => this.getCertificate(serviceName, id))));\n  }\n\n  getCertificate(serviceName, sslId) {\n    return this.IpLoadBalancing.Ssl().v6().get({\n      serviceName,\n      sslId,\n    }).$promise;\n  }\n\n  createFrontend(type, serviceName, frontend) {\n    return this.Frontend[type].post({ serviceName }, frontend)\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_frontend_add_success'))\n      .then(() => this.Frontend.all.resetQueryCache())\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_frontend_add_error'));\n  }\n\n  updateFrontend(type, serviceName, frontendId, frontend) {\n    return this.Frontend[type].put({\n      serviceName,\n      frontendId,\n    }, frontend)\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_frontend_update_success'))\n      .then(() => this.Frontend.all.resetQueryCache())\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_frontend_update_error'));\n  }\n\n  deleteFrontend(type, serviceName, frontendId) {\n    return this.Frontend[type].delete({\n      serviceName,\n      frontendId,\n    })\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_frontend_delete_success'))\n      .then(() => this.Frontend.all.resetQueryCache())\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_frontend_delete_error'));\n  }\n\n  toggleFrontend(type, serviceName, frontend) {\n    return this.Frontend[type].put({\n      serviceName,\n      frontendId: frontend.frontendId,\n    }, {\n      disabled: frontend.disabled,\n    })\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_frontend_toggle_success'))\n      .then(() => this.Frontend.all.resetQueryCache())\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_frontend_toggle_error'));\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerFrontendsService', IpLoadBalancerFrontendsService);\n"]}