{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/home/logs-options-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/home/logs-options-home.controller.js","mtime":1539717142134},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsOptionsCtrl {\n  constructor($state, $stateParams, $window, ControllerHelper, LogsConstants, LogsOfferService,\n    LogsOptionsService, CurrencyService, OrderHelperService, LogsDetailService) {\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$window = $window;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsOptionsService = LogsOptionsService;\n    this.CurrencyService = CurrencyService;\n    this.OrderHelperService = OrderHelperService;\n    this.LogsDetailService = LogsDetailService;\n    this.LogsConstants = LogsConstants;\n\n    this.serviceName = this.$stateParams.serviceName;\n    this.messages = {};\n    this.initLoaders();\n  }\n\n  /**\n   * initializes the options and currentOptions loaders\n   *\n   * @memberof LogsOptionsCtrl\n   */\n  initLoaders() {\n    this.options = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsOptionsService.getOptions(this.serviceName),\n    });\n    this.currentOptions = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsOptionsService\n        .getSubscribedOptionsMapGrouped(this.serviceName),\n    });\n    this.selectedOffer = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsOptionsService.getOffer(this.serviceName),\n    });\n\n    this.service = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsDetailService.getServiceDetails(this.serviceName)\n        .then((service) => {\n          if (service.state !== this.LogsConstants.SERVICE_STATE_ENABLED) {\n            this.goToHomePage();\n          } else {\n            this.options.load();\n            this.currentOptions.load();\n            this.selectedOffer.load();\n          }\n          return service;\n        }),\n    });\n    this.service.load();\n  }\n\n  /**\n   * returns the total price for all the selected options\n   *\n   * @returns the total price\n   * @memberof LogsOptionsCtrl\n   */\n  getTotalPrice() {\n    return _.reduce(\n      this.options.data,\n      (total, option) => total + option.quantity * option.price, 0,\n    ).toFixed(2);\n  }\n\n  /**\n   * returns the list of selected options\n   *\n   * @returns the list of options selected for order\n   * @memberof LogsOptionsCtrl\n   */\n  getSelectedOptions() {\n    return this.LogsOptionsService.constructor.getOptionsToOrder(this.options.data);\n  }\n\n  updateOptionToOrder(newValue, selectedOption) {\n    const option = _.find(this.options.data, { planCode: selectedOption.planCode });\n    if (!_.isEmpty(option)) {\n      _.set(option, 'quantity', newValue);\n    }\n  }\n\n  /**\n   * returns the current currency symbol being used\n   *\n   * @returns the symbol for the current currency\n   * @memberof LogsOptionsCtrl\n   */\n  getCurrentCurrency() {\n    return this.CurrencyService.getCurrentCurrency();\n  }\n\n  /**\n   * Checks if the user has a basic offer\n   *\n   * @returns true if the user is subscribed to a basic offer\n   * @memberof LogsOptionsCtrl\n   */\n  isBasicOffer() {\n    return this.selectedOffer.data.reference === this.LogsConstants.basicOffer;\n  }\n\n  /**\n   * takes the browser to the previously visited page\n   *\n   * @memberof LogsOptionsCtrl\n   */\n  cancel() {\n    this.$window.history.back();\n  }\n\n  /**\n   * opens the order page for the selected options\n   *\n   * @memberof LogsOptionsCtrl\n   */\n  order() {\n    this.OrderHelperService.openExpressOrderUrl(\n      this.LogsOptionsService.getOrderConfiguration(this.options.data, this.serviceName),\n    );\n  }\n\n  goToHomePage() {\n    this.$state.go('dbaas.logs.detail.home');\n  }\n}\n\nangular.module('managerApp').controller('LogsOptionsCtrl', LogsOptionsCtrl);\n"]}