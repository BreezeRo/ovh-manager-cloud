{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/common/iplb-vrack-helper.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/common/iplb-vrack-helper.service.js","mtime":1539717142224},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerVrackHelper {\n  constructor(CloudPoll, IpLoadBalancerVrackService, OvhApiVrack) {\n    this.CloudPoll = CloudPoll;\n    this.IpLoadBalancerVrackService = IpLoadBalancerVrackService;\n    this.OvhApiVrack = OvhApiVrack;\n  }\n\n  associateVrack(serviceName, networkId, vrackCreationRules) {\n    this.IpLoadBalancerVrackService.associateVrack(serviceName, networkId)\n      .then((task) => {\n        _.set(vrackCreationRules, 'status', 'activating');\n        return this.pollCreationRules(task);\n      })\n      .then(() => this.IpLoadBalancerVrackService\n        .getNetworkCreationRules(serviceName, { resetCache: true }))\n      .then((creationRules) => {\n        _.extend(vrackCreationRules, creationRules);\n      });\n  }\n\n  deAssociateVrack(serviceName, vrackCreationRules) {\n    this.IpLoadBalancerVrackService.deAssociateVrack(serviceName)\n      .then((task) => {\n        _.set(vrackCreationRules, 'status', 'deactivating');\n        return this.pollCreationRules(task);\n      })\n      .then(() => this.IpLoadBalancerVrackService\n        .getNetworkCreationRules(serviceName, { resetCache: true }))\n      .then((creationRules) => {\n        _.extend(vrackCreationRules, creationRules);\n      });\n  }\n\n  pollCreationRules(task) {\n    return this.CloudPoll.poll({\n      item: task,\n      pollFunction: () => this.OvhApiVrack.v6()\n        .task({ serviceName: task.serviceName, taskId: task.id })\n        .$promise\n        .catch(() => ({ status: 'done' })),\n      stopCondition: item => item.status === 'done' || item.status === 'error',\n    }).$promise;\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerVrackHelper', IpLoadBalancerVrackHelper);\n"]}