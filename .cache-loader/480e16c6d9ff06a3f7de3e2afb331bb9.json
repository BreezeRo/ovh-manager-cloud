{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.js","mtime":1539717142194},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').config(($stateProvider) => {\n  $stateProvider\n    .state('network.iplb.detail.configuration', {\n      url: '/configuration',\n      views: {\n        iplbHeader: {\n          templateUrl: 'app/iplb/header/iplb-dashboard-header.html',\n          controller: 'IpLoadBalancerDashboardHeaderCtrl',\n          controllerAs: 'ctrl',\n        },\n        iplbContent: {\n          templateUrl: 'app/iplb/configuration/iplb-configuration.html',\n          controller: 'IpLoadBalancerConfigurationCtrl',\n          controllerAs: 'ctrl',\n        },\n      },\n      translations: ['.'], \nresolve: {\ntranslations($q, $translate, asyncLoader) { const imports = [ import(`/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/translations/Messages_${$translate.use()}.xml`)\n                    .catch(() => import(`/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/translations/Messages_${$translate.fallbackLanguage()}.xml`))\n                    .then(i => i.default),\n                ]; imports.forEach(p => asyncLoader.addTranslations(p)); return $q.all(imports).then(() => $translate.refresh()); }},\n    });\n});\n"]}