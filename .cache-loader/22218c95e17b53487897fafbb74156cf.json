{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/logs-options.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/logs-options.service.js","mtime":1539717142136},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsOptionsService =\n/*#__PURE__*/\nfunction () {\n  LogsOptionsService.$inject = [\"$translate\", \"$window\", \"ControllerHelper\", \"LogsHelperService\", \"OvhApiOrderCartServiceOption\", \"ServiceHelper\", \"OvhApiDbaas\", \"LogsOfferService\", \"LogsConstants\"];\n\n  function LogsOptionsService($translate, $window, ControllerHelper, LogsHelperService, OvhApiOrderCartServiceOption, ServiceHelper, OvhApiDbaas, LogsOfferService, LogsConstants) {\n    _classCallCheck(this, LogsOptionsService);\n\n    this.ControllerHelper = ControllerHelper;\n    this.OvhApiOrderCartServiceOption = OvhApiOrderCartServiceOption;\n    this.LogsHelperService = LogsHelperService;\n    this.ServiceHelper = ServiceHelper;\n    this.ControllerHelper = ControllerHelper;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.OvhApiDbaasLogs = OvhApiDbaas.Logs();\n    this.LogsOfferService = LogsOfferService;\n    this.LogsConstants = LogsConstants;\n    this.OptionsApiLexiService = OvhApiDbaas.Logs().Option().v6();\n  }\n  /**\n   * returns the current offer after transformation\n   *\n   * @param {any} serviceName\n   * @returns the current offer\n   * @memberof LogsOptionsService\n   */\n\n\n  _createClass(LogsOptionsService, [{\n    key: \"getOffer\",\n    value: function getOffer(serviceName) {\n      var _this = this;\n\n      return this.LogsOfferService.getOffer(serviceName).then(function (offer) {\n        return _this.transformOffer(offer);\n      });\n    }\n    /**\n     * returns the list of options available for selection\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to an array of options objects\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions(serviceName) {\n      var _this2 = this;\n\n      return this.OvhApiOrderCartServiceOption.v6().get({\n        productName: this.LogsConstants.productName,\n        serviceName: serviceName\n      }).$promise.then(function (response) {\n        _.each(response, function (option) {\n          return _this2.transformOption(option);\n        });\n\n        return response.sort(function (optionA, optionB) {\n          return optionA.type === optionB.type ? _this2.ControllerHelper.constructor.naturalCompare(optionA.detail, optionB.detail) : _this2.ControllerHelper.constructor.naturalCompare(optionA.type, optionB.type);\n        });\n      }).catch(function (err) {\n        return _this2.LogsHelperService.handleError('logs_options_options_loading_error', err, {});\n      });\n    }\n    /**\n     * returns the list of options that have to be ordered (quantity > 0)\n     *\n     * @param {any} serviceName\n     * @returns the list of options to be ordered\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"getOrderConfiguration\",\n\n    /**\n     * returns the options configuration using which the order url can be constructed\n     *\n     * @param {any} options\n     * @param {any} serviceName\n     * @returns returns the options configuration to be used to construct the order url\n     * @memberof LogsOptionsService\n     */\n    value: function getOrderConfiguration(options, serviceName) {\n      var _this3 = this;\n\n      var optionsToOrder = LogsOptionsService.getOptionsToOrder(options);\n      return _.map(optionsToOrder, function (option) {\n        return _this3.transformOptionForOrder(option, serviceName);\n      });\n    }\n  }, {\n    key: \"transformManagedOptions\",\n    value: function transformManagedOptions(option) {\n      _.set(option, 'type', this.$translate.instant(\"\".concat(option.reference, \"-type\")));\n\n      _.set(option, 'detail', this.$translate.instant(\"\".concat(option.reference, \"-detail\")));\n\n      _.set(option, 'linked_items', option.curNbAlias + option.curNbDashboard + option.curNbIndex + option.curNbRole + option.curNbInput + option.curNbStream);\n\n      return option;\n    }\n  }, {\n    key: \"getManagedOptions\",\n    value: function getManagedOptions(serviceName) {\n      var _this4 = this;\n\n      return this.getSubscribedOptions(serviceName).then(function (response) {\n        return _.map(response.options, function (option) {\n          return _this4.transformManagedOptions(option);\n        });\n      }).catch(this.ServiceHelper.errorHandler('logs_options_manage_get_error'));\n    }\n    /**\n     * makes API call to get the list of options that have been subscribed in the service\n     *\n     * @param {any} serviceName\n     * @returns promise that resolves with the array of options which have been subscribed\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"getSubscribedOptions\",\n    value: function getSubscribedOptions(serviceName) {\n      var _this5 = this;\n\n      return this.OvhApiDbaasLogs.Accounting().Aapi().me({\n        serviceName: serviceName\n      }).$promise.catch(function (err) {\n        return _this5.LogsHelperService.handleError('logs_options_current_options_loading_error', err, {});\n      });\n    }\n    /**\n     * returns all subscribed options with reference \"logs-stream\".\n     *\n     * @param {any} serviceName\n     * @returns array of all subscribed option objects belonging to streams\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"getSubscribedOptionsByType\",\n    value: function getSubscribedOptionsByType(serviceName, optionType) {\n      var _this6 = this;\n\n      return this.getSubscribedOptions(serviceName).then(function (response) {\n        switch (optionType) {\n          case _this6.LogsConstants.STREAM_OPTION_REFERENCE:\n            return _this6.filterOptions(response.options, 'maxNbStream');\n\n          case _this6.LogsConstants.INDEX_OPTION_REFERENCE:\n            return _this6.filterOptions(response.options, 'maxNbIndex');\n\n          case _this6.LogsConstants.ALIAS_OPTION_REFERENCE:\n            return _this6.filterOptions(response.options, 'maxNbAlias');\n\n          case _this6.LogsConstants.INPUT_OPTION_REFERENCE:\n            return _this6.filterOptions(response.options, 'maxNbInput');\n\n          case _this6.LogsConstants.ROLE_OPTION_REFERENCE:\n            return _this6.filterOptions(response.options, 'maxNbRole');\n\n          case _this6.LogsConstants.DASHBOARD_OPTION_REFERENCE:\n            return _this6.filterOptions(response.options, 'maxNbDashboard');\n\n          default:\n            return response.options;\n        }\n      });\n    }\n    /**\n     * returns map of all subscribed options with their count.\n     *\n     * @param {any} serviceName\n     * @returns map of subscribed option with count\n     * @memberof LogsOptionsService\n     */\n\n    /* eslint-disable no-param-reassign */\n\n  }, {\n    key: \"getSubscribedOptionsMap\",\n    value: function getSubscribedOptionsMap(serviceName) {\n      var _this7 = this;\n\n      return this.getSubscribedOptions(serviceName).then(function (response) {\n        // Build a map of option vs no. of subscribed instances\n        var optionsCountMap = _.reduce(response.options, function (optionsMap, option) {\n          optionsMap[option.reference] = optionsMap[option.reference] ? optionsMap[option.reference] += 1 : 1;\n          return optionsMap;\n        }, {}); // Build a new data structure with the option information and the no.of instances subscribed\n\n\n        return _.map(_.keys(optionsCountMap), function (option) {\n          return _this7.transformSubscribedOption(option, optionsCountMap);\n        }).sort(function (optionA, optionB) {\n          return optionA.type === optionB.type ? _this7.ControllerHelper.constructor.naturalCompare(optionA.detail, optionB.detail) : _this7.ControllerHelper.constructor.naturalCompare(optionA.type, optionB.type);\n        });\n      });\n    }\n    /**\n     * returns map of all subscribed options with their count, grouped by their type.\n     *\n     * @param {any} serviceName\n     * @returns map of subscribed options with count\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"getSubscribedOptionsMapGrouped\",\n    value: function getSubscribedOptionsMapGrouped(serviceName) {\n      var _this8 = this;\n\n      return this.getSubscribedOptionsMap(serviceName).then(function (options) {\n        var groupedOptionsMap = options.reduce(function (groupedOptions, option) {\n          groupedOptions[option.type] = groupedOptions[option.type] ? groupedOptions[option.type] : {\n            type: option.type,\n            quantity: 0,\n            details: []\n          };\n          groupedOptions[option.type].quantity += option.quantity * _this8.LogsConstants.PRODUCT_COUNT[option.id];\n          groupedOptions[option.type].details.push(option);\n          return groupedOptions;\n        }, {});\n        return Object.keys(groupedOptionsMap).map(function (groupedOptionsName) {\n          return groupedOptionsMap[groupedOptionsName];\n        }).sort(function (optionA, optionB) {\n          return _this8.ControllerHelper.constructor.naturalCompare(optionA.type, optionB.type);\n        });\n      });\n    }\n    /* eslint-enable no-param-reassign */\n\n    /**\n     * returns the transformed option, which has the count for each of the options.\n     * Meant to be used for the subscribed options\n     *\n     * @param {any} option\n     * @param {any} optionsCountMap\n     * @returns the transformed option\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"transformSubscribedOption\",\n    value: function transformSubscribedOption(option, optionsCountMap) {\n      var optionConfig = {};\n      optionConfig.id = option;\n      optionConfig.type = this.$translate.instant(\"\".concat(option, \"-type\"));\n      optionConfig.detail = this.$translate.instant(\"\".concat(option, \"-detail\"));\n      optionConfig.quantity = optionsCountMap[option];\n      return optionConfig;\n    }\n  }, {\n    key: \"filterOptions\",\n    value: function filterOptions(options, max) {\n      var _this9 = this;\n\n      return options.filter(function (option) {\n        return option[max] > 0;\n      }).map(function (option) {\n        _.set(option, 'type', _this9.$translate.instant(\"\".concat(option.reference, \"-type\")));\n\n        _.set(option, 'detail', _this9.$translate.instant(\"\".concat(option.reference, \"-detail\")));\n\n        return option;\n      });\n    }\n    /**\n     * returns the transformed offer\n     *\n     * @param {any} offer\n     * @returns the transformed offer\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"transformOffer\",\n    value: function transformOffer(offer) {\n      var offerPrefix = this.$translate.instant('log_options_pro_offer');\n      var offerName = this.$translate.instant(offer.reference);\n      var streams = this.$translate.instant('logs_offer_streams');\n      var dashboards = this.$translate.instant('logs_offer_tables');\n      var inputs = this.$translate.instant('logs_offer_collection_tools');\n\n      _.set(offer, 'name', \"\".concat(offerPrefix, \" \").concat(offerName));\n\n      _.set(offer, 'streams', \"\".concat(offer.maxNbStream, \" \").concat(streams));\n\n      _.set(offer, 'dashboards', \"\".concat(offer.maxNbDashboard, \" \").concat(dashboards));\n\n      _.set(offer, 'inputs', \"\".concat(offer.maxNbInput, \" \").concat(inputs));\n\n      return offer;\n    }\n    /**\n     * returns the transformed option. Meant to be used for the available options\n     *\n     * @param {any} option\n     * @returns the transformed option\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"transformOption\",\n    value: function transformOption(option) {\n      _.set(option, 'quantity', 0);\n\n      _.set(option, 'price', option.prices[0].price.value);\n\n      _.set(option, 'priceText', option.prices[0].price.text);\n\n      _.set(option, 'type', this.$translate.instant(\"\".concat(option.planCode, \"-type\")));\n\n      _.set(option, 'detail', this.$translate.instant(\"\".concat(option.planCode, \"-detail\")));\n    }\n    /**\n     * returns the transformed option. Meant to be used to construct the order URL\n     *\n     * @param {any} option\n     * @returns the transformed option\n     * @memberof LogsOptionsService\n     */\n\n  }, {\n    key: \"transformOptionForOrder\",\n    value: function transformOptionForOrder(option, serviceName) {\n      return {\n        planCode: option.planCode,\n        quantity: option.quantity,\n        serviceName: serviceName,\n        productId: this.LogsConstants.productName\n      };\n    }\n  }, {\n    key: \"showReactivateInfo\",\n    value: function showReactivateInfo(option) {\n      this.ControllerHelper.modal.showWarningModal({\n        title: this.$translate.instant('logs_options_modal_reactivate_title'),\n        message: this.$translate.instant('logs_options_modal_reactivate_description', {\n          optionType: \"\".concat(option.type, \", \").concat(option.detail)\n        })\n      });\n    }\n  }, {\n    key: \"terminateModal\",\n    value: function terminateModal(option) {\n      return this.ControllerHelper.modal.showDeleteModal({\n        submitButtonText: this.$translate.instant('logs_options_action_disable'),\n        titleText: this.$translate.instant('logs_options_manage_terminate_title'),\n        textHtml: this.$translate.instant('logs_options_manage_terminate_question', {\n          optionType: \"\".concat(option.type, \", \").concat(option.detail)\n        })\n      });\n    }\n  }, {\n    key: \"terminateOption\",\n    value: function terminateOption(serviceName, option) {\n      var _this10 = this;\n\n      return this.OptionsApiLexiService.terminate({\n        serviceName: serviceName,\n        optionId: option.optionId\n      }).$promise.then(function (operation) {\n        _this10.resetAllCache();\n\n        return _this10.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_options_delete_success', {\n          optionType: \"\".concat(option.type, \", \").concat(option.detail)\n        });\n      }).catch(function (err) {\n        return _this10.LogsHelperService.handleError('logs_options_delete_error', err, {\n          optionType: \"\".concat(option.type, \", \").concat(option.detail)\n        });\n      });\n    }\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.OvhApiDbaasLogs.Accounting().Aapi().resetAllCache();\n      this.OptionsApiLexiService.resetAllCache();\n    }\n  }], [{\n    key: \"getOptionsToOrder\",\n    value: function getOptionsToOrder(options) {\n      return _.filter(options, function (option) {\n        return option.quantity > 0;\n      });\n    }\n  }]);\n\n  return LogsOptionsService;\n}();\n\nangular.module('managerApp').service('LogsOptionsService', LogsOptionsService);",null]}