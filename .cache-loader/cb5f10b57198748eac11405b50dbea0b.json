{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/cloud-project-compute-loadbalancer.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/cloud-project-compute-loadbalancer.service.js","mtime":1539717142027},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeLoadbalancerService {\n  constructor($q, OvhApiCloudProjectIplb, OvhApiIpLoadBalancing, OvhApiCloudProject) {\n    this.$q = $q;\n    this.OvhApiCloudProjectIplb = OvhApiCloudProjectIplb;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n  }\n\n  getLoadbalancer(id) {\n    return this.OvhApiIpLoadBalancing.v6().get({ serviceName: id })\n      .$promise.then((loadbalancer) => {\n        if (loadbalancer.state !== 'ok') {\n          return loadbalancer;\n        }\n        // Find the frontend http 80 if exists as this page only display a view for HTTP.\n        return this.OvhApiIpLoadBalancing.Frontend().Http().v6().query({\n          serviceName: id,\n          port: 80,\n        }).$promise.then(frontendIds => (frontendIds.length\n          && this\n            .OvhApiIpLoadBalancing\n            .Frontend()\n            .Http()\n            .v6()\n            .get({\n              serviceName: id,\n              frontendId: frontendIds[0],\n            }).$promise) || loadbalancer).then((frontend) => {\n          if (frontend.frontendId) {\n            _.set(loadbalancer, 'frontend', frontend);\n          }\n          return (frontend.frontendId\n            && frontend.defaultFarmId\n            && this.OvhApiIpLoadBalancing.Farm().Http().v6().get({\n              serviceName: id,\n              farmId: frontend.defaultFarmId,\n            }).$promise) || loadbalancer;\n        }).then((farm) => {\n          if (farm.farmId) {\n            _.set(loadbalancer, 'farm', farm);\n          }\n          return loadbalancer;\n        }).catch(() => {\n          _.set(loadbalancer, 'state', 'broken');\n          return loadbalancer;\n        });\n      })\n      .then((loadbalancer) => {\n        if (loadbalancer.state !== 'ok') {\n          _.set(loadbalancer, 'status', 'unavailable');\n        } else if (loadbalancer.frontend && loadbalancer.farm) {\n          _.set(loadbalancer, 'status', 'deployed');\n        } else if (!loadbalancer.frontend && !loadbalancer.farm) {\n          _.set(loadbalancer, 'status', 'available');\n        } else if (loadbalancer.state !== 'ok') {\n          _.set(loadbalancer, 'status', 'unavailable');\n        } else {\n          _.set(loadbalancer, 'status', 'custom');\n        }\n        return loadbalancer;\n      });\n  }\n\n  getLoadbalancersImported(serviceName) {\n    return this.OvhApiCloudProjectIplb.v6().query({\n      serviceName,\n    }).$promise.then(ids => this.$q.all(\n      _.map(ids, id => this.OvhApiCloudProjectIplb.v6().get({\n        serviceName,\n        id,\n      }).$promise),\n    )).then((loadbalancers) => {\n      const result = {};\n      _.forEach(loadbalancers, (lb) => {\n        result[lb.iplb] = lb;\n      });\n      return result;\n    });\n  }\n\n  // Get servers of the default farm of the frontend\n  // loadbalancer must be generated from function this.getLoadbalancer(id)\n  getAttachedServers(loadbalancer) {\n    if (!loadbalancer.farm) {\n      return Promise.resolve([]);\n    }\n    return this.OvhApiIpLoadBalancing.Farm().Http().Server().v6()\n      .query({\n        serviceName: loadbalancer.serviceName,\n        farmId: loadbalancer.farm.farmId,\n      }).$promise\n      .then(serverIds => this.$q.all(\n        _.map(serverIds, serverId => this.OvhApiIpLoadBalancing.Farm().Http().Server().v6()\n          .get({\n            serviceName: loadbalancer.serviceName,\n            farmId: loadbalancer.farm.farmId,\n            serverId,\n          }).$promise),\n      ));\n  }\n\n  getServerList({ serviceName, loadbalancer }) {\n    return this.$q.all({\n      cloudServers: this.OvhApiCloudProject.Instance().v6().query({ serviceName }).$promise,\n      attachedServers: this.getAttachedServers(loadbalancer),\n    }).then(({ cloudServers, attachedServers }) => {\n      const activeServers = {};\n      _.forEach(attachedServers, (attachedServer) => {\n        if (attachedServer.status === 'active') {\n          activeServers[attachedServer.address] = attachedServer;\n        }\n      });\n\n      // Generate array of object type as {ipv4, name}\n      // Concat all public ip of public cloud and of the loadbalancer.\n      const servers = _.uniq(\n        _.union(\n          _.flatten(_.map(cloudServers, server => _.map(_.filter(server.ipAddresses, { type: 'public', version: 4 }), adresse => ({ label: server.name, ip: adresse.ip })))),\n          _.map(this.attachedServers, server => ({\n            label: server.displayName,\n            ip: server.address,\n          })),\n        ),\n        'ip',\n      );\n      return { servers, attachedServers: activeServers };\n    }).catch((err) => {\n      this.CloudMessage.error([this.$translate.instant('cpc_server_error'), (err.data && err.data.message) || ''].join(' '));\n    });\n  }\n}\n\nangular.module('managerApp').service('CloudProjectComputeLoadbalancerService', CloudProjectComputeLoadbalancerService);\n"]}