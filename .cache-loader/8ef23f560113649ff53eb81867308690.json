{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/tabs/tabs.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/tabs/tabs.service.js","mtime":1539717142280},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar TabsService =\n/*#__PURE__*/\nfunction () {\n  TabsService.$inject = [\"$transitions\", \"$state\"];\n\n  function TabsService($transitions, $state) {\n    var _this = this;\n\n    _classCallCheck(this, TabsService);\n\n    this.$state = $state;\n    this.registeredTabs = [];\n    this.activeTab = undefined;\n    $transitions.onSuccess({}, function () {\n      _this.refreshActiveTab();\n    });\n  }\n\n  _createClass(TabsService, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.registeredTabs = [];\n    }\n  }, {\n    key: \"getRegisteredTabs\",\n    value: function getRegisteredTabs() {\n      return this.registeredTabs;\n    }\n  }, {\n    key: \"registerTab\",\n    value: function registerTab(tab) {\n      var existingTab = _.find(this.registeredTabs, function (existing) {\n        return tab.state === existing.state && tab.text === existing.text;\n      });\n\n      if (existingTab) {\n        this.constructor.expandTab(tab); // ugly.  This should be event driven.\n\n        tab.updateActive(existingTab.active, existingTab.isActivating);\n        this.registeredTabs[_.indexOf(this.registeredTabs, existingTab)] = tab;\n      } else {\n        this.constructor.expandTab(tab);\n        this.registeredTabs.push(tab);\n        this.refreshActiveTab();\n      }\n    }\n  }, {\n    key: \"refreshActiveTab\",\n    value: function refreshActiveTab() {\n      var _this2 = this;\n\n      var previousActiveTab = _.find(this.registeredTabs, function (tab) {\n        return tab.active;\n      }); // ActiveTab is determined in this order =>\n      //  1- We check if the current state fit with one of the tabs' state.\n      //  (Direct state reference or it's children).  We activate the corresponding tab.\n      //  2- We are in the presence of an orphan state (no tab corresponds to the state).\n      //  We try to find the current active and make sure is is active.\n      //  3- If, however, no tabs are active, we activate the first tab.\n\n\n      var newActiveTab = _.find(this.registeredTabs, function (tab) {\n        return tab.state && _this2.$state.includes(tab.state);\n      }) || previousActiveTab || this.registeredTabs[0];\n\n      if (newActiveTab && previousActiveTab !== newActiveTab) {\n        if (previousActiveTab) {\n          previousActiveTab.updateActive(false, false);\n        }\n\n        newActiveTab.updateActive(true, true);\n      } // We make sure to keep the same activeTab instance.\n      // This way, we can watch value change to know when active tab changed.\n\n\n      if (newActiveTab && !this.activeTab) {\n        this.activeTab = {};\n      }\n\n      _.extend(this.activeTab, newActiveTab);\n    }\n  }, {\n    key: \"getActiveTab\",\n    value: function getActiveTab() {\n      if (this.registeredTabs.length) {\n        return this.activeTab;\n      }\n\n      return undefined;\n    }\n  }], [{\n    key: \"expandTab\",\n    value: function expandTab(tab) {\n      _.set(tab, 'active', tab.active ? tab.active : false);\n\n      _.set(tab, 'isActivating', tab.isActivating ? tab.isActivating : false);\n\n      _.set(tab, 'sref', \"\".concat(tab.state, \"(\").concat(JSON.stringify(tab.stateParams), \")\"));\n    }\n  }]);\n\n  return TabsService;\n}();\n\nangular.module('managerApp').service('TabsService', TabsService);",null]}