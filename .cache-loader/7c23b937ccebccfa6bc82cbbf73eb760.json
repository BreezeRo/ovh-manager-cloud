{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/veeam/veeam.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/veeam/veeam.service.js","mtime":1539717142285},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var taskMessages = {\n    updateRepositoryQuota: 'veeam_storage_update_quota_',\n    addBackupRepositoryToCloudTenant: 'veeam_add_repository_'\n  };\n\n  var VeeamService =\n  /*#__PURE__*/\n  function () {\n    VeeamService.$inject = [\"$interval\", \"$q\", \"$timeout\", \"$translate\", \"$filter\", \"OvhApiVeeam\", \"RegionService\"];\n\n    function VeeamService($interval, $q, $timeout, $translate, $filter, OvhApiVeeam, RegionService) {\n      var _this = this;\n\n      _classCallCheck(this, VeeamService);\n\n      this.$interval = $interval;\n      this.$q = $q;\n      this.$timeout = $timeout;\n      this.$translate = $translate;\n      this.$filter = $filter;\n      this.veeam = OvhApiVeeam.v6();\n      this.RegionService = RegionService;\n      this.unitOfWork = {};\n\n      this.unitOfWork.init = function () {\n        _this.unitOfWork.messages = [];\n        _this.unitOfWork.tasks = [];\n        _this.unitOfWork.doneTasks = [];\n        _this.unitOfWork.errorTasks = [];\n\n        _this.startPolling();\n      };\n\n      this.pollingDeferred = {};\n    }\n\n    _createClass(VeeamService, [{\n      key: \"getConfigurationInfos\",\n      value: function getConfigurationInfos(serviceName) {\n        var _this2 = this;\n\n        return this.$q.all({\n          detail: this.veeam.getDetails({\n            serviceName: serviceName\n          }).$promise,\n          inventoryNames: this.veeam.getInventories({\n            serviceName: serviceName\n          }).$promise\n        }).then(function (response) {\n          return _this2.acceptResponse(_this2.transformConfigurationInfos(response));\n        }).catch(function (response) {\n          return _this2.rejectResponse(response, _this2.$translate.instant('veeam_infos_configuration_load_error'));\n        });\n      }\n    }, {\n      key: \"transformConfigurationInfos\",\n      value: function transformConfigurationInfos(infos) {\n        _.set(infos, 'detail.location', this.RegionService.getRegion(infos.detail.location));\n\n        _.set(infos, 'detail.backupCount', infos.inventoryNames.length);\n\n        return infos.detail;\n      }\n    }, {\n      key: \"getStorages\",\n      value: function getStorages(serviceName) {\n        var _this3 = this;\n\n        return this.veeam.getInventories({\n          serviceName: serviceName\n        }).$promise.then(function (storages) {\n          var storagesPromises = storages.map(function (storage) {\n            return _this3.getStorageDetails(serviceName, storage);\n          });\n          return _this3.$q.all(storagesPromises);\n        }).then(function (response) {\n          return _this3.acceptResponse(response);\n        }).catch(function (response) {\n          return _this3.rejectResponse(response.data, _this3.$translate.instant('veeam_storage_list_load_error'));\n        });\n      }\n    }, {\n      key: \"getStorageDetails\",\n      value: function getStorageDetails(serviceName, inventoryName) {\n        return this.veeam.getInventory({\n          serviceName: serviceName,\n          inventoryName: inventoryName\n        }).$promise;\n      }\n    }, {\n      key: \"getSubscriptionInfos\",\n      value: function getSubscriptionInfos(serviceName) {\n        var _this4 = this;\n\n        return this.$q.all({\n          details: this.veeam.getDetails({\n            serviceName: serviceName\n          }).$promise,\n          serviceInfo: this.veeam.getServiceInfos({\n            serviceName: serviceName\n          }).$promise\n        }).then(function (response) {\n          return _this4.acceptResponse(_this4.transformSubscriptionInfos(response));\n        }).catch(function (response) {\n          return _this4.rejectResponse(response.data, _this4.$translate.instant('veeam_infos_subscription_load_error'));\n        });\n      }\n    }, {\n      key: \"transformSubscriptionInfos\",\n      value: function transformSubscriptionInfos(data) {\n        var renewalType = data.serviceInfo.renew.automatic === true ? 'automatic' : 'manual';\n\n        _.set(data, 'serviceInfo.offer', data.details.productOffer);\n\n        _.set(data, 'serviceInfo.renewalType', renewalType);\n\n        _.set(data, 'serviceInfo.renewalTypeDescription', this.$translate.instant(\"veeam_infos_subscription_renew_\".concat(renewalType, \"_description\")));\n\n        _.set(data, 'serviceInfo.isOnTrial', data.serviceInfo.offer === 'demo');\n\n        _.set(data, 'serviceInfo.subscriptionTimeRemaining', moment(data.serviceInfo.expiration).diff(moment(), 'days'));\n\n        return data.serviceInfo;\n      }\n    }, {\n      key: \"getOrderableOffers\",\n      value: function getOrderableOffers(serviceName) {\n        var _this5 = this;\n\n        return this.veeam.getOrderableOffers({\n          serviceName: serviceName\n        }).$promise.then(function (response) {\n          return _this5.acceptResponse(response);\n        }).catch(function (response) {\n          return _this5.rejectResponse(response, _this5.$translate.instant('veeam_orderable_offer_load_error'));\n        });\n      }\n    }, {\n      key: \"getOrderableOfferPrices\",\n      value: function getOrderableOfferPrices(serviceName) {\n        var _this6 = this;\n\n        return this.veeam.getOrderableOffers({\n          serviceName: serviceName\n        }).$promise.then(function (offers) {\n          var promises = _.map(offers, function (offer) {\n            return _this6.getUpgradeOptionDurations(serviceName, offer).then(function (durations) {\n              return _.map(durations.data, function (duration) {\n                return {\n                  offer: offer,\n                  duration: duration\n                };\n              });\n            });\n          });\n\n          return _this6.$q.all(promises).then(function (durations) {\n            return _.flatten(durations);\n          });\n        }).then(function (durations) {\n          var promises = _.map(durations, function (duration) {\n            return _this6.getUpgradeOptionPrices(serviceName, duration.offer, duration.duration).then(function (price) {\n              return {\n                offer: duration.offer,\n                duration: duration.duration,\n                price: price.data\n              };\n            });\n          });\n\n          return _this6.$q.all(promises);\n        }).then(function (response) {\n          return _this6.acceptResponse(response);\n        }).catch(function (response) {\n          return _this6.rejectResponse(response, _this6.$translate.instant('veeam_orderable_offer_load_error'));\n        });\n      }\n    }, {\n      key: \"getUpgradeOptionDurations\",\n      value: function getUpgradeOptionDurations(serviceName, offer) {\n        var _this7 = this;\n\n        return this.veeam.getOrderUpgradeDurations({\n          serviceName: serviceName,\n          offer: offer\n        }).$promise.then(function (response) {\n          return _this7.acceptResponse(response);\n        }).catch(function (response) {\n          return _this7.rejectResponse(response);\n        });\n      }\n    }, {\n      key: \"getUpgradeOptionPrices\",\n      value: function getUpgradeOptionPrices(serviceName, offer, duration) {\n        var _this8 = this;\n\n        return this.veeam.getOrderUpgradeDurationsPrices({\n          serviceName: serviceName,\n          duration: duration,\n          offer: offer\n        }).$promise.then(function (response) {\n          return _this8.acceptResponse(response);\n        }).catch(function (response) {\n          return _this8.rejectResponse(response);\n        });\n      }\n    }, {\n      key: \"updateOffer\",\n      value: function updateOffer(serviceName, offer, duration) {\n        var _this9 = this;\n\n        return this.veeam.createUpgradeOrder({\n          serviceName: serviceName,\n          duration: duration\n        }, {\n          offer: offer\n        }).$promise.then(function (response) {\n          return _this9.acceptResponse(response, _this9.$translate.instant('veeam_update_offer_post_success', {\n            orderId: response.orderId,\n            orderUrl: response.url\n          }));\n        }).catch(function (response) {\n          return _this9.rejectResponse(response, _this9.$translate.instant('veeam_update_offer_post_error'));\n        });\n      }\n    }, {\n      key: \"addBackupRepository\",\n      value: function addBackupRepository(serviceName) {\n        var _this10 = this;\n\n        return this.veeam.addInventory({\n          serviceName: serviceName\n        }, {}).$promise.then(function (response) {\n          return _this10.acceptResponse(response, _this10.$translate.instant('veeam_add_repository_success'));\n        }).catch(function (response) {\n          return _this10.rejectResponse(response, _this10.$translate.instant('veeam_add_repository_error'));\n        });\n      }\n    }, {\n      key: \"updateRepositoryQuota\",\n      value: function updateRepositoryQuota(serviceName, inventoryName, newQuota) {\n        var _this11 = this;\n\n        return this.veeam.upgradeQuota({\n          serviceName: serviceName,\n          inventoryName: inventoryName\n        }, {\n          newQuota: newQuota\n        }).$promise.then(function (response) {\n          return _this11.acceptResponse(response, _this11.$translate.instant('veeam_storage_update_quota_success'));\n        }).catch(function (response) {\n          return _this11.rejectResponse(response, _this11.$translate.instant('veeam_storage_update_quota_error'));\n        });\n      }\n    }, {\n      key: \"getCapabilities\",\n      value: function getCapabilities(serviceName) {\n        return this.veeam.capabilities({\n          serviceName: serviceName\n        }).$promise;\n      }\n    }, {\n      key: \"getActions\",\n      value: function getActions(serviceName) {\n        var _this12 = this;\n\n        return this.$q.all({\n          storages: this.getStorages(serviceName),\n          capabilities: this.getCapabilities(serviceName),\n          subcription: this.getSubscriptionInfos(serviceName)\n        }).then(function (results) {\n          var storages = results.storages.data;\n          var capabilities = results.capabilities;\n          var subscription = results.subcription.data;\n          var addStorage = {\n            available: true\n          };\n\n          if (!capabilities.multiStorages) {\n            addStorage.available = false;\n            addStorage.reason = _this12.$translate.instant('veeam_action_add_storage_unavailable_offer', {\n              offer: subscription.offer\n            });\n          } else if (storages.length >= capabilities.maxStoragesCount) {\n            addStorage.available = false;\n            addStorage.reason = _this12.$translate.instant('veeam_action_add_storage_unavailable_storage_number');\n          } else if (_this12.calculateUsage(storages) < capabilities.minimumUsage) {\n            addStorage.available = false;\n            addStorage.reason = _this12.$translate.instant('veeam_action_add_storage_unavailable_usage_percentage', {\n              usagePercentage: capabilities.minimumUsage\n            });\n          }\n\n          return _this12.acceptResponse({\n            addStorage: addStorage,\n            manageBilling: {\n              available: true\n            },\n            upgradeOffer: {\n              available: subscription.isOnTrial,\n              reason: !subscription.isOnTrial ? _this12.$translate.instant('veeam_action_upgrade_offer_no_upgrade', {\n                offer: subscription.offer\n              }) : ''\n            }\n          });\n        });\n      }\n    }, {\n      key: \"calculateUsage\",\n      value: function calculateUsage(storages) {\n        var _this13 = this;\n\n        var usage = _.chain(storages).map(function (storage) {\n          if (storage.quotaUsed && storage.quotaUsed.value && storage.quotaUsed.unit) {\n            return _this13.$filter('bytes')(storage.quotaUsed.value, 0, false, storage.quotaUsed.unit, true);\n          }\n\n          return 0;\n        }).sum().value();\n\n        var available = _.chain(storages).map(function (storage) {\n          return _this13.$filter('bytes')(storage.quota.value, 0, false, storage.quota.unit, true);\n        }).sum().value();\n\n        return 100 * usage / available;\n      }\n    }, {\n      key: \"getTasks\",\n      value: function getTasks(serviceName, options) {\n        var _this14 = this;\n\n        return this.veeam.tasks(Object.assign({\n          serviceName: serviceName\n        }, options)).$promise.then(function (tasks) {\n          var promises = _.map(tasks, function (task) {\n            return _this14.veeam.task({\n              serviceName: serviceName,\n              taskId: task\n            }).$promise;\n          });\n\n          return _this14.$q.all(promises);\n        });\n      }\n    }, {\n      key: \"getTask\",\n      value: function getTask(serviceName, taskId) {\n        return this.veeam.task({\n          serviceName: serviceName,\n          taskId: taskId\n        }).$promise;\n      }\n    }, {\n      key: \"startPolling\",\n      value: function startPolling(serviceName, task) {\n        var _this15 = this;\n\n        var poll = function poll() {\n          _this15.poller = _this15.$timeout();\n\n          if (_this15.isPolling) {\n            _this15.poller = _this15.$timeout(poll, 5000);\n            return null;\n          }\n\n          _this15.isPolling = true;\n          return _this15.$q.all([_this15.getTasks(serviceName, {\n            state: 'doing'\n          }), _this15.getTasks(serviceName, {\n            state: 'todo'\n          })]).then(function (result) {\n            return _.flatten(result);\n          }).then(function (tasks) {\n            _this15.checkTasks(serviceName, tasks);\n          }).catch(function () {\n            _this15.stopPolling(); // TODO: Post message to notify this error.\n\n          }).finally(function () {\n            _this15.isPolling = false;\n\n            if (_this15.unitOfWork.tasks.length) {\n              _this15.poller = _this15.$timeout(poll, 5000);\n            }\n          });\n        };\n\n        if (!this.poller) {\n          this.$timeout(poll, 0);\n        }\n\n        if (task) {\n          // Add this new task to pending tasks\n          this.unitOfWork.tasks.push(task);\n          this.pollingDeferred[task.taskId] = this.$q.defer();\n          return this.pollingDeferred[task.taskId].promise;\n        }\n\n        return this.$q.resolve();\n      }\n    }, {\n      key: \"stopPolling\",\n      value: function stopPolling() {\n        if (this.poller) {\n          this.$timeout.cancel(this.poller);\n          this.poller = undefined;\n          this.pollingDeferred = [];\n        }\n      }\n    }, {\n      key: \"getPendingTasksMessages\",\n      value: function getPendingTasksMessages() {\n        var _this16 = this;\n\n        var messagesByTaskName = _.groupBy(_.uniq(this.unitOfWork.tasks, 'taskId'), 'name');\n\n        messagesByTaskName = _.forEach(messagesByTaskName, function (task, taskName) {\n          var taskMessage = taskMessages[taskName]; // We only watch some tasks.\n\n          if (taskMessage) {\n            messagesByTaskName[taskName] = {\n              message: _this16.$translate.instant(\"\".concat(taskMessage, \"pending\")),\n              task: task\n            };\n          }\n        });\n        return messagesByTaskName;\n      }\n    }, {\n      key: \"checkTasks\",\n      value: function checkTasks(serviceName, tasks) {\n        var _this17 = this;\n\n        var oldTasksIds = _.map(this.unitOfWork.tasks, 'taskId');\n\n        var tasksIds = _.map(tasks, 'taskId');\n\n        var completedTasksIds = _.difference(oldTasksIds, tasksIds);\n\n        if (completedTasksIds.length) {\n          var completedTasks = this.unitOfWork.tasks.filter(function (task) {\n            return completedTasksIds.indexOf(task.taskId) >= 0;\n          });\n          this.$q.all(completedTasks.map(function (task) {\n            var deferred = _this17.pollingDeferred[task.taskId];\n            return _this17.getTask(serviceName, task.taskId).then(function (completedTask) {\n              if (completedTask.state === 'done') {\n                _this17.unitOfWork.doneTasks.push(completedTask);\n\n                if (deferred) {\n                  deferred.resolve(completedTask);\n\n                  _this17.unitOfWork.messages.push({\n                    text: _this17.$translate.instant(\"\".concat(taskMessages[task.name], \"success\")),\n                    type: 'success'\n                  });\n                }\n              } else if (completedTask.state === 'todo' || completedTask.state === 'doing') {\n                // Task is finally not done...\n                tasks.push(completedTask);\n              } else {\n                _this17.unitOfWork.errorTasks.push(completedTask);\n\n                if (deferred) {\n                  deferred.reject(completedTask);\n\n                  _this17.unitOfWork.messages.push({\n                    text: _this17.$translate.instant(\"\".concat(taskMessages[task.name], \"error\")),\n                    type: 'error'\n                  });\n                }\n              }\n            });\n          })).then(function () {\n            _this17.unitOfWork.tasks = _.filter(tasks, function (task) {\n              return _.indexOf(_.keys(taskMessages), task.name) >= 0;\n            });\n\n            if (!_this17.unitOfWork.tasks.length) {\n              _this17.stopPolling();\n            }\n          });\n        }\n      }\n    }, {\n      key: \"acceptResponse\",\n      value: function acceptResponse(data, message) {\n        return this.$q.resolve({\n          status: 'OK',\n          data: data,\n          message: message\n        });\n      }\n    }, {\n      key: \"rejectResponse\",\n      value: function rejectResponse(data, message) {\n        return this.$q.reject({\n          status: 'ERROR',\n          data: data,\n          message: message\n        });\n      }\n    }]);\n\n    return VeeamService;\n  }();\n\n  angular.module('managerApp').service('VeeamService', VeeamService);\n})();",null]}