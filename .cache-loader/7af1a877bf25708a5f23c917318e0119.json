{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/tabs/tabs.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/tabs/tabs.service.js","mtime":1539717142280},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class TabsService {\n  constructor($transitions, $state) {\n    this.$state = $state;\n\n    this.registeredTabs = [];\n    this.activeTab = undefined;\n\n    $transitions.onSuccess({}, () => {\n      this.refreshActiveTab();\n    });\n  }\n\n  $onInit() {\n    this.init();\n  }\n\n  init() {\n    this.registeredTabs = [];\n  }\n\n  getRegisteredTabs() {\n    return this.registeredTabs;\n  }\n\n  registerTab(tab) {\n    const existingTab = _.find(\n      this.registeredTabs,\n      existing => tab.state === existing.state && tab.text === existing.text,\n    );\n    if (existingTab) {\n      this.constructor.expandTab(tab);\n\n      // ugly.  This should be event driven.\n      tab.updateActive(existingTab.active, existingTab.isActivating);\n      this.registeredTabs[_.indexOf(this.registeredTabs, existingTab)] = tab;\n    } else {\n      this.constructor.expandTab(tab);\n      this.registeredTabs.push(tab);\n      this.refreshActiveTab();\n    }\n  }\n\n  static expandTab(tab) {\n    _.set(tab, 'active', tab.active ? tab.active : false);\n    _.set(tab, 'isActivating', tab.isActivating ? tab.isActivating : false);\n    _.set(tab, 'sref', `${tab.state}(${JSON.stringify(tab.stateParams)})`);\n  }\n\n  refreshActiveTab() {\n    const previousActiveTab = _.find(this.registeredTabs, tab => tab.active);\n\n    // ActiveTab is determined in this order =>\n    //  1- We check if the current state fit with one of the tabs' state.\n    //  (Direct state reference or it's children).  We activate the corresponding tab.\n    //  2- We are in the presence of an orphan state (no tab corresponds to the state).\n    //  We try to find the current active and make sure is is active.\n    //  3- If, however, no tabs are active, we activate the first tab.\n    const newActiveTab = _.find(\n      this.registeredTabs,\n      tab => tab.state && this.$state.includes(tab.state),\n    ) || previousActiveTab || this.registeredTabs[0];\n\n    if (newActiveTab && previousActiveTab !== newActiveTab) {\n      if (previousActiveTab) {\n        previousActiveTab.updateActive(false, false);\n      }\n\n      newActiveTab.updateActive(true, true);\n    }\n\n    // We make sure to keep the same activeTab instance.\n    // This way, we can watch value change to know when active tab changed.\n    if (newActiveTab && !this.activeTab) {\n      this.activeTab = {};\n    }\n\n    _.extend(this.activeTab, newActiveTab);\n  }\n\n  getActiveTab() {\n    if (this.registeredTabs.length) {\n      return this.activeTab;\n    }\n\n    return undefined;\n  }\n}\n\nangular.module('managerApp').service('TabsService', TabsService);\n"]}