{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack-edit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/vrack/iplb-vrack-edit.controller.js","mtime":1539717142225},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerVrackEditCtrl {\n  constructor($q, $stateParams, $translate, CloudMessage, CloudNavigation, ControllerHelper,\n    IpLoadBalancerServerFarmService, IpLoadBalancerVrackService) {\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.CloudNavigation = CloudNavigation;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerServerFarmService = IpLoadBalancerServerFarmService;\n    this.IpLoadBalancerVrackService = IpLoadBalancerVrackService;\n\n    this.serviceName = $stateParams.serviceName;\n    this.networkId = $stateParams.networkId;\n\n    this.initLoaders();\n    this.initModel();\n  }\n\n  $onInit() {\n    this.previousState = this.CloudNavigation.getPreviousState();\n    this.creationRules.load();\n    this.privateNetwork.load()\n      .then(() => {\n        if (_.keys(this.privateNetwork.data).length) {\n          _.forEach(_.keys(this.model), (key) => {\n            this.model[key].value = this.privateNetwork.data[key];\n          });\n        }\n\n        return this.privateNetworkFarms.load();\n      })\n      .then(() => {\n        if (!this.privateNetworkFarms.data.length) {\n          this.addFarm();\n          return;\n        }\n\n        _.forEach(this.privateNetworkFarms.data, (farm) => {\n          _.set(farm, 'displayName', farm.displayName || farm.farmId);\n        });\n        this.model.farmId.value = this.privateNetworkFarms.data;\n      });\n\n    this.farms.load()\n      .then(() => {\n        _.forEach(this.farms.data, (farm) => {\n          _.set(farm, 'displayName', farm.displayName || farm.farmId);\n        });\n      });\n  }\n\n  submit() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n\n    this.saving = true;\n    this.CloudMessage.flushChildMessage();\n    return (!this.editing() ? this.addNetwork() : this.editNetwork())\n      .then(() => this.previousState.go())\n      .finally(() => { this.saving = false; });\n  }\n\n  isLoading() {\n    return this.privateNetwork.loading || this.creationRules.loading;\n  }\n\n  editing() {\n    return this.networkId;\n  }\n\n  getAvailableFarm(forceValue) {\n    const filteredValue = _.filter(\n      this.farms.data,\n      farm => !_.includes(_.map(this.model.farmId.value, value => value.farmId), farm.farmId),\n    );\n    if (forceValue) {\n      filteredValue.push(_.find(this.farms.data, farm => farm.farmId === forceValue));\n    }\n    return filteredValue;\n  }\n\n  canAddFarm() {\n    const availableFarmCount = this.getAvailableFarm().length;\n    return availableFarmCount > 0 && this.model.farmId.value.length < this.farms.data.length;\n  }\n\n  addFarm() {\n    this.model.farmId.value.push({\n      farmId: null,\n      displayName: null,\n    });\n  }\n\n  removeFarm(index) {\n    this.model.farmId.value.splice(index, 1);\n  }\n\n  addNetwork() {\n    return this.IpLoadBalancerVrackService\n      .addPrivateNetwork(this.serviceName, this.getCleanModel());\n  }\n\n  editNetwork() {\n    return this.IpLoadBalancerVrackService\n      .editPrivateNetwork(this.serviceName, this.getCleanModel());\n  }\n\n  getCleanModel() {\n    const cleanModel = {};\n    _.forEach(_.keys(this.model), (key) => {\n      if (!this.model[key].disabled()) {\n        switch (key) {\n          case 'farmId':\n            cleanModel[key] = _.map(\n              _.filter(this.model[key].value, farm => farm.farmId),\n              farm => farm.farmId,\n            );\n            break;\n          default:\n            cleanModel[key] = this.model[key].value;\n        }\n      }\n    });\n\n    cleanModel.vrackNetworkId = this.networkId;\n    return cleanModel;\n  }\n\n  initLoaders() {\n    this.creationRules = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerVrackService\n        .getNetworkCreationRules(this.serviceName),\n    });\n\n    this.privateNetwork = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => (this.editing() ? this.IpLoadBalancerVrackService\n        .getPrivateNetwork(this.serviceName, this.networkId) : this.$q.when({})),\n    });\n\n    this.privateNetworkFarms = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => (this.editing() ? this.IpLoadBalancerVrackService\n        .getPrivateNetworkFarms(this.serviceName, this.networkId) : this.$q.when([])),\n    });\n\n    this.farms = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerServerFarmService.getServerFarms(this.serviceName),\n    });\n  }\n\n  initModel() {\n    this.model = {\n      displayName: {\n        id: 'displayName',\n        label: this.$translate.instant('iplb_vrack_private_network_add_edit_field_display_name_label'),\n        type: 'text',\n        value: undefined,\n        required: false,\n        minLength: 0,\n        maxLength: 100,\n        disabled: () => this.creationRules.data.status !== 'active',\n        inputSize: 4,\n      },\n      vlan: {\n        id: 'vlan',\n        label: this.$translate.instant('iplb_vrack_private_network_add_edit_field_vlan_label'),\n        type: 'number',\n        value: undefined,\n        required: false,\n        minLength: 0,\n        maxLength: Infinity,\n        disabled: () => this.creationRules.data.status !== 'active',\n        helperText: this.$translate.instant('iplb_vrack_private_network_add_edit_field_vlan_helper'),\n        inputSize: 1,\n      },\n      subnet: {\n        id: 'subnet',\n        label: this.$translate.instant('iplb_vrack_private_network_add_edit_field_subnet_label'),\n        type: 'text',\n        value: undefined,\n        required: true,\n        minLength: 0,\n        maxLength: Infinity,\n        disabled: () => this.editing() && this.creationRules.data.status !== 'active',\n        helperText: this.$translate.instant('iplb_vrack_private_network_add_edit_field_subnet_helper'),\n        inputSize: 2,\n      },\n      natIp: {\n        id: 'natIp',\n        label: this.$translate.instant('iplb_vrack_private_network_add_edit_field_nat_ip_label'),\n        type: 'text',\n        value: undefined,\n        required: true,\n        minLength: 0,\n        maxLength: Infinity,\n        disabled: () => this.creationRules.data.status !== 'active',\n        helperText: this.$translate.instant('iplb_vrack_private_network_add_edit_field_nat_ip_helper'),\n        inputSize: 2,\n      },\n      farmId: {\n        label: this.$translate.instant('iplb_vrack_private_network_add_edit_field_farm_label'),\n        value: [],\n        disabled: () => false,\n      },\n    };\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerVrackEditCtrl', IpLoadBalancerVrackEditCtrl);\n"]}