{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/infrastructure/vrack/vrack.factory.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/infrastructure/vrack/vrack.factory.js","mtime":1539717142389},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').factory('CloudProjectComputeInfraVrackFactory', [\"CloudProjectComputeInfraVrackVmFactory\", \"OrderedHashFactory\", function (CloudProjectComputeInfraVrackVmFactory, OrderedHashFactory) {\n  /**\n   *  Defines a cloud project compute infrastructure vrack\n   *\n   *  @param    {Object}  options\n   *                      Options for creating a new CloudProjectInfraVrack\n   *  @param    {Array}   options.publicCloud\n   *                      List of VirtualMachine options or VirtualMachine instances\n   */\n  var VrackFactory = function () {\n    return function CloudProjectComputeInfraVrackFactory(optionsParam) {\n      var self = this;\n      var options = optionsParam;\n\n      if (!options) {\n        options = {};\n      }\n\n      this.serviceName = options.serviceName || null;\n      this.publicCloud = new OrderedHashFactory(); // init public cloud\n\n      if (options.publicCloud && options.publicCloud.length) {\n        angular.forEach(options.publicCloud, function (publicVm) {\n          self.addVmToPublicCloudList(publicVm);\n        });\n      }\n    };\n  }(); // /////////////////////\n  //      METHODS      //\n  // /////////////////////\n\n  /**\n   *  Get a vm from its id. Check first in public cloud and then in private cloud.\n   */\n\n\n  VrackFactory.prototype.getVmById = function (vmId) {\n    return this.publicCloud.get(vmId);\n  };\n  /**\n   *  Get next index of vm in current Vrack (used for giving the default vm name option)\n   */\n\n\n  VrackFactory.prototype.getNextIndex = function () {\n    return this.publicCloud.length();\n  }; // ---\n\n  /**\n   *  Add a public vm into Vrack list\n   */\n\n\n  VrackFactory.prototype.addVmToPublicCloudList = function (vm) {\n    _.set(vm, 'serviceName', this.serviceName); // Add projectId to VM\n\n\n    vm = checkVm(vm); // eslint-disable-line\n    // Avoid conflict of adding an existing vm\n\n    if (!this.publicCloud.get(vm)) {\n      this.publicCloud.push(vm);\n    }\n\n    return vm;\n  };\n  /**\n   *  Remove given Virtual Machine from vrack public cloud list\n   */\n\n\n  VrackFactory.prototype.removeVmFromPublicCloudList = function (vm) {\n    this.publicCloud.removeItem(vm);\n    return vm;\n  };\n  /**\n   *  Collapse all Vms\n   */\n\n\n  VrackFactory.prototype.collapseAll = function () {\n    var items = this.publicCloud.getItems();\n    angular.forEach(items, function (vm) {\n      _.set(vm, 'collapsed', true);\n    });\n  };\n  /**\n   *  Uncollapse all Vms\n   */\n\n\n  VrackFactory.prototype.uncollapseAll = function () {\n    var items = this.publicCloud.getItems();\n    angular.forEach(items, function (vm) {\n      _.set(vm, 'collapsed', false);\n    });\n  };\n  /**\n   *  Prepare object to json encode function to avoid function being encoded.\n   */\n\n\n  VrackFactory.prototype.prepareToJson = function () {\n    var self = this;\n    return {\n      publicCloud: _.map(this.publicCloud.sortedKeys, function (vmId) {\n        return self.publicCloud.get(vmId).prepareToJson();\n      })\n    };\n  }; // /////////////////////\n  //      FUNCTIONS    //\n  // /////////////////////\n\n  /**\n   *  Check if vm is already an instance or an options object\n   */\n\n\n  function checkVm(vm) {\n    return vm instanceof CloudProjectComputeInfraVrackVmFactory ? vm : new CloudProjectComputeInfraVrackVmFactory(vm);\n  }\n\n  return VrackFactory;\n}]);",null]}