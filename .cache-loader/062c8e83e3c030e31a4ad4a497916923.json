{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/deskaas/deskaas.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/deskaas/deskaas.controller.js","mtime":1539717142178},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class DeskaasCtrl {\n  constructor($q, $translate, OvhApiDeskaasService) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.OvhApiDeskaasService = OvhApiDeskaasService;\n\n    this.flags = {\n      initializing: true,\n    };\n    this.services = [];\n  }\n\n  $onInit() {\n    this.flags.initializing = true;\n    this.$q.all([this.getServices()]).then(() => {\n      this.flags.initializing = false;\n    });\n  }\n\n  registerService(details, serviceInfo, user) {\n    this.services.push({\n      details,\n      serviceInfo,\n      user,\n    });\n  }\n\n  loadService(serviceId) {\n    const servicePromise = this.OvhApiDeskaasService.v6()\n      .serviceInfos({ serviceName: serviceId }).$promise;\n    servicePromise.then((serviceInfo) => {\n      const detailsPromise = this.OvhApiDeskaasService.v6()\n        .getDetails({ serviceName: serviceId }).$promise;\n      detailsPromise.then((details) => {\n        if (details.alias !== 'noAlias') {\n          _.set(details, 'displayName', `${details.alias} (${details.serviceName})`);\n        } else {\n          _.set(details, 'displayName', details.serviceName);\n        }\n\n        if (serviceInfo.status === 'ok') {\n          const userPromise = this.OvhApiDeskaasService.v6()\n            .getUser({ serviceName: serviceId }).$promise;\n          userPromise.then((user) => {\n            _.set(user, 'displayName', `${user.name} (${user.email})`);\n            this.registerService(details, serviceInfo, user);\n          });\n        } else {\n          this.registerService(details, serviceInfo, { displayName: '-' });\n        }\n      });\n    });\n    return servicePromise;\n  }\n\n  getServices() {\n    const promise = this.OvhApiDeskaasService.v6().getServices().$promise;\n\n    return promise.then((serviceIds) => {\n      const promises = [];\n      serviceIds.forEach(serviceId => promises.push(this.loadService(serviceId)));\n      return this.$q.all(promises);\n    });\n  }\n}\n\nangular.module('managerApp').controller('DeskaasCtrl', DeskaasCtrl);\n"]}