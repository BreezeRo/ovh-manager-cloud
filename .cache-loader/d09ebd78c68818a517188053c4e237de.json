{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/veeam/dashboard/veeam-dashboard.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/veeam/dashboard/veeam-dashboard.controller.js","mtime":1539717142281},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["(() => {\n  class VeeamDashboardCtrl {\n    constructor($stateParams, $translate, ControllerHelper, FeatureAvailabilityService,\n      RegionService, VeeamService) {\n      this.$stateParams = $stateParams;\n      this.$translate = $translate;\n      this.ControllerHelper = ControllerHelper;\n      this.FeatureAvailabilityService = FeatureAvailabilityService;\n      this.RegionService = RegionService;\n      this.VeeamService = VeeamService;\n\n      this.serviceName = this.$stateParams.serviceName;\n\n      this.initLoaders();\n      this.initActions();\n    }\n\n    initLoaders() {\n      const errorHandler = response => this.VeeamService.unitOfWork.messages.push({\n        text: response.message,\n        type: 'error',\n      });\n\n      this.configurationInfos = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.VeeamService.getConfigurationInfos(this.serviceName),\n        successHandler: () => this.getRegion(this.configurationInfos.data.location\n          .macroRegion.code),\n        errorHandler,\n      });\n\n      this.subscriptionInfos = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.VeeamService.getSubscriptionInfos(this.serviceName),\n        successHandler: () => {\n          if (this.subscriptionInfos.data.isOnTrial) {\n            let message = this.$translate.instant('veeam_tiles_subscription_label_renewal_warning', { remainingDays: this.subscriptionInfos.data.subscriptionTimeRemaining });\n            if (this.subscriptionInfos.data.subscriptionTimeRemaining < 0) {\n              message = this.$translate.instant('veeam_message_product_disabled');\n            }\n\n            this.VeeamService.unitOfWork.messages.push({\n              text: message,\n              type: this.subscriptionInfos.data.subscriptionTimeRemaining < 0 ? 'error' : 'warning',\n              link: {\n                type: 'action',\n                text: this.$translate.instant('veeam_tiles_subscription_label_renewal_warning_link'),\n                action: () => this.changeOffer(),\n              },\n            });\n          }\n        },\n        errorHandler,\n      });\n\n      this.actions = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: () => this.VeeamService.getActions(this.$stateParams.serviceName),\n      });\n\n      this.orderableOffers = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: () => this.VeeamService.getOrderableOffers(this.serviceName),\n        errorHandler,\n      });\n    }\n\n    initActions() {\n      this.uiActions = {\n        changeOffer: {\n          text: this.$translate.instant('common_edit'),\n          callback: () => this.changeOffer(),\n          isAvailable: () => !this.actions.loading && this.actions.data.upgradeOffer.available,\n        },\n        manageAutorenew: {\n          text: this.$translate.instant('common_manage'),\n          href: this.ControllerHelper.navigation.getUrl('renew', { serviceName: this.serviceName, serviceType: 'VEEAM_CLOUD_CONNECT' }),\n          isAvailable: () => true,\n        },\n        manageContact: {\n          text: this.$translate.instant('common_manage'),\n          href: this.ControllerHelper.navigation.getUrl('contacts', { serviceName: this.serviceName }),\n          isAvailable: () => this.FeatureAvailabilityService.hasFeature('CONTACTS', 'manage'),\n        },\n      };\n    }\n\n    $onInit() {\n      this.configurationInfos.load();\n      this.subscriptionInfos.load();\n      this.actions.load();\n      this.orderableOffers.load();\n    }\n\n    addStorage() {\n      if (this.actions.data.addStorage.available) {\n        this.ControllerHelper.modal\n          .showModal({\n            modalConfig: {\n              templateUrl: 'app/veeam/storage/add/veeam-storage-add.html',\n              controller: 'VeeamStorageAddCtrl',\n              controllerAs: 'VeeamStorageAddCtrl',\n              resolve: {\n                serviceName: () => this.serviceName,\n              },\n            },\n          })\n          .then(result => this.VeeamService.startPolling(\n            this.$stateParams.serviceName,\n            result.data,\n          ))\n          .catch(err => this.VeeamService.unitOfWork.messages.push({\n            text: err.message,\n            type: 'error',\n          }));\n      } else {\n        this.ControllerHelper.modal.showWarningModal({\n          title: this.$translate.instant('common_action_unavailable'),\n          message: this.actions.data.addStorage.reason,\n        });\n      }\n    }\n\n    changeOffer() {\n      if (this.actions.data.upgradeOffer.available) {\n        this.ControllerHelper.modal.showModal({\n          modalConfig: {\n            templateUrl: 'app/veeam/dashboard/update-offer/veeam-update-offer.html',\n            controller: 'VeeamUpdateOfferCtrl',\n            controllerAs: 'VeeamUpdateOfferCtrl',\n            resolve: {\n              serviceName: () => this.serviceName,\n            },\n          },\n        })\n          .then(result => this.VeeamService.unitOfWork.messages.push({\n            textHtml: result.message,\n            type: 'success',\n          }))\n          .catch(err => this.VeeamService.unitOfWork.messages.push({\n            text: err.message,\n            type: 'error',\n          }));\n      } else {\n        this.ControllerHelper.modal.showWarningModal({\n          title: this.$translate.instant('common_action_unavailable'),\n          message: this.actions.data.upgradeOffer.reason,\n        });\n      }\n    }\n\n    getRegion(region) {\n      this.region = this.RegionService.getRegion(region);\n    }\n  }\n\n  angular.module('managerApp').controller('VeeamDashboardCtrl', VeeamDashboardCtrl);\n})();\n"]}