{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/iplb-ssl-certificate.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/iplb-ssl-certificate.controller.js","mtime":1539717142218},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerSslCertificateCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerSslCertificateCtrl.$inject = [\"$stateParams\", \"ControllerHelper\", \"IpLoadBalancerActionService\", \"IpLoadBalancerSslCertificateService\"];\n\n  function IpLoadBalancerSslCertificateCtrl($stateParams, ControllerHelper, IpLoadBalancerActionService, IpLoadBalancerSslCertificateService) {\n    _classCallCheck(this, IpLoadBalancerSslCertificateCtrl);\n\n    this.$stateParams = $stateParams;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerActionService = IpLoadBalancerActionService;\n    this.IpLoadBalancerSslCertificateService = IpLoadBalancerSslCertificateService;\n  }\n\n  _createClass(IpLoadBalancerSslCertificateCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      this.loading = true;\n      this.IpLoadBalancerSslCertificateService.getCertificates(this.$stateParams.serviceName).then(function (results) {\n        _this.loading = false;\n        _this.certificates = results;\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(ssl) {\n      var _this2 = this;\n\n      return this.IpLoadBalancerActionService.updateCertificate(this.$stateParams.serviceName, ssl).then(function () {\n        _this2.init();\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(ssl) {\n      var _this3 = this;\n\n      return this.IpLoadBalancerActionService.deleteCertificate(this.$stateParams.serviceName, ssl).then(function () {\n        _this3.init();\n      });\n    }\n  }, {\n    key: \"preview\",\n    value: function preview(_ssl) {\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/sslCertificate/preview/iplb-ssl-certificate-preview.html',\n          controller: 'IpLoadBalancerSslCertificatePreviewCtrl',\n          controllerAs: 'IpLoadBalancerSslCertificatePreviewCtrl',\n          resolve: {\n            ssl: function ssl() {\n              return _ssl;\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return IpLoadBalancerSslCertificateCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerSslCertificateCtrl', IpLoadBalancerSslCertificateCtrl);",null]}