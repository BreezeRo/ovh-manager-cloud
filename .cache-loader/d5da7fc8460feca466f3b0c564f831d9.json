{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/services/containersConfiguration.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/services/containersConfiguration.service.js","mtime":1539717142052},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp')\n  .service('CloudStorageContainersConfiguration', [\n    '$cacheFactory', '$parse', function ($cacheFactory, $parse) {\n      const self = this;\n\n      function Cache(ngCache) {\n        this.cache = ngCache;\n      }\n\n      self.containerMetaCache = new Cache($cacheFactory('storageContainerMetaCache'));\n      self.accessCache = $cacheFactory('storageAccessCache');\n\n      function getKey(projectId, containerId) {\n        return `${projectId}_${containerId}`;\n      }\n\n      _.extend(Cache.prototype, {\n        /**\n         * Set container meta data cache value.\n         * @param {string} projectId   project id\n         * @param {string} containerId container id\n         * @param {Object} data        data to save\n         * @return {Object} cache object\n         */\n        set(projectId, containerId, data) {\n          this.cache.put(getKey(projectId, containerId), data);\n          return this;\n        },\n\n        /**\n         * Update container meta data cache value.\n         * @param {string}        projectId      project id\n         * @param {string}        containerId    container id\n         * @param {string|Object} property|data  property name|data to save\n         * @param {Object}        data           data to save (optional)\n         * @return {Object} cache object\n         */\n        update(projectId, containerId, property, data) {\n          const key = getKey(projectId, containerId);\n          const dataToSave = this.cache.get(key) || {};\n\n          /* eslint-disable prefer-rest-params, no-param-reassign */\n          if (!arguments[3]) {\n            data = property;\n            property = null;\n          }\n          /* eslint-enable prefer-rest-params, no-param-reassign */\n\n          if (property) {\n            const setter = $parse(property).assign;\n            setter(dataToSave, data);\n          } else {\n            angular.merge(dataToSave, data);\n          }\n\n          this.set(projectId, containerId, dataToSave);\n          return this;\n        },\n\n        /**\n         * Get container meta data cache value.\n         * @param {string} projectId    project id\n         * @param {string} containerId  container id\n         * @param {string} property     property name (optional)\n         * @return {Object}             data to get\n         */\n        get(projectId, containerId, property) {\n          const key = getKey(projectId, containerId);\n          const data = this.cache.get(key);\n          if (property) {\n            const getter = $parse(property);\n            return getter(data);\n          }\n          return data;\n        },\n\n        /**\n         * Remove container meta data cache value.\n         * @param {string} projectId    project id\n         * @param {string} containerId  container id\n         * @return {Object} cache object\n         */\n        remove(projectId, containerId) {\n          const key = getKey(projectId, containerId);\n          this.cache.remove(key);\n          return this;\n        },\n      });\n    }]);\n"]}