{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/logs-helper.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/logs-helper.service.js","mtime":1539717142122},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsHelperService =\n/*#__PURE__*/\nfunction () {\n  LogsHelperService.$inject = [\"$translate\", \"$state\", \"OvhApiDbaas\", \"ServiceHelper\", \"CloudPoll\", \"ControllerModalHelper\", \"LogsConstants\", \"ovhDocUrl\", \"URLS\"];\n\n  function LogsHelperService($translate, $state, OvhApiDbaas, ServiceHelper, CloudPoll, ControllerModalHelper, LogsConstants, ovhDocUrl, URLS) {\n    _classCallCheck(this, LogsHelperService);\n\n    this.$translate = $translate;\n    this.$state = $state;\n    this.ServiceHelper = ServiceHelper;\n    this.CloudPoll = CloudPoll;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.LogsConstants = LogsConstants;\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.ovhDocUrl = ovhDocUrl;\n    this.URLS = URLS;\n    this.initGuides();\n  }\n\n  _createClass(LogsHelperService, [{\n    key: \"killPoller\",\n    value: function killPoller() {\n      if (this.poller) {\n        this.poller.kill();\n      }\n    }\n    /**\n     * Polls operation API untill it returns success or failure\n     *\n     * @param {any} errorMessage, message to show on UI\n     * @param {any} error, the error object\n     * @param {any} messageData, the data to be used in the error message\n     * @memberof LogsHelperService\n     */\n\n  }, {\n    key: \"pollOperation\",\n    value: function pollOperation(serviceName, operation) {\n      var _this = this;\n\n      this.killPoller();\n      return this.CloudPoll.poll({\n        item: operation,\n        pollFunction: function pollFunction(opn) {\n          return _this.OperationApiService.get({\n            serviceName: serviceName,\n            operationId: opn.operationId\n          }).$promise;\n        },\n        stopCondition: function stopCondition(opn) {\n          return opn.state === _this.LogsConstants.FAILURE || opn.state === _this.LogsConstants.SUCCESS || opn.state === _this.LogsConstants.REVOKED;\n        }\n      });\n    }\n    /**\n     * handles error state for create, delete and update input\n     *\n     * @param {any} errorMessage, message to show on UI\n     * @param {any} error, the error object\n     * @param {any} messageData, the data to be used in the error message\n     * @memberof LogsHelperService\n     */\n\n  }, {\n    key: \"handleError\",\n    value: function handleError(errorMessage, error, messageData) {\n      return this.ServiceHelper.errorHandler({\n        textToTranslate: errorMessage,\n        translateParams: messageData\n      })(error);\n    }\n    /**\n     * handles (CRUD) operations create, delete and update.\n     * Repetedly polls for operation untill it returns SUCCESS, FAILURE or REVOKED message.\n     *\n     * @param {any} serviceName\n     * @param {any} operation, operation to poll\n     * @param {any} successMessage, message to show on UI\n     * @param {any} messageData, the data to be used in the success message\n     * @returns promise which will be resolved to operation object\n     * @memberof LogsHelperService\n     */\n\n  }, {\n    key: \"handleOperation\",\n    value: function handleOperation(serviceName, operation, successMessage, messageData) {\n      var _this2 = this;\n\n      return this.pollOperation(serviceName, operation).$promise.then(function (pollResult) {\n        if (pollResult[0].item.state !== _this2.LogsConstants.SUCCESS) {\n          var error = {\n            data: {\n              message: 'Operation failed'\n            }\n          };\n          return Promise.reject(error);\n        }\n\n        if (successMessage) {\n          _this2.ServiceHelper.successHandler(successMessage)(messageData);\n        }\n\n        return pollResult;\n      });\n    }\n    /**\n     * shows offer upgrade required info modal\n     * @param {string} serviceName\n     */\n\n  }, {\n    key: \"showOfferUpgradeModal\",\n    value: function showOfferUpgradeModal(serviceName) {\n      var _this3 = this;\n\n      return this.ControllerModalHelper.showInfoModal({\n        titleText: this.$translate.instant('options_upgradequotalink_increase_quota_title'),\n        text: this.$translate.instant('options_upgradequotalink_increase_quota_message'),\n        okButtonText: this.$translate.instant('options_upgradequotalink_increase_quota_upgrade')\n      }).then(function () {\n        return _this3.$state.go('dbaas.logs.detail.offer', {\n          serviceName: serviceName\n        });\n      });\n    }\n    /**\n     * creates guide menu object having LDP and OVH guide links\n     */\n\n  }, {\n    key: \"initGuides\",\n    value: function initGuides() {\n      this.guides = {};\n      this.guides.title = this.$translate.instant('logs_guides');\n      this.guides.list = [{\n        name: this.$translate.instant('logs_guides_title'),\n        url: this.ovhDocUrl.getDocUrl(this.LogsConstants.LOGS_DOCS_NAME),\n        external: true\n      }];\n      this.guides.footer = {\n        name: this.$translate.instant('logs_guides_footer'),\n        url: this.URLS.guides.home.FR,\n        external: true\n      };\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides() {\n      return this.guides;\n    }\n    /**\n     * return true if account is of type basic, false otherwise\n     * @param {accountDetails} account\n     */\n\n  }, {\n    key: \"isAccountDisabled\",\n    value: function isAccountDisabled(account) {\n      return account.state === this.LogsConstants.SERVICE_STATE_DISABLED;\n    }\n  }, {\n    key: \"accountSetupRequired\",\n    value: function accountSetupRequired(account) {\n      return account.state === this.LogsConstants.SERVICE_STATE_TO_CONFIG;\n    }\n  }], [{\n    key: \"isBasicOffer\",\n    value: function isBasicOffer(account) {\n      return !account.offer.reference.startsWith('logs-pro');\n    }\n  }]);\n\n  return LogsHelperService;\n}();\n\nangular.module('managerApp').service('LogsHelperService', LogsHelperService);",null]}