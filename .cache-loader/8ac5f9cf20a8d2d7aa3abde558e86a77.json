{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/iplb-metrics.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/iplb-metrics.service.js","mtime":1539717142205},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerMetricsService {\n  constructor($http, $stateParams, $translate, OvhApiIpLoadBalancing, IpLoadBalancerConstant) {\n    this.$http = $http;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.url = IpLoadBalancerConstant.metricsUrl;\n    this.path = 'query';\n\n    this.appMetricsQueries = {\n      conn: {\n        queries: [{\n          metric: 'haproxy.stats.stot.rate.max',\n          aggregator: 'sum',\n        }],\n      },\n      reqm: {\n        queries: [{\n          metric: 'haproxy.stats.req_tot.rate.max',\n          aggregator: 'max',\n        }],\n      },\n    };\n  }\n\n  getService(serviceName) {\n    return this.IpLoadBalancing.v6().get({ serviceName }).$promise;\n  }\n\n  getToken() {\n    return this.IpLoadBalancing.v6().get({\n      serviceName: this.$stateParams.serviceName,\n    })\n      .$promise\n      .then(details => details.metricsToken);\n  }\n\n  getData(metric, start, end, options) {\n    const { queries } = this.appMetricsQueries[metric];\n    const apiQuery = {\n      start,\n      end,\n      queries,\n    };\n\n    queries.forEach((query) => {\n      _.assign(query, options);\n    });\n\n    return this.getToken().then(token => this.$http({\n      method: 'POST',\n      url: [this.url, this.path].join('/'),\n      headers: {\n        Authorization: `Basic ${btoa(`iplb:${token}`)}`,\n      },\n      preventLogout: true,\n      data: JSON.stringify(apiQuery),\n    }))\n      .then(response => response.data);\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerMetricsService', IpLoadBalancerMetricsService);\n"]}