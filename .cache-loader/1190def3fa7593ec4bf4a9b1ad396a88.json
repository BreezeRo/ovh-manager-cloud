{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.controller.js","mtime":1539717142193},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerConfigurationCtrl {\n  constructor($q, $scope, $stateParams, CloudMessage, CloudPoll, ControllerHelper,\n    IpLoadBalancerConfigurationService, ServiceHelper) {\n    this.$q = $q;\n    this.$scope = $scope;\n    this.$stateParams = $stateParams;\n    this.CloudMessage = CloudMessage;\n    this.CloudPoll = CloudPoll;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConfigurationService = IpLoadBalancerConfigurationService;\n    this.ServiceHelper = ServiceHelper;\n\n    this.initLoaders();\n\n    this.$scope.$on('$destroy', () => this.stopTaskPolling());\n  }\n\n  initLoaders() {\n    this.zones = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerConfigurationService\n        .getAllZonesChanges(this.$stateParams.serviceName),\n    });\n  }\n\n  $onInit() {\n    this.zones.load()\n      .then(() => {\n        this.startPolling();\n      });\n\n    this.selectedZones = [];\n  }\n\n  onSelectionChange(selection) {\n    this.selectedZones = selection;\n  }\n\n  applyChanges(zone) {\n    let promise = this.$q.resolve([]);\n    if (zone) {\n      promise = this.IpLoadBalancerConfigurationService\n        .refresh(this.$stateParams.serviceName, zone);\n    } else if (this.selectedZones.length === this.zones.length) {\n      // All selected, just call the API with no zone.\n      promise = this.IpLoadBalancerConfigurationService\n        .refresh(this.$stateParams.serviceName, null);\n    } else if (this.selectedZones.length) {\n      promise = this.IpLoadBalancerConfigurationService\n        .batchRefresh(this.$stateParams.serviceName, _.map(this.selectedZones, 'id'));\n    }\n\n    promise.then(() => {\n      this.startPolling();\n      if (this.poller) {\n        this.poller.$promise.then(() => {\n          // check if at least one change remains\n          if (_.chain(this.zones.data).map('changes').sum().value() > 0) {\n            this.CloudMessage.flushChildMessage();\n          } else {\n            this.CloudMessage.flushMessages();\n          }\n        });\n      }\n    });\n\n    return promise;\n  }\n\n  startPolling() {\n    this.stopTaskPolling();\n\n    this.poller = this.CloudPoll.pollArray({\n      items: this.zones.data,\n      pollFunction: zone => this.IpLoadBalancerConfigurationService\n        .getZoneChanges(this.$stateParams.serviceName, zone.id),\n      stopCondition: zone => !zone.task || (zone.task && _.includes(['done', 'error'], zone.task.status) && (zone.changes === 0 || zone.task.progress === 100)),\n    });\n  }\n\n  stopTaskPolling() {\n    if (this.poller) {\n      this.poller.kill();\n    }\n  }\n\n  static statusTemplate() {\n    return `\n      <span data-ng-if=\"$row.changes === 0\" class=\"oui-status oui-status_success\" data-translate=\"iplb_configuration_changes_0\"></span>\n      <span data-ng-if=\"$row.changes === 1\" class=\"oui-status oui-status_warning\" data-translate=\"iplb_configuration_changes_1\"></span>\n      <span data-ng-if=\"$row.changes > 1\" class=\"oui-status oui-status_warning\" data-translate=\"iplb_configuration_changes_count\" data-translate-values=\"{ count: $row.changes }\"></span>\n    `;\n  }\n\n  static actionTemplate() {\n    return `\n      <oui-action-menu data-align=\"end\" data-compact>\n        <oui-action-menu-item\n          data-text=\"{{'iplb_configuration_action_apply' | translate}}\"\n          data-on-click=\"ctrl.applyChanges($row.id)\">\n        </oui-action-menu-item>\n      </oui-action-menu>`;\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerConfigurationCtrl', IpLoadBalancerConfigurationCtrl);\n"]}