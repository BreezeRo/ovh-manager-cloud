{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/server/iplb-server-edit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/server/iplb-server-edit.controller.js","mtime":1539717142212},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerServerEditCtrl {\n  constructor($q, $state, $stateParams, CloudMessage, ControllerHelper,\n    IpLoadBalancerConstant, IpLoadBalancerServerService) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerServerService = IpLoadBalancerServerService;\n\n    this.initLoaders();\n  }\n\n  initLoaders() {\n    this.farmTypeLoader = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerServerService.getFarmType(\n        this.$stateParams.serviceName,\n        this.$stateParams.farmId,\n      )\n        .then((type) => {\n          this.farmType = type;\n        })\n        .catch((err) => {\n          if (err === 'NOTFOUND') {\n            return this.$state.go('network.iplb.detail.server-farm');\n          }\n          return this.ServiceHelper.errorHandler('iplb_server_request_error');\n        }),\n    });\n\n    this.proxyProtocolVersions = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerServerService.getProxyProtocolVersions(\n        this.$stateParams.serviceName,\n      ),\n    });\n\n    this.apiServer = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerServerService.getServer(\n        this.$stateParams.serviceName,\n        this.$stateParams.farmId,\n        this.$stateParams.serverId,\n      ).then(server => this.parseServer(server)),\n    });\n  }\n\n  $onInit() {\n    this.server = {\n      backup: false,\n      probe: false,\n      ssl: false,\n      status: 'active',\n    };\n    this.portLimit = this.IpLoadBalancerConstant.portLimit;\n    this.lbWeightMax = this.IpLoadBalancerConstant.lbWeightMax;\n\n    this.farmTypeLoader.load();\n    this.proxyProtocolVersions.load();\n\n    if (this.$stateParams.serverId) {\n      this.edition = true;\n      this.apiServer.load();\n    }\n  }\n\n  parseServer(server) {\n    this.server = angular.copy(server);\n    ['backup', 'probe', 'ssl'].forEach((property) => {\n      if (this.server[property] === null) {\n        this.server[property] = false;\n      }\n    });\n  }\n\n  getCleanServer() {\n    if (this.farmType === 'udp') {\n      return _.omit(this.server, [\n        'ssl',\n        'cookie',\n        'chain',\n        'weight',\n        'backup',\n        'probe',\n      ]);\n    }\n    delete this.server.serverState;\n    return this.server;\n  }\n\n  create() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.saving = true;\n    this.CloudMessage.flushChildMessage();\n    return this.IpLoadBalancerServerService.create(\n      this.farmType,\n      this.$stateParams.serviceName,\n      this.$stateParams.farmId,\n      this.getCleanServer(),\n    )\n      .then(() => {\n        this.$state.go('network.iplb.detail.server-farm');\n      })\n\n      .finally(() => {\n        this.saving = false;\n      });\n  }\n\n  update() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.saving = true;\n    this.CloudMessage.flushChildMessage();\n    return this.IpLoadBalancerServerService.update(\n      this.farmType,\n      this.$stateParams.serviceName,\n      this.$stateParams.farmId,\n      this.server.serverId,\n      this.getCleanServer(),\n    )\n      .then(() => {\n        this.$state.go('network.iplb.detail.server-farm');\n      })\n      .finally(() => {\n        this.saving = false;\n      });\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerServerEditCtrl', IpLoadBalancerServerEditCtrl);\n"]}