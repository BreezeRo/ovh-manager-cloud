{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/cloud-project-compute-infrastructure.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/cloud-project-compute-infrastructure.service.js","mtime":1539717141972},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeInfrastructureService =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeInfrastructureService.$inject = [\"$rootScope\", \"$state\", \"$translate\", \"$uibModal\", \"CloudMessage\", \"CloudUserPref\", \"CloudProjectComputeInfrastructureOrchestrator\", \"ControllerHelper\", \"ServiceHelper\", \"TARGET\"];\n\n  function CloudProjectComputeInfrastructureService($rootScope, $state, $translate, $uibModal, CloudMessage, CloudUserPref, CloudProjectComputeInfrastructureOrchestrator, ControllerHelper, ServiceHelper, TARGET) {\n    _classCallCheck(this, CloudProjectComputeInfrastructureService);\n\n    this.$rootScope = $rootScope;\n    this.$state = $state;\n    this.$translate = $translate;\n    this.$uibModal = $uibModal;\n    this.CloudMessage = CloudMessage;\n    this.CloudUserPref = CloudUserPref;\n    this.CloudProjectComputeInfrastructureOrchestrator = CloudProjectComputeInfrastructureOrchestrator; // eslint-disable-line\n\n    this.ControllerHelper = ControllerHelper;\n    this.ServiceHelper = ServiceHelper;\n    this.TARGET = TARGET;\n  }\n\n  _createClass(CloudProjectComputeInfrastructureService, [{\n    key: \"buyIpFailOver\",\n    value: function buyIpFailOver() {\n      if (this.TARGET === 'US') {\n        return this.$uibModal.open({\n          windowTopClass: 'cui-modal',\n          templateUrl: 'app/cloud/project/compute/infrastructure/ip/failover/buy/cloud-project-compute-infrastructure-ip-failover-buy-agora.html',\n          controller: 'CloudProjectComputeInfrastructureIpFailoverBuyAgoraCtrl',\n          controllerAs: '$ctrl'\n        }).result;\n      }\n\n      return this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/infrastructure/ip/failover/buy/cloud-project-compute-infrastructure-ip-failover-buy.html',\n        controller: 'CloudProjectComputeInfrastructureIpFailoverBuyCtrl',\n        controllerAs: 'CPCIIpFailoverBuyCtrl'\n      }).result;\n    }\n  }, {\n    key: \"importIpFailOver\",\n    value: function importIpFailOver(_pendingImportIps) {\n      return this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/infrastructure/ip/failover/import/cloud-project-compute-infrastructure-ip-failover-import.html',\n        controller: 'CloudProjectComputeInfrastructureIpFailoverImportCtrl',\n        controllerAs: 'CPCIIpFailoverImportCtrl',\n        resolve: {\n          pendingImportIps: function pendingImportIps() {\n            return angular.copy(_pendingImportIps);\n          }\n        }\n      }).result;\n    }\n  }, {\n    key: \"orderCredit\",\n    value: function orderCredit() {\n      if (this.TARGET === 'US') {\n        return this.$uibModal.open({\n          windowTopClass: 'cui-modal',\n          templateUrl: 'app/cloud/project/billing/vouchers/addCredit/cloud-project-billing-vouchers-add-credit-agora.html',\n          controller: 'CloudProjectBillingVouchersAddcreditAgoraCtrl',\n          controllerAs: '$ctrl'\n        }).result;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"openLoginInformations\",\n    value: function openLoginInformations(vm) {\n      return this.$uibModal.open({\n        templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/loginInformation/cloud-project-compute-infrastructure-virtual-machine-login-information.html',\n        controller: 'CloudProjectComputeInfrastructureVirtualMachineLoginInformationCtrl',\n        controllerAs: 'VmLoginInformationCtrl',\n        size: 'md',\n        resolve: {\n          params: function params() {\n            return {\n              serviceName: vm.serviceName,\n              id: vm.id,\n              ipAddresses: vm.ipAddresses,\n              image: vm.image\n            };\n          }\n        }\n      }).result;\n    }\n  }, {\n    key: \"openDeleteProjectModal\",\n    value: function openDeleteProjectModal() {\n      return this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/delete/cloud-project-delete.html',\n        controller: 'CloudProjectDeleteCtrl',\n        controllerAs: 'CloudProjectDeleteCtrl'\n      }).result;\n    }\n  }, {\n    key: \"openMonthlyConfirmation\",\n    value: function openMonthlyConfirmation(vm) {\n      var _this = this;\n\n      this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/monthlyConfirm/cloud-project-compute-infrastructure-virtual-machine-monthlyConfirm.html',\n        controller: 'CloudProjectComputeInfrastructureVirtualmachineMonthlyConfirm',\n        controllerAs: 'CPCIVirtualmachineMonthlyConfirm',\n        resolve: {\n          params: function params() {\n            return vm;\n          }\n        }\n      }).result.then(function () {\n        _this.$rootScope.$broadcast('infra.refresh.links');\n      });\n    }\n  }, {\n    key: \"openSnapshotWizard\",\n    value: function openSnapshotWizard(vm) {\n      return this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/snapshot/add/cloud-project-compute-snapshot-add.html',\n        controller: 'CloudProjectComputeSnapshotAddCtrl',\n        controllerAs: 'CloudProjectComputeSnapshotAddCtrl',\n        resolve: {\n          params: function params() {\n            return vm;\n          }\n        }\n      }).result;\n    }\n  }, {\n    key: \"openVnc\",\n    value: function openVnc(vm) {\n      return this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/vnc/cloud-project-compute-infrastructure-virtual-machine-vnc.html',\n        controller: 'CloudProjectComputeInfrastructureVirtualmachineVncCtrl',\n        controllerAs: 'VmVncCtrl',\n        size: 'lg',\n        resolve: {\n          params: function params() {\n            return vm;\n          }\n        }\n      }).result;\n    }\n  }, {\n    key: \"rebootVirtualMachine\",\n    value: function rebootVirtualMachine(vm, type) {\n      var _this2 = this;\n\n      return this.ControllerHelper.modal.showConfirmationModal({\n        titleText: type === 'hard' ? this.$translate.instant('cpci_vm_action_reboot_hard') : this.$translate.instant('cpci_vm_action_reboot'),\n        text: this.$translate.instant('cpci_vm_confirm_reboot', {\n          name: vm.name || ''\n        })\n      }).then(function () {\n        return _this2.CloudProjectComputeInfrastructureOrchestrator.rebootVm(vm, type).then(_this2.ServiceHelper.successHandler('cpci_vm_reboot_submit_success')).catch(_this2.ServiceHelper.errorHandler('cpci_vm_reboot_submit_error'));\n      });\n    }\n  }, {\n    key: \"reinstallVirtualMachine\",\n    value: function reinstallVirtualMachine(vm) {\n      var _this3 = this;\n\n      return this.ControllerHelper.modal.showConfirmationModal({\n        titleText: this.$translate.instant('cpci_vm_action_reinstall'),\n        text: this.$translate.instant('cpci_vm_reinstall_warn')\n      }).then(function () {\n        return _this3.CloudProjectComputeInfrastructureOrchestrator.reinstallVm(vm).catch(_this3.ServiceHelper.errorHandler('cpci_vm_reinstall_submit_error'));\n      });\n    }\n  }, {\n    key: \"deleteVirtualMachine\",\n    value: function deleteVirtualMachine(vm) {\n      var _this4 = this;\n\n      this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/delete/cloud-project-compute-infrastructure-virtual-machine-delete.html',\n        controller: 'CloudprojectcomputeinfrastructurevirtualmachinedeleteCtrl',\n        controllerAs: '$ctrl',\n        resolve: {\n          params: function params() {\n            return vm;\n          }\n        }\n      }).result.then(function () {\n        return _this4.CloudProjectComputeInfrastructureOrchestrator.deleteVm(vm).catch(_this4.ServiceHelper.errorHandler('cpci_vm_delete_submit_error'));\n      });\n    }\n  }, {\n    key: \"rescueMode\",\n    value: function rescueMode(vm) {\n      return this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/rescue/cloud-project-compute-infrastructure-virtual-machine-rescue.html',\n        controller: 'CloudProjectComputeInfrastructureVirtualmachineRescueCtrl',\n        controllerAs: 'VmRescueCtrl',\n        size: 'md',\n        resolve: {\n          params: function params() {\n            return vm;\n          }\n        }\n      }).result;\n    }\n  }, {\n    key: \"resumeVirtualMachine\",\n    value: function resumeVirtualMachine(vm) {\n      var _this5 = this;\n\n      var oldStatus = vm.status;\n\n      _.set(vm, 'status', 'RESUMING');\n\n      return this.CloudProjectComputeInfrastructureOrchestrator.resumeVm(vm).catch(function (err) {\n        _this5.CloudMessage.error(\"\".concat(_this5.$translate.instant('cpci_vm_resume_submit_error'), \" \").concat(_.get(err, 'data.message', '')));\n\n        _.set(vm, 'status', oldStatus);\n      });\n    }\n  }, {\n    key: \"stopRescueMode\",\n    value: function stopRescueMode(vm, enable) {\n      _.set(vm, 'confirmLoading', true);\n\n      return this.CloudProjectComputeInfrastructureOrchestrator.rescueVm(vm, enable).then(function () {\n        _.set(vm, 'confirm', null);\n      }).catch(this.ServiceHelper.errorHandler('cpci_vm_rescue_end_error')).finally(function () {\n        _.set(vm, 'confirmLoading', false);\n      });\n    }\n  }, {\n    key: \"addVirtualMachine\",\n    value: function addVirtualMachine() {\n      return this.$state.go('iaas.pci-project.compute.infrastructure.diagram', {\n        createNewVm: true,\n        createNewVolume: false,\n        editVm: null,\n        monitorVm: null\n      });\n    }\n  }, {\n    key: \"addVolume\",\n    value: function addVolume() {\n      return this.$state.go('iaas.pci-project.compute.infrastructure.diagram', {\n        createNewVm: false,\n        createNewVolume: true,\n        editVm: null,\n        monitorVm: null\n      });\n    }\n  }, {\n    key: \"editVirtualMachine\",\n    value: function editVirtualMachine(vmId) {\n      return this.$state.go('iaas.pci-project.compute.infrastructure.diagram', {\n        createNewVm: false,\n        createNewVolume: false,\n        editVm: vmId,\n        monitorVm: null\n      });\n    }\n  }, {\n    key: \"monitorVirtualMachine\",\n    value: function monitorVirtualMachine(vmId) {\n      return this.$state.go('iaas.pci-project.compute.infrastructure.diagram', {\n        createNewVm: false,\n        createNewVolume: false,\n        editVm: null,\n        monitorVm: vmId\n      });\n    }\n  }, {\n    key: \"setPreferredView\",\n    value: function setPreferredView(view) {\n      if (_.includes(['diagram', 'list'], view)) {\n        this.CloudUserPref.set('CLOUD_PROJECT_INFRA_PREFERRED_VIEW', {\n          view: view\n        });\n      }\n    }\n  }, {\n    key: \"getPreferredView\",\n    value: function getPreferredView() {\n      return this.CloudUserPref.get('CLOUD_PROJECT_INFRA_PREFERRED_VIEW').then(function (view) {\n        return _.get(view, 'view', 'diagram');\n      });\n    }\n  }]);\n\n  return CloudProjectComputeInfrastructureService;\n}();\n\nangular.module('managerApp').service('CloudProjectComputeInfrastructureService', CloudProjectComputeInfrastructureService);",null]}