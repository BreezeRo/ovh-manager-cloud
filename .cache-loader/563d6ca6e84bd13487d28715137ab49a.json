{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/deskaas/deskaas-details/deskaas-details.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/deskaas/deskaas-details/deskaas-details.controller.js","mtime":1539717142175},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('DeskaasDetailsCtrl', [\"OvhApiDeskaasService\", \"$stateParams\", \"$scope\", \"ControllerHelper\", \"CloudMessage\", \"$translate\", \"$state\", \"$q\", \"DESKAAS_ACTIONS\", \"$uibModal\", \"OvhApiMe\", \"deskaasSidebar\", \"DeskaasService\", \"DESKAAS_REFERENCES\", \"SidebarMenu\", \"FeatureAvailabilityService\", \"ServiceHelper\", function DeskaasDetailsCtrl(OvhApiDeskaasService, $stateParams, $scope, ControllerHelper, CloudMessage, $translate, $state, $q, DESKAAS_ACTIONS, $uibModal, OvhApiMe, deskaasSidebar, DeskaasService, DESKAAS_REFERENCES, SidebarMenu, FeatureAvailabilityService, ServiceHelper) {\n  var self = this;\n  self.services = {};\n  self.details = {};\n  self.messages = [];\n  self.user = {};\n  self.upgradeOptions = [];\n  self.selectedUpgrade = '';\n  self.tasksHandler = null;\n  self.ServiceHelper = ServiceHelper;\n  self.references = DESKAAS_REFERENCES;\n  self.OrderPlanOffers = [];\n  self.actions = {\n    reinit: {\n      text: $translate.instant('vdi_btn_restore'),\n      callback: function callback() {\n        return self.restoreService($stateParams.serviceName);\n      },\n      isAvailable: function isAvailable() {\n        return self.flags.editable();\n      }\n    },\n    restart: {\n      text: $translate.instant('vdi_btn_reboot'),\n      callback: function callback() {\n        return self.rebootService($stateParams.serviceName);\n      },\n      isAvailable: function isAvailable() {\n        return self.flags.editable();\n      }\n    },\n    changePassword: {\n      text: $translate.instant('vdi_btn_reset_password'),\n      callback: function callback() {\n        return self.resetPassword($stateParams.serviceName);\n      },\n      isAvailable: function isAvailable() {\n        return self.flags.editable();\n      }\n    },\n    remove: {\n      text: $translate.instant('vdi_btn_delete'),\n      callback: function callback() {\n        return self.deleteService($stateParams.serviceName);\n      },\n      isAvailable: function isAvailable() {\n        return self.flags.editable();\n      }\n    },\n    accessConsole: {\n      text: $translate.instant('vdi_btn_console'),\n      callback: function callback() {\n        return self.getConsole($stateParams.serviceName);\n      },\n      isAvailable: function isAvailable() {\n        return self.flags.editable();\n      }\n    },\n    changeOffer: {\n      text: $translate.instant('vdi_btn_upgrade'),\n      callback: function callback() {\n        return self.upgrade($stateParams.serviceName);\n      },\n      isAvailable: function isAvailable() {\n        return self.flags.editable() && self.flags.can_upgrade();\n      }\n    },\n    changeAlias: {\n      text: $translate.instant('common_modify'),\n      callback: function callback() {\n        return self.changeAlias($stateParams.serviceName);\n      },\n      isAvailable: function isAvailable() {\n        return self.flags.editable();\n      }\n    },\n    manageAutorenew: {\n      text: $translate.instant('common_manage'),\n      href: ControllerHelper.navigation.getUrl('renew', {\n        serviceName: $stateParams.serviceName,\n        serviceType: 'DESKAAS'\n      }),\n      isAvailable: function isAvailable() {\n        return true;\n      }\n    },\n    manageContact: {\n      text: $translate.instant('common_manage'),\n      href: ControllerHelper.navigation.getUrl('contacts', {\n        serviceName: $stateParams.serviceName\n      }),\n      isAvailable: function isAvailable() {\n        return FeatureAvailabilityService.hasFeature('CONTACTS', 'manage');\n      }\n    }\n  };\n\n  self.loadMessage = function () {\n    CloudMessage.unSubscribe('deskaas.details');\n    self.messageHandler = CloudMessage.subscribe('deskaas.details', {\n      onMessage: function onMessage() {\n        return self.refreshMessage();\n      }\n    });\n  };\n\n  self.refreshMessage = function () {\n    self.messages = self.messageHandler.getMessages();\n  };\n  /*\n    restartInstance: {\n      text: this.$translate.instant(\"cloud_db_home_tile_status_instance_restart\"),\n      callback: () => this.CloudDbActionService.showInstanceRestartModal(\n        this.projectId,\n        this.instanceId\n      ),\n      isAvailable: () => !this.instance.loading && !this.instance.data.taskId\n    }\n  */\n\n\n  function handleCancelConfirmation() {\n    if ($stateParams.action === 'confirmTerminate') {\n      return self.confirmTerminate($stateParams.serviceName);\n    }\n\n    return $q.when();\n  }\n\n  function updateTasksStatus(taskDetail, isUserTask) {\n    self.tasksHandler.addOrUpdate(taskDetail, isUserTask);\n  }\n\n  function handleTask(taskId, isUserTask) {\n    return OvhApiDeskaasService.v6().getTask({\n      serviceName: $stateParams.serviceName,\n      taskId: taskId\n    }, null).$promise.then(function (taskDetails) {\n      updateTasksStatus(taskDetails, isUserTask);\n    });\n  }\n\n  function init(initTasks) {\n    self.tasksHandler = new TasksHandler(); // eslint-disable-line\n\n    self.serviceName = $stateParams.serviceName;\n    self.token = $stateParams.token;\n    self.flags.init.serviceInfos = true;\n    self.flags.init.details = true;\n    self.loadMessage();\n    $q.all([self.serviceInfos().then(function () {\n      self.getDetails().then(function () {\n        DeskaasService.getMe().then(function (me) {\n          self.OrderPlanOffers = DeskaasService.fetchProductPlans(me);\n        });\n\n        if (self.services.status === 'ok') {\n          self.flags.init.getTasks = true;\n          self.flags.init.user = true;\n          $q.all([handleCancelConfirmation(), initTasks ? self.getRunningTasks() : $q.when(), self.getUser(), $stateParams.followTask ? handleTask($stateParams.followTask) : $q.when()]);\n        }\n      });\n    })]);\n  }\n\n  function reinit(taskName) {\n    switch (taskName) {\n      case DESKAAS_ACTIONS.RESTORE:\n      case DESKAAS_ACTIONS.REBOOT:\n      case DESKAAS_ACTIONS.DELETE:\n      case DESKAAS_ACTIONS.UPDATE_USER_PWD:\n        // do nothing\n        break;\n\n      case DESKAAS_ACTIONS.UPGRADE:\n        init(false);\n        break;\n\n      case DESKAAS_ACTIONS.UPDATE_ALIAS:\n      case DESKAAS_ACTIONS.UPDATE_USERNAME:\n        self.getDetails().then(function () {\n          self.changeMenuTitle(self.details.serviceName, self.details.alias !== 'noAlias' ? self.details.alias : self.details.serviceName);\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function onTaskError(taskDetails) {\n    if (!_.isEmpty(taskDetails)) {\n      CloudMessage.error($translate.instant('vdi_task_error', taskDetails));\n    } else {\n      CloudMessage.error($translate.instant('common_api_error'));\n    }\n\n    self.flags.restoring = false;\n    self.flags.deleting = false;\n    self.flags.upgrading = false;\n    self.flags.resettingPassword = false; // self.flags.error = true;\n  }\n\n  function onTaskSuccess(taskDetails) {\n    switch (taskDetails.name) {\n      case DESKAAS_ACTIONS.RESTORE:\n        self.flags.restoring = false;\n        CloudMessage.success($translate.instant('vdi_restored'));\n        break;\n\n      case DESKAAS_ACTIONS.REBOOT:\n        self.flags.rebooting = false;\n        CloudMessage.success($translate.instant('vdi_rebooted'));\n        break;\n\n      case DESKAAS_ACTIONS.DELETE:\n        self.flags.deleting = false;\n        CloudMessage.success($translate.instant('vdi_deleted'));\n        break;\n\n      case DESKAAS_ACTIONS.UPGRADE:\n        self.flags.upgrading = false;\n        CloudMessage.success($translate.instant('vdi_upgraded'));\n        break;\n\n      case DESKAAS_ACTIONS.UPDATE_USER_PWD:\n        self.flags.resettingPassword = false;\n        CloudMessage.success($translate.instant('vdi_pwd_resetted'));\n        break;\n\n      case DESKAAS_ACTIONS.UPDATE_ALIAS:\n        self.flags.changingAlias = false;\n        CloudMessage.success($translate.instant('vdi_alias_changed'));\n        break;\n\n      case DESKAAS_ACTIONS.UPDATE_USERNAME:\n        self.flags.changingUsername = false;\n        CloudMessage.success($translate.instant('vdi_username_changed'));\n        break;\n\n      case DESKAAS_ACTIONS.CONSOLE_ACCESS:\n        CloudMessage.success($translate.instant('vdi_console_done'));\n        break;\n\n      default:\n        break;\n    }\n\n    reinit(taskDetails.name);\n  } // Task handler\n\n\n  var TasksHandler = function TasksHandler() {\n    // FIXME we do not check if some new task are created in another session\n    // List of tasks to poll\n    var selfTask = this;\n    selfTask.tasks = {};\n    selfTask.cleanTasks = [];\n    var allowedTask = []; // use getAllowedTask to populate the array\n\n    this.getAllowedTasks = function () {\n      if (allowedTask.length === 0) {\n        // Get taskName from actions constant\n        Object.keys(DESKAAS_ACTIONS).forEach(function (taskName) {\n          allowedTask.push(DESKAAS_ACTIONS[taskName]);\n        });\n      }\n\n      return allowedTask;\n    }; // Do we already know this task\n\n\n    this.isIn = function (task) {\n      return typeof selfTask.tasks[task.taskId] !== 'undefined';\n    };\n\n    this.length = function () {\n      return Object.keys(selfTask.tasks).length;\n    }; // Check if we have running task\n\n\n    this.tasksIsRunning = function () {\n      var isRunning = false;\n      Object.keys(selfTask.tasks).forEach(function (key) {\n        var value = selfTask.tasks[key]; // We do not block if the console_access is not done\n\n        if (value.name !== DESKAAS_ACTIONS.CONSOLE_ACCESS && value.state !== 'done' && value.state !== 'canceled') {\n          isRunning = true;\n        }\n      });\n      return isRunning;\n    };\n\n    this.getCleanTasks = function () {\n      return _.mapValues(selfTask.tasks, function (value) {\n        return value;\n      });\n    }; // Check if we have a task on error\n\n\n    this.taskOnError = function () {\n      var onError = false;\n      Object.keys(selfTask.tasks).forEach(function (key) {\n        var value = selfTask.tasks[key];\n\n        if (value.state === 'error') {\n          onError = true;\n        }\n      });\n      return onError;\n    };\n\n    this.addOrUpdate = function (task, isUserTask) {\n      if (typeof task.taskId === 'undefined') {\n        return;\n      }\n\n      if (selfTask.getAllowedTasks().indexOf(task.name) === -1) {\n        return; // task not allowed\n      }\n\n      var opts = {\n        serviceName: $stateParams.serviceName,\n        taskId: task.taskId,\n        isUserTask: isUserTask\n      };\n\n      _.set(task, 'displayState', $translate.instant(\"vdi_task_state_\".concat(task.state)));\n\n      _.set(task, 'displayName', $translate.instant(\"vdi_task_name_\".concat(task.name)));\n\n      _.set(task, 'status', task.state);\n\n      if (selfTask.isIn(task)) {\n        // we have the task, we need to update\n        // TODO If task change from one status to error or problem we need to display a message\n        if ((task.state === 'error' || task.state === 'problem') && selfTask.tasks[task.taskId].state !== task.state) {\n          // Display message and set flags\n          onTaskError(task);\n        }\n\n        selfTask.tasks[task.taskId].state = task.state;\n        selfTask.tasks[task.taskId].displayState = task.displayState;\n        selfTask.tasks[task.taskId].displayName = task.displayName;\n        selfTask.tasks[task.taskId].lastModificationDate = task.lastModificationDate;\n        selfTask.tasks[task.taskId].progress = task.progress;\n        selfTask.tasks[task.taskId].status = task.state; // TODO remove task if status == 'done' and display a message\n\n        if (task.state === 'done') {\n          OvhApiDeskaasService.stopPollTask($scope, opts);\n          onTaskSuccess(task);\n        } else if (task.state === 'canceled') {\n          OvhApiDeskaasService.stopPollTask($scope, opts);\n        }\n\n        return;\n      }\n\n      _.set(task, 'serviceName', $stateParams.serviceName);\n\n      _.set(task, 'isUserTask', false);\n\n      _.set(task, 'poller', OvhApiDeskaasService.pollTask($scope, opts).then(selfTask.addOrUpdate, selfTask.addOrUpdate, selfTask.addOrUpdate)); // Add a new entry in the map\n\n\n      selfTask.tasks[task.taskId] = task;\n      selfTask.cleanTasks.push(task);\n    };\n  };\n\n  self.flags = {\n    init: {\n      getTasks: false,\n      details: false,\n      serviceInfos: false,\n      user: false\n    },\n    can_upgrade: function can_upgrade() {\n      var ref = []; // Tasks are retrieved, no upgrading and planCode and offers are retrieved\n\n      if (!self.flags.init.getTasks && !self.flags.upgrading && _.has(self, 'details.planCode') && self.OrderPlanOffers.length !== 0) {\n        ref = DeskaasService.getUpgradeOptions(self.details.planCode);\n      }\n\n      self.upgradeOptions = ref;\n      return self.upgradeOptions.length !== 0;\n    },\n    initializing: function initializing() {\n      return self.flags.init.getTasks || self.flags.init.details || self.flags.init.serviceInfos || self.flags.init.user;\n    },\n    restoring: false,\n    rebooting: false,\n    upgrading: false,\n    resettingPassword: false,\n    changingAlias: false,\n    changingUsername: false,\n    deleting: false,\n    error: function error() {\n      return self.tasksHandler.taskOnError();\n    },\n    taskRunning: function taskRunning() {\n      return self.tasksHandler.tasksIsRunning();\n    },\n    ready: function ready() {\n      return !self.flags.taskRunning();\n    },\n    actionable: function actionable() {\n      return self.services.status === 'ok';\n    },\n    editable: function editable() {\n      return self.flags.ready() && !self.flags.initializing() && !self.flags.error() && self.flags.actionable();\n    }\n  };\n\n  function handleMethodCall(promise, success) {\n    return promise.then(success).catch(function (err) {\n      var msg = _.get(err, 'data.message', '');\n\n      CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n      return $q.reject(err);\n    });\n  }\n\n  function handleServiceMethodCall(promise, successMessage, flagName) {\n    self.flags[flagName] = true;\n    return handleMethodCall(promise, function (response) {\n      CloudMessage.success(successMessage);\n      return response;\n    }).catch(function (err) {\n      self.flags[flagName] = false;\n      return $q.reject(err);\n    });\n  }\n\n  function getConsole() {\n    var promise = OvhApiDeskaasService.v6().console({\n      serviceName: $stateParams.serviceName\n    }, null).$promise;\n    return handleServiceMethodCall(promise, $translate.instant('vdi_console_task'), 'getConsoleAccess').then(function (response) {\n      handleTask(response.taskId, true);\n    });\n  }\n\n  self.getConsole = function () {\n    return ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/deskaas/deskaas-get-console-access/deskaas-get-console-access.html',\n        controller: 'DeskaasGetConsoleAccessCtrl',\n        controllerAs: 'DeskaasGetConsoleAccessCtrl',\n        backdrop: 'static',\n        size: 'md'\n      }\n    }).then(function () {\n      getConsole().catch(function (err) {\n        var msg = _.get(err, 'data.message', '');\n\n        CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n      });\n    });\n  };\n\n  self.deleteService = function () {\n    return ControllerHelper.modal.showConfirmationModal({\n      titleText: $translate.instant('vdi_btn_delete'),\n      text: $translate.instant('vdi_confirm_delete')\n    }).then(function () {\n      var promise = OvhApiDeskaasService.v6().deleteService({\n        serviceName: $stateParams.serviceName\n      }, null).$promise;\n      return handleServiceMethodCall(promise, $translate.instant('vdi_deleting'), 'deleting');\n    });\n  };\n\n  function resetPassword(passwordParams) {\n    var promise;\n\n    if (passwordParams.generatePwd) {\n      promise = OvhApiDeskaasService.v6().resetPassword({\n        serviceName: $stateParams.serviceName\n      }, null).$promise;\n    } else if (passwordParams.password) {\n      promise = OvhApiDeskaasService.v6().resetPassword({\n        serviceName: $stateParams.serviceName\n      }, {\n        password: passwordParams.password\n      }).$promise;\n    } else {\n      return $q.when();\n    }\n\n    return handleServiceMethodCall(promise, $translate.instant('vdi_resetting_password'), 'resettingPassword').then(function (response) {\n      handleTask(response.taskId, true);\n    });\n  }\n\n  self.resetPassword = function () {\n    var modal = $uibModal.open({\n      templateUrl: 'app/deskaas/deskaas-change-password/deskaas-change-password.html',\n      controller: 'DeskaasChangePasswordCtrl',\n      controllerAs: 'vm',\n      backdrop: 'static',\n      size: 'lg',\n      resolve: {\n        service: function service() {\n          return self.serviceName;\n        }\n      }\n    });\n    modal.result.then(function (modalValues) {\n      resetPassword(modalValues).catch(function (err) {\n        var msg = _.get(err, 'data.message', '');\n\n        CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n      });\n    });\n  };\n\n  self.restoreService = function () {\n    return ControllerHelper.modal.showConfirmationModal({\n      titleText: $translate.instant('vdi_btn_restore'),\n      text: $translate.instant('vdi_confirm_restore')\n    }).then(function () {\n      var promise = OvhApiDeskaasService.v6().restoreService({\n        serviceName: $stateParams.serviceName\n      }, null).$promise;\n      return handleServiceMethodCall(promise, $translate.instant('vdi_restoring'), 'restoring').then(function (response) {\n        handleTask(response.taskId);\n      });\n    });\n  };\n\n  self.rebootService = function () {\n    return ControllerHelper.modal.showConfirmationModal({\n      titleText: $translate.instant('vdi_btn_reboot'),\n      text: $translate.instant('vdi_confirm_reboot')\n    }).then(function () {\n      var promise = OvhApiDeskaasService.v6().rebootService({\n        serviceName: $stateParams.serviceName\n      }, null).$promise;\n      return handleServiceMethodCall(promise, $translate.instant('vdi_rebooting'), 'rebooting').then(function (response) {\n        handleTask(response.taskId);\n      });\n    });\n  };\n\n  self.serviceInfos = function () {\n    self.flags.init.serviceInfos = true;\n    var promise = OvhApiDeskaasService.v6().serviceInfos({\n      serviceName: $stateParams.serviceName\n    }).$promise;\n    return handleMethodCall(promise, function (response) {\n      self.services = response;\n    }).finally(function () {\n      self.flags.init.serviceInfos = false;\n    });\n  };\n\n  self.hasValidAlias = function () {\n    var alias = _.get(self, 'details.alias', 'noAlias');\n\n    return alias && alias !== 'noAlias';\n  };\n\n  function changeAlias(newDisplayName) {\n    var promise;\n\n    if (newDisplayName) {\n      promise = OvhApiDeskaasService.v6().changeAlias({\n        serviceName: $stateParams.serviceName\n      }, {\n        alias: newDisplayName\n      }).$promise;\n    } else {\n      return $q.when();\n    }\n\n    return handleServiceMethodCall(promise, $translate.instant('vdi_alias_changing'), 'changingAlias').then(function (response) {\n      handleTask(response.taskId, false);\n    });\n  }\n\n  self.changeAlias = function () {\n    ControllerHelper.modal.showNameChangeModal({\n      serviceName: self.details.serviceName,\n      displayName: self.details.alias !== 'noAlias' ? self.details.alias : ''\n    }).then(function (newDisplayName) {\n      changeAlias(newDisplayName).catch(function (err) {\n        var msg = _.get(err, 'data.message', '');\n\n        CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n      });\n    });\n  };\n\n  self.upgrade = function () {\n    $state.go('deskaas.details.upgrade', {\n      serviceName: self.serviceName,\n      references: self.upgradeOptions\n    });\n  };\n\n  function changeUsername(modalData) {\n    var promise;\n\n    if (modalData.newUsername) {\n      promise = OvhApiDeskaasService.v6().changeUsername({\n        serviceName: $stateParams.serviceName\n      }, {\n        username: modalData.newUsername\n      }).$promise;\n    } else {\n      return $q.when();\n    }\n\n    return handleServiceMethodCall(promise, $translate.instant('vdi_username_changing'), 'changingUsername').then(function (response) {\n      handleTask(response.taskId, true);\n    });\n  }\n\n  self.changeUsername = function () {\n    var modal = $uibModal.open({\n      templateUrl: 'app/deskaas/deskaas-change-username/deskaas-change-username.html',\n      controller: 'DeskaasChangeUsernameCtrl',\n      controllerAs: 'DeskaasChangeUsernameCtrl',\n      backdrop: 'static',\n      size: 'md',\n      resolve: {\n        service: function service() {\n          return self.serviceName;\n        }\n      }\n    });\n    modal.result.then(function (modalData) {\n      changeUsername(modalData).catch(function (err) {\n        var msg = _.get(err, 'data.message', '');\n\n        CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n      });\n    });\n  };\n\n  function confirmTerminate(terminateParams) {\n    var promise;\n\n    if (terminateParams.token && terminateParams.reason) {\n      promise = OvhApiDeskaasService.v6().confirmTerminate({\n        serviceName: $stateParams.serviceName\n      }, {\n        token: terminateParams.token,\n        reason: terminateParams.reason,\n        commentary: terminateParams.commentary\n      }).$promise;\n    } else {\n      return $q.when();\n    }\n\n    return handleServiceMethodCall(promise, $translate.instant('vdi_terminate_confirming'), 'confirmingTerminate').then(function (response) {\n      handleTask(response.taskId, true);\n    });\n  }\n\n  self.confirmTerminate = function () {\n    return ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/deskaas/deskaas-confirm-terminate/deskaas-confirm-terminate.html',\n        controller: 'DeskaasConfirmTerminateCtrl',\n        controllerAs: 'DeskaasConfirmTerminateCtrl',\n        backdrop: 'static',\n        size: 'md',\n        resolve: {\n          service: function service() {\n            return self.serviceName;\n          },\n          token: function token() {\n            return $stateParams.token;\n          }\n        }\n      }\n    }).then(function (modalData) {\n      confirmTerminate(modalData).catch(function (err) {\n        var msg = _.get(err, 'data.message', '');\n\n        CloudMessage.error([$translate.instant('common_api_error'), msg].join(' '));\n      });\n    });\n  };\n\n  self.getDetails = function () {\n    self.flags.init.details = true;\n    var promise = DeskaasService.getDetails($stateParams.serviceName);\n    return handleMethodCall(promise, function (response) {\n      response.displayName = response.alias === 'noAlias' ? response.serviceName : response.alias;\n      self.services.offer = _.get(self.references[response.planCode], 'name');\n      self.details = response;\n    }).finally(function () {\n      self.flags.init.details = false;\n    });\n  };\n\n  self.getUser = function () {\n    self.flags.init.user = true;\n    var promise = OvhApiDeskaasService.v6().getUser({\n      serviceName: $stateParams.serviceName\n    }).$promise;\n    return handleMethodCall(promise, function (response) {\n      self.user = response;\n    }).finally(function () {\n      self.flags.init.user = false;\n    });\n  };\n\n  self.taskBackgroud = function (task) {\n    if (task.state === 'error') {\n      return 'bg-danger';\n    }\n\n    if (task.state === 'todo') {\n      return 'bg-info';\n    }\n\n    if (task.state === 'done') {\n      return 'bg-success';\n    }\n\n    return 'bg-warning';\n  };\n\n  function getInitTasks(taskIds) {\n    if (taskIds.length === 0) {\n      self.flags.init.getTasks = false;\n      return $q.when();\n    }\n\n    if (taskIds.length > 1) {\n      return OvhApiDeskaasService.v6().getTaskBatch({\n        serviceName: $stateParams.serviceName,\n        taskId: taskIds\n      }, null).$promise.then(function (tasksDetails) {\n        tasksDetails.forEach(function (taskDetail) {\n          updateTasksStatus(taskDetail.value);\n        });\n        self.flags.init.getTasks = false;\n      });\n    }\n\n    return OvhApiDeskaasService.v6().getTask({\n      serviceName: $stateParams.serviceName,\n      taskId: taskIds\n    }, null).$promise.then(function (tasksDetail) {\n      updateTasksStatus(tasksDetail);\n      self.flags.init.getTasks = false;\n    });\n  }\n\n  self.changeMenuTitle = function (serviceName, displayName) {\n    var menuItem = SidebarMenu.getItemById(serviceName);\n\n    if (menuItem) {\n      menuItem.title = displayName;\n    }\n  };\n\n  self.getRunningTasks = function () {\n    self.flags.init.getTasks = true;\n    return $q.all([OvhApiDeskaasService.v6().getAllTasks({\n      serviceName: $stateParams.serviceName\n    }, null).$promise, OvhApiDeskaasService.v6().getDoneTasks({\n      serviceName: $stateParams.serviceName\n    }, null).$promise, OvhApiDeskaasService.v6().getCanceledTasks({\n      serviceName: $stateParams.serviceName\n    }, null).$promise]).then(function (elements) {\n      var tasks = elements[0];\n      tasks = _.difference(tasks, elements[1]);\n      tasks = _.difference(tasks, elements[2]);\n      return tasks;\n    }).then(function (runningTasks) {\n      getInitTasks(runningTasks);\n    });\n  };\n\n  init(true);\n}]);",null]}