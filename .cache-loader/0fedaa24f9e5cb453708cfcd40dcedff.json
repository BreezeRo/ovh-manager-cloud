{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/upgrade/vps-upgrade.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/upgrade/vps-upgrade.controller.js","mtime":1539717142304},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsUpgradeCtrl =\n/*#__PURE__*/\nfunction () {\n  VpsUpgradeCtrl.$inject = [\"$filter\", \"$stateParams\", \"$state\", \"$translate\", \"$q\", \"$window\", \"CloudMessage\", \"CloudNavigation\", \"ControllerHelper\", \"VpsService\"];\n\n  function VpsUpgradeCtrl($filter, $stateParams, $state, $translate, $q, $window, CloudMessage, CloudNavigation, ControllerHelper, VpsService) {\n    _classCallCheck(this, VpsUpgradeCtrl);\n\n    this.$filter = $filter;\n    this.$translate = $translate;\n    this.$q = $q;\n    this.$window = $window;\n    this.CloudMessage = CloudMessage;\n    this.CloudNavigation = CloudNavigation;\n    this.ControllerHelper = ControllerHelper;\n    this.serviceName = $stateParams.serviceName;\n    this.Vps = VpsService;\n    this.loaders = {\n      step1: false,\n      step2: false\n    };\n    this.completed = {\n      step1: false,\n      step2: false\n    };\n    this.order = null;\n    this.selectedModel = {};\n    this.upgradesList = null;\n  }\n\n  _createClass(VpsUpgradeCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.previousState = this.CloudNavigation.getPreviousState();\n    }\n  }, {\n    key: \"getCurrentModel\",\n    value: function getCurrentModel() {\n      return _.find(this.upgradesList, function (upgrade) {\n        return upgrade.isCurrentModel === true;\n      });\n    }\n  }, {\n    key: \"validateStep1\",\n    value: function validateStep1() {\n      if (this.selectedModel.model === this.getCurrentModel().model) {\n        var title = this.$translate.instant('vps_warning_title');\n        var message = this.$translate.instant('vps_configuration_upgradevps_step1_warning');\n        this.ControllerHelper.modal.showWarningModal({\n          title: title,\n          message: message\n        });\n        throw new Error(message);\n      } else {\n        this.completed.step1 = true;\n      }\n    }\n  }, {\n    key: \"loadUpgradesList\",\n    value: function loadUpgradesList() {\n      var _this = this;\n\n      if (!this.upgradesList) {\n        this.loaders.step1 = true;\n        return this.Vps.upgradesList(this.serviceName).then(function (data) {\n          _this.upgradesList = data.results;\n          _this.selectedModel.model = _this.getCurrentModel().model;\n          return data;\n        }).catch(function (err) {\n          _this.$q.reject(err);\n\n          if (err.message) {\n            _this.CloudMessage.error(err.message);\n          } else {\n            _this.CloudMessage.error(_this.$translate.instant('vps_configuration_upgradevps_fail'));\n          }\n\n          _this.previousState.go();\n        }).finally(function () {\n          _this.loaders.step1 = false;\n        });\n      }\n\n      return this.$q.when();\n    }\n  }, {\n    key: \"initVpsConditions\",\n    value: function initVpsConditions() {\n      var _this2 = this;\n\n      this.conditionsAgree = false;\n      this.loaders.step2 = true;\n      this.order = null;\n\n      var modelToUpgradeTo = _.find(this.upgradesList, function (e) {\n        return e.model === _.first(_this2.selectedModel.model.split(':')) && e.name === _this2.selectedModel.model.split(':')[1];\n      });\n\n      if (_.isEmpty(modelToUpgradeTo)) {\n        return this.$q.when(true);\n      }\n\n      this.selectedModelForUpgrade = modelToUpgradeTo;\n      return this.Vps.upgrade(this.serviceName, this.selectedModelForUpgrade.model, this.selectedModelForUpgrade.duration.duration).then(function (data) {\n        _this2.conditionsAgree = false;\n        _this2.selectedModelForUpgrade.duration.dateFormatted = _this2.$filter('date')(_this2.selectedModelForUpgrade.duration.date, 'dd/MM/yyyy');\n        _this2.order = data;\n        return data;\n      }).catch(function (err) {\n        _this2.$q.reject(err);\n\n        if (err.message) {\n          _this2.CloudMessage.error(err.message);\n        } else {\n          _this2.CloudMessage.error(_this2.$translate.instant('vps_configuration_upgradevps_fail'));\n        }\n      }).finally(function () {\n        _this2.loaders.step2 = false;\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.previousState.go();\n    }\n  }, {\n    key: \"confirm\",\n    value: function confirm() {\n      this.displayBC();\n    }\n  }, {\n    key: \"displayBC\",\n    value: function displayBC() {\n      this.$window.open(this.order.url, '_blank');\n    }\n  }]);\n\n  return VpsUpgradeCtrl;\n}();\n\nangular.module('managerApp').controller('VpsUpgradeCtrl', VpsUpgradeCtrl);",null]}