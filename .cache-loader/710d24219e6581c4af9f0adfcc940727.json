{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/tokens/logs-tokens.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/tokens/logs-tokens.controller.js","mtime":1539717142154},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsTokensCtrl {\n  constructor($q, $state, $stateParams, $translate, LogsTokensService, ControllerHelper,\n    CloudMessage) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.$translate = $translate;\n    this.LogsTokensService = LogsTokensService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n\n    this.initLoaders();\n  }\n\n  /**\n   * load tokens array by making API call to get data\n   *\n   * @memberof LogsTokensCtrl\n   */\n  initLoaders() {\n    this.tokens = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsTokensService.getTokens(this.serviceName)\n        .then(tokens => tokens.map((token) => {\n          _.set(token, 'isLoadingCluster', true);\n          return token;\n        })),\n    });\n    this.clusters = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsTokensService.getClusters(this.serviceName),\n    });\n    this.tokens.load();\n    this.clusters.load();\n    this.$q.all([this.clusters.promise, this.tokens.promise])\n      .then((result) => {\n        const clusters = result[0];\n        const tokens = result[1];\n        tokens.map((token) => {\n          _.set(token, 'cluster', clusters.find(cluster => cluster.clusterId === token.clusterId) || {});\n          _.set(token, 'isLoadingCluster', false);\n          return token;\n        });\n      });\n  }\n\n  /**\n   * show delete token confirmation modal\n   *\n   * @param {any} token to delete\n   * @memberof LogsTokensCtrl\n   */\n  showDeleteConfirm(token) {\n    this.CloudMessage.flushChildMessage();\n    return this.ControllerHelper.modal.showDeleteModal({\n      titleText: this.$translate.instant('logs_tokens_delete_title'),\n      textHtml: this.$translate.instant('logs_tokens_delete_message', { tokenName: token.name }),\n    }).then(() => this.remove(token));\n  }\n\n  goToHomePage() {\n    this.$state.go('dbaas.logs.detail', {\n      serviceName: this.serviceName,\n    });\n  }\n\n  /**\n   * delete token\n   *\n   * @param {any} token to delete\n   * @memberof LogsTokensCtrl\n   */\n  remove(token) {\n    this.delete = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsTokensService.deleteToken(this.serviceName, token)\n        .then(() => this.initLoaders())\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    this.delete.load();\n  }\n}\n\nangular.module('managerApp').controller('LogsTokensCtrl', LogsTokensCtrl);\n"]}