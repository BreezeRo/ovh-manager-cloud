{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vrack/vrack.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vrack/vrack.service.js","mtime":1539717142313},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VrackService {\n  constructor($q, $translate, ControllerHelper, OvhApiVrack) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.OvhApiVrack = OvhApiVrack;\n  }\n\n  static getGroupedServiceTypes() {\n    return ['dedicatedCloudDatacenter', 'dedicatedCloud', 'dedicatedServerInterface'];\n  }\n\n  isGroupedServiceType(serviceType) {\n    return _.includes(this.constructor.getGroupedServiceTypes(), serviceType);\n  }\n\n  getVracks() {\n    this.OvhApiVrack.Aapi().resetCache();\n    return this.OvhApiVrack.Aapi().query().$promise.then((vracks) => {\n      _.map(vracks, (vrack) => {\n        _.set(vrack, 'serviceName', vrack.id);\n        _.set(vrack, 'displayName', vrack.name || vrack.id);\n      });\n      return vracks;\n    });\n  }\n\n  getOrderUrl() {\n    return this.ControllerHelper.navigation.getConstant('website_order.vrack');\n  }\n\n  selectVrackModal(vRacks, orderUrl) {\n    return this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/vrack/modals/selectVrack.html',\n        controller: 'SelectVrackCtrl',\n        controllerAs: '$ctrl',\n        resolve: {\n          params: () => ({\n            orderUrl,\n            vRacks,\n          }),\n        },\n      },\n    });\n  }\n\n  selectVrack() {\n    return this.$q.all({\n      orderUrl: this.getOrderUrl(),\n      vracks: this.getVracks(),\n    })\n      .then(data => this.selectVrackModal(data.vracks, data.orderUrl));\n  }\n\n  linkCloudProjectToVrack(selectedVrack, projectId) {\n    return this.OvhApiVrack.CloudProject().v6().create({\n      serviceName: selectedVrack,\n    }, {\n      project: projectId,\n    }).$promise\n      .then(vrackTask => vrackTask.data.id);\n  }\n\n  unlinkVrackModal(text) {\n    return this.ControllerHelper.modal.showConfirmationModal({\n      submitButtonText: this.$translate.instant('common_deactivate'),\n      titleText: this.$translate.instant('private_network_deactivate'),\n      text: text || this.$translate.instant('private_network_deactivate_confirmation'),\n    });\n  }\n\n  unlinkCloudProjectFromVrack(selectedVrack, projectId) {\n    return this.OvhApiVrack.CloudProject().v6().delete({\n      serviceName: selectedVrack,\n      project: projectId,\n    }).$promise\n      .then(vrackTask => vrackTask.data.id);\n  }\n\n  getTask(serviceName, taskId) {\n    return this.OvhApiVrack.v6().task({ serviceName, taskId }).$promise;\n  }\n}\n\nangular.module('managerApp').service('VrackService', VrackService);\n"]}