{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/cloud-project-compute.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/cloud-project-compute.controller.js","mtime":1539717141968},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeCtrl {\n  constructor(\n    $q, $scope, $state, $stateParams, $translate, $window, OvhApiCloudProject, CloudMessage,\n    CloudProjectOrchestrator,\n    CloudUserPref, FeatureAvailabilityService, OvhApiMe, moment, PCI_ANNOUNCEMENTS,\n  ) {\n    this.$q = $q;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n    this.CloudMessage = CloudMessage;\n    this.CloudProjectOrchestrator = CloudProjectOrchestrator;\n    this.PCI_ANNOUNCEMENTS = PCI_ANNOUNCEMENTS;\n    this.OvhApiMe = OvhApiMe;\n    this.FeatureAvailabilityService = FeatureAvailabilityService;\n    this.CloudUserPref = CloudUserPref;\n    this.moment = moment;\n    this.messages = [];\n  }\n\n  $onInit() {\n    this.serviceName = this.$stateParams.projectId;\n    this.loading = true;\n    this.infoMessageDismissed = true;\n\n    this.loadMessage();\n    this.init();\n  }\n\n  loadMessage() {\n    this.CloudMessage.unSubscribe('iaas.pci-project.compute');\n    this.messageHandler = this.CloudMessage.subscribe('iaas.pci-project.compute', { onMessage: () => this.refreshMessage() });\n  }\n\n  refreshMessage() {\n    this.messages = this.messageHandler.getMessages();\n  }\n\n  getRouteContext() {\n    if (this.$state.includes('iaas.pci-project')) {\n      return 'iaas.pci-project.compute';\n    }\n    return '';\n  }\n\n  init() {\n    this.loading = true;\n\n    this.OvhApiMe.v6().get().$promise.then((me) => {\n      this.loadAnnouncements(me.ovhSubsidiary);\n    });\n\n    return this.shouldRedirectToProjectListView()\n      .then((redirect) => {\n        this.$scope.redirectToListView = redirect;\n      })\n      .finally(() => {\n        this.loading = false;\n      });\n  }\n\n  shouldRedirectToProjectListView() {\n    if (this.$stateParams.forceLargeProjectDisplay) {\n      return this.$q.when(false);\n    }\n\n    const hasTooMany = this.$q.all({\n      hasTooManyInstances: this.CloudProjectOrchestrator.hasTooManyInstances(\n        this.$stateParams.projectId,\n      ),\n      hasTooManyIps: this.CloudProjectOrchestrator.hasTooManyIps(this.$stateParams.projectId),\n    }).then(result => result.hasTooManyInstances || result.hasTooManyIps);\n\n    return this.CloudUserPref.get(`cloud_project_${this.serviceName}_overview`).then((params) => {\n      if (params && params.hide) {\n        return false;\n      }\n      return hasTooMany;\n    });\n  }\n\n  loadAnnouncements(ovhSubsidiary) {\n    const areDismissed = [];\n    _.forEach(this.PCI_ANNOUNCEMENTS, (announcement) => {\n      const now = moment();\n      const afterTheStart = now.isAfter(announcement.messageStart);\n      const beforeTheEnd = now.isBefore(announcement.messageEnd);\n      if (afterTheStart && beforeTheEnd) {\n        areDismissed.push(this.isInfoMessageDismissed(announcement));\n      }\n    });\n    this.$q.all(areDismissed).then((areDismissedMessages) => {\n      const messages = _.map(\n        areDismissedMessages,\n        announcement => this.augmentMessage(\n          announcement,\n          ovhSubsidiary,\n        ),\n      );\n      _.forEach(messages, message => this.CloudMessage.info(message));\n    });\n  }\n\n  augmentMessage(message, ovhSubsidiary) {\n    const augmentedMessage = _.cloneDeep(message);\n    augmentedMessage.dismiss = () => {\n      this.dismissInfoMessage(message.messageId);\n    };\n    augmentedMessage.text = this.$translate.instant(message.messageId);\n    if (!message.linkURL || _.isEmpty(message.linkURL)) {\n      return augmentedMessage;\n    }\n    augmentedMessage.link = {};\n    augmentedMessage.link.value = message.linkURL[ovhSubsidiary] || message.linkURL.EN;\n    if (message.hasLinkText) {\n      augmentedMessage.link.text = this.$translate.instant(`${message.messageId}_link`);\n    } else {\n      augmentedMessage.link.text = this.$translate.instant('cloud_message_pci_no_link');\n    }\n    return augmentedMessage;\n  }\n\n  dismissInfoMessage(messageId) {\n    this.CloudUserPref.set(messageId, { markedAsRead: new Date() });\n  }\n\n  isInfoMessageDismissed(message) {\n    return this.CloudUserPref.get(message.messageId).then((value) => {\n      _.set(message, 'dismissed', !!(!_.isEmpty(value) && value.markedAsRead));\n      return message;\n    });\n  }\n}\n\nangular.module('managerApp').controller('CloudProjectComputeCtrl', CloudProjectComputeCtrl);\n"]}