{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplb-zone-delete.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplb-zone-delete.controller.js","mtime":1539717142229},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerZoneDeleteCtrl {\n  constructor($q, $stateParams, CloudMessage, CloudNavigation, ControllerHelper,\n    IpLoadBalancerZoneDeleteService) {\n    this.$q = $q;\n    this.CloudMessage = CloudMessage;\n    this.CloudNavigation = CloudNavigation;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerZoneDeleteService = IpLoadBalancerZoneDeleteService;\n\n    this.serviceName = $stateParams.serviceName;\n\n    this.initLoaders();\n    this.initModel();\n  }\n\n  $onInit() {\n    this.previousState = this.CloudNavigation.getPreviousState();\n    this.zones.load();\n  }\n\n  submit() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n\n    this.saving = true;\n    this.CloudMessage.flushChildMessage();\n    return this.IpLoadBalancerZoneDeleteService\n      .deleteZones(this.serviceName, this.model.zones.value)\n      .then(() => {\n        this.previousState.go();\n      })\n      .finally(() => {\n        this.saving = false;\n      });\n  }\n\n  getDeletableZoneCount() {\n    return _.filter(this.zones.data, zone => zone.selectable.value !== false).length;\n  }\n\n  isLoading() {\n    return this.saving || this.zones.loading;\n  }\n\n  initLoaders() {\n    this.zones = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerZoneDeleteService\n        .getDeletableZones(this.serviceName),\n    });\n  }\n\n  initModel() {\n    this.model = {\n      zones: {\n        value: [],\n      },\n    };\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerZoneDeleteCtrl', IpLoadBalancerZoneDeleteCtrl);\n"]}