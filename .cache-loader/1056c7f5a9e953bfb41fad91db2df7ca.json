{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/home/logs-inputs-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/home/logs-inputs-home.controller.js","mtime":1539717142090},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsInputsHomeCtrl {\n  constructor($state, $stateParams, $translate, CloudMessage, ControllerHelper, LogsConstants,\n    LogsInputsService) {\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsInputsService = LogsInputsService;\n    this.initLoaders();\n  }\n\n  $onInit() {\n    this.runLoaders();\n  }\n\n  /**\n   * Deletes the input\n   *\n   * @param {any} input - the input object\n   * @memberof LogsInputsCtrl\n   */\n  delete(input) {\n    this.delete = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService.deleteInput(this.serviceName, input)\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    this.delete.load().then(() => this.runLoaders());\n  }\n\n  /**\n   * Executes an action on the input\n   *\n   * @param {any} input - the input on which the action has to be performed\n   * @param {any} actionFn - the action function to be called\n   * @memberof LogsInputsCtrl\n   */\n  executeAction(input, actionFn) {\n    this.setInputToProcessing(input);\n    this.processInput = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService[actionFn](this.serviceName, input)\n        .finally(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    this.processInput.load().finally(() => this.reloadInputDetail(input.info.inputId));\n  }\n\n  /**\n   * initializes the inputs and the quota\n   *\n   * @memberof LogsInputsCtrl\n   */\n  initLoaders() {\n    this.inputs = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsInputsService.getInputs(this.serviceName),\n    });\n    this.quota = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService.getQuota(this.serviceName),\n    });\n  }\n\n  /**\n   * Updates the list of inputs with the latest information of the input\n   *\n   * @param {any} inputId\n   * @returns promise which will be resolve with the reloaded input\n   * @memberof LogsInputsCtrl\n   */\n  reloadInputDetail(inputId) {\n    this.inputReload = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsInputsService.getInputDetail(this.serviceName, inputId),\n    });\n\n    return this.inputReload.load()\n      .then((input) => {\n        this.inputs.data.forEach((inputItem, inputIndex) => {\n          if (inputItem.info.inputId === input.info.inputId) {\n            this.inputs.data[inputIndex] = input;\n          }\n        });\n        return input;\n      });\n  }\n\n  /**\n   * Runs all the loaders to fetch data from APIs\n   *\n   * @memberof LogsInputsCtrl\n   */\n  runLoaders() {\n    this.inputs.load();\n    this.quota.load();\n  }\n\n  /**\n   * Sets the state of the input to Processing\n   *\n   * @param {any} input\n   * @memberof LogsInputsCtrl\n   */\n  setInputToProcessing(input) {\n    _.set(input, 'info.status', this.LogsConstants.inputStatus.PROCESSING);\n    this.LogsInputsService.transformInput(input);\n  }\n\n  /**\n   * navigates to the add page\n   *\n   * @memberof LogsInputsCtrl\n   */\n  add() {\n    this.CloudMessage.flushChildMessage();\n    this.$state.go('dbaas.logs.detail.inputs.addwizard.add', {\n      serviceName: this.serviceName,\n    });\n  }\n\n  /**\n   * navigates to the edit page\n   *\n   * @param {any} input - the input for which standard output is to be edited\n   * @memberof LogsInputsCtrl\n   */\n  edit(input) {\n    this.CloudMessage.flushChildMessage();\n    this.$state.go('dbaas.logs.detail.inputs.editwizard.edit', {\n      serviceName: this.serviceName,\n      inputId: input.info.inputId,\n    });\n  }\n\n  /**\n   * Opens the info pop-up for the input\n   *\n   * @param {any} input - the input for which info is to be displayed\n   * @memberof LogsInputsCtrl\n   */\n  info(input) {\n    this.CloudMessage.flushChildMessage();\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/dbaas/logs/detail/inputs/home/info/logs-inputs-home-info.html',\n        controller: 'LogsInputsHomeInfoModalCtrl',\n        controllerAs: 'ctrl',\n        resolve: {\n          currentInput: () => input,\n        },\n      },\n    });\n  }\n\n  /**\n   * Shows the confirmation modal box for input deletion confirmation\n   * and deletes the input if the user confirms the deletion\n   *\n   * @param {any} input - the input object\n   * @memberof LogsInputsCtrl\n   */\n  showDeleteConfirm(input) {\n    this.CloudMessage.flushChildMessage();\n    return this.ControllerHelper.modal.showDeleteModal({\n      titleText: this.$translate.instant('inputs_delete'),\n      textHtml: this.$translate.instant('inputs_delete_message', { input: input.info.title }),\n    }).then(() => this.delete(input));\n  }\n\n  /**\n   * Restarts the input\n   *\n   * @param {any} input - the input to be restarted\n   * @memberof LogsInputsCtrl\n   */\n  restartInput(input) {\n    this.CloudMessage.info(this.$translate.instant('inputs_restarting', { inputTitle: input.info.title }));\n    this.executeAction(input, 'restartInput');\n  }\n\n  /**\n   * navigates to the standard output page\n   *\n   * @param {any} input - the input for which standard output is to be displayed\n   * @memberof LogsInputsCtrl\n   */\n  standardOutput(input) {\n    this.CloudMessage.flushChildMessage();\n    this.$state.go('dbaas.logs.detail.inputs.console', {\n      serviceName: this.serviceName,\n      inputId: input.info.inputId,\n    });\n  }\n\n  /**\n   * Starts the input\n   *\n   * @param {any} input - the input to be started\n   * @memberof LogsInputsCtrl\n   */\n  startInput(input) {\n    this.CloudMessage.info(this.$translate.instant('inputs_starting', { inputTitle: input.info.title }));\n    this.executeAction(input, 'startInput');\n  }\n\n  /**\n   * Stops the input\n   *\n   * @param {any} input - the input to be stopped\n   * @memberof LogsInputsCtrl\n   */\n  stopInput(input) {\n    this.CloudMessage.info(this.$translate.instant('inputs_stopping', { inputTitle: input.info.title }));\n    this.executeAction(input, 'stopInput');\n  }\n}\n\nangular.module('managerApp').controller('LogsInputsHomeCtrl', LogsInputsHomeCtrl);\n"]}