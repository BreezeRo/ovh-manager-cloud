{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/cloud-database/vps-cloud-database.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/cloud-database/vps-cloud-database.controller.js","mtime":1539717374623},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsCloudDatabaseCtrl =\n/*#__PURE__*/\nfunction () {\n  VpsCloudDatabaseCtrl.$inject = [\"$q\", \"$stateParams\", \"$timeout\", \"$translate\", \"$window\", \"CloudMessage\", \"ControllerHelper\", \"OvhApiHostingPrivateDatabase\", \"VpsService\"];\n\n  function VpsCloudDatabaseCtrl($q, $stateParams, $timeout, $translate, $window, CloudMessage, ControllerHelper, OvhApiHostingPrivateDatabase, VpsService) {\n    _classCallCheck(this, VpsCloudDatabaseCtrl);\n\n    this.$q = $q;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.ApiPrivateDb = OvhApiHostingPrivateDatabase.v6();\n    this.ApiWhitelist = OvhApiHostingPrivateDatabase.Whitelist().v6();\n    this.VpsService = VpsService;\n  }\n\n  _createClass(VpsCloudDatabaseCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.serviceName = this.$stateParams.serviceName;\n      this.statusFilterOptions = {\n        values: _.reduce(['detached', 'restartPending', 'startPending', 'started', 'stopPending', 'stopped'], function (result, key) {\n          return Object.assign({}, result, _defineProperty({}, key, _this.$translate.instant(\"common_database_status_\".concat(key))));\n        }, {})\n      };\n      this.ipv4 = null;\n      this.cloudDatabases = [];\n      this.refresh();\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this2 = this;\n\n      this.loading = true;\n      return this.loadIps().then(function (_ref) {\n        var results = _ref.results;\n\n        if (_(results).isString()) {\n          throw new Error('Temporary error from the API');\n        }\n\n        _this2.ipv4 = _(results).chain().find({\n          version: 'v4'\n        }).get('ipAddress').value();\n      }).then(function () {\n        return _this2.loadDatabases();\n      }).then(function (databases) {\n        _this2.cloudDatabases = databases;\n        _this2.loading = false;\n      });\n    }\n  }, {\n    key: \"loadIps\",\n    value: function loadIps() {\n      return this.VpsService.getIps(this.serviceName);\n    }\n  }, {\n    key: \"loadDatabases\",\n    value: function loadDatabases() {\n      var _this3 = this;\n\n      return this.ApiPrivateDb.query().$promise.then(function (serviceNames) {\n        return _this3.$q.all(_.map(serviceNames, function (serviceName) {\n          return _this3.ApiPrivateDb.get({\n            serviceName: serviceName\n          }).$promise;\n        }));\n      }).then(function (databases) {\n        return _.filter(databases, {\n          offer: 'public'\n        });\n      }).then(function (databases) {\n        return _this3.$q.all(_.map(databases, function (database) {\n          return _this3.isVpsAuthorized(database.serviceName).then(function (vpsAuthorized) {\n            return _.defaults({\n              vpsAuthorized: vpsAuthorized\n            }, database);\n          });\n        }));\n      }).then(function (databases) {\n        return _.map(databases, function (database) {\n          return _.defaults({\n            name: database.displayName || database.serviceName\n          }, database);\n        });\n      }).catch(function (error) {\n        _this3.CloudMessage.error([_this3.$translate.instant('vps_tab_cloud_database_fetch_error'), _(error).get('data.message', '')].join(' '));\n      });\n    }\n  }, {\n    key: \"isVpsAuthorized\",\n    value: function isVpsAuthorized(serviceName) {\n      return this.ApiWhitelist.query({\n        serviceName: serviceName,\n        ip: this.ipv4,\n        service: true\n      }).$promise.then(function (whitelist) {\n        return !_.isEmpty(whitelist);\n      });\n    }\n  }, {\n    key: \"addAuthorizedIp\",\n    value: function addAuthorizedIp(database) {\n      var _this4 = this;\n\n      var serviceName = database.serviceName;\n      return this.ApiWhitelist.post({\n        serviceName: serviceName\n      }, {\n        ip: this.ipv4,\n        name: this.$translate.instant('vps_tab_cloud_database_whitelist_ip_name', {\n          vps: this.serviceName\n        }),\n        service: true,\n        sftp: false\n      }).$promise.then(function () {\n        _this4.$timeout(function () {\n          _this4.CloudMessage.success(_this4.$translate.instant('vps_tab_cloud_database_whitelist_add_success'));\n\n          _this4.refresh();\n        }, 2000);\n      }).catch(function (error) {\n        _this4.CloudMessage.error([_this4.$translate.instant('vps_tab_cloud_database_whitelist_add_error'), _(error).get('data.message', '')].join(' '));\n      });\n    }\n  }, {\n    key: \"removeAuthorizedIp\",\n    value: function removeAuthorizedIp(database) {\n      var _this5 = this;\n\n      var serviceName = database.serviceName;\n      return this.ApiWhitelist.deleteIp({\n        serviceName: serviceName\n      }, {\n        ip: this.ipv4\n      }).$promise.then(function () {\n        _this5.$timeout(function () {\n          _this5.CloudMessage.success(_this5.$translate.instant('vps_tab_cloud_database_whitelist_remove_success'));\n\n          _this5.refresh();\n        }, 2000);\n      }).catch(function (error) {\n        _this5.CloudMessage.error([_this5.$translate.instant('vps_tab_cloud_database_whitelist_remove_error'), _(error).get('data.message', '')].join(' '));\n      });\n    }\n  }, {\n    key: \"goToCloudDatabase\",\n    value: function goToCloudDatabase(database) {\n      var serviceName = database.serviceName;\n      this.$window.open(this.ControllerHelper.navigation.getUrl('privateDatabase', {\n        serviceName: serviceName\n      }));\n    }\n  }]);\n\n  return VpsCloudDatabaseCtrl;\n}();\n\nangular.module('managerApp').controller('VpsCloudDatabaseCtrl', VpsCloudDatabaseCtrl);",null]}