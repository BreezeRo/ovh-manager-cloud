{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/alerts/add/alerts-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/alerts/add/alerts-add.controller.js","mtime":1539717142145},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsStreamsAlertsAddCtrl {\n  constructor($q, $state, $stateParams, $window, CloudMessage, ControllerHelper, LogsConstants,\n    LogsStreamsAlertsService) {\n    this.$q = $q;\n    this.$state = $state;\n    this.serviceName = $stateParams.serviceName;\n    this.streamId = $stateParams.streamId;\n    this.alertId = $stateParams.alertId;\n    this.alertType = $stateParams.type;\n    this.editMode = Boolean(this.alertId);\n    this.$window = $window;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsConstants = LogsConstants;\n    this.LogsStreamsAlertsService = LogsStreamsAlertsService;\n  }\n\n  $onInit() {\n    if (this.editMode) {\n      this.alert = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.LogsStreamsAlertsService\n          .getAlert(this.serviceName, this.streamId, this.alertId),\n      });\n      this.alert.load()\n        .then((alert) => {\n          this.alertType = alert.conditionType;\n        });\n    } else {\n      this.LogsStreamsAlertsService.getNewAlert(this.alertType)\n        .then((alert) => { this.alert = alert; });\n    }\n  }\n\n  /**\n   * Adds a new alert by making an API call\n   *\n   * @memberof LogsStreamsAlertsAddCtrl\n   */\n  saveAlert() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n\n    this.CloudMessage.flushChildMessage();\n    this.savingAlert = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => (this.editMode\n        ? this.LogsStreamsAlertsService\n          .updateAlert(this.serviceName, this.streamId, this.alert.data)\n        : this.LogsStreamsAlertsService.addAlert(this.serviceName, this.streamId, this.alert.data)),\n    });\n    return this.savingAlert.load()\n      .then(() => this.$state.go('dbaas.logs.detail.streams.alerts'));\n  }\n\n  /**\n   * Cancels the Alert add operation and redirects\n   * to the parent page\n   *\n   * @memberof LogsStreamsAlertsAddCtrl\n   */\n  cancel() {\n    this.$state.go('dbaas.logs.detail.streams.alerts');\n  }\n\n  /**\n   * Returns the valid threshold types based on the condition (alert) type\n   *\n   * @memberof LogsStreamsAlertsAddCtrl\n   */\n  getThresholdTypes() {\n    if (this.alertType === this.LogsConstants.alertType.numeric) {\n      return [this.LogsConstants.thresholdType.lower, this.LogsConstants.thresholdType.higher];\n    }\n    return [this.LogsConstants.thresholdType.more, this.LogsConstants.thresholdType.less];\n  }\n\n  /**\n   * Returns the constraint types\n   *\n   * @memberof LogsStreamsAlertsAddCtrl\n   */\n  getConstraintTypes() {\n    return Object.values(this.LogsConstants.constraintType);\n  }\n}\n\nangular.module('managerApp').controller('LogsStreamsAlertsAddCtrl', LogsStreamsAlertsAddCtrl);\n"]}