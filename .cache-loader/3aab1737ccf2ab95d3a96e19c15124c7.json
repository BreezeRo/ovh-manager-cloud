{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/dual-list/dual-list.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/ui-components/dual-list/dual-list.controller.js","mtime":1539717142259},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class DualListCtrl {\n  constructor($q, $element, DualListProvider) {\n    this.$q = $q;\n    this.$element = $element;\n    this.dualListProvider = DualListProvider;\n  }\n\n  $onInit() {\n    this.sourceListLabel = this.sourceListLabel\n      || this.dualListProvider.translations.sourceListLabel;\n    this.targetListLabel = this.targetListLabel\n      || this.dualListProvider.translations.targetListLabel;\n    this.moveAllLabel = this.moveAllLabel || this.dualListProvider.translations.moveAllLabel;\n    this.removeAllLabel = this.removeAllLabel || this.dualListProvider.translations.removeAllLabel;\n    this.sourceListEmptyLabel = this.sourceListEmptyLabel\n      || this.dualListProvider.translations.sourceListEmptyLabel;\n    this.targetListEmptyLabel = this.targetListEmptyLabel\n      || this.dualListProvider.translations.targetListEmptyLabel;\n    this.addLabel = this.addLabel || this.dualListProvider.translations.addLabel;\n    this.height = this.height || this.dualListProvider.height;\n    this.bulkActionEnabled = this.bulkActionEnabled || this.dualListProvider.bulkActionEnabled;\n    this.sourceList = this.sourceList || [];\n    this.targetList = this.targetList || [];\n    this.onAdd = this.onAdd || null;\n    this.onRemove = this.onRemove || null;\n    this.property = this.property || null;\n\n    this.loadingMap = {};\n    this.targetCloseIconStyle = {};\n    this.targetOpenIconStyle = {};\n    this.targetContentStyle = {};\n    this.sourceCloseIconStyle = {};\n    this.sourceOpenIconStyle = {};\n    this.sourceContentStyle = {};\n    this.sourceListLoading = false;\n    this.targetListLoading = false;\n    this.displayNoneStyle = { display: 'none' };\n    this.displayBlockStyle = { display: 'inline-block' };\n    this.displayFlexStyle = { display: 'flex' };\n    this.listHeight = { height: this.height };\n    this.loadSourceList();\n    this.loadtargetList();\n  }\n\n  onTargetContentClose() {\n    this.targetCloseIconStyle = this.displayNoneStyle;\n    this.targetOpenIconStyle = this.displayBlockStyle;\n    this.targetContentStyle = this.displayFlexStyle;\n  }\n\n  onTargetContentOpen() {\n    this.targetCloseIconStyle = this.displayBlockStyle;\n    this.targetOpenIconStyle = this.displayNoneStyle;\n    this.targetContentStyle = this.displayNoneStyle;\n  }\n\n  onSourceContentClose() {\n    this.sourceCloseIconStyle = this.displayNoneStyle;\n    this.sourceOpenIconStyle = this.displayBlockStyle;\n    this.sourceContentStyle = this.displayFlexStyle;\n  }\n\n  onSourceContentOpen() {\n    this.sourceCloseIconStyle = this.displayBlockStyle;\n    this.sourceOpenIconStyle = this.displayNoneStyle;\n    this.sourceContentStyle = this.displayNoneStyle;\n  }\n\n  getProperty(item) {\n    if (!this.property) {\n      return item;\n    }\n    return this.property.split('.').reduce((prev, curr) => (prev ? prev[curr] : undefined), item);\n  }\n\n  isLoading(item) {\n    const uniqueName = this.getProperty(item);\n    if (this.loadingMap[uniqueName]) {\n      return true;\n    }\n    return false;\n  }\n\n  setLoading(item, state) {\n    const uniqueName = this.getProperty(item);\n    this.loadingMap[uniqueName] = state;\n  }\n\n  loadSourceList() {\n    if (this.sourceListLoading) {\n      return this.$q.reject(false);\n    }\n    this.sourceListLoading = true;\n    return this.$q.when(this.sourceList)\n      .then((items) => {\n        this.sourceList = items.data ? items.data : items;\n      })\n      .finally(() => {\n        this.sourceListLoading = false;\n      });\n  }\n\n  loadtargetList() {\n    if (this.targetListLoading) {\n      return this.$q.reject(false);\n    }\n    this.targetListLoading = true;\n    return this.$q.when(this.targetList)\n      .then((items) => {\n        this.targetList = items.data ? items.data : items;\n      })\n      .finally(() => {\n        this.targetListLoading = false;\n      });\n  }\n\n  add(index, item) {\n    if (this.isLoading(item)) {\n      return;\n    }\n    this.sourceList.splice(index, 1);\n    this.targetList.push(item);\n    if (this.onAdd) {\n      this.setLoading(item, true);\n      this.onAdd({ items: [item] })\n        .catch(() => {\n          const newIndex = this.targetList.indexOf(item);\n          this.targetList.splice(newIndex, 1);\n          this.sourceList.push(item);\n        })\n        .finally(() => this.setLoading(item, false));\n    }\n  }\n\n  remove(index, item) {\n    if (this.isLoading(item)) {\n      return;\n    }\n    this.targetList.splice(index, 1);\n    this.sourceList.push(item);\n    if (this.onRemove) {\n      this.setLoading(item, true);\n      this.onRemove({ items: [item] })\n        .catch(() => {\n          const newIndex = this.sourceList.indexOf(item);\n          this.sourceList.splice(newIndex, 1);\n          this.targetList.push(item);\n        })\n        .finally(() => this.setLoading(item, false));\n    }\n  }\n\n  addAll() {\n    const list = this.sourceList.filter(item => !this.isLoading(item));\n    if (list.length === 0) {\n      return;\n    }\n    list.forEach((item) => {\n      // move to target list and set loading\n      this.targetList.push(item);\n      this.setLoading(item, true);\n      // remove from source list\n      const newIndex = this.sourceList.indexOf(item);\n      this.sourceList.splice(newIndex, 1);\n    });\n    if (this.onAdd) {\n      this.onAdd({ items: list })\n        .then(() => {\n          // all items successfully moved, remove loading\n          list.forEach(item => this.setLoading(item, false));\n        }, (failedItems) => {\n          // some or all items failed to move\n          failedItems.forEach((item) => {\n            // move back to source list and remove loading\n            this.sourceList.push(item);\n            this.setLoading(item, false);\n            // remove from target list\n            const newIndex = this.targetList.indexOf(item);\n            this.targetList.splice(newIndex, 1);\n          });\n          // remove loading for all successfull items\n          list.forEach(item => this.setLoading(item, false));\n        });\n    }\n  }\n\n  removeAll() {\n    const list = this.targetList.filter(item => !this.isLoading(item));\n    if (list.length === 0) {\n      return;\n    }\n    list.forEach((item) => {\n      // move to source list and set loading\n      this.sourceList.push(item);\n      this.setLoading(item, true);\n      // remove from target list\n      const newIndex = this.targetList.indexOf(item);\n      this.targetList.splice(newIndex, 1);\n    });\n    if (this.onAdd) {\n      this.onAdd({ items: list })\n        .then(() => {\n          // all items successfully moved, remove loading\n          list.forEach(item => this.setLoading(item, false));\n        }, (failedItems) => {\n          // some or all items failed to move\n          failedItems.forEach((item) => {\n            // move back to target list and remove loading\n            this.targetList.push(item);\n            this.setLoading(item, false);\n            // remove from source list\n            const newIndex = this.sourceList.indexOf(item);\n            this.sourceList.splice(newIndex, 1);\n          });\n          // remove loading for all successfull items\n          list.forEach(item => this.setLoading(item, false));\n        });\n    }\n  }\n}\n\nangular.module('managerApp').controller('DualListCtrl', DualListCtrl);\n"]}