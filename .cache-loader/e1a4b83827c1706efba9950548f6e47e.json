{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/nasha-partition.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/nasha/partition/nasha-partition.controller.js","mtime":1539717142248},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('PartitionCtrl', [\"$state\", \"$rootScope\", \"$scope\", \"$uibModal\", \"$q\", \"$translate\", \"$stateParams\", \"OvhApiDedicatedNasha\", \"Poller\", \"CloudMessage\", function PartitionCtrl($state, $rootScope, $scope, $uibModal, $q, $translate, $stateParams, OvhApiDedicatedNasha, Poller, CloudMessage) {\n  var self = this;\n  self.trackedTaskStatus = ['todo', 'doing'];\n  self.trackedTaskOperations = ['clusterLeclercPartitionAdd', 'clusterLeclercPartitionDelete', 'clusterLeclercPartitionUpdate', 'clusterLeclercSnapshotUpdate', 'clusterLeclercCustomSnapCreate', 'clusterLeclercZfsOptions']; // object that contain tasks for each partition\n  // e.g. [\n  //   {\n  //     partitionName: \"partition123\",\n  //     tasks: [65564, 78329]\n  //   }, {\n  //     partitionName: \"partitionABC\",\n  //     tasks: [9998,9999]\n  //   },\n  // ]\n\n  self.data = {\n    partitionsTasks: {},\n    nasha: null,\n    table: {\n      partitionIds: [],\n      partitionsInCreation: [],\n      currentPartitions: [],\n      refresh: false\n    }\n  };\n  self.loaders = {\n    table: false\n  };\n\n  function getTasksPromise(status) {\n    return OvhApiDedicatedNasha.Task().v6().query({\n      serviceName: $stateParams.nashaId,\n      status: status\n    }).$promise;\n  }\n\n  function buildPartitionsInCreation(task, accumulator) {\n    if (task.operation === 'clusterLeclercPartitionAdd') {\n      var partition = _.find(self.data.table.partitionIds, function (partitionId) {\n        return task.partitionName === partitionId;\n      });\n\n      if (!partition) {\n        self.data.table.partitionIds.unshift(task.partitionName);\n        self.data.table.partitions.unshift({\n          partitionName: task.partitionName\n        });\n      }\n\n      accumulator.push({\n        partitionName: task.partitionName\n      });\n    }\n  }\n\n  function buildPartitionsTasks(task, accumulator) {\n    if (_.includes(self.trackedTaskOperations, task.operation)) {\n      if (accumulator[task.partitionName] === undefined) {\n        accumulator[task.partitionName] = [task];\n      }\n    }\n  }\n\n  function launchPolling(taskId) {\n    return Poller.poll(\"/dedicated/nasha/\".concat(self.data.nasha.serviceName, \"/task/\").concat(taskId), null, {\n      successRule: function successRule(task) {\n        return task.status === 'done';\n      },\n      errorRule: function errorRule(task) {\n        return ['doing', 'todo', 'done'].indexOf(task.status) === -1;\n      },\n      namespace: 'nasha.partition'\n    });\n  }\n\n  function initPartitions(resetCache) {\n    self.data.table.partitionsInCreation = [];\n\n    if (resetCache) {\n      OvhApiDedicatedNasha.Aapi().resetAllCache();\n    }\n\n    return OvhApiDedicatedNasha.Aapi().partitions({\n      serviceName: $stateParams.nashaId\n    }).$promise.then(function (partitions) {\n      self.data.table.partitions = _.map(partitions, function (partition) {\n        return partition.partitionName;\n      });\n      self.data.table.partitionIds = self.data.table.partitions;\n      self.data.table.partitions = _.map(partitions, function (partition) {\n        _.forEach(partition.use, function (part, key) {\n          _.set(part, 'name', $translate.instant(\"nasha_storage_usage_type_\".concat(key)));\n        });\n\n        return partition;\n      });\n    });\n  }\n\n  function pollPartitionTask(task) {\n    launchPolling(task.taskId).finally(function () {\n      initPartitions(true).then(function () {\n        var taskIndex = _.findIndex(self.data.partitionsTasks[task.partitionName], function (partitionTask) {\n          return task.taskId === partitionTask.taskId;\n        });\n\n        if (taskIndex > -1) {\n          self.data.partitionsTasks[task.partitionName].splice(taskIndex, 1);\n        }\n      }).catch(function (err) {\n        CloudMessage.error($translate.instant('nasha_partitions_no_data_error'));\n        return $q.reject(err);\n      });\n    });\n  }\n\n  function initTasks() {\n    OvhApiDedicatedNasha.Task().v6().resetCache();\n\n    var tasksPromises = _.map(self.trackedTaskStatus, function (status) {\n      return getTasksPromise(status);\n    });\n\n    return $q.allSettled(tasksPromises).then(function (data) {\n      return _.flatten(data);\n    }).then(function (taskIds) {\n      var taskPromises = _.map(taskIds, function (taskId) {\n        return OvhApiDedicatedNasha.Task().v6().get({\n          serviceName: $stateParams.nashaId,\n          taskId: taskId\n        }).$promise;\n      });\n\n      return $q.allSettled(taskPromises);\n    }).then(function (taskObjects) {\n      // We don't wipe self.data.partitionsTasks right away because we don't want the spinners\n      // to disapear while we reload.\n      var partitionsTasksAccumulator = {};\n      self.data.table.partitionsInCreation = [];\n\n      _.forEach(taskObjects, function (taskObject) {\n        buildPartitionsInCreation(taskObject, self.data.table.partitionsInCreation);\n        buildPartitionsTasks(taskObject, partitionsTasksAccumulator);\n        pollPartitionTask(taskObject);\n      });\n\n      self.data.partitionsTasks = partitionsTasksAccumulator;\n      return $q.when(taskObjects);\n    });\n  }\n\n  self.openModal = function (template, controller, params) {\n    var modal = $uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: template,\n      controller: controller,\n      controllerAs: controller,\n      resolve: {\n        items: function items() {\n          return params;\n        }\n      }\n    });\n    modal.result.then(function () {\n      initTasks();\n    });\n  };\n\n  function initNasha() {\n    return OvhApiDedicatedNasha.Aapi().get({\n      serviceName: $stateParams.nashaId\n    }).$promise.then(function (nasha) {\n      self.data.nasha = nasha;\n    });\n  }\n\n  self.load = function (resetCache) {\n    self.loaders.table = true;\n    $q.all([initNasha(), initPartitions()]).then(function () {\n      return initTasks();\n    }).then(function () {\n      if (resetCache) {\n        self.data.table.refresh = !self.data.table.refresh;\n      }\n    }).catch(function (err) {\n      CloudMessage.error($translate.instant('nasha_partitions_no_data_error'));\n      return $q.reject(err);\n    }).finally(function () {\n      self.loaders.table = false;\n    });\n  };\n\n  self.hasTaskInProgress = function (partition) {\n    return _.any(self.data.partitionsTasks[partition.partitionName]);\n  };\n\n  self.updatePartition = function (partition) {\n    return self.getPartition(partition.partitionName).then(function (updatedPartition) {\n      _.set(partition, 'size', updatedPartition.size);\n    }).catch(function (data) {\n      // partition is not found, probably deleted\n      if (data.status === 404) {\n        _.remove(self.data.table.partitionIds, function (item) {\n          return item === partition.partitionName;\n        });\n      } else {\n        return $q.reject(data);\n      }\n\n      return null;\n    });\n  };\n\n  self.goToNashaPartitionAccess = function (partitionName) {\n    $state.go('paas.nasha.nasha-partition-access', {\n      partitionName: partitionName\n    });\n  };\n\n  $scope.$on('$destroy', function () {\n    Poller.kill({\n      namespace: 'nasha.partition'\n    });\n  });\n  self.load();\n}]);",null]}