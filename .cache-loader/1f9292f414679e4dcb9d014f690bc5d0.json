{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/add_OLD_/cloud-project-compute-infrastructure-ip-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/add_OLD_/cloud-project-compute-infrastructure-ip-add.controller.js","mtime":1539717141977},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["//     THIS IS CODE IS OBSOLETE\nangular.module('managerApp').controller('CloudProjectComputeInfrastructureIpAddCtrl', [\"$rootScope\", \"$scope\", \"$timeout\", \"$translate\", \"$q\", \"OvhApiCloud\", \"CloudProjectComputeInfrastructureOrchestrator\", \"RegionService\", function ($rootScope, $scope, $timeout, $translate, $q, OvhApiCloud, CloudProjectComputeInfrastructureOrchestrator, RegionService) {\n  var self = this;\n  self.regionService = RegionService; // -------------- QUANTITY AND GEOLOC CHANGES\n\n  self.decrementQuantity = function () {\n    if (self.model.quantity > self.minQuantity) {\n      self.model.quantity -= 1;\n    }\n  };\n\n  self.incrementQuantity = function () {\n    if (self.model.quantity < self.maxQuantity) {\n      self.model.quantity += 1;\n    }\n  };\n\n  $scope.$watch('InfrastructureIpAddEditCtrl.model.geoloc', function (value, oldValue) {\n    if (value && value !== oldValue) {\n      self.backToMenu();\n    }\n  }); // ---\n  // -------------- MENU ACTIONS\n\n  self.openEditDetail = function () {\n    $scope.$broadcast('adaptative.switch.page.goToPage', 2);\n    $timeout(function () {\n      var $checkedRadio = $('input[name=geolocChoice]:checked');\n\n      if ($checkedRadio && $checkedRadio.length) {\n        var $checkedRadioCtnr = $checkedRadio.closest('.panel-body');\n        $checkedRadioCtnr.scrollTo($checkedRadio, 200, {\n          offset: -100\n        });\n        $checkedRadio.closest(':tabbable').focus();\n      }\n    }, 99);\n  };\n\n  self.backToMenu = function () {\n    $scope.$broadcast('adaptative.switch.page.goToPage', 1);\n  }; // ---\n  // -------------- LEFT PAGE FOOTER ACTIONS\n\n\n  self.cancelIpAdd = function () {\n    $rootScope.$broadcast('ip.add.cancel'); // reset overlay\n\n    $rootScope.$broadcast('highlighed-element.hide');\n  };\n\n  self.launchIpCreation = function () {\n    CloudProjectComputeInfrastructureOrchestrator.createNewIps(this.model); // close popover and hide overlay\n\n    self.cancelIpAdd();\n  }; // what to do before popover hide\n\n\n  $scope.$on('adaptativePopover.before.hide', function () {\n    // mmmmhhh strange but if no timeout, draft-ip is still present in dom after cancel...\n    $timeout(self.cancelIpAdd);\n  }); // ---\n  // -------------- INITIALIZATION\n\n  function init() {\n    // set min and max quantity available to add\n    self.minQuantity = 1;\n    self.maxQuantity = 32; // set default model\n\n    self.model = {\n      quantity: self.minQuantity,\n      geoloc: 'FR'\n    }; // set focus on popover\n\n    $timeout(function () {\n      $('.cloud-ip-popover').find(':tabbable:first').focus();\n    }, 99); // set overlay\n\n    $rootScope.$broadcast('highlighed-element.show', 'compute,draft-ip'); // get possible geolocs\n\n    self.locLoader = true;\n    return OvhApiCloud.v6().schema().$promise.then(function (schema) {\n      self.availableGeolocs = schema.models['ip.FloatingIpGeolocEnum'].enum;\n      self.locLoader = false;\n    });\n  }\n\n  init(); // ---\n}]);",null]}