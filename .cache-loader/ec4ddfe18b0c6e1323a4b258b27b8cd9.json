{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/add/configure/logs-inputs-add-configure.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/add/configure/logs-inputs-add-configure.controller.js","mtime":1539717142085},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsInputsAddConfigureCtrl =\n/*#__PURE__*/\nfunction () {\n  LogsInputsAddConfigureCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"$translate\", \"ControllerModalHelper\", \"ControllerHelper\", \"LogsInputsService\", \"LogsConstants\", \"CloudMessage\"];\n\n  function LogsInputsAddConfigureCtrl($q, $state, $stateParams, $translate, ControllerModalHelper, ControllerHelper, LogsInputsService, LogsConstants, CloudMessage) {\n    _classCallCheck(this, LogsInputsAddConfigureCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.serviceName = this.$stateParams.serviceName;\n    this.inputId = this.$stateParams.inputId;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsInputsService = LogsInputsService;\n    this.LogsConstants = LogsConstants;\n    this.CloudMessage = CloudMessage;\n    this.configuration = {\n      engineType: '',\n      flowgger: {},\n      logstash: {}\n    };\n    this.initLoaders();\n  }\n  /**\n   * initializes the input log url\n   *\n   * @memberof LogsInputsAddConfigureCtrl\n   */\n\n\n  _createClass(LogsInputsAddConfigureCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.input = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsInputsService.getInput(_this.serviceName, _this.inputId).then(function (input) {\n            _this.configuration.engineType = input.info.engine.name;\n\n            if (_this.configuration.engineType === _this.LogsConstants.logstash) {\n              _this.initLogstash(input.info.engine.configuration);\n            } else {\n              _this.initFlowgger(input.info.engine.configuration);\n            }\n\n            return input;\n          });\n        }\n      });\n      this.test = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsInputsService.getTestResults(_this.serviceName, _this.input.data);\n        }\n      });\n      this.previousTest = this.test;\n      this.input.load().then(function () {\n        return _this.previousTest.load();\n      });\n    }\n  }, {\n    key: \"initFlowgger\",\n    value: function initFlowgger(configuration) {\n      this.configuration.flowgger.kafkaCoalesce = configuration.kafkaCoalesce;\n      this.configuration.flowgger.logFormat = configuration.logFormat;\n      this.configuration.flowgger.logFraming = configuration.logFraming;\n      this.configuration.flowgger.tlsMethod = configuration.tlsMethod;\n      this.configuration.flowgger.type = configuration.type;\n    }\n  }, {\n    key: \"initLogstash\",\n    value: function initLogstash(configuration) {\n      this.configuration.logstash.inputSection = this.ControllerHelper.constructor.htmlDecode(configuration.inputSection);\n      this.configuration.logstash.filterSection = this.ControllerHelper.constructor.htmlDecode(configuration.filterSection);\n      this.configuration.logstash.patternSection = this.ControllerHelper.constructor.htmlDecode(configuration.patternSection);\n    }\n  }, {\n    key: \"applyConfiguration\",\n    value: function applyConfiguration(name) {\n      this.configuration.logstash.inputSection = this.LogsConstants.logStashWizard[name].input.replace('INPUT_PORT', this.input.data.info.exposedPort);\n      this.configuration.logstash.filterSection = this.LogsConstants.logStashWizard[name].filter;\n      this.configuration.logstash.patternSection = this.LogsConstants.logStashWizard[name].patterns;\n    }\n  }, {\n    key: \"executeTest\",\n    value: function executeTest() {\n      var _this2 = this;\n\n      this.CloudMessage.flushChildMessage();\n      this.test = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return (_this2.logstashForm.$dirty ? _this2.LogsInputsService.updateLogstash(_this2.serviceName, _this2.input.data, _this2.configuration.logstash) : _this2.$q.when({})).then(function () {\n            return _this2.LogsInputsService.executeTest(_this2.serviceName, _this2.input.data);\n          }).catch(function () {\n            return _this2.ControllerHelper.scrollPageToTop();\n          });\n        }\n      });\n      this.test.load();\n    }\n  }, {\n    key: \"saveFlowgger\",\n    value: function saveFlowgger() {\n      var _this3 = this;\n\n      if (this.flowggerForm.$invalid) {\n        return this.$q.reject();\n      }\n\n      if (!this.flowggerForm.$dirty) {\n        return this.goToNetworkPage();\n      }\n\n      this.CloudMessage.flushChildMessage();\n      this.saving = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this3.LogsInputsService.updateFlowgger(_this3.serviceName, _this3.input.data, _this3.configuration.flowgger).then(function () {\n            return _this3.goToNetworkPage();\n          }).finally(function () {\n            return _this3.ControllerHelper.scrollPageToTop();\n          });\n        }\n      });\n      return this.saving.load();\n    }\n  }, {\n    key: \"saveLogstash\",\n    value: function saveLogstash() {\n      var _this4 = this;\n\n      if (this.logstashForm.$invalid) {\n        return this.$q.reject();\n      }\n\n      if (!this.test.data.stdout) {\n        return this.ControllerModalHelper.showWarningModal({\n          title: this.$translate.instant('logs_inputs_logstash_save_warning_title'),\n          message: this.test.data.updatedAt ? this.$translate.instant('logs_inputs_logstash_save_warning_unsuccessful') : this.$translate.instant('logs_inputs_logstash_save_warning_no_test')\n        });\n      }\n\n      if (!this.logstashForm.$dirty) {\n        return this.goToNetworkPage();\n      }\n\n      this.CloudMessage.flushChildMessage();\n      this.saving = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this4.LogsInputsService.updateLogstash(_this4.serviceName, _this4.input.data, _this4.configuration.logstash).then(function () {\n            return _this4.goToNetworkPage();\n          }).finally(function () {\n            return _this4.ControllerHelper.scrollPageToTop();\n          });\n        }\n      });\n      return this.saving.load();\n    }\n  }, {\n    key: \"goToNetworkPage\",\n    value: function goToNetworkPage() {\n      this.$state.go('dbaas.logs.detail.inputs.editwizard.networks', {\n        serviceName: this.serviceName,\n        inputId: this.inputId\n      });\n      return this.$q.resolve();\n    }\n  }, {\n    key: \"getFlowggerLogFormats\",\n    value: function getFlowggerLogFormats() {\n      return this.LogsInputsService.getFlowggerLogFormats();\n    }\n  }, {\n    key: \"getLogstashLogFormats\",\n    value: function getLogstashLogFormats() {\n      return this.LogsInputsService.getLogstashLogFormats();\n    }\n  }, {\n    key: \"getDelimiters\",\n    value: function getDelimiters() {\n      return this.LogsInputsService.getDelimiters();\n    }\n  }], [{\n    key: \"findRowLength\",\n    value: function findRowLength(str) {\n      var lines = str.split(/\\r\\n|\\r|\\n/);\n      return lines.length;\n    }\n  }]);\n\n  return LogsInputsAddConfigureCtrl;\n}();\n\nangular.module('managerApp').controller('LogsInputsAddConfigureCtrl', LogsInputsAddConfigureCtrl);",null]}