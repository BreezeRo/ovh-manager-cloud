{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/cloud-project-billing.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/cloud-project-billing.service.js","mtime":1539717141953},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp')\n  .service('CloudProjectBillingService', function ($q, OvhApiMe) {\n    const self = this;\n\n    function roundNumber(number, decimals) {\n      return Number((`${Math.round(`${number}e${decimals}`)}e-${decimals}`));\n    }\n\n    function initHourlyInstanceList() {\n      if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n        return;\n      }\n      const hourlyInstances = _.flatten(_.map(\n        self.data.hourlyBilling.hourlyUsage.instance,\n        instance => _.map(instance.details, (detail) => {\n          const newDetail = _.clone(detail);\n          newDetail.totalPrice = roundNumber(newDetail.totalPrice, 2);\n          return _.extend(newDetail, { reference: instance.reference, region: instance.region });\n        }),\n      ));\n      self.data.hourlyInstances = hourlyInstances;\n      self.data.totals.hourly.instance = _.reduce(\n        self.data.hourlyBilling.hourlyUsage.instance,\n        (sum, instance) => sum + roundNumber(instance.totalPrice, 2), 0,\n      );\n      self.data.totals.hourly.instance = roundNumber(self.data.totals.hourly.instance, 2);\n    }\n\n    function initMonthlyInstanceList() {\n      if (!self.data.monthlyBilling || !self.data.hourlyBilling.monthlyUsage) {\n        return;\n      }\n      const monthlyInstances = _.flatten(_.map(\n        self.data.monthlyBilling.monthlyUsage.instance,\n        instance => _.map(instance.details, (detail) => {\n          const newDetail = _.clone(detail);\n          newDetail.totalPrice = roundNumber(newDetail.totalPrice, 2);\n          return _.extend(newDetail, { reference: instance.reference, region: instance.region });\n        }),\n      ));\n\n      self.data.monthlyInstances = monthlyInstances;\n      self.data.totals.monthly.instance = _.reduce(\n        self.data.monthlyBilling.monthlyUsage.instance,\n        (sum, instance) => sum + roundNumber(instance.totalPrice, 2),\n        0,\n      );\n      self.data.totals.monthly.instance = roundNumber(self.data.totals.monthly.instance, 2);\n    }\n\n    function initObjectStorageList() {\n      if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n        return;\n      }\n      _.each(self.data.hourlyBilling.hourlyUsage.objectStorage, (objectStorage) => {\n        _.set(objectStorage, 'totalPrice', roundNumber(objectStorage.totalPrice, 2));\n      });\n\n      self.data.objectStorages = _.reject(self.data.hourlyBilling.hourlyUsage.storage, { type: 'pca' });\n      self.data.totals.hourly.objectStorage = _.reduce(\n        self.data.objectStorages,\n        (sum, storage) => sum + roundNumber(storage.totalPrice, 2),\n        0,\n      );\n      self.data.totals.hourly.objectStorage = roundNumber(self.data.totals.hourly.objectStorage, 2);\n    }\n\n    function initArchiveStorageList() {\n      if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n        return;\n      }\n      _.each(self.data.hourlyBilling.hourlyUsage.archiveStorage, (archiveStorage) => {\n        _.set(archiveStorage, 'totalPrice', roundNumber(archiveStorage.totalPrice, 2));\n      });\n\n      self.data.archiveStorages = _.filter(self.data.hourlyBilling.hourlyUsage.storage, { type: 'pca' });\n      self.data.totals.hourly.archiveStorage = _.reduce(\n        self.data.archiveStorages,\n        (sum, archiveStorage) => sum + roundNumber(archiveStorage.totalPrice, 2),\n        0,\n      );\n      self.data.totals.hourly.archiveStorage = roundNumber(\n        self.data.totals.hourly.archiveStorage,\n        2,\n      );\n    }\n\n    function initSnapshotList() {\n      if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n        return;\n      }\n      _.each(self.data.hourlyBilling.hourlyUsage.snapshot, (snapshot) => {\n        _.set(snapshot, 'totalPrice', roundNumber(snapshot.totalPrice, 2));\n      });\n\n      self.data.snapshots = self.data.hourlyBilling.hourlyUsage.snapshot;\n      self.data.totals.hourly.snapshot = _.reduce(\n        self.data.hourlyBilling.hourlyUsage.snapshot,\n        (sum, snapshot) => sum + roundNumber(snapshot.totalPrice, 2),\n        0,\n      );\n      self.data.totals.hourly.snapshot = roundNumber(self.data.totals.hourly.snapshot, 2);\n    }\n\n    function initVolumeList() {\n      if (!self.data.hourlyBilling || !self.data.hourlyBilling.hourlyUsage) {\n        return;\n      }\n      const volumes = _.flatten(_.map(\n        self.data.hourlyBilling.hourlyUsage.volume,\n        volume => _.map(volume.details, (detail) => {\n          const newDetail = _.clone(detail);\n          newDetail.totalPrice = roundNumber(newDetail.totalPrice, 2);\n          return _.extend(newDetail, { type: volume.type, region: volume.region });\n        }),\n      ));\n\n      self.data.volumes = volumes;\n      self.data.totals.hourly.volume = _.reduce(\n        self.data.hourlyBilling.hourlyUsage.volume,\n        (sum, volume) => sum + roundNumber(volume.totalPrice, 2),\n        0,\n      );\n      self.data.totals.hourly.volume = roundNumber(self.data.totals.hourly.volume, 2);\n    }\n\n    self.getConsumptionDetails = function (hourlyBillingInfo, monthlyBillingInfo) {\n      return self.getDataInitialized()\n        .then(() => {\n          self.data.hourlyBilling = hourlyBillingInfo;\n          self.data.monthlyBilling = monthlyBillingInfo;\n          return $q\n            .allSettled([\n              initHourlyInstanceList(),\n              initMonthlyInstanceList(),\n              initObjectStorageList(),\n              initArchiveStorageList(),\n              initSnapshotList(),\n              initVolumeList(),\n            ])\n            .then(() => {\n              self.data.totals.monthly.total = roundNumber(self.data.totals.monthly.instance, 2);\n              self.data.totals.hourly.total = roundNumber(\n                self.data.totals.hourly.instance\n                + self.data.totals.hourly.snapshot\n                + self.data.totals.hourly.objectStorage\n                + self.data.totals.hourly.archiveStorage\n                + self.data.totals.hourly.volume,\n                2,\n              );\n              self.data.totals.total = roundNumber(\n                self.data.totals.monthly.total + self.data.totals.hourly.total,\n                2,\n              );\n              return self.data;\n            });\n        });\n    };\n\n    self.getDataInitialized = function () {\n      self.data = {\n        hourlyInstances: [],\n        monthlyInstances: [],\n        objectStorages: [],\n        archiveStorages: [],\n        snapshots: [],\n        volumes: [],\n        billing: {},\n        totals: {\n          total: 0,\n          currencySymbol: '',\n          hourly: {\n            total: 0,\n            instance: 0,\n            objectStorage: 0,\n            archiveStorage: 0,\n            snapshot: 0,\n            volume: 0,\n          },\n          monthly: {\n            total: 0,\n            instance: 0,\n          },\n        },\n      };\n      return OvhApiMe.v6().get().$promise.then((me) => {\n        self.data.totals.currencySymbol = me.currency.symbol;\n        return self.data;\n      });\n    };\n  });\n"]}