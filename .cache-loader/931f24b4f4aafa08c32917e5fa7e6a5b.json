{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/service-helper.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/service-helper.service.js","mtime":1539717142187},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["(() => {\n  const defaultSuccessMessage = 'common_global_success';\n  const defaultErrorMessage = 'common_global_error';\n  const defaultOrderSuccessMessage = 'common_order_success';\n  const defaultOrderErrorMessage = 'common_order_error';\n\n  class ServiceHelper {\n    constructor($q, $translate, $window, CloudMessage) {\n      this.$q = $q;\n      this.$translate = $translate;\n      this.CloudMessage = CloudMessage;\n      this.$window = $window;\n    }\n\n    errorHandler(messageInput, containerName, messageDetailsPath = 'data.message') {\n      return (err) => {\n        const errorMessageConfig = {};\n\n        const apiMessage = _.get(err, messageDetailsPath, err.message);\n        if (apiMessage) {\n          errorMessageConfig.apiMessage = apiMessage;\n        }\n\n        if (_.isString(messageInput)) {\n          errorMessageConfig.textToTranslate = messageInput;\n        } else if (_.has(messageInput, 'text')) {\n          errorMessageConfig.text = messageInput.text;\n        } else if (_.has(messageInput, 'textHtml')) {\n          errorMessageConfig.textHtml = messageInput.textHtml;\n        } else if (_.has(messageInput, 'translateParams')) {\n          errorMessageConfig.textToTranslate = messageInput.textToTranslate;\n          errorMessageConfig.translateParams = messageInput.translateParams;\n        } else {\n          errorMessageConfig.textToTranslate = defaultErrorMessage;\n        }\n\n        const message = this.buildErrorMessage(errorMessageConfig);\n\n        this.CloudMessage.error(message, containerName);\n\n        return this.$q.reject(err);\n      };\n    }\n\n    buildErrorMessage(config) {\n      const message = {\n        text: null,\n        textHtml: null,\n      };\n\n      if (config.text) {\n        message.text = config.text;\n      }\n      if (config.textHtml) {\n        message.textHtml = config.textHtml;\n      }\n\n      if (config.translateParams) {\n        message.text = this.$translate.instant(config.textToTranslate, config.translateParams);\n      } else if (config.textToTranslate) {\n        message.text = this.$translate.instant(config.textToTranslate);\n      }\n\n      if (config.apiMessage) {\n        message.text = `${message.text} ${config.apiMessage}`;\n      }\n      return message;\n    }\n\n    successHandler(message, containerName) {\n      return (data) => {\n        if (message) {\n          const jsonData = data ? data.toJSON ? data.toJSON() : data : {}; // eslint-disable-line\n          this.CloudMessage.success(_.isString(message)\n            ? this.$translate.instant(message, jsonData)\n            : message, containerName);\n        } else {\n          // Default success message\n          this.CloudMessage.success(this.$translate.instant(defaultSuccessMessage), containerName);\n        }\n\n        return data;\n      };\n    }\n\n    static findOrderId(data) {\n      let orderId = _.get(data, 'order.orderId');\n      if (!orderId) {\n        const matches = data.url.match(/orderId=(\\d+)/);\n        if (matches.length > 0) {\n          orderId = matches[1]; // eslint-disable-line\n        }\n      }\n\n      return orderId;\n    }\n\n    static findOrderUrl(data) {\n      let url = _.get(data, 'order.url');\n      if (!url) {\n        url = _.get(data, 'url');\n      }\n      return url;\n    }\n\n    orderSuccessHandler(newWindow) {\n      return (data) => {\n        const orderUrl = this.constructor.findOrderUrl(data);\n        let orderId = this.constructor.findOrderId(data);\n\n        if (!orderUrl) {\n          return this.$q.reject({\n            data: {\n              message: 'URL not found',\n            },\n          });\n        }\n        if (!orderId) {\n          orderId = orderUrl;\n        }\n\n        _.set(newWindow, 'location', orderUrl);\n\n        return this.$q.resolve({\n          orderUrl,\n          orderId,\n        });\n      };\n    }\n\n    orderSuccessMessage({ orderUrl, orderId }, message = defaultOrderSuccessMessage) {\n      this.CloudMessage.success({\n        textHtml: this.$translate.instant(message, {\n          orderUrl,\n          orderId,\n        }),\n      });\n    }\n\n    orderErrorHandler(newWindow) {\n      return (err) => {\n        newWindow.close();\n        this.errorHandler(defaultOrderErrorMessage)(err);\n      };\n    }\n\n    loadOnNewPage(orderPromise, config = {}) {\n      const newWindow = this.$window.open('', '_blank');\n      newWindow.document.write(this.$translate.instant('common_order_doing'));\n      return orderPromise\n        .then(this.orderSuccessHandler(newWindow))\n        .then((data) => {\n          if (_.isFunction(config.successMessage)) {\n            return config.successMessage(data);\n          }\n          if (_.isString(config.successMessage)) {\n            return this.orderSuccessMessage(data, config.successMessage);\n          }\n          return this.orderSuccessMessage(data);\n        })\n        .catch(this.orderErrorHandler(newWindow));\n    }\n\n    static getTaskProgressType(taskType) {\n      switch (taskType) {\n        case 'done':\n          return 'success';\n        case 'error':\n          return 'error';\n        case 'doing':\n        case 'todo':\n        case 'paused':\n          return 'info';\n        default:\n          return 'warning';\n      }\n    }\n  }\n\n  angular.module('managerApp').service('ServiceHelper', ServiceHelper);\n})();\n"]}