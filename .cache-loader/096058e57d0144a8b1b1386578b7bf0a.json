{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm-edit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm-edit.controller.js","mtime":1539717142214},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerServerFarmEditCtrl {\n  constructor($q, $state, $stateParams, CloudMessage, ControllerHelper,\n    IpLoadBalancerConstant, IpLoadBalancerServerFarmService,\n    IpLoadBalancerVrackService, IpLoadBalancerZoneService) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerServerFarmService = IpLoadBalancerServerFarmService;\n    this.IpLoadBalancerVrackService = IpLoadBalancerVrackService;\n    this.IpLoadBalancerZoneService = IpLoadBalancerZoneService;\n\n    this.initLoaders();\n  }\n\n  initLoaders() {\n    this.zones = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerZoneService.getZonesSelectData(\n        this.$stateParams.serviceName,\n      ),\n    });\n\n    this.privateNetworks = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerVrackService\n        .getPrivateNetworks(this.$stateParams.serviceName),\n    });\n\n    this.apiFarm = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerServerFarmService.getAllFarmsTypes(\n        this.$stateParams.serviceName,\n      )\n        .then((farms) => {\n          const farm = _.find(farms, {\n            id: parseInt(this.$stateParams.farmId, 10),\n          });\n          return this.IpLoadBalancerServerFarmService.getServerFarm(\n            this.$stateParams.serviceName,\n            this.$stateParams.farmId,\n            farm.type,\n          );\n        }).then(farm => this.parseFarm(farm)),\n    });\n  }\n\n  $onInit() {\n    this.farm = {\n      balance: 'roundrobin',\n      port: 80,\n      probe: {\n        type: '',\n      },\n    };\n    this.saving = false;\n    this.protocol = 'http';\n    this.type = 'http';\n    this.protocols = this.IpLoadBalancerConstant.protocols;\n    this.balances = this.IpLoadBalancerConstant.balances;\n    this.stickinesses = this.IpLoadBalancerConstant.stickinesses;\n    this.probeTypes = this.IpLoadBalancerConstant.probeTypes;\n\n    this.portLimit = this.IpLoadBalancerConstant.portLimit;\n\n    this.zones.load();\n    this.privateNetworks.load();\n    this.updateStickinessList();\n\n    if (this.$stateParams.farmId) {\n      this.edition = true;\n      this.apiFarm.load();\n    }\n  }\n\n  isProtocolDisabled(protocol) {\n    if (!this.edition) {\n      return false;\n    }\n\n    if (this.type === 'http' && /http/.test(protocol)) {\n      return false;\n    } if (this.protocol === protocol) {\n      return false;\n    }\n\n    return true;\n  }\n\n  static validateSelection(value) {\n    return value && value !== '0';\n  }\n\n  onProtocolChange() {\n    switch (this.protocol) {\n      case 'http':\n        this.type = 'http';\n        this.farm.port = 80;\n        break;\n      case 'https':\n        this.type = 'http';\n        this.farm.port = 443;\n        break;\n      case 'tcp':\n        this.type = 'tcp';\n        delete this.farm.port;\n        break;\n      case 'udp':\n        this.type = 'udp';\n        delete this.farm.port;\n        break;\n      case 'tls':\n        this.type = 'tcp';\n        delete this.farm.port;\n        break;\n      default: break;\n    }\n\n    this.updateStickinessList();\n  }\n\n  updateStickinessList() {\n    if (this.type === 'tcp') {\n      this.availableStickinesses = this.stickinesses.filter(stickiness => stickiness !== 'cookie');\n    } else {\n      this.availableStickinesses = this.stickinesses;\n    }\n  }\n\n  /**\n   * Parse farm object from API and send it to form.\n   * @return parsed farm object\n   */\n  parseFarm(farm) {\n    this.type = farm.type;\n    this.protocol = farm.type;\n    _.set(farm, 'port', parseInt(farm.port, 10));\n    if (!farm.probe || (farm.probe && !farm.probe.type)) {\n      _.set(farm, 'probe', { type: '' });\n    }\n    if (!farm.stickiness) {\n      _.set(farm, 'stickiness', 'none');\n    }\n    this.updateStickinessList();\n    this.farm = angular.copy(farm);\n    return farm;\n  }\n\n  /**\n   * Clean farm from form and send it to API.\n   * @return clean farm object\n   */\n  getCleanFarm() {\n    const request = angular.copy(this.farm);\n    delete request.type;\n    delete request.zoneText;\n    if (request.stickiness === 'none') {\n      request.stickiness = null;\n    }\n\n    request.probe = this.getCleanProbe();\n\n    if (this.type === 'udp') {\n      delete request.balance;\n      delete request.stickiness;\n      delete request.probe;\n    }\n    return request;\n  }\n\n  getCleanProbe() {\n    const request = angular.copy(this.farm);\n    const pickList = ['type', 'pattern', 'interval', 'negate'];\n    switch (request.probe.type) {\n      case 'http':\n        pickList.push('url');\n        pickList.push('port');\n        pickList.push('method');\n        pickList.push('match');\n        break;\n      case 'mysql':\n      case 'pgsql':\n      case 'smtp':\n        pickList.push('port');\n        break;\n      case 'tcp':\n        pickList.push('port');\n        if (_.includes(['default', 'contains', 'matches'], request.probe.match)) {\n          pickList.push('match');\n        } else {\n          request.probe.pattern = '';\n          request.probe.negate = null;\n        }\n        break;\n      case 'oco':\n        break;\n      default:\n        request.probe = {};\n    }\n\n    return _.pick(request.probe, pickList);\n  }\n\n  editProbe() {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/iplb/serverFarm/probe/iplb-server-farm-probe.html',\n        controller: 'IpLoadBalancerServerFarmProbeEditCtrl',\n        controllerAs: 'IpLoadBalancerServerFarmProbeEditCtrl',\n        resolve: {\n          availableProbes: () => this.IpLoadBalancerServerFarmService\n            .getAvailableFarmProbes(this.$stateParams.serviceName),\n          farm: () => this.farm,\n          edition: () => this.edition,\n        },\n      },\n    }).then((probe) => {\n      _.assign(this.farm, { probe });\n    });\n  }\n\n  create() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.saving = true;\n    this.CloudMessage.flushChildMessage();\n    return this.IpLoadBalancerServerFarmService\n      .create(this.type, this.$stateParams.serviceName, this.getCleanFarm())\n      .then(() => {\n        this.$state.go('network.iplb.detail.server-farm');\n      })\n      .finally(() => {\n        this.saving = false;\n      });\n  }\n\n  update() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.saving = true;\n    this.CloudMessage.flushChildMessage();\n    return this.IpLoadBalancerServerFarmService\n      .update(this.type, this.$stateParams.serviceName, this.farm.farmId, this.getCleanFarm())\n      .then(() => {\n        this.$state.go('network.iplb.detail.server-farm');\n      })\n      .finally(() => {\n        this.saving = false;\n      });\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerServerFarmEditCtrl', IpLoadBalancerServerFarmEditCtrl);\n"]}