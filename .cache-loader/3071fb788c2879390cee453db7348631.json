{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/dropdown/ip-dropdown.component.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/dropdown/ip-dropdown.component.controller.js","mtime":1539717141979},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('IpDropdownComponentCtrl', [\"$translate\", \"$window\", \"REDIRECT_URLS\", \"OvhApiIp\", \"CloudMessage\", \"CLOUD_GEOLOCALISATION\", function ($translate, $window, REDIRECT_URLS, OvhApiIp, CloudMessage, CLOUD_GEOLOCALISATION) {\n  var self = this;\n\n  self.failoverAttach = function (ip) {\n    self.onFailoverAttach({\n      ip: ip\n    });\n  };\n\n  var ipActionUrlWithSession = REDIRECT_URLS.ipAction;\n  self.ipActionRedirections = {\n    firewall: ipActionUrlWithSession.replace('{action}', 'firewall'),\n    mitigation: ipActionUrlWithSession.replace('{action}', 'mitigation'),\n    reverse: ipActionUrlWithSession.replace('{action}', 'reverse')\n  };\n\n  self.ipActionRedirect = function (action, ip) {\n    var url = null;\n    var ipActionUrlWithSession = REDIRECT_URLS.ipAction; // eslint-disable-line\n\n    switch (action) {\n      case 'reverse':\n        if (self.isIpUserSameContinent(ip)) {\n          OvhApiIp.v6().resetCache();\n          url = ipActionUrlWithSession.replace('{action}', 'reverse').replace('{ipBlock}', window.encodeURIComponent(ip.block || ip[self.ipAccessKey])).replace('{ip}', ip[self.ipAccessKey]);\n        } else {\n          CloudMessage.info($translate.instant('cpci_ip_reverse_info_soon'));\n        }\n\n        break;\n\n      default:\n        url = ipActionUrlWithSession.replace('{action}', action).replace('{ipBlock}', window.encodeURIComponent(ip.block || ip[self.ipAccessKey])).replace('{ip}', ip[self.ipAccessKey]);\n    }\n\n    if (url) {\n      $window.open(url);\n    }\n  };\n\n  self.isIpUserSameContinent = function (ip) {\n    var userContinent = self.getUserContinent();\n    var ipContinent = self.getIpContinent(ip);\n    return userContinent && ipContinent && userContinent === ipContinent;\n  };\n\n  self.getUserContinent = function () {\n    var continent = null;\n\n    if (self.user) {\n      continent = _.first(_.keys(_.pick(CLOUD_GEOLOCALISATION.user, function (region) {\n        return _.indexOf(region, self.user.ovhSubsidiary) >= 0;\n      })));\n    }\n\n    return continent;\n  };\n\n  self.getIpContinent = function (ip) {\n    var continent = null;\n    var linkedVmId;\n\n    switch (ip.type) {\n      case 'failover':\n        continent = ip.continentCode;\n        break;\n\n      case 'public':\n        // in case of public IP we get the location from the linked vm\n        linkedVmId = _.first(ip.routedTo);\n\n        if (linkedVmId) {\n          var linkedVm = self.infra.vrack.publicCloud.get(linkedVmId);\n\n          if (linkedVm) {\n            continent = _.first(_.keys(_.pick(CLOUD_GEOLOCALISATION.instance, function (region) {\n              return _.indexOf(region, linkedVm.region) >= 0;\n            })));\n          }\n        }\n\n        break;\n\n      default:\n        // unknown type of IP\n        break;\n    }\n\n    return continent;\n  };\n}]);",null]}