{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/server/iplb-server.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/server/iplb-server.service.js","mtime":1539717142213},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerServerService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerServerService.$inject = [\"$q\", \"$translate\", \"IpLoadBalancerConfigurationService\", \"OvhApiIpLoadBalancing\", \"ServiceHelper\", \"RegionService\"];\n\n  function IpLoadBalancerServerService($q, $translate, IpLoadBalancerConfigurationService, OvhApiIpLoadBalancing, ServiceHelper, RegionService) {\n    _classCallCheck(this, IpLoadBalancerServerService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.IpLoadBalancerConfigurationService = IpLoadBalancerConfigurationService;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n    this.Server = {\n      tcp: this.IpLoadBalancing.Farm().Tcp().Server().v6(),\n      udp: this.IpLoadBalancing.Farm().Udp().Server().v6(),\n      http: this.IpLoadBalancing.Farm().Http().Server().v6()\n    };\n  }\n\n  _createClass(IpLoadBalancerServerService, [{\n    key: \"getServer\",\n    value: function getServer(serviceName, farmId, serverId) {\n      var _this = this;\n\n      return this.getFarmType(serviceName, farmId).then(function (type) {\n        return _this.Server[type].get({\n          serviceName: serviceName,\n          farmId: farmId,\n          serverId: serverId\n        }).$promise;\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create(type, serviceName, farmId, server) {\n      var _this2 = this;\n\n      return this.Server[type].post({\n        serviceName: serviceName,\n        farmId: farmId\n      }, server).$promise.then(this.ServiceHelper.successHandler('iplb_server_add_success')).then(function () {\n        return _this2.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_server_add_error'));\n    }\n  }, {\n    key: \"update\",\n    value: function update(type, serviceName, farmId, serverId, server) {\n      var _this3 = this;\n\n      return this.Server[type].put({\n        serviceName: serviceName,\n        farmId: farmId,\n        serverId: serverId\n      }, server).$promise.then(this.ServiceHelper.successHandler('iplb_server_update_success')).then(function () {\n        return _this3.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_server_update_error'));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(serviceName, farmId, serverId) {\n      var _this4 = this;\n\n      return this.getFarmType(serviceName, farmId).then(function (type) {\n        return _this4.Server[type].delete({\n          serviceName: serviceName,\n          farmId: farmId,\n          serverId: serverId\n        }).$promise;\n      }).then(this.ServiceHelper.successHandler('iplb_server_delete_success')).then(function () {\n        return _this4.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_server_delete_error'));\n    }\n  }, {\n    key: \"getFarmType\",\n    value: function getFarmType(serviceName, farmId) {\n      var _this5 = this;\n\n      return this.IpLoadBalancing.Farm().v6().query({\n        serviceName: serviceName\n      }).$promise.then(function (farms) {\n        var farm = _.find(farms, {\n          id: parseInt(farmId, 10)\n        });\n\n        return farm;\n      }).then(function (farm) {\n        if (!farm) {\n          return _this5.$q.reject('NOTFOUND');\n        }\n\n        return farm.type;\n      });\n    }\n  }, {\n    key: \"getProxyProtocolVersions\",\n    value: function getProxyProtocolVersions() {\n      return this.IpLoadBalancing.v6().schema().$promise.then(function (schema) {\n        return schema.models['ipLoadbalancing.ProxyProtocolVersionEnum'].enum;\n      }).catch(this.ServiceHelper.errorHandler('iplb_server_request_error'));\n    }\n  }]);\n\n  return IpLoadBalancerServerService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerServerService', IpLoadBalancerServerService);",null]}