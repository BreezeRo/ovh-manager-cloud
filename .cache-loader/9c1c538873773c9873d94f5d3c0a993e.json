{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/home/logs-inputs-home.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/inputs/home/logs-inputs-home.controller.js","mtime":1539717142090},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsInputsHomeCtrl =\n/*#__PURE__*/\nfunction () {\n  LogsInputsHomeCtrl.$inject = [\"$state\", \"$stateParams\", \"$translate\", \"CloudMessage\", \"ControllerHelper\", \"LogsConstants\", \"LogsInputsService\"];\n\n  function LogsInputsHomeCtrl($state, $stateParams, $translate, CloudMessage, ControllerHelper, LogsConstants, LogsInputsService) {\n    _classCallCheck(this, LogsInputsHomeCtrl);\n\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsInputsService = LogsInputsService;\n    this.initLoaders();\n  }\n\n  _createClass(LogsInputsHomeCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.runLoaders();\n    }\n    /**\n     * Deletes the input\n     *\n     * @param {any} input - the input object\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(input) {\n      var _this = this;\n\n      this.delete = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.LogsInputsService.deleteInput(_this.serviceName, input).finally(function () {\n            return _this.ControllerHelper.scrollPageToTop();\n          });\n        }\n      });\n      this.delete.load().then(function () {\n        return _this.runLoaders();\n      });\n    }\n    /**\n     * Executes an action on the input\n     *\n     * @param {any} input - the input on which the action has to be performed\n     * @param {any} actionFn - the action function to be called\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"executeAction\",\n    value: function executeAction(input, actionFn) {\n      var _this2 = this;\n\n      this.setInputToProcessing(input);\n      this.processInput = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.LogsInputsService[actionFn](_this2.serviceName, input).finally(function () {\n            return _this2.ControllerHelper.scrollPageToTop();\n          });\n        }\n      });\n      this.processInput.load().finally(function () {\n        return _this2.reloadInputDetail(input.info.inputId);\n      });\n    }\n    /**\n     * initializes the inputs and the quota\n     *\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this3 = this;\n\n      this.inputs = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this3.LogsInputsService.getInputs(_this3.serviceName);\n        }\n      });\n      this.quota = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this3.LogsInputsService.getQuota(_this3.serviceName);\n        }\n      });\n    }\n    /**\n     * Updates the list of inputs with the latest information of the input\n     *\n     * @param {any} inputId\n     * @returns promise which will be resolve with the reloaded input\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"reloadInputDetail\",\n    value: function reloadInputDetail(inputId) {\n      var _this4 = this;\n\n      this.inputReload = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this4.LogsInputsService.getInputDetail(_this4.serviceName, inputId);\n        }\n      });\n      return this.inputReload.load().then(function (input) {\n        _this4.inputs.data.forEach(function (inputItem, inputIndex) {\n          if (inputItem.info.inputId === input.info.inputId) {\n            _this4.inputs.data[inputIndex] = input;\n          }\n        });\n\n        return input;\n      });\n    }\n    /**\n     * Runs all the loaders to fetch data from APIs\n     *\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"runLoaders\",\n    value: function runLoaders() {\n      this.inputs.load();\n      this.quota.load();\n    }\n    /**\n     * Sets the state of the input to Processing\n     *\n     * @param {any} input\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"setInputToProcessing\",\n    value: function setInputToProcessing(input) {\n      _.set(input, 'info.status', this.LogsConstants.inputStatus.PROCESSING);\n\n      this.LogsInputsService.transformInput(input);\n    }\n    /**\n     * navigates to the add page\n     *\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"add\",\n    value: function add() {\n      this.CloudMessage.flushChildMessage();\n      this.$state.go('dbaas.logs.detail.inputs.addwizard.add', {\n        serviceName: this.serviceName\n      });\n    }\n    /**\n     * navigates to the edit page\n     *\n     * @param {any} input - the input for which standard output is to be edited\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"edit\",\n    value: function edit(input) {\n      this.CloudMessage.flushChildMessage();\n      this.$state.go('dbaas.logs.detail.inputs.editwizard.edit', {\n        serviceName: this.serviceName,\n        inputId: input.info.inputId\n      });\n    }\n    /**\n     * Opens the info pop-up for the input\n     *\n     * @param {any} input - the input for which info is to be displayed\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"info\",\n    value: function info(input) {\n      this.CloudMessage.flushChildMessage();\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/dbaas/logs/detail/inputs/home/info/logs-inputs-home-info.html',\n          controller: 'LogsInputsHomeInfoModalCtrl',\n          controllerAs: 'ctrl',\n          resolve: {\n            currentInput: function currentInput() {\n              return input;\n            }\n          }\n        }\n      });\n    }\n    /**\n     * Shows the confirmation modal box for input deletion confirmation\n     * and deletes the input if the user confirms the deletion\n     *\n     * @param {any} input - the input object\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"showDeleteConfirm\",\n    value: function showDeleteConfirm(input) {\n      var _this5 = this;\n\n      this.CloudMessage.flushChildMessage();\n      return this.ControllerHelper.modal.showDeleteModal({\n        titleText: this.$translate.instant('inputs_delete'),\n        textHtml: this.$translate.instant('inputs_delete_message', {\n          input: input.info.title\n        })\n      }).then(function () {\n        return _this5.delete(input);\n      });\n    }\n    /**\n     * Restarts the input\n     *\n     * @param {any} input - the input to be restarted\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"restartInput\",\n    value: function restartInput(input) {\n      this.CloudMessage.info(this.$translate.instant('inputs_restarting', {\n        inputTitle: input.info.title\n      }));\n      this.executeAction(input, 'restartInput');\n    }\n    /**\n     * navigates to the standard output page\n     *\n     * @param {any} input - the input for which standard output is to be displayed\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"standardOutput\",\n    value: function standardOutput(input) {\n      this.CloudMessage.flushChildMessage();\n      this.$state.go('dbaas.logs.detail.inputs.console', {\n        serviceName: this.serviceName,\n        inputId: input.info.inputId\n      });\n    }\n    /**\n     * Starts the input\n     *\n     * @param {any} input - the input to be started\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"startInput\",\n    value: function startInput(input) {\n      this.CloudMessage.info(this.$translate.instant('inputs_starting', {\n        inputTitle: input.info.title\n      }));\n      this.executeAction(input, 'startInput');\n    }\n    /**\n     * Stops the input\n     *\n     * @param {any} input - the input to be stopped\n     * @memberof LogsInputsCtrl\n     */\n\n  }, {\n    key: \"stopInput\",\n    value: function stopInput(input) {\n      this.CloudMessage.info(this.$translate.instant('inputs_stopping', {\n        inputTitle: input.info.title\n      }));\n      this.executeAction(input, 'stopInput');\n    }\n  }]);\n\n  return LogsInputsHomeCtrl;\n}();\n\nangular.module('managerApp').controller('LogsInputsHomeCtrl', LogsInputsHomeCtrl);",null]}