{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/iplb-ssl-certificate.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/iplb-ssl-certificate.service.js","mtime":1539717142220},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerSslCertificateService {\n  constructor($q, OvhApiIpLoadBalancing, OvhApiMe, OvhApiOrder, ServiceHelper) {\n    this.$q = $q;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.Ssl = OvhApiIpLoadBalancing.Ssl().v6();\n    this.User = OvhApiMe;\n    this.OvhApiOrder = OvhApiOrder;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  getCertificates(serviceName) {\n    return this.Ssl.query({ serviceName })\n      .$promise\n      .then(sslIds => this.$q.all(sslIds.map(sslId => this.getCertificate(serviceName, sslId))))\n      .catch(this.ServiceHelper.errorHandler('iplb_ssl_list_error'));\n  }\n\n  getCertificate(serviceName, sslId) {\n    return this.Ssl.get({ serviceName, sslId })\n      .$promise;\n  }\n\n  create(serviceName, ssl) {\n    return this.Ssl.post({ serviceName }, ssl)\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_ssl_add_success'))\n      .catch(this.ServiceHelper.errorHandler('iplb_ssl_add_error'));\n  }\n\n  update(serviceName, sslId, ssl) {\n    return this.Ssl.put({\n      serviceName,\n      sslId,\n    }, ssl)\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_ssl_update_success'))\n      .catch(this.ServiceHelper.errorHandler('iplb_ssl_update_error'));\n  }\n\n  delete(serviceName, sslId) {\n    return this.Ssl.delete({\n      serviceName,\n      sslId,\n    })\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_ssl_delete_success'))\n      .catch(this.ServiceHelper.errorHandler('iplb_ssl_delete_error'));\n  }\n\n  getCertificateProducts(serviceName) {\n    return this.OvhApiOrder.Cart().ServiceOption().v6().get({\n      productName: 'ipLoadbalancing',\n      serviceName,\n    })\n      .$promise\n      .then(options => options.filter(option => option.family === 'ssl'))\n      .then(options => options.map((option) => {\n        // Keep only 1 year prices\n        _.set(option, 'prices', option.prices.filter(price => price.interval === 12));\n        return option;\n      }))\n      .catch(this.ServiceHelper.errorHandler('iplb_ssl_order_loading_error'));\n  }\n\n  /**\n     * Order a paid certificate\n     * @param  String serviceName       the service name\n     * @param  Object options           order parameters\n     * @param  Object configuration     item configuration\n     * @return Object                   the result of the order\n     *\n     * options must contains:\n     *\n     *  - duration\n     *  - planCode\n     *  - pricingMode\n     *  - quantity\n     */\n  orderPaidCertificate(serviceName, orderOptions, configuration) {\n    let cartId;\n    return this.User.v6().get().$promise\n      .then(me => this.OvhApiOrder.Cart().v6()\n        .post({}, { ovhSubsidiary: me.ovhSubsidiary }).$promise)\n      .then((cart) => {\n        cartId = _.get(cart, 'cartId');\n        return this.OvhApiOrder.Cart().v6().assign({ cartId }).$promise;\n      })\n      .then(() => this.OvhApiOrder.Cart().ServiceOption().v6().post({\n        productName: 'ipLoadbalancing',\n        serviceName,\n      }, Object.assign({}, orderOptions, {\n        cartId,\n      })).$promise)\n      .then((item) => {\n        // Apply item configuration\n        const promises = Object.keys(configuration)\n          .map(label => this.configureCartItem(cartId, item.itemId, label, configuration[label]));\n        return this.$q.all(promises);\n      })\n      .then(() => this.OvhApiOrder.Cart().v6().checkout({ cartId }, {}).$promise)\n      .catch((err) => {\n        if (cartId) {\n          this.OvhApiOrder.Cart().v6().delete({ cartId });\n        }\n\n        this.ServiceHelper.errorHandler('iplb_ssl_order_error')(err);\n      });\n  }\n\n  configureCartItem(cartId, itemId, label, value) {\n    return this.OvhApiOrder.Cart().Item().Configuration().v6()\n      .post({\n        cartId,\n        itemId,\n      }, {\n        label,\n        value,\n      }).$promise;\n  }\n\n  orderFreeCertificate(serviceName, fqdn) {\n    return this.OvhApiIpLoadBalancing.v6().freeCertificate({ serviceName }, { fqdn }).$promise\n      .then(this.ServiceHelper.successHandler('iplb_ssl_order_success'))\n      .then(() => this.Ssl.resetQueryCache())\n      .catch(this.ServiceHelper.errorHandler('iplb_ssl_order_error'));\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerSslCertificateService', IpLoadBalancerSslCertificateService);\n"]}