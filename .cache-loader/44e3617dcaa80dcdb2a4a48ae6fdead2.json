{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplz-zone-picker.component.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplz-zone-picker.component.js","mtime":1539717142230},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp')\n  .component('iplbZonePicker', {\n    template: `\n      <div data-ng-repeat=\"(country, zones) in $ctrl.groupedZones | orderHashByKey track by $index\">\n        <p data-ng-bind=\"country\"></p>\n        <oui-checkbox\n          data-on-change=\"$ctrl.onSelectionChanged(zone, modelValue)\"\n          data-disabled=\"zone.selectable.value === false\"\n          data-description=\"{{ zone.selectable.reason }}\"\n          data-ng-repeat=\"zone in zones | orderBy: 'microRegion.text' track by $index\"\n          data-text=\"{{ zone.microRegion.text }}\"></oui-checkbox>\n      </div>`,\n    controller:\n      class {\n        constructor($scope) {\n          this.groupZones();\n          this.selections = [];\n\n          $scope.$watchCollection(() => this.zones, () => {\n            this.groupZones();\n          });\n        }\n\n        onSelectionChanged(selectedZone, value) {\n          let selection = _.find(this.selections, item => item.zone === selectedZone);\n          if (!selection) {\n            selection = {\n              zone: selectedZone,\n              selected: false,\n            };\n            this.selections.push(selection);\n          }\n          selection.selected = value;\n\n          this.onSelectionChange({\n            value: _.map(_.filter(this.selections, item => item.selected), item => item.zone),\n          });\n        }\n\n        groupZones() {\n          this.groupedZones = _.groupBy(this.zones, zone => zone.country);\n        }\n      },\n    bindings: {\n      zones: '<',\n      onSelectionChange: '&?',\n    },\n  });\n"]}