{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/quota/cloud-project-compute-quota.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/quota/cloud-project-compute-quota.controller.js","mtime":1539717142030},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["\n\nangular.module('managerApp').controller('CloudProjectComputeQuotaCtrl',\n  function CloudProjectComputeQuotaCtrl(\n    $q, $stateParams, $translate, REDIRECT_URLS,\n    OvhApiCloudProject, OvhApiCloudProjectQuota, OvhApiMe, CloudMessage, OtrsPopupService,\n    RegionService, TARGET,\n  ) {\n    // ---------VARIABLE DECLARATION---------\n\n    const self = this;\n    const serviceName = $stateParams.projectId;\n\n    this.loader = {\n      quota: false,\n      unleash: false,\n    };\n\n    this.datas = {\n      quota: null,\n      defaultPaymentMean: null,\n    };\n\n    this.state = {\n      isRestrictedQuota: false,\n    };\n\n    // PaymentMean URL (v6 dedicated) with sessionv6\n    this.paymentmeanUrl = REDIRECT_URLS.paymentMeans;\n    this.supportUrl = REDIRECT_URLS.support;\n\n    self.regionService = RegionService;\n\n    this.TARGET = TARGET;\n\n    // ---------SUPPORT---------\n\n    this.openSupport = function openSupport() {\n      if (!OtrsPopupService.isLoaded()) {\n        OtrsPopupService.init();\n      } else {\n        OtrsPopupService.toggle();\n      }\n    };\n\n    // ---------UNLEASH---------\n\n    function initPaymentMethods() {\n      if (self.TARGET !== 'US') {\n        return OvhApiMe.PaymentMean().v6().getDefaultPaymentMean();\n      }\n\n      return OvhApiMe.PaymentMethod().v6().query({\n        status: 'VALID',\n      }).$promise.then(paymentMethodIds => _.map(\n        paymentMethodIds,\n        paymentMethodId => $q.all(\n          OvhApiMe.PaymentMethod().v6().get({\n            id: paymentMethodId,\n          }).$promise,\n        ),\n      )).then(paymentMethods => _.find(paymentMethods, {\n        default: true,\n      }));\n    }\n\n    function init() {\n      const initQueue = [];\n\n      self.loader.quota = true;\n      self.loader.unleash = false;\n\n      // check default payment mean\n      initQueue.push(initPaymentMethods().then((defaultPaymentMean) => {\n        self.datas.defaultPaymentMean = defaultPaymentMean;\n      }));\n\n      // get quota\n      initQueue.push(OvhApiCloudProjectQuota.v6().query({\n        serviceName,\n      }).$promise.then((quotas) => {\n        self.datas.quota = quotas;\n      }));\n\n      return $q.all(initQueue).then(() => {\n        // check if quota is restricted\n        if (self.datas.quota.length) {\n          self.state.isRestrictedQuota = self.datas.quota[0].maxInstances === 1\n            && self.datas.quota[0].maxCores === 1\n            && self.datas.quota[0].maxRam === 2048;\n        }\n      }, (err) => {\n        CloudMessage.error([\n          $translate.instant('cpb_quota_loading_error'),\n          (err.data && err.data.message) || '',\n        ].join(' '));\n        self.datas.quota = null;\n      }).finally(() => {\n        self.loader.quota = false;\n      });\n    }\n\n    this.unleashAccount = function unleashAccount() {\n      self.loader.unleash = true;\n\n      return OvhApiCloudProject.v6().unleash({\n        serviceName,\n      }, {}).$promise.then(() => {\n        init();\n      }, (err) => {\n        if (err.status === 403) {\n          CloudMessage.error($translate.instant('cpb_quota_already_unleashed'));\n        } else {\n          CloudMessage.error($translate.instant('cpb_quota_unleash_error'));\n        }\n        init();\n      }).finally(() => {\n        self.loader.unleash = false;\n      });\n    };\n\n    // ---------INITIALIZATION---------\n\n    init();\n  });\n"]}