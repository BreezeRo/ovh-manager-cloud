{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/home/logs-home.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/home/logs-home.service.js","mtime":1539717142083},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsHomeService =\n/*#__PURE__*/\nfunction () {\n  LogsHomeService.$inject = [\"$http\", \"$q\", \"$translate\", \"LogsHelperService\", \"LogsConstants\", \"LogsOptionsService\", \"OvhApiDbaas\", \"ServiceHelper\", \"SidebarMenu\"];\n\n  function LogsHomeService($http, $q, $translate, LogsHelperService, LogsConstants, LogsOptionsService, OvhApiDbaas, ServiceHelper, SidebarMenu) {\n    _classCallCheck(this, LogsHomeService);\n\n    this.$http = $http;\n    this.$q = $q;\n    this.$translate = $translate;\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.ContactsApiLexiService = OvhApiDbaas.Logs().Contacts().v6();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.InputsApiAapiService = OvhApiDbaas.Logs().Input().Aapi();\n    this.InputsApiLexiService = OvhApiDbaas.Logs().Input().v6();\n    this.LogsLexiService = OvhApiDbaas.Logs().v6();\n    this.LogsHelperService = LogsHelperService;\n    this.LogsConstants = LogsConstants;\n    this.LogsOptionsService = LogsOptionsService;\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.ServiceHelper = ServiceHelper;\n    this.SidebarMenu = SidebarMenu;\n  }\n  /**\n   * Gets the transformed account object\n   *\n   * @param {any} serviceName\n   * @returns promise which will resolve to the account object\n   * @memberof LogsHomeService\n   */\n\n\n  _createClass(LogsHomeService, [{\n    key: \"getAccount\",\n    value: function getAccount(serviceName) {\n      var _this = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (account) {\n        return _this.transformAccount(account);\n      }).catch(this.ServiceHelper.errorHandler('logs_home_account_get_error'));\n    }\n    /**\n     * Gets the transformed account details object\n     *\n     * @param {any} serviceName\n     * @returns promise which will resolve to the account details object\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getAccountDetails\",\n    value: function getAccountDetails(serviceName) {\n      var _this2 = this;\n\n      return this.DetailsAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (accountDetails) {\n        return _this2.transformAccountDetails(accountDetails);\n      }).catch(this.ServiceHelper.errorHandler('logs_home_account_details_get_error'));\n    }\n    /**\n     * Gets the current offer object\n     *\n     * @param {any} serviceName\n     * @returns promise which will resolve to the current offer object\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getCurrentOffer\",\n    value: function getCurrentOffer(serviceName) {\n      var _this3 = this;\n\n      return this.LogsOfferService.getOffer(serviceName).then(function (offer) {\n        return _this3.transformOffer(offer);\n      });\n    }\n    /**\n     * Gets the data usage statistics data (number of documents and data received)\n     *\n     * @param {any} serviceName\n     * @returns promise which will resolve with the statistics data\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getDataUsage\",\n    value: function getDataUsage(serviceName) {\n      var _this4 = this;\n\n      return this.getAccount(serviceName).then(function (account) {\n        var token = btoa(account.metrics.token);\n        var query = {\n          start: moment().subtract(_this4.LogsConstants.DATA_STORAGE.TIME_PERIOD_MONTHS, 'month').unix() * 1000,\n          queries: [{\n            metric: _this4.LogsConstants.DATA_STORAGE.METRICS.SUM,\n            aggregator: _this4.LogsConstants.DATA_STORAGE.AGGREGATORS.MAX,\n            downsample: _this4.LogsConstants.DATA_STORAGE.DOWNSAMPLING_MODE['24H_MAX']\n          }, {\n            metric: _this4.LogsConstants.DATA_STORAGE.METRICS.COUNT,\n            aggregator: _this4.LogsConstants.DATA_STORAGE.AGGREGATORS.MAX,\n            downsample: _this4.LogsConstants.DATA_STORAGE.DOWNSAMPLING_MODE['24H_MAX']\n          }]\n        };\n        return _this4.$http({\n          method: 'POST',\n          url: \"\".concat(account.metrics.host, \"/api/query\"),\n          headers: {\n            Authorization: \"Basic \".concat(token)\n          },\n          preventLogout: true,\n          data: JSON.stringify(query)\n        });\n      }).then(function (data) {\n        var timestamps = data.data.length > 0 ? Object.keys(data.data[0].dps) : [];\n        data = data.data.map(function (dat) {\n          return timestamps.map(function (timestamp) {\n            return dat.dps[timestamp];\n          });\n        }); // eslint-disable-line\n\n        return {\n          timestamps: timestamps.map(function (timestamp) {\n            return timestamp * 1000;\n          }),\n          usageData: data\n        };\n      }).catch(this.ServiceHelper.errorHandler('logs_home_data_get_error'));\n    }\n    /**\n     * Gets the cold storage data volume\n     *\n     * @param {any} serviceName\n     * @returns promise which will resolve with the data volume\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getColdstorage\",\n    value: function getColdstorage(serviceName) {\n      var _this5 = this;\n\n      return this.getAccount(serviceName).then(function (account) {\n        var token = btoa(account.metrics.token);\n        return _this5.$http({\n          method: 'GET',\n          url: \"\".concat(account.metrics.host, \"/api/query/last\"),\n          params: {\n            timeseries: _this5.LogsConstants.DATA_STORAGE.METRICS.COLD_STORAGE_TOTAL\n          },\n          headers: {\n            Authorization: \"Basic \".concat(token)\n          },\n          preventLogout: true\n        }).then(function (data) {\n          return {\n            coldStorage: data.data.length > 0 ? Math.floor(data.data[0].value) : undefined\n          };\n        });\n      });\n    }\n    /**\n     * Gets the currently subscribed options\n     *\n     * @param {any} serviceName\n     * @returns promise which will resolve to the array of subscribed options\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions(serviceName) {\n      var _this6 = this;\n\n      return this.LogsOptionsService.getSubscribedOptionsMap(serviceName).then(function (options) {\n        options.forEach(function (option) {\n          return _this6.constructor.transformOption(option);\n        });\n        return options;\n      });\n    }\n    /**\n     * Gets the service info\n     *\n     * @param {any} serviceName\n     * @returns promise which will resolve to the service info\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getServiceInfos\",\n    value: function getServiceInfos(serviceName) {\n      return this.LogsLexiService.serviceInfos({\n        serviceName: serviceName\n      }).$promise.catch(this.ServiceHelper.errorHandler('logs_home_service_info_get_error'));\n    }\n    /**\n     * Converts the number to a more readable formhttps://sharepoint.corp.ovh.com/my/personal/gio-94fbba0f2de44122/_layouts/15/WopiFrame.aspx?sourcedoc={935AFCC0-72B9-4B54-AAC4-135A9AE8415D}&file=UX%20Projects%20-%20W12-13.pptx&action=default\n     *\n     * @param {any} number\n     * @returns the number in more readable form\n     * @memberof LogsHomeService\n     */\n\n    /* eslint-disable no-restricted-properties */\n\n  }, {\n    key: \"updateDisplayName\",\n\n    /* eslint-enable no-restricted-properties */\n\n    /**\n     * Updates the current display name information\n     *\n     * @param {any} serviceName\n     * @param {string} displayName\n     * @returns promise which will resolve or reject once the operation is complete\n     * @memberof LogsHomeService\n     */\n    value: function updateDisplayName(serviceName, displayName) {\n      var _this7 = this;\n\n      return this.LogsLexiService.update({\n        serviceName: serviceName\n      }, {\n        displayName: displayName\n      }).$promise.then(function (operation) {\n        _this7.resetAllCache();\n\n        return _this7.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_home_display_name_update_success', {}).then(function (res) {\n          _this7.changeMenuTitle(serviceName, displayName || serviceName);\n\n          return res;\n        });\n      }).catch(function (err) {\n        return _this7.LogsHelperService.handleError('logs_home_display_name_update_error', err, {});\n      });\n    }\n    /**\n     * Finds and returns a url from a list of urls based on it's type\n     *\n     * @param {any} urls the list of urls\n     * @param {string} type the type of url that has to be retrieved\n     * @returns the found url\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getElasticSearchApiUrl\",\n\n    /**\n     * Gets the Elasticsearch url from the object\n     *\n     * @param {any} object the object with urls\n     * @returns the Elasticsearch url\n     * @memberof LogsHomeService\n     */\n    value: function getElasticSearchApiUrl(object) {\n      var elasticSearchApiUrl = this.constructor.findUrl(object.urls, this.LogsConstants.URLS.ELASTICSEARCH_API);\n\n      _.set(object, 'elasticSearchApiUrl', \"\".concat(elasticSearchApiUrl, \"/_cluster/health?pretty=true\"));\n\n      return object;\n    }\n    /**\n     * Gets the Greylog API url from the object\n     *\n     * @param {any} object the object with urls\n     * @returns the Greylog API url\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getGreyLogApiUrl\",\n    value: function getGreyLogApiUrl(object) {\n      _.set(object, 'graylogApiUrl', this.constructor.findUrl(object.urls, this.LogsConstants.URLS.GRAYLOG_API));\n\n      return object;\n    }\n    /**\n     * Gets the Greylog url from the object\n     *\n     * @param {any} object the object with urls\n     * @returns the Greylog url\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getGreyLogUrl\",\n    value: function getGreyLogUrl(object) {\n      _.set(object, 'graylogWebuiUrl', this.constructor.findUrl(object.urls, this.LogsConstants.URLS.GRAYLOG_WEBUI));\n\n      return object;\n    }\n    /**\n     * Builds and returns the ports and messages information from the account details object\n     *\n     * @param {any} accountDetails\n     * @returns the ports and messages information\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"getPortsAndMessages\",\n    value: function getPortsAndMessages(accountDetails) {\n      var _this8 = this;\n\n      var portsAndMessages = {};\n      accountDetails.urls.forEach(function (url) {\n        var urlInfo = _this8.LogsConstants.URL_TYPES[url.type];\n\n        if (urlInfo) {\n          portsAndMessages[urlInfo.PORT] = portsAndMessages[urlInfo.PORT] || {\n            name: _this8.LogsConstants.PORT_TYPES[urlInfo.PORT]\n          };\n          portsAndMessages[urlInfo.PORT][urlInfo.MESSAGE] = url.address.split(':')[1]; // eslint-disable-line\n        }\n      });\n      return Object.keys(portsAndMessages).map(function (portType) {\n        return portsAndMessages[portType];\n      });\n    }\n    /**\n     * Resets all relevant caches\n     *\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.DetailsAapiService.resetAllCache();\n      this.LogsLexiService.resetAllCache();\n    }\n    /**\n     * Returns the transformed account object\n     *\n     * @param {any} account\n     * @returns the transformed account object\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"transformAccount\",\n    value: function transformAccount(account) {\n      if (_.isEmpty(account.offer)) {\n        _.set(account, 'offer.description', '');\n      } else if (account.offer.reference === this.LogsConstants.basicOffer) {\n        _.set(account, 'offer.description', this.LogsConstants.offertypes.BASIC);\n      } else {\n        var dataVolume = this.$translate.instant('logs_home_data_volume');\n        var dataVolumeValue = this.$translate.instant(account.offer.reference);\n\n        _.set(account, 'offer.description', \"\".concat(this.LogsConstants.offertypes.PRO, \" - \").concat(dataVolume, \": \").concat(dataVolumeValue));\n      }\n\n      return account;\n    }\n    /**\n     * Returns the transformed account details object\n     *\n     * @param {any} accountDetails\n     * @returns the transformed account detials object\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"transformAccountDetails\",\n    value: function transformAccountDetails(accountDetails) {\n      _.set(accountDetails, 'email', accountDetails.service.contact ? accountDetails.service.contact.email : accountDetails.me.email);\n\n      this.getGreyLogUrl(accountDetails);\n      this.getGreyLogApiUrl(accountDetails);\n\n      _.set(accountDetails, 'graylogApiUrl', \"\".concat(accountDetails.graylogApiUrl, \"/api-browser\"));\n\n      _.set(accountDetails, 'graylogEntryPoint', accountDetails.graylogWebuiUrl.replace('https://', '').replace('/api', ''));\n\n      this.getElasticSearchApiUrl(accountDetails);\n\n      if (accountDetails.last_stream) {\n        this.getGreyLogUrl(accountDetails.last_stream);\n      }\n\n      if (accountDetails.last_dashboard) {\n        this.getGreyLogUrl(accountDetails.last_dashboard);\n      }\n\n      _.set(accountDetails, 'portsAndMessages', this.getPortsAndMessages(accountDetails));\n\n      return accountDetails;\n    }\n    /**\n     * Returns the transformed option object\n     *\n     * @param {any} option\n     * @returns the transformed option object\n     * @memberof LogsHomeService\n     */\n\n  }, {\n    key: \"changeMenuTitle\",\n\n    /**\n     * Sets the menu's title\n     *\n     * @param {any} serviceName\n     * @param {any} displayName\n     * @memberof LogsHomeService\n     */\n    value: function changeMenuTitle(serviceName, displayName) {\n      var menuItem = this.SidebarMenu.getItemById(serviceName);\n\n      if (menuItem) {\n        menuItem.title = displayName;\n      }\n    }\n  }], [{\n    key: \"humanizeNumber\",\n    value: function humanizeNumber(number) {\n      if (number < 1000) {\n        return Math.round(number * 100) / 100;\n      }\n\n      var si = ['K', 'M', 'G', 'T', 'P', 'H'];\n      var exp = Math.floor(Math.log(number) / Math.log(1000));\n      var result = number / Math.pow(1000, exp);\n      result = result % 1 > 1 / Math.pow(1000, exp - 1) ? Math.round(result.toFixed(2) * 100) / 100 : result.toFixed(0);\n      var unit = si[exp - 1];\n      return \"\".concat(result, \" \").concat(unit);\n    }\n  }, {\n    key: \"findUrl\",\n    value: function findUrl(urls, type) {\n      return urls.reduce(function (foundUrl, url) {\n        return url.type === type ? url.address : foundUrl;\n      }, '');\n    }\n  }, {\n    key: \"transformOption\",\n    value: function transformOption(option) {\n      _.set(option, 'description', \"\".concat(option.quantity, \" \").concat(option.type, \": \").concat(option.detail));\n\n      return option;\n    }\n  }]);\n\n  return LogsHomeService;\n}();\n\nangular.module('managerApp').service('LogsHomeService', LogsHomeService);",null]}