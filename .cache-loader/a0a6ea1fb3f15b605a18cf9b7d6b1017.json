{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/vps-header.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/vps-header.controller.js","mtime":1539717374640},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsHeaderCtrl =\n/*#__PURE__*/\nfunction () {\n  VpsHeaderCtrl.$inject = [\"$rootScope\", \"$stateParams\", \"$translate\", \"CloudMessage\", \"OvhApiMe\", \"VpsNotificationIpv6\", \"STOP_NOTIFICATION_USER_PREF\", \"VpsService\", \"ProductsService\"];\n\n  function VpsHeaderCtrl($rootScope, $stateParams, $translate, CloudMessage, OvhApiMe, VpsNotificationIpv6, STOP_NOTIFICATION_USER_PREF, VpsService, ProductsService) {\n    var _this = this;\n\n    _classCallCheck(this, VpsHeaderCtrl);\n\n    this.$rootScope = $rootScope;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.OvhApiMe = OvhApiMe;\n    this.VpsNotificationIpv6 = VpsNotificationIpv6;\n    this.STOP_NOTIFICATION_USER_PREF = STOP_NOTIFICATION_USER_PREF;\n    this.serviceName = $stateParams.serviceName;\n    this.description = $stateParams.serviceName;\n    this.VpsService = VpsService;\n    this.ProductsService = ProductsService;\n    this.loaders = {\n      init: false\n    };\n    this.vps = {};\n    this.stopNotification = {\n      autoRenew: true,\n      ipV6: true\n    };\n    this.OvhApiMe.v6().get().$promise.then(function (me) {\n      _this.user = me;\n    });\n  }\n\n  _createClass(VpsHeaderCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this2 = this;\n\n      this.loaders.init = true;\n      this.$rootScope.$on('changeDescription', function (event, data) {\n        _this2.description = data;\n      });\n      this.VpsService.getSelectedVps(this.serviceName).then(function (vps) {\n        _this2.vps = vps;\n        _this2.description = vps.displayName;\n\n        _this2.checkMessages(vps);\n\n        _this2.$rootScope.$on('tasks.success', function (event, opt) {\n          if (opt === _this2.serviceName) {\n            _this2.checkMessages(vps);\n          }\n        });\n      }).catch(function () {\n        return _this2.CloudMessage.error(_this2.$translate.instant('vps_dashboard_loading_error'));\n      }).finally(function () {\n        _this2.loaders.init = false;\n      });\n      this.description = this.ProductsService.getDisplayName('VPS', this.serviceName);\n    }\n  }, {\n    key: \"checkMessages\",\n    value: function checkMessages(vps) {\n      this.isExpired(vps);\n      this.isInRescueMode(vps.netbootMode);\n      this.checkIfStopNotification('ipV6', true, vps);\n    }\n  }, {\n    key: \"isExpired\",\n    value: function isExpired(vps) {\n      if (vps.isExpired) {\n        this.CloudMessage.warning(this.$translate.instant('vps_service_expired', {\n          vps: vps.name\n        }), 'iaas.vps.detail');\n      } else if (vps.messages.length > 0) {\n        this.CloudMessage.error(this.$translate.instant('vps_dashboard_loading_error'), vps);\n      }\n    }\n  }, {\n    key: \"isInRescueMode\",\n    value: function isInRescueMode(netbootMode) {\n      if (netbootMode === 'RESCUE') {\n        this.CloudMessage.warning({\n          textHtml: this.$translate.instant('vps_configuration_reboot_rescue_warning_text')\n        }, 'iaas.vps.detail');\n      }\n    }\n  }, {\n    key: \"showIpV6Banner\",\n    value: function showIpV6Banner(version, ipv6) {\n      var _this3 = this;\n\n      var oldVersion = _.contains(version, '2014') || _.contains(version, '2013');\n\n      var userAcknowledged = this.stopNotification.ipV6;\n\n      if (!userAcknowledged && !oldVersion && ipv6) {\n        this.CloudMessage.info({\n          textHtml: this.$translate.instant('vps_configuration_ipV6_info_text'),\n          dismissed: this.stopNotification.ipV6,\n          dismiss: function dismiss() {\n            return _this3.stopNotificationIpV6();\n          }\n        }, 'iaas.vps.detail.dashboard');\n      }\n    }\n  }, {\n    key: \"checkIfStopNotification\",\n    value: function checkIfStopNotification(message, isArray, vps) {\n      var _this4 = this;\n\n      var item = vps.name;\n      return this.VpsNotificationIpv6.checkIfStopNotification(this.STOP_NOTIFICATION_USER_PREF[message], isArray, item).then(function (showNotification) {\n        _this4.stopNotification[message] = showNotification;\n\n        _this4.showIpV6Banner(vps.version, vps.ipv6);\n      }).catch(function () {\n        _this4.stopNotification[message] = false;\n      });\n    }\n  }, {\n    key: \"stopNotificationIpV6\",\n    value: function stopNotificationIpV6() {\n      var _this5 = this;\n\n      this.stopNotification.ipV6 = true;\n      this.VpsNotificationIpv6.stopNotification(this.STOP_NOTIFICATION_USER_PREF.ipV6, this.vps.name).catch(function () {\n        return _this5.CloudMessage.error(_this5.$translate.instant('vps_stop_bother_error'));\n      });\n    }\n  }]);\n\n  return VpsHeaderCtrl;\n}();\n\nangular.module('managerApp').controller('VpsHeaderCtrl', VpsHeaderCtrl);",null]}