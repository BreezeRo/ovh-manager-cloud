{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home-status.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home-status.service.js","mtime":1539717142201},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerHomeStatusService {\n  constructor($q, $translate, OvhApiIpLoadBalancing, ServiceHelper) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.ServiceHelper = ServiceHelper;\n\n    this.apiToUiStatus = {\n      ok: 'success',\n      unknown: 'help',\n      warn: 'warning',\n      error: 'error',\n    };\n\n    this.iplbItemWeight = {\n      service: 1,\n      frontends: 2,\n      farms: 3,\n      servers: 4,\n    };\n  }\n\n  getIPLBStatus(serviceName, config = { toArray: false }) {\n    return this.OvhApiIpLoadBalancing.v6().status({ serviceName })\n      .$promise\n      .then((response) => {\n        const transformedResponse = {};\n        const promises = _.map(\n          _.keys(_.pick(response, _.keys(this.iplbItemWeight))),\n          (iplbItem) => {\n            response[iplbItem].itemName = iplbItem;\n            return this.transformIplbItem(serviceName, response[iplbItem]).then((item) => {\n              transformedResponse[iplbItem] = item;\n            });\n          },\n        );\n\n        return this.$q.all(promises)\n          .then(() => {\n            if (config.toArray) {\n              return _.map(_.keys(transformedResponse), iplbItem => transformedResponse[iplbItem]);\n            }\n            return transformedResponse;\n          });\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_status_loading_error'));\n  }\n\n  transformIplbItem(serviceName, iplbItem) {\n    switch (iplbItem.itemName) {\n      case 'service':\n        return this.buildServiceStatusItem(serviceName, iplbItem);\n      default:\n        return this.buildOtherStatusItem(iplbItem);\n    }\n  }\n\n  buildServiceStatusItem(serviceName, iplbItem) {\n    return this.OvhApiIpLoadBalancing.v6().get({ serviceName })\n      .$promise\n      .then(response => ({\n        itemName: iplbItem.itemName,\n        displayName: response.displayName || response.serviceName,\n        status: {\n          [this.apiToUiStatus[iplbItem.status]]: {\n            code: this.apiToUiStatus[iplbItem.status],\n            number: 1,\n            text: this.$translate.instant(`iplb_status_${this.apiToUiStatus[iplbItem.status]}_${iplbItem.itemName}`),\n          },\n        },\n        total: 1,\n        weight: this.iplbItemWeight[iplbItem.itemName],\n      }));\n  }\n\n  buildOtherStatusItem(iplbItem) {\n    const transformedItem = {\n      itemName: iplbItem.itemName,\n      displayName: this.$translate.instant(`iplb_home_tile_status_${iplbItem.itemName}`, { number: iplbItem.total }),\n      status: {},\n      total: iplbItem.total,\n      weight: this.iplbItemWeight[iplbItem],\n    };\n\n    _.forEach(_.keys(iplbItem.status), (status) => {\n      transformedItem.status[this.apiToUiStatus[status]] = {\n        code: this.apiToUiStatus[status],\n        number: iplbItem.status[status],\n        text: this.$translate.instant(`iplb_status_${this.apiToUiStatus[status]}_${iplbItem.itemName}`, {\n          activeCount: iplbItem.status[status],\n          totalCount: iplbItem.total,\n        }),\n      };\n    });\n    return this.$q.when(transformedItem);\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerHomeStatusService', IpLoadBalancerHomeStatusService);\n"]}