{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/server/iplb-server.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/server/iplb-server.service.js","mtime":1539717142213},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerServerService {\n  constructor($q, $translate, IpLoadBalancerConfigurationService, OvhApiIpLoadBalancing,\n    ServiceHelper, RegionService) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.IpLoadBalancerConfigurationService = IpLoadBalancerConfigurationService;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n\n    this.Server = {\n      tcp: this.IpLoadBalancing.Farm().Tcp().Server().v6(),\n      udp: this.IpLoadBalancing.Farm().Udp().Server().v6(),\n      http: this.IpLoadBalancing.Farm().Http().Server().v6(),\n    };\n  }\n\n  getServer(serviceName, farmId, serverId) {\n    return this.getFarmType(serviceName, farmId)\n      .then(type => this.Server[type].get({\n        serviceName,\n        farmId,\n        serverId,\n      }).$promise);\n  }\n\n  create(type, serviceName, farmId, server) {\n    return this.Server[type].post({\n      serviceName,\n      farmId,\n    }, server)\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_server_add_success'))\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_server_add_error'));\n  }\n\n  update(type, serviceName, farmId, serverId, server) {\n    return this.Server[type].put({\n      serviceName,\n      farmId,\n      serverId,\n    }, server)\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_server_update_success'))\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_server_update_error'));\n  }\n\n  delete(serviceName, farmId, serverId) {\n    return this.getFarmType(serviceName, farmId)\n      .then(type => this.Server[type].delete({\n        serviceName,\n        farmId,\n        serverId,\n      }).$promise)\n      .then(this.ServiceHelper.successHandler('iplb_server_delete_success'))\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_server_delete_error'));\n  }\n\n  getFarmType(serviceName, farmId) {\n    return this.IpLoadBalancing.Farm().v6().query({ serviceName })\n      .$promise\n      .then((farms) => {\n        const farm = _.find(farms, { id: parseInt(farmId, 10) });\n        return farm;\n      })\n      .then((farm) => {\n        if (!farm) {\n          return this.$q.reject('NOTFOUND');\n        }\n        return farm.type;\n      });\n  }\n\n  getProxyProtocolVersions() {\n    return this.IpLoadBalancing.v6().schema()\n      .$promise\n      .then(schema => schema.models['ipLoadbalancing.ProxyProtocolVersionEnum'].enum)\n      .catch(this.ServiceHelper.errorHandler('iplb_server_request_error'));\n  }\n}\n\nangular.module('managerApp')\n  .service('IpLoadBalancerServerService', IpLoadBalancerServerService);\n"]}