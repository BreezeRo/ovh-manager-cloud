{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/translate/translate.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/translate/translate.service.js","mtime":1539717142432},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @ngdoc service\n * @name managerApp.service:TranslateService\n * @description Manage translations\n */\nvar TranslateServiceProvider =\n/*#__PURE__*/\nfunction () {\n  TranslateServiceProvider.$inject = [\"LANGUAGES\", \"TARGET\"];\n\n  function TranslateServiceProvider(LANGUAGES, TARGET) {\n    _classCallCheck(this, TranslateServiceProvider);\n\n    this.LANGUAGES = LANGUAGES;\n    this.TARGET = TARGET;\n    this.localeRegex = /^([a-zA-Z]+)(?:[_-]([a-zA-Z]+))?$/;\n    this.availableLangsKeys = _.map(this.LANGUAGES.available, 'key');\n    this.currentLanguage = this.LANGUAGES.defaultLoc;\n  }\n  /**\n   * @ngdoc function\n   * @methodOf managerApp.service:TranslateService\n   * @name setUserLocale\n   * @description Set current user locale (in localStorage)\n   * @param  {String} localeParam - (optional) Force to set the gicen locale identifier\n   */\n\n\n  _createClass(TranslateServiceProvider, [{\n    key: \"setUserLocale\",\n    value: function setUserLocale(localeParam) {\n      var locale = localeParam;\n\n      if (!locale) {\n        if (localStorage['univers-selected-language']) {\n          locale = localStorage['univers-selected-language'];\n        } else if (navigator.language || navigator.userLanguage) {\n          locale = navigator.language || navigator.userLanguage;\n        } else {\n          locale = this.LANGUAGES.defaultLoc;\n        }\n      }\n\n      var splittedLocale = locale.match(this.localeRegex);\n\n      if (splittedLocale) {\n        // Format the value\n        var language = splittedLocale[1];\n        var country = splittedLocale[2] ? splittedLocale[2] : this.preferredCountry(language);\n        this.currentLanguage = this.findLanguage(language, country);\n      } else {\n        // Incorrect value\n        this.currentLanguage = this.currentLanguage || this.LANGUAGES.defaultLoc;\n      } // Save it!\n\n\n      localStorage['univers-selected-language'] = this.currentLanguage;\n    }\n    /**\n     * @ngdoc function\n     * @methodOf managerApp.service:TranslateService\n     * @name getUserLocale\n     * @description Returns the current user locale\n     * @param  {Boolean} min - (optional) Return the base locale only\n     * @return {String}      - Current locale\n     */\n\n  }, {\n    key: \"getUserLocale\",\n    value: function getUserLocale(min) {\n      if (min) {\n        return this.currentLanguage.split('_')[0];\n      }\n\n      return this.currentLanguage;\n    }\n    /**\n     * @ngdoc function\n     * @methodOf managerApp.service:TranslateService\n     * @name getGeneralLanguage\n     * @description Returns either fr or en depending on current language\n     * @return {String}      - Current locale\n     */\n\n  }, {\n    key: \"getGeneralLanguage\",\n    value: function getGeneralLanguage() {\n      if (/fr/i.test(this.currentLanguage.split('_')[0])) {\n        return 'fr';\n      }\n\n      return 'en';\n    }\n  }, {\n    key: \"preferredCountry\",\n    value: function preferredCountry(language) {\n      if (_.indexOf(['FR', 'EN'], language.toUpperCase() > -1)) {\n        var customLanguage = _.get(this.LANGUAGES.preferred, \"\".concat(language, \".\").concat(this.TARGET));\n\n        if (customLanguage) {\n          return customLanguage;\n        }\n      }\n\n      return language;\n    }\n  }, {\n    key: \"findLanguage\",\n    value: function findLanguage(language, country) {\n      var _this = this;\n\n      var locale = \"\".concat(language.toLowerCase(), \"_\").concat(country.toUpperCase());\n\n      if (this.availableLangsKeys.indexOf(locale) > -1) {\n        return locale;\n      } // Not found: Try to find another country with same base language\n\n\n      var similarLanguage = _.find(this.availableLangsKeys, function (val) {\n        return _this.localeRegex.test(val) && val.match(_this.localeRegex)[1] === language;\n      });\n\n      if (similarLanguage) {\n        return similarLanguage;\n      } // Not found\n\n\n      return this.LANGUAGES.defaultLoc;\n    }\n  }, {\n    key: \"$get\",\n    value: function $get() {\n      var _this2 = this;\n\n      return {\n        getUserLocale: function getUserLocale(locale) {\n          return _this2.getUserLocale(locale);\n        },\n        getGeneralLanguage: function getGeneralLanguage() {\n          return _this2.getGeneralLanguage();\n        },\n        setUserLocale: function setUserLocale(min) {\n          return _this2.setUserLocale(min);\n        }\n      };\n    }\n  }]);\n\n  return TranslateServiceProvider;\n}();\n\nangular.module('managerApp').provider('TranslateService', TranslateServiceProvider);",null]}