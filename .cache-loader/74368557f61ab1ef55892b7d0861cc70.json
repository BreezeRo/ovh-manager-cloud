{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/aliases/logs-aliases.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/aliases/logs-aliases.service.js","mtime":1539717142078},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsAliasesService {\n  constructor($q, $translate, OvhApiDbaas, ServiceHelper, CloudPoll, LogsHelperService,\n    LogsOptionsService, LogsConstants, UrlHelper, CloudMessage, LogsStreamsService,\n    LogsIndexService) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.ServiceHelper = ServiceHelper;\n    this.AliasApiService = OvhApiDbaas.Logs().Alias().v6();\n    this.AliasAapiService = OvhApiDbaas.Logs().Alias().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.CloudPoll = CloudPoll;\n    this.LogsHelperService = LogsHelperService;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsConstants = LogsConstants;\n    this.UrlHelper = UrlHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsStreamsService = LogsStreamsService;\n    this.LogsIndexService = LogsIndexService;\n\n    this.contentTypeEnum = _.indexBy(['STREAMS', 'INDICES']);\n    this.contents = [\n      { value: this.contentTypeEnum.STREAMS, name: 'logs_streams_title' },\n      { value: this.contentTypeEnum.INDICES, name: 'logs_index_title' },\n    ];\n  }\n\n  getContents() {\n    return this.contents;\n  }\n\n  /**\n   * returns array of aliases with details\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of aliases.\n   *          Each alias will have all details populated.\n   * @memberof LogsAliasesService\n   */\n  getAliases(serviceName) {\n    return this.getAliasesDetails(serviceName)\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_get_error', err, {}));\n  }\n\n  /**\n   * returns array of owned aliases with details of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of aliases.\n   *          Each stream will have all details populated.\n   * @memberof LogsStreamsService\n   */\n  getOwnAliases(serviceName) {\n    return this.getAliasesDetails(serviceName)\n      .then(aliases => aliases.filter(alias => alias.info.isEditable))\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_get_error', err, {}));\n  }\n\n  /**\n   * returns array of shareable aliases with details of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of aliases.\n   *          Each stream will have all details populated.\n   * @memberof LogsStreamsService\n   */\n  getShareableAliases(serviceName) {\n    return this.getAliasesDetails(serviceName)\n      .then(aliases => aliases.filter(alias => alias.info.isShareable))\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_get_error', err, {}));\n  }\n\n  /**\n   * gets details for each alias in array\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to an array of alias objects\n   * @memberof LogsAliasesService\n   */\n  getAliasesDetails(serviceName) {\n    return this.getAliasesIds(serviceName)\n      .then((aliases) => {\n        const promises = aliases.map(aliasId => this.getAapiAlias(serviceName, aliasId));\n        return this.$q.all(promises);\n      });\n  }\n\n  /**\n   * returns array of aliases id's of logged in user\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of aliases id's\n   * @memberof LogsAliasesService\n   */\n  getAliasesIds(serviceName) {\n    return this.AliasApiService.query({ serviceName }).$promise;\n  }\n\n  /**\n   * returns details of an alias\n   *\n   * @param {any} serviceName\n   * @param {any} aliasId\n   * @returns promise which will be resolve to alias object\n   * @memberof LogsAliasesService\n   */\n  getAlias(serviceName, aliasId) {\n    return this.AliasApiService.get({ serviceName, aliasId })\n      .$promise.catch(err => this.LogsHelperService.handleError('logs_alias_get_error', err, {}));\n  }\n\n  getAliasWithStreamsAndIndices(serviceName, aliasId) {\n    return this.AliasAapiService.get({ serviceName, aliasId })\n      .$promise\n      .then((alias) => {\n        if (alias.streams.length > 0) {\n          const promises = alias.streams\n            .map(streamId => this.LogsStreamsService.getAapiStream(serviceName, streamId));\n          return this.$q.all(promises).then((streams) => {\n            _.set(alias, 'streams', streams);\n            return alias;\n          });\n        } if (alias.indexes.length > 0) {\n          const promises = alias.indexes\n            .map(indexId => this.LogsIndexService.getIndexDetails(serviceName, indexId));\n          return this.$q.all(promises).then((indices) => {\n            _.set(alias, 'indexes', indices);\n            return alias;\n          });\n        }\n        return alias;\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_alias_get_error', err, {}));\n  }\n\n  /**\n   * returns details of an alias\n   *\n   * @param {any} serviceName\n   * @param {any} aliasId\n   * @returns promise which will be resolve to alias object\n   * @memberof LogsAliasesService\n   */\n  getAapiAlias(serviceName, aliasId) {\n    return this.AliasAapiService.get({ serviceName, aliasId })\n      .$promise.catch(err => this.LogsHelperService.handleError('logs_alias_get_error', err, {}));\n  }\n\n  /**\n   * returns objecy containing total number of aliases and total number of aliases used\n   *\n   * @param {any} serviceName\n   * @returns quota object containing max (total number aliases)\n   *          and configured (number of aliases used)\n   * @memberof LogsAliasesService\n   */\n  getQuota(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then(me => ({\n        max: me.total.maxNbAlias,\n        configured: me.total.curNbAlias,\n      })).catch(err => this.LogsHelperService.handleError('logs_alias_quota_get_error', err, {}));\n  }\n\n  getMainOffer(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then(me => ({\n        max: me.offer.maxNbAlias,\n        current: me.offer.curNbAlias,\n      }))\n      .catch(err => this.LogsHelperService.handleError('logs_main_offer_get_error', err, {}));\n  }\n\n  /**\n   * delete alias\n   *\n   * @param {any} serviceName\n   * @param {any} alias, alias object to be deleted\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsAliasesService\n   */\n  deleteAlias(serviceName, alias) {\n    return this.AliasApiService.delete({ serviceName, aliasId: alias.aliasId }, alias)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_aliases_delete_success', { aliasName: alias.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_delete_error', err, { aliasName: alias.name }));\n  }\n\n  /**\n   * create new alias\n   *\n   * @param {any} serviceName\n   * @param {any} alias, alias object to be created\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsAliasesService\n   */\n  createAlias(serviceName, alias) {\n    return this.AliasApiService.create({ serviceName }, alias)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_aliases_create_success', { aliasName: alias.suffix });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_create_error', err, { streamName: alias.suffix }));\n  }\n\n  /**\n   * update alias\n   *\n   * @param {any} serviceName\n   * @param {any} alias, alias object to be updated\n   * @returns promise which will be resolve to operation object\n   * @memberof LogsAliasesService\n   */\n  updateAlias(serviceName, alias) {\n    return this.AliasApiService.update({ serviceName, aliasId: alias.aliasId }, alias)\n      .$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_aliases_update_success', { aliasName: alias.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_update_error', err, { aliasName: alias.name }));\n  }\n\n  attachStream(serviceName, alias, stream) {\n    return this.AliasApiService.linkStream({ serviceName, aliasId: alias.aliasId }, stream)\n      .$promise\n      .then(operation => this.LogsHelperService.handleOperation(\n        serviceName,\n        operation.data || operation,\n      ))\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_attach_stream_error', err, { streamName: stream.title }));\n  }\n\n  detachStream(serviceName, alias, stream) {\n    return this.AliasApiService\n      .unlinkStream({ serviceName, aliasId: alias.aliasId, streamId: stream.streamId })\n      .$promise\n      .then(operation => this.LogsHelperService.handleOperation(\n        serviceName,\n        operation.data || operation,\n      ))\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_detach_stream_error', err, { streamName: stream.title }));\n  }\n\n  attachIndex(serviceName, alias, index) {\n    return this.AliasApiService.linkIndex({ serviceName, aliasId: alias.aliasId }, index)\n      .$promise\n      .then(operation => this.LogsHelperService.handleOperation(\n        serviceName,\n        operation.data || operation,\n      ))\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_attach_index_error', err, { indexName: index.name }));\n  }\n\n  detachIndex(serviceName, alias, index) {\n    return this.AliasApiService\n      .unlinkIndex({ serviceName, aliasId: alias.aliasId, indexId: index.indexId })\n      .$promise\n      .then(operation => this.LogsHelperService.handleOperation(\n        serviceName,\n        operation.data || operation,\n      ))\n      .catch(err => this.LogsHelperService.handleError('logs_aliases_detach_index_error', err, { indexName: index.name }));\n  }\n\n  /**\n   * creates new alias with default values\n   *\n   * @returns alias object with default values\n   * @memberof LogsAliasesService\n   */\n  static getNewAlias() {\n    return {\n      data: {\n        description: null,\n        suffix: null,\n      },\n      loading: false,\n    };\n  }\n\n  getSubscribedOptions(serviceName) {\n    return this.LogsOptionsService.getSubscribedOptionsByType(\n      serviceName,\n      this.LogsConstants.ALIAS_OPTION_REFERENCE,\n    );\n  }\n\n  getElasticSearchUrl(alias) {\n    const url = this.UrlHelper.constructor.findUrl(alias, this.LogsConstants.ELASTICSEARCH_API_URL);\n    if (!url) {\n      this.CloudMessage.error(this.$translate.instant('logs_aliases_get_elasticsearch_url_error', { alias: alias.info.name }));\n    }\n    return url;\n  }\n\n  resetAllCache() {\n    this.AccountingAapiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsAliasesService', LogsAliasesService);\n"]}