{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/addtool/logs-add-tool.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/options/addtool/logs-add-tool.controller.js","mtime":1539717142134},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class logsAddToolCtrl {\n  constructor($state, $stateParams, $translate, ControllerHelper, ControllerModalHelper,\n    LogsConstants, LogsOfferService) {\n    this.$state = $state;\n    this.$translate = $translate;\n    this.serviceName = $stateParams.serviceName;\n    this.ControllerHelper = ControllerHelper;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.LogsConstants = LogsConstants;\n    this.LogsOfferService = LogsOfferService;\n    this.initLoaders();\n  }\n\n  $onInit() {\n    this.text = this.text || `Add ${this.toolType}`;\n    this.selectedOffer.load();\n  }\n\n  /**\n   * loads the current offer information\n   *\n   * @memberof logsAddToolCtrl\n   */\n  initLoaders() {\n    this.selectedOffer = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsOfferService.getOffer(this.serviceName),\n    });\n  }\n\n  /**\n   * Checks if the user has a basic offer\n   *\n   * @returns true if the user is subscribed to a basic offer\n   * @memberof logsAddToolCtrl\n   */\n  isBasicOffer(offerObj) {\n    return offerObj.reference === this.LogsConstants.basicOffer;\n  }\n\n  /**\n   * Checks if the quota has been reached. If no, it calls the callback.\n   * Else if the user has a basic offer, pops up a modal dialog asking\n   * him/her to upgrade. Else, pop-ups asking whether he/she wants to\n   * purchase more options\n   *\n   * @memberof logsAddToolCtrl\n   */\n  addTool() {\n    if (this.currentUsage < this.maxUsage) {\n      return this.callback();\n    } if (this.isBasicOffer(this.selectedOffer.data)) {\n      return this.ControllerModalHelper.showInfoModal({\n        titleText: this.$translate.instant('options_upgradequotalink_increase_quota_title'),\n        text: this.$translate.instant('options_upgradequotalink_increase_quota_message'),\n        okButtonText: this.$translate.instant('options_upgradequotalink_increase_quota_upgrade'),\n      })\n        .then(() => this.$state.go('dbaas.logs.detail.offer', { serviceName: this.serviceName }));\n    }\n    const quotaReached = this.$translate.instant('add_tool_quota_reached');\n    const purchaseMore = this.$translate.instant('add_tool_purchase_more_options');\n    return this.ControllerModalHelper.showInfoModal({\n      titleText: this.$translate.instant('add_tool_title'),\n      text: `${quotaReached} ${this.toolType}. ${purchaseMore}`,\n      okButtonText: this.$translate.instant('add_tool_options_purchase'),\n    })\n      .then(() => this.$state.go('dbaas.logs.detail.options', { serviceName: this.serviceName }));\n  }\n}\n\nangular.module('managerApp').controller('logsAddToolCtrl', logsAddToolCtrl);\n"]}