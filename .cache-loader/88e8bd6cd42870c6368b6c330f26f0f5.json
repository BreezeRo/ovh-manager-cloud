{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/iplb-cipher.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/iplb-cipher.service.js","mtime":1539717142204},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerCipherService {\n  constructor($translate, OvhApiIpLoadBalancing, ServiceHelper) {\n    this.$translate = $translate;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  getCipher(serviceName) {\n    return this.IpLoadBalancing.v6().get({ serviceName })\n      .$promise\n      .then(response => this.transformCipher(response.sslConfiguration))\n      .catch(this.ServiceHelper.errorHandler('iplb_modal_cipher_change_loading_error'));\n  }\n\n  getCipherTypes() {\n    return this.IpLoadBalancing.v6().schema()\n      .$promise\n      .then((response) => {\n        const types = response.models['ipLoadbalancing.SslConfigurationEnum'].enum;\n        const mappedTypes = _.map(types, type => this.transformCipher(type));\n\n        return mappedTypes;\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_modal_cipher_change_loading_error'));\n  }\n\n  transformCipher(cipher) {\n    return {\n      type: cipher,\n      displayName: cipher ? this.$translate.instant(`iplb_modal_cipher_change_cipher_${cipher}_title`) : '',\n      description: cipher ? this.$translate.instant(`iplb_modal_cipher_change_cipher_${cipher}_description`) : null,\n    };\n  }\n\n  updateCipher(serviceName, newCipher) {\n    return this.IpLoadBalancing.v6().put({ serviceName }, { sslConfiguration: newCipher })\n      .$promise\n      .then(response => response)\n      .catch(this.ServiceHelper.errorHandler('iplb_modal_cipher_change_updating_error'));\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerCipherService', IpLoadBalancerCipherService);\n"]}