{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/frontends/iplb-frontends.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/frontends/iplb-frontends.controller.js","mtime":1539717142197},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerFrontendsCtrl {\n  constructor($state, $stateParams, $translate, CloudMessage, ControllerHelper,\n    IpLoadBalancerActionService, IpLoadBalancerFrontendsService) {\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerActionService = IpLoadBalancerActionService;\n    this.IpLoadBalancerFrontendService = IpLoadBalancerFrontendsService;\n  }\n\n  $onInit() {\n    this.init();\n  }\n\n  init() {\n    this.loading = true;\n    this.IpLoadBalancerFrontendService.getFrontends(this.$stateParams.serviceName)\n      .then((results) => {\n        this.loading = false;\n        this.frontends = results;\n      });\n  }\n\n  loadFarm(frontend) {\n    if (!frontend.defaultFarmId) {\n      _.set(frontend, 'defaultFarm', null);\n    }\n    return this.IpLoadBalancerFrontendService\n      .getFarm(frontend.protocol, this.$stateParams.serviceName, frontend.defaultFarmId)\n      .then(farm => ({ defaultFarm: farm }));\n  }\n\n  update(frontend) {\n    this.$state.go('network.iplb.detail.frontends.update', {\n      serviceName: this.$stateParams.serviceName,\n      frontendId: frontend.frontendId,\n    });\n  }\n\n  delete(frontend) {\n    this.IpLoadBalancerActionService.deleteFrontend(\n      this.$stateParams.serviceName,\n      frontend,\n    ).then(() => this.init());\n  }\n\n  preview(frontend) {\n    this.ControllerHelper.modal.showModal({\n      modalConfig: {\n        templateUrl: 'app/iplb/frontends/preview/iplb-frontends-preview.html',\n        controller: 'IpLoadBalancerFrontendPreviewCtrl',\n        controllerAs: 'IpLoadBalancerFrontendPreviewCtrl',\n        resolve: {\n          frontend: () => frontend,\n        },\n      },\n    });\n  }\n\n  toggle(frontend) {\n    // frontend.disabled = !frontend.disabled;\n    this.IpLoadBalancerFrontendService.toggleFrontend(\n      frontend.protocol,\n      this.$stateParams.serviceName,\n      _.assign({}, frontend, {\n        disabled: !frontend.disabled,\n      }),\n    ).then(() => {\n      // Apply value on model\n      _.set(frontend, 'disabled', !frontend.disabled);\n    });\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerFrontendsCtrl', IpLoadBalancerFrontendsCtrl);\n"]}