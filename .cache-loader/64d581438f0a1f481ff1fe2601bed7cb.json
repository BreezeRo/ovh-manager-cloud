{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/veeam/dashboard/veeam-dashboard.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/veeam/dashboard/veeam-dashboard.controller.js","mtime":1539717142281},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var VeeamDashboardCtrl =\n  /*#__PURE__*/\n  function () {\n    VeeamDashboardCtrl.$inject = [\"$stateParams\", \"$translate\", \"ControllerHelper\", \"FeatureAvailabilityService\", \"RegionService\", \"VeeamService\"];\n\n    function VeeamDashboardCtrl($stateParams, $translate, ControllerHelper, FeatureAvailabilityService, RegionService, VeeamService) {\n      _classCallCheck(this, VeeamDashboardCtrl);\n\n      this.$stateParams = $stateParams;\n      this.$translate = $translate;\n      this.ControllerHelper = ControllerHelper;\n      this.FeatureAvailabilityService = FeatureAvailabilityService;\n      this.RegionService = RegionService;\n      this.VeeamService = VeeamService;\n      this.serviceName = this.$stateParams.serviceName;\n      this.initLoaders();\n      this.initActions();\n    }\n\n    _createClass(VeeamDashboardCtrl, [{\n      key: \"initLoaders\",\n      value: function initLoaders() {\n        var _this = this;\n\n        var errorHandler = function errorHandler(response) {\n          return _this.VeeamService.unitOfWork.messages.push({\n            text: response.message,\n            type: 'error'\n          });\n        };\n\n        this.configurationInfos = this.ControllerHelper.request.getHashLoader({\n          loaderFunction: function loaderFunction() {\n            return _this.VeeamService.getConfigurationInfos(_this.serviceName);\n          },\n          successHandler: function successHandler() {\n            return _this.getRegion(_this.configurationInfos.data.location.macroRegion.code);\n          },\n          errorHandler: errorHandler\n        });\n        this.subscriptionInfos = this.ControllerHelper.request.getHashLoader({\n          loaderFunction: function loaderFunction() {\n            return _this.VeeamService.getSubscriptionInfos(_this.serviceName);\n          },\n          successHandler: function successHandler() {\n            if (_this.subscriptionInfos.data.isOnTrial) {\n              var message = _this.$translate.instant('veeam_tiles_subscription_label_renewal_warning', {\n                remainingDays: _this.subscriptionInfos.data.subscriptionTimeRemaining\n              });\n\n              if (_this.subscriptionInfos.data.subscriptionTimeRemaining < 0) {\n                message = _this.$translate.instant('veeam_message_product_disabled');\n              }\n\n              _this.VeeamService.unitOfWork.messages.push({\n                text: message,\n                type: _this.subscriptionInfos.data.subscriptionTimeRemaining < 0 ? 'error' : 'warning',\n                link: {\n                  type: 'action',\n                  text: _this.$translate.instant('veeam_tiles_subscription_label_renewal_warning_link'),\n                  action: function action() {\n                    return _this.changeOffer();\n                  }\n                }\n              });\n            }\n          },\n          errorHandler: errorHandler\n        });\n        this.actions = this.ControllerHelper.request.getArrayLoader({\n          loaderFunction: function loaderFunction() {\n            return _this.VeeamService.getActions(_this.$stateParams.serviceName);\n          }\n        });\n        this.orderableOffers = this.ControllerHelper.request.getArrayLoader({\n          loaderFunction: function loaderFunction() {\n            return _this.VeeamService.getOrderableOffers(_this.serviceName);\n          },\n          errorHandler: errorHandler\n        });\n      }\n    }, {\n      key: \"initActions\",\n      value: function initActions() {\n        var _this2 = this;\n\n        this.uiActions = {\n          changeOffer: {\n            text: this.$translate.instant('common_edit'),\n            callback: function callback() {\n              return _this2.changeOffer();\n            },\n            isAvailable: function isAvailable() {\n              return !_this2.actions.loading && _this2.actions.data.upgradeOffer.available;\n            }\n          },\n          manageAutorenew: {\n            text: this.$translate.instant('common_manage'),\n            href: this.ControllerHelper.navigation.getUrl('renew', {\n              serviceName: this.serviceName,\n              serviceType: 'VEEAM_CLOUD_CONNECT'\n            }),\n            isAvailable: function isAvailable() {\n              return true;\n            }\n          },\n          manageContact: {\n            text: this.$translate.instant('common_manage'),\n            href: this.ControllerHelper.navigation.getUrl('contacts', {\n              serviceName: this.serviceName\n            }),\n            isAvailable: function isAvailable() {\n              return _this2.FeatureAvailabilityService.hasFeature('CONTACTS', 'manage');\n            }\n          }\n        };\n      }\n    }, {\n      key: \"$onInit\",\n      value: function $onInit() {\n        this.configurationInfos.load();\n        this.subscriptionInfos.load();\n        this.actions.load();\n        this.orderableOffers.load();\n      }\n    }, {\n      key: \"addStorage\",\n      value: function addStorage() {\n        var _this3 = this;\n\n        if (this.actions.data.addStorage.available) {\n          this.ControllerHelper.modal.showModal({\n            modalConfig: {\n              templateUrl: 'app/veeam/storage/add/veeam-storage-add.html',\n              controller: 'VeeamStorageAddCtrl',\n              controllerAs: 'VeeamStorageAddCtrl',\n              resolve: {\n                serviceName: function serviceName() {\n                  return _this3.serviceName;\n                }\n              }\n            }\n          }).then(function (result) {\n            return _this3.VeeamService.startPolling(_this3.$stateParams.serviceName, result.data);\n          }).catch(function (err) {\n            return _this3.VeeamService.unitOfWork.messages.push({\n              text: err.message,\n              type: 'error'\n            });\n          });\n        } else {\n          this.ControllerHelper.modal.showWarningModal({\n            title: this.$translate.instant('common_action_unavailable'),\n            message: this.actions.data.addStorage.reason\n          });\n        }\n      }\n    }, {\n      key: \"changeOffer\",\n      value: function changeOffer() {\n        var _this4 = this;\n\n        if (this.actions.data.upgradeOffer.available) {\n          this.ControllerHelper.modal.showModal({\n            modalConfig: {\n              templateUrl: 'app/veeam/dashboard/update-offer/veeam-update-offer.html',\n              controller: 'VeeamUpdateOfferCtrl',\n              controllerAs: 'VeeamUpdateOfferCtrl',\n              resolve: {\n                serviceName: function serviceName() {\n                  return _this4.serviceName;\n                }\n              }\n            }\n          }).then(function (result) {\n            return _this4.VeeamService.unitOfWork.messages.push({\n              textHtml: result.message,\n              type: 'success'\n            });\n          }).catch(function (err) {\n            return _this4.VeeamService.unitOfWork.messages.push({\n              text: err.message,\n              type: 'error'\n            });\n          });\n        } else {\n          this.ControllerHelper.modal.showWarningModal({\n            title: this.$translate.instant('common_action_unavailable'),\n            message: this.actions.data.upgradeOffer.reason\n          });\n        }\n      }\n    }, {\n      key: \"getRegion\",\n      value: function getRegion(region) {\n        this.region = this.RegionService.getRegion(region);\n      }\n    }]);\n\n    return VeeamDashboardCtrl;\n  }();\n\n  angular.module('managerApp').controller('VeeamDashboardCtrl', VeeamDashboardCtrl);\n})();",null]}