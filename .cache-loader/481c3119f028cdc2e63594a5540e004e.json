{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/order/iplb-ssl-certificate-order.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/order/iplb-ssl-certificate-order.controller.js","mtime":1539717142221},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerSslCertificateOrderCtrl {\n  constructor($q, $state, $stateParams, $location, CloudMessage, ControllerHelper,\n    IpLoadBalancerConstant, IpLoadBalancerSslCertificateService) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$location = $location;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerSslCertificateService = IpLoadBalancerSslCertificateService;\n  }\n\n  $onInit() {\n    this.paidOffers = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerSslCertificateService.getCertificateProducts(\n        this.$stateParams.serviceName,\n      )\n        .then((offers) => {\n          this.offers = offers;\n          this.sslTypes = _.map(offers, 'planCode').map(planCode => planCode.replace(/-/g, '_'));\n\n          // Add separate free certificate in first position.\n          this.sslTypes.unshift('free');\n\n          // Select first by default\n          this.newSsl.type = _.first(this.sslTypes);\n        }),\n    });\n\n    this.organizationTypes = this.IpLoadBalancerConstant.organisationTypes;\n    this.newSsl = {};\n    this.saving = false;\n\n    this.init();\n  }\n\n  init() {\n    this.paidOffers.load();\n  }\n\n  order() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n\n    this.planCode = this.newSsl.type.replace(/_/g, '-');\n\n    if (this.planCode === 'free') {\n      return this.orderFreeCertificate();\n    }\n\n    const sslOffer = this.offers.find(offer => offer.planCode === this.planCode);\n\n    if (!sslOffer) {\n      return null;\n    }\n\n    const options = Object.assign(_.pick(sslOffer.prices[0], [\n      'duration',\n      'pricingMode',\n    ]), {\n      planCode: this.planCode,\n      quantity: 1,\n    });\n\n    return this.orderPaidCertificate(options);\n  }\n\n  orderFreeCertificate() {\n    const fqdn = this.newSsl.fqdn.split(',').map(item => item.trim());\n    this.saving = true;\n    this.IpLoadBalancerSslCertificateService\n      .orderFreeCertificate(this.$stateParams.serviceName, fqdn)\n      .then(() => this.$state.go('network.iplb.detail.ssl-certificate.home'))\n      .finally(() => {\n        this.saving = false;\n      });\n  }\n\n  orderPaidCertificate(options) {\n    const configuration = Object.assign({}, this.newSsl);\n\n    if (this.planCode === 'iplb-ssl-ev-single') {\n      configuration.commonName = configuration.fqdn;\n      configuration.dcv_email = configuration.email;\n      configuration.country = configuration.countryName;\n      delete configuration.fqdn;\n    }\n\n    delete configuration.type;\n\n    this.saving = true;\n    this.IpLoadBalancerSslCertificateService\n      .orderPaidCertificate(this.$stateParams.serviceName, options, configuration)\n      .then((result) => {\n        this.$location.href = result.url;\n      })\n      .catch(() => {\n        this.saving = false;\n      });\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerSslCertificateOrderCtrl', IpLoadBalancerSslCertificateOrderCtrl);\n"]}