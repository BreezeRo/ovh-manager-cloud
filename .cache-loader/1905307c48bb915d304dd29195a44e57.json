{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/follow/streams-follow.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/follow/streams-follow.service.js","mtime":1539717142151},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsStreamsFollowService {\n  constructor($websocket, $translate, OvhApiDbaas, LogsStreamsService,\n    ControllerHelper, CloudMessage, ServiceHelper, UrlHelper, LogsConstants) {\n    this.$websocket = $websocket;\n    this.$translate = $translate;\n    this.LogsStreamsService = LogsStreamsService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.ServiceHelper = ServiceHelper;\n    this.UrlHelper = UrlHelper;\n    this.LogsAapiService = OvhApiDbaas.Logs().Aapi();\n    this.LogsConstants = LogsConstants;\n\n    this.testTypeEnum = _.indexBy([\n      this.LogsConstants.GELF,\n      this.LogsConstants.LTSV,\n      this.LogsConstants.RFC5424,\n    ]);\n    this.webSocket = null;\n    this.messages = [];\n    this.totalMessages = 0;\n    this.connectionClosed = false;\n    this.waitingForMessages = true;\n    this.lastEvent = 0;\n\n    this.initializeData();\n  }\n\n  initializeData() {\n    this.alertTypeLabelMap = {\n      0: {\n        label: 'logs_streams_follow_emergency',\n        type: 'error',\n\n      },\n      1: {\n        label: 'logs_streams_follow_alert',\n        type: 'error',\n\n      },\n      2: {\n        label: 'logs_streams_follow_critical',\n        type: 'error',\n\n      },\n      3: {\n        label: 'logs_streams_follow_error',\n        type: 'warning',\n\n      },\n      4: {\n        label: 'logs_streams_follow_warning',\n        type: 'warning',\n\n      },\n      5: {\n        label: 'logs_streams_follow_notice',\n        type: 'primary',\n\n      },\n      6: {\n        label: 'logs_streams_follow_info',\n        type: 'info',\n\n      },\n      7: {\n        label: 'logs_streams_follow_debug',\n        type: 'default',\n\n      },\n    };\n  }\n\n  /**\n   * Makes API call to get LTSV, GELF and RFC client configures URL's\n   * Show error on UI if failed to get data from API\n   * @param {string} serviceName\n   */\n  getTestClientUrls(serviceName) {\n    return this.LogsAapiService.home({ serviceName })\n      .$promise.catch(this.ServiceHelper.errorHandler('logs_streams_get_command_urls_error'));\n  }\n\n  /**\n   * Copies websocket URL for a given stream into clipboard.\n   * Shows exception message on UI if failed to copy to clipboard.\n   * @param {object} stream\n   */\n  copyWebSocketAddress(stream) {\n    const url = this.UrlHelper.constructor.findUrl(stream, this.LogsConstants.WEB_SOCKET_URL);\n    if (!url) {\n      this.CloudMessage.error(this.$translate.instant('logs_streams_follow_get_websocket_error', { stream: stream.info.title }));\n    } else {\n      const error = this.ControllerHelper.constructor.copyToClipboard(url);\n      if (error) {\n        this.CloudMessage.error(this.$translate.instant('logs_streams_follow_copy_websocket_error', {\n          stream: stream.info.title,\n          url,\n        }));\n      } else {\n        this.CloudMessage.info(this.$translate.instant('logs_streams_follow_copy_websocket_success'));\n      }\n    }\n  }\n\n  getTotalMessages() {\n    return this.totalMessages;\n  }\n\n  getLastEvent() {\n    return this.lastEvent;\n  }\n\n  getMessages() {\n    return this.messages;\n  }\n\n  getAlertType(level) {\n    return this.alertTypeLabelMap[level] ? this.alertTypeLabelMap[level].type : '';\n  }\n\n  getAlertLabel(level) {\n    return this.alertTypeLabelMap[level] ? this.alertTypeLabelMap[level].label : '';\n  }\n\n  isConnectionClosed() {\n    return this.connectionClosed;\n  }\n\n  isWaitingForMessages() {\n    return this.waitingForMessages;\n  }\n\n  /**\n   * Close websocket connection\n   */\n  closeConnection() {\n    this.webSocket.close();\n  }\n\n  /**\n   * Open websocket connection to given stream\n   * @param {object} stream\n   */\n  openConnection(stream) {\n    this.waitingForMessages = true;\n    this.connectionClosed = false;\n    this.messages = [];\n    this.totalMessages = 0;\n    this.connectToWebSocket(stream);\n  }\n\n  /**\n   * Copies GELF client command line to clipboard. Shows status message on UI.\n   * Shows error if copy failed, success otherwise.\n   * @param {Object} stream\n   * @param {string} gelfUrl\n   */\n  copyRFCCommandLine(stream, rfc5424Url) {\n    const token = this.LogsStreamsService.getStreamToken(stream);\n    if (token) {\n      const now = new Date();\n      const dateFormatted = now.toISOString();\n      const command = `echo -e '<6>1 ${dateFormatted} 149.202.165.20 example.org - - [exampleSDID@8485 user_id=\"9001\"  some_info=\"foo\" some_metric_num=\"42.0\" X-OVH-TOKEN=\"${token}\"] A short RFC 5424 message that helps you identify what is going on'\\\\n | openssl s_client -quiet -no_ign_eof  -connect ${rfc5424Url}`;\n      const error = this.ControllerHelper.constructor.copyToClipboard(command);\n      this.handleCommandCopyStatus(error, stream, command, this.testTypeEnum.RFC5424);\n    }\n  }\n\n  /**\n     * Copies GELF client command line to clipboard. Shows status message on UI.\n     * Shows error if copy failed, success otherwise.\n     * @param {Object} stream\n     * @param {string} gelfUrl\n     */\n  copyLTSVCommandLine(stream, ltsvUrl) {\n    const token = this.LogsStreamsService.getStreamToken(stream);\n    if (token) {\n      const now = new Date();\n      const dateFormatted = now.toISOString();\n      const command = `echo -e 'X-OVH-TOKEN:${token}\\\\thost:example.org\\\\ttime:${dateFormatted}\\\\tmessage:A short LTSV message that helps you identify what is going on\\\\tfull_message:Backtrace here more stuff\\\\tlevel:1\\\\tuser_id:9001\\\\tsome_info:foo\\\\tsome_metric_num:42.0\\\\0' | openssl s_client -quiet -no_ign_eof  -connect ${ltsvUrl}`;\n      const error = this.ControllerHelper.constructor.copyToClipboard(command);\n      this.handleCommandCopyStatus(error, stream, command, this.testTypeEnum.LTSV);\n    }\n  }\n\n  /**\n     * Copies GELF client command line to clipboard. Shows status message on UI.\n     * Shows error if copy failed, success otherwise.\n     * @param {Object} stream\n     * @param {string} gelfUrl\n     */\n  copyGELCommandLine(stream, gelfUrl) {\n    const token = this.LogsStreamsService.getStreamToken(stream);\n    if (token) {\n      const now = new Date();\n      const timestamp = Math.round(now.getTime() / 1000);\n      const command = `echo -e '{\"version\":\"1.1\", \"host\": \"example.org\", \"short_message\": \"A short GELF message that helps you identify what is going on\", \"full_message\": \"Backtrace here more stuff\", \"timestamp\": ${timestamp}, \"level\": 1, \"_user_id\": 9001, \"_some_info\": \"foo\", \"some_metric_num\": 42.0, \"_X-OVH-TOKEN\":\"${token}\"}\\\\0' | openssl s_client -quiet -no_ign_eof  -connect ${gelfUrl}`;\n      const error = this.ControllerHelper.constructor.copyToClipboard(command);\n      this.handleCommandCopyStatus(error, stream, command, this.testTypeEnum.GELF);\n    }\n  }\n\n  handleCommandCopyStatus(error, stream, command, type) {\n    if (error) {\n      this.CloudMessage.error(this.$translate.instant('logs_streams_follow_copy_command_error', {\n        stream: stream.info.title,\n        command,\n        type,\n      }));\n    } else {\n      this.CloudMessage.info(this.$translate.instant('logs_streams_follow_copy_command_success', { type }));\n    }\n  }\n\n  /**\n     * opens websocket connection and connects to given stream URL\n     * @param {object} stream\n     */\n  connectToWebSocket(stream) {\n    const url = this.UrlHelper.constructor.findUrl(stream, this.LogsConstants.WEB_SOCKET_URL);\n    if (url) {\n      this.webSocket = this.$websocket(url);\n      let response;\n      let message;\n      const date = new Date();\n      this.lastEvent = date.getTime();\n      this.webSocket.onMessage((event) => {\n        this.waitingForMessages = false;\n        this.totalMessages += 1;\n        try {\n          response = JSON.parse(event.data);\n          message = JSON.parse(response.message);\n        } catch (err) {\n          response = { username: 'anonymous', message: event.data };\n          message = {};\n          this.ServiceHelper.errorHandler(err);\n        }\n        this.messages.unshift({\n          type: this.getAlertType(message.level),\n          label: this.getAlertLabel(message.level),\n          code: message.level,\n          timestamp: message.timestamp * 1000,\n          content: response.message,\n        });\n        this.lastEvent = message.timestamp * 1000;\n        if (this.messages.length > 20) {\n          this.messages.pop();\n        }\n        if (this.totalMessages === this.LogsConstants.MESSAGE_THRESHOLD) {\n          this.closeConnection();\n        }\n      });\n\n      this.webSocket.onError((err) => {\n        this.CloudMessage.error(this.$translate.instant('logs_streams_follow_connection_error', { message: err }));\n      });\n\n      this.webSocket.onClose(() => {\n        this.connectionClosed = true;\n        this.waitingForMessages = false;\n      });\n\n      this.webSocket.onOpen(() => {\n        this.connectionClosed = false;\n        this.waitingForMessages = true;\n        this.messages = [];\n        this.totalMessages = 0;\n      });\n    } else {\n      this.CloudMessage.error(this.$translate.instant('logs_streams_follow_get_websocket_error', { stream: stream.info.title }));\n    }\n  }\n}\nangular.module('managerApp').service('LogsStreamsFollowService', LogsStreamsFollowService);\n"]}