{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/service/kubernetes-service.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/service/kubernetes-service.controller.js","mtime":1539717374578},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('KubernetesServiceCtrl', class KubernetesServiceCtrl {\n  constructor($stateParams, $translate, CloudMessage, ControllerHelper, Kubernetes, KUBERNETES) {\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.Kubernetes = Kubernetes;\n    this.KUBERNETES = KUBERNETES;\n  }\n\n  $onInit() {\n    this.loaders = {\n      cluster: true,\n      billing: true,\n      config: true,\n    };\n\n    this.getClusterInfos()\n      .then(() => this.getConfigFile())\n      .then(() => this.getBillingInfos())\n      .then(() => this.loadMessages());\n  }\n\n\n  loadMessages() {\n    this.CloudMessage.unSubscribe('paas.kube.service');\n    this.messageHandler = this.CloudMessage.subscribe('paas.kube.service', { onMessage: () => this.refreshMessages() });\n  }\n\n  refreshMessages() {\n    this.messages = this.messageHandler.getMessages();\n  }\n\n  getClusterInfos() {\n    return this.Kubernetes.getKubernetesCluster(this.serviceName)\n      .then((cluster) => {\n        this.cluster = cluster;\n        _.set(this.cluster, 'region', this.KUBERNETES.region);\n      })\n      .catch(() => { this.displayError = true; })\n      .finally(() => { this.loaders.cluster = false; });\n  }\n\n  getBillingInfos() {\n    return this.Kubernetes.getKubernetesServiceInfos(this.serviceName)\n      .then((serviceInfos) => {\n        this.serviceInfos = serviceInfos;\n        // Static for now\n        _.set(this.serviceInfos, 'offer', this.$translate.instant('kube_service_offer_beta'));\n      })\n      .catch(() => { this.displayError = true; })\n      .finally(() => { this.loaders.billing = false; });\n  }\n\n  getConfigFile() {\n    return this.Kubernetes.getKubernetesConfig(this.serviceName)\n      .then((fileConfig) => {\n        this.kubernetesConfig = {\n          content: fileConfig.content,\n          fileName: this.KUBERNETES.kubeconfigFileName,\n        };\n      })\n      .catch(() => {\n        this.CloudMessage.error(this.$translate.instant('kube_service_file_error'));\n      })\n      .finally(() => {\n        this.loaders.config = false;\n      });\n  }\n\n  downloadConfigFile() {\n    // Set yml extension manually as there is no MIME type yet\n    this.ControllerHelper.constructor.downloadContent({ fileContent: this.kubernetesConfig.content, fileName: `${this.kubernetesConfig.fileName}.yml` });\n  }\n});\n"]}