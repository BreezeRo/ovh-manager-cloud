{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/list/logs-list.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/list/logs-list.service.js","mtime":1539717142157},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsListService =\n/*#__PURE__*/\nfunction () {\n  LogsListService.$inject = [\"$q\", \"OvhApiDbaas\", \"LogsHelperService\", \"LogsTokensService\"];\n\n  function LogsListService($q, OvhApiDbaas, LogsHelperService, LogsTokensService) {\n    _classCallCheck(this, LogsListService);\n\n    this.$q = $q;\n    this.LogsListApiService = OvhApiDbaas.Logs().v6();\n    this.LogsHelperService = LogsHelperService;\n    this.LogsTokensService = LogsTokensService;\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n  }\n  /**\n   * returns array of accounts with details\n   *\n   * @returns promise which will be resolve to array of accounts.\n   *          Each account will have all details populated.\n   * @memberof LogsListService\n   */\n\n\n  _createClass(LogsListService, [{\n    key: \"getServices\",\n    value: function getServices() {\n      var _this = this;\n\n      return this.getServicesDetails().catch(function (err) {\n        return _this.LogsHelperService.handleError('logs_accounts_get_accounts_error', err, {});\n      });\n    }\n    /**\n     * gets details for each account in array\n     *\n     * @returns promise which will be resolve to an array of account objects\n     * @memberof LogsListService\n     */\n\n  }, {\n    key: \"getServicesDetails\",\n    value: function getServicesDetails() {\n      var _this2 = this;\n\n      return this.getServicesIds().then(function (accounts) {\n        var promises = accounts.map(function (serviceName) {\n          return _this2.getService(serviceName);\n        });\n        return _this2.$q.all(promises);\n      });\n    }\n    /**\n     * returns array of id's of all accounts\n     *\n     * @returns promise which will be resolve to array of accounts id's\n     * @memberof LogsListService\n     */\n\n  }, {\n    key: \"getServicesIds\",\n    value: function getServicesIds() {\n      return this.LogsListApiService.query().$promise;\n    }\n    /**\n     * returns details of an account\n     *\n     * @param {any} accountId\n     * @returns promise which will be resolve to account object\n     * @memberof LogsListService\n     */\n\n  }, {\n    key: \"getService\",\n    value: function getService(serviceName) {\n      var _this3 = this;\n\n      return this.LogsListApiService.logDetail({\n        serviceName: serviceName\n      }).$promise.then(function (service) {\n        return _this3.transformService(service);\n      }).catch(function (err) {\n        return _this3.LogsHelperService.handleError('logs_accounts_get_detail_error', err, {\n          accountName: serviceName\n        });\n      });\n    }\n  }, {\n    key: \"getQuota\",\n    value: function getQuota(service) {\n      var _this4 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: service.serviceName\n      }).$promise.catch(function (err) {\n        return _this4.LogsHelperService.handleError('logs_accounts_get_quota_error', err, {\n          accountName: service.displayName || service.serviceName\n        });\n      });\n    }\n    /**\n     * returns default cluster associated with user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to default cluster\n     * @memberof LogsInputsService\n     */\n\n  }, {\n    key: \"getDefaultCluster\",\n    value: function getDefaultCluster(serviceName) {\n      return this.LogsTokensService.getDefaultCluster(serviceName, 'logs_accounts_get_entry_point_error');\n    }\n  }, {\n    key: \"transformService\",\n    value: function transformService(service) {\n      var _this5 = this;\n\n      _.set(service, 'name', service.displayName || service.serviceName);\n\n      if (this.LogsHelperService.isAccountDisabled(service)) {\n        _.set(service, 'isDisabled', true);\n      } else {\n        _.set(service, 'isDisabled', false);\n      }\n\n      _.set(service, 'quota', {\n        isLoadingQuota: true,\n        offerType: '-'\n      });\n\n      _.set(service, 'cluster', {\n        isLoadingCluster: true,\n        hostname: '-'\n      });\n\n      this.getQuota(service).then(function (me) {\n        if (!_.isEmpty(me.total)) {\n          _.set(service, 'quota.streams', {\n            current: me.total.curNbStream,\n            max: me.total.maxNbStream\n          });\n\n          _.set(service, 'quota.indices', {\n            current: me.total.curNbIndex,\n            max: me.total.maxNbIndex\n          });\n\n          _.set(service, 'quota.dashboards', {\n            current: me.total.curNbDashboard,\n            max: me.total.maxNbDashboard\n          });\n\n          _.set(service, 'isBasicOffer', _this5.LogsHelperService.isBasicOffer(me));\n\n          _.set(service, 'quota.offerType', service.isBasicOffer ? 'Basic' : 'Pro');\n        }\n      }).finally(function () {\n        _.set(service, 'quota.isLoadingQuota', false);\n      });\n      this.getDefaultCluster(service.serviceName).then(function (cluster) {\n        _.set(service, 'cluster.hostname', cluster.hostname);\n      }).finally(function () {\n        _.set(service, 'cluster.isLoadingCluster', false);\n      });\n      return service;\n    }\n  }, {\n    key: \"_resetAllCache\",\n    value: function _resetAllCache() {\n      this.TokenApiService.resetAllCache();\n    }\n  }]);\n\n  return LogsListService;\n}();\n\nangular.module('managerApp').service('LogsListService', LogsListService);",null]}