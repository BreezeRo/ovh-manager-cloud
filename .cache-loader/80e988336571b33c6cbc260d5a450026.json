{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/vps-task.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/vps-task.service.js","mtime":1539717142308},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsTaskService =\n/*#__PURE__*/\nfunction () {\n  VpsTaskService.$inject = [\"$http\", \"$q\", \"$rootScope\", \"$translate\", \"CloudMessage\", \"OvhPoll\"];\n\n  function VpsTaskService($http, $q, $rootScope, $translate, CloudMessage, OvhPoll) {\n    _classCallCheck(this, VpsTaskService);\n\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.OvhPoll = OvhPoll;\n    this.COMPLETED_TASK_PROGRESS = 100;\n  }\n\n  _createClass(VpsTaskService, [{\n    key: \"initPoller\",\n    value: function initPoller(serviceName, containerName) {\n      var _this = this;\n\n      this.getPendingTasks(serviceName).then(function (tasks) {\n        return _this.startTaskPolling(serviceName, containerName, tasks);\n      });\n    }\n  }, {\n    key: \"getPendingTasks\",\n    value: function getPendingTasks(serviceName, type) {\n      var _this2 = this;\n\n      return this.$http.get(['/sws/vps', serviceName, 'tasks/uncompleted'].join('/'), {\n        serviceType: 'aapi',\n        params: {\n          type: type\n        }\n      }).then(function (data) {\n        return data.data;\n      }).catch(function (error) {\n        return _this2.$q.reject(error.data);\n      });\n    }\n  }, {\n    key: \"getTask\",\n    value: function getTask(serviceName, taskId) {\n      var _this3 = this;\n\n      return this.$http.get(['/vps', serviceName, 'tasks', taskId].join('/')).then(function (data) {\n        return data.data;\n      }).catch(function (error) {\n        return _this3.$q.reject(error.data);\n      }).finally(function () {\n        return _this3.$rootScope.$broadcast('tasks.pending', serviceName);\n      });\n    }\n  }, {\n    key: \"startTaskPolling\",\n    value: function startTaskPolling(serviceName, containerName, tasks) {\n      var _this4 = this;\n\n      this.stopTaskPolling();\n      this.poller = this.OvhPoll.pollArray({\n        items: tasks,\n        pollFunction: function pollFunction(task) {\n          return _this4.getTask(serviceName, task.id);\n        },\n        stopCondition: function stopCondition(task) {\n          return _.includes(['done', 'error'], task.state);\n        },\n        onItemUpdated: function onItemUpdated(task) {\n          return _this4.manageMessage(containerName, task);\n        },\n        onItemDone: function onItemDone() {\n          return _this4.manageSuccess(serviceName, containerName);\n        }\n      });\n    }\n  }, {\n    key: \"stopTaskPolling\",\n    value: function stopTaskPolling() {\n      if (this.poller) {\n        this.poller.kill();\n      }\n    }\n  }, {\n    key: \"manageSuccess\",\n    value: function manageSuccess(serviceName, containerName) {\n      this.flushMessages(containerName);\n      this.$rootScope.$broadcast('tasks.success', serviceName);\n      this.CloudMessage.success(this.$translate.instant('vps_dashboard_task_finish'));\n    }\n  }, {\n    key: \"manageMessage\",\n    value: function manageMessage(containerName, task) {\n      this.flushMessages(containerName, task);\n\n      if (task.progress !== this.COMPLETED_TASK_PROGRESS) {\n        this.createMessage(containerName, task);\n      }\n    }\n  }, {\n    key: \"createMessage\",\n    value: function createMessage(containerName, task) {\n      this.CloudMessage.warning({\n        id: task.id,\n        class: 'task',\n        title: this.messageType(task.type),\n        textHtml: this.template(task.type, task.progress),\n        progress: task.progress\n      }, containerName);\n    }\n  }, {\n    key: \"flushMessages\",\n    value: function flushMessages(containerName, task) {\n      _.forEach(this.CloudMessage.getMessages(containerName), function (message) {\n        if (message.class === 'task') {\n          _.set(message, 'dismissed', true);\n        }\n\n        if (task && task.id === message.id) {\n          _.set(message, 'dismissed', true);\n        }\n      });\n    }\n  }, {\n    key: \"template\",\n    value: function template(type, progress) {\n      return \"\".concat(this.messageType(type), \" (\").concat(progress, \"%)\");\n    }\n  }, {\n    key: \"messageType\",\n    value: function messageType(type) {\n      return this.$translate.instant(\"vps_dashboard_task_\".concat(type));\n    }\n  }]);\n\n  return VpsTaskService;\n}();\n\nangular.module('managerApp').service('VpsTaskService', VpsTaskService);",null]}