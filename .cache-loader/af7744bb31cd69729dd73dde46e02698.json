{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/service-helper.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/service-helper.service.js","mtime":1539717142187},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var defaultSuccessMessage = 'common_global_success';\n  var defaultErrorMessage = 'common_global_error';\n  var defaultOrderSuccessMessage = 'common_order_success';\n  var defaultOrderErrorMessage = 'common_order_error';\n\n  var ServiceHelper =\n  /*#__PURE__*/\n  function () {\n    ServiceHelper.$inject = [\"$q\", \"$translate\", \"$window\", \"CloudMessage\"];\n\n    function ServiceHelper($q, $translate, $window, CloudMessage) {\n      _classCallCheck(this, ServiceHelper);\n\n      this.$q = $q;\n      this.$translate = $translate;\n      this.CloudMessage = CloudMessage;\n      this.$window = $window;\n    }\n\n    _createClass(ServiceHelper, [{\n      key: \"errorHandler\",\n      value: function errorHandler(messageInput, containerName) {\n        var _this = this;\n\n        var messageDetailsPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'data.message';\n        return function (err) {\n          var errorMessageConfig = {};\n\n          var apiMessage = _.get(err, messageDetailsPath, err.message);\n\n          if (apiMessage) {\n            errorMessageConfig.apiMessage = apiMessage;\n          }\n\n          if (_.isString(messageInput)) {\n            errorMessageConfig.textToTranslate = messageInput;\n          } else if (_.has(messageInput, 'text')) {\n            errorMessageConfig.text = messageInput.text;\n          } else if (_.has(messageInput, 'textHtml')) {\n            errorMessageConfig.textHtml = messageInput.textHtml;\n          } else if (_.has(messageInput, 'translateParams')) {\n            errorMessageConfig.textToTranslate = messageInput.textToTranslate;\n            errorMessageConfig.translateParams = messageInput.translateParams;\n          } else {\n            errorMessageConfig.textToTranslate = defaultErrorMessage;\n          }\n\n          var message = _this.buildErrorMessage(errorMessageConfig);\n\n          _this.CloudMessage.error(message, containerName);\n\n          return _this.$q.reject(err);\n        };\n      }\n    }, {\n      key: \"buildErrorMessage\",\n      value: function buildErrorMessage(config) {\n        var message = {\n          text: null,\n          textHtml: null\n        };\n\n        if (config.text) {\n          message.text = config.text;\n        }\n\n        if (config.textHtml) {\n          message.textHtml = config.textHtml;\n        }\n\n        if (config.translateParams) {\n          message.text = this.$translate.instant(config.textToTranslate, config.translateParams);\n        } else if (config.textToTranslate) {\n          message.text = this.$translate.instant(config.textToTranslate);\n        }\n\n        if (config.apiMessage) {\n          message.text = \"\".concat(message.text, \" \").concat(config.apiMessage);\n        }\n\n        return message;\n      }\n    }, {\n      key: \"successHandler\",\n      value: function successHandler(message, containerName) {\n        var _this2 = this;\n\n        return function (data) {\n          if (message) {\n            var jsonData = data ? data.toJSON ? data.toJSON() : data : {}; // eslint-disable-line\n\n            _this2.CloudMessage.success(_.isString(message) ? _this2.$translate.instant(message, jsonData) : message, containerName);\n          } else {\n            // Default success message\n            _this2.CloudMessage.success(_this2.$translate.instant(defaultSuccessMessage), containerName);\n          }\n\n          return data;\n        };\n      }\n    }, {\n      key: \"orderSuccessHandler\",\n      value: function orderSuccessHandler(newWindow) {\n        var _this3 = this;\n\n        return function (data) {\n          var orderUrl = _this3.constructor.findOrderUrl(data);\n\n          var orderId = _this3.constructor.findOrderId(data);\n\n          if (!orderUrl) {\n            return _this3.$q.reject({\n              data: {\n                message: 'URL not found'\n              }\n            });\n          }\n\n          if (!orderId) {\n            orderId = orderUrl;\n          }\n\n          _.set(newWindow, 'location', orderUrl);\n\n          return _this3.$q.resolve({\n            orderUrl: orderUrl,\n            orderId: orderId\n          });\n        };\n      }\n    }, {\n      key: \"orderSuccessMessage\",\n      value: function orderSuccessMessage(_ref) {\n        var orderUrl = _ref.orderUrl,\n            orderId = _ref.orderId;\n        var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOrderSuccessMessage;\n        this.CloudMessage.success({\n          textHtml: this.$translate.instant(message, {\n            orderUrl: orderUrl,\n            orderId: orderId\n          })\n        });\n      }\n    }, {\n      key: \"orderErrorHandler\",\n      value: function orderErrorHandler(newWindow) {\n        var _this4 = this;\n\n        return function (err) {\n          newWindow.close();\n\n          _this4.errorHandler(defaultOrderErrorMessage)(err);\n        };\n      }\n    }, {\n      key: \"loadOnNewPage\",\n      value: function loadOnNewPage(orderPromise) {\n        var _this5 = this;\n\n        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var newWindow = this.$window.open('', '_blank');\n        newWindow.document.write(this.$translate.instant('common_order_doing'));\n        return orderPromise.then(this.orderSuccessHandler(newWindow)).then(function (data) {\n          if (_.isFunction(config.successMessage)) {\n            return config.successMessage(data);\n          }\n\n          if (_.isString(config.successMessage)) {\n            return _this5.orderSuccessMessage(data, config.successMessage);\n          }\n\n          return _this5.orderSuccessMessage(data);\n        }).catch(this.orderErrorHandler(newWindow));\n      }\n    }], [{\n      key: \"findOrderId\",\n      value: function findOrderId(data) {\n        var orderId = _.get(data, 'order.orderId');\n\n        if (!orderId) {\n          var matches = data.url.match(/orderId=(\\d+)/);\n\n          if (matches.length > 0) {\n            orderId = matches[1]; // eslint-disable-line\n          }\n        }\n\n        return orderId;\n      }\n    }, {\n      key: \"findOrderUrl\",\n      value: function findOrderUrl(data) {\n        var url = _.get(data, 'order.url');\n\n        if (!url) {\n          url = _.get(data, 'url');\n        }\n\n        return url;\n      }\n    }, {\n      key: \"getTaskProgressType\",\n      value: function getTaskProgressType(taskType) {\n        switch (taskType) {\n          case 'done':\n            return 'success';\n\n          case 'error':\n            return 'error';\n\n          case 'doing':\n          case 'todo':\n          case 'paused':\n            return 'info';\n\n          default:\n            return 'warning';\n        }\n      }\n    }]);\n\n    return ServiceHelper;\n  }();\n\n  angular.module('managerApp').service('ServiceHelper', ServiceHelper);\n})();",null]}