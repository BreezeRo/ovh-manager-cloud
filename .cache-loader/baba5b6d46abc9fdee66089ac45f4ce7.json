{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/cloud-project-compute-loadbalancer.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/cloud-project-compute-loadbalancer.controller.js","mtime":1539717142025},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeLoadbalancerCtrl {\n  constructor(\n    $q, $translate, $state, $stateParams, CloudProjectComputeLoadbalancerService,\n    OvhApiCloudProjectIplb, OvhApiIpLoadBalancing, CloudMessage, OvhApiMe, URLS,\n  ) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.$state = $state;\n    this.CloudProjectComputeLoadbalancerService = CloudProjectComputeLoadbalancerService;\n    this.OvhApiCloudProjectIplb = OvhApiCloudProjectIplb;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.CloudMessage = CloudMessage;\n    this.OvhApiMe = OvhApiMe;\n\n    this.serviceName = $stateParams.projectId;\n\n    // Datas\n    this.table = {\n      loadbalancer: [],\n    };\n\n    // Order link\n    this.urls = URLS;\n    this.locale = '';\n    // Init locale for order link\n    OvhApiMe.v6().get().$promise.then((user) => {\n      this.locale = user.ovhSubsidiary.toUpperCase();\n    });\n\n    // Loader during Datas requests\n    this.loaders = {\n      table: {\n        loadbalancer: false,\n      },\n    };\n  }\n\n  $onInit() {\n    this.getLoadbalancers(true);\n  }\n\n  goToLoadbalancerConfigure(serviceName) {\n    this.$state.go('iaas.pci-project.compute.loadbalancerConfigure', {\n      loadbalancerId: serviceName,\n    });\n  }\n\n  goToIPLB(serviceName) {\n    this.$state.go('network.iplb.detail.home', {\n      serviceName,\n    });\n  }\n\n  getLoadbalancers(clearCache) {\n    if (!this.loaders.table.loadbalancer) {\n      this.loaders.table.loadbalancer = true;\n      if (clearCache) {\n        this.OvhApiCloudProjectIplb.v6().resetQueryCache();\n        this.OvhApiIpLoadBalancing.v6().resetQueryCache();\n      }\n      this.$q.all({\n        loadbalancers: this\n          .OvhApiIpLoadBalancing\n          .v6()\n          .query()\n          .$promise\n          .then(response => this.$q.all(\n            _.map(response, id => this.CloudProjectComputeLoadbalancerService.getLoadbalancer(id)),\n          )),\n        loadbalancersImportedArray:\n                    this.OvhApiCloudProjectIplb.v6().query({\n                      serviceName: this.serviceName,\n                    }).$promise.then(ids => this.$q.all(\n                      _.map(ids, id => this.OvhApiCloudProjectIplb.v6().get({\n                        serviceName: this.serviceName,\n                        id,\n                      }).$promise),\n                    )),\n      }).then(({ loadbalancers, loadbalancersImportedArray }) => {\n        // Create a map of imported loadbalancers\n        const loadBalancerImported = {};\n        _.forEach(loadbalancersImportedArray, (lb) => { loadBalancerImported[lb.iplb] = lb; });\n\n        // Set openstack importation status\n        this.table.loadbalancer = _.map(loadbalancers, (lb) => {\n          if (loadBalancerImported[lb.serviceName]) {\n            _.set(lb, 'openstack', loadBalancerImported[lb.serviceName].status);\n          } else {\n            _.set(lb, 'openstack', 'not_imported');\n          }\n          return lb;\n        });\n      }).catch((err) => {\n        this.table.loadbalancer = null;\n        this.CloudMessage.error([\n          this.$translate.instant('cpc_loadbalancer_error'),\n          (err.data && err.data.message) || '',\n        ].join(' '));\n      }).finally(() => { this.loaders.table.loadbalancer = false; });\n    }\n  }\n}\n\nangular.module('managerApp').controller(\n  'CloudProjectComputeLoadbalancerCtrl',\n  CloudProjectComputeLoadbalancerCtrl,\n);\n"]}