{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/logs-helper.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/logs-helper.service.js","mtime":1539717142122},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsHelperService {\n  constructor($translate, $state, OvhApiDbaas, ServiceHelper, CloudPoll, ControllerModalHelper,\n    LogsConstants, ovhDocUrl, URLS) {\n    this.$translate = $translate;\n    this.$state = $state;\n    this.ServiceHelper = ServiceHelper;\n    this.CloudPoll = CloudPoll;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.LogsConstants = LogsConstants;\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.ovhDocUrl = ovhDocUrl;\n    this.URLS = URLS;\n    this.initGuides();\n  }\n\n  killPoller() {\n    if (this.poller) {\n      this.poller.kill();\n    }\n  }\n\n  /**\n   * Polls operation API untill it returns success or failure\n   *\n   * @param {any} errorMessage, message to show on UI\n   * @param {any} error, the error object\n   * @param {any} messageData, the data to be used in the error message\n   * @memberof LogsHelperService\n   */\n  pollOperation(serviceName, operation) {\n    this.killPoller();\n    return this.CloudPoll.poll({\n      item: operation,\n      pollFunction: opn => this.OperationApiService\n        .get({ serviceName, operationId: opn.operationId }).$promise,\n      stopCondition: opn => opn.state === this.LogsConstants.FAILURE\n        || opn.state === this.LogsConstants.SUCCESS || opn.state === this.LogsConstants.REVOKED,\n    });\n  }\n\n  /**\n   * handles error state for create, delete and update input\n   *\n   * @param {any} errorMessage, message to show on UI\n   * @param {any} error, the error object\n   * @param {any} messageData, the data to be used in the error message\n   * @memberof LogsHelperService\n   */\n  handleError(errorMessage, error, messageData) {\n    return this.ServiceHelper.errorHandler({\n      textToTranslate: errorMessage,\n      translateParams: messageData,\n    })(error);\n  }\n\n  /**\n   * handles (CRUD) operations create, delete and update.\n   * Repetedly polls for operation untill it returns SUCCESS, FAILURE or REVOKED message.\n   *\n   * @param {any} serviceName\n   * @param {any} operation, operation to poll\n   * @param {any} successMessage, message to show on UI\n   * @param {any} messageData, the data to be used in the success message\n   * @returns promise which will be resolved to operation object\n   * @memberof LogsHelperService\n   */\n  handleOperation(serviceName, operation, successMessage, messageData) {\n    return this.pollOperation(serviceName, operation)\n      .$promise\n      .then((pollResult) => {\n        if (pollResult[0].item.state !== this.LogsConstants.SUCCESS) {\n          const error = { data: { message: 'Operation failed' } };\n          return Promise.reject(error);\n        }\n        if (successMessage) {\n          this.ServiceHelper.successHandler(successMessage)(messageData);\n        }\n        return pollResult;\n      });\n  }\n\n  /**\n   * shows offer upgrade required info modal\n   * @param {string} serviceName\n   */\n  showOfferUpgradeModal(serviceName) {\n    return this.ControllerModalHelper.showInfoModal({\n      titleText: this.$translate.instant('options_upgradequotalink_increase_quota_title'),\n      text: this.$translate.instant('options_upgradequotalink_increase_quota_message'),\n      okButtonText: this.$translate.instant('options_upgradequotalink_increase_quota_upgrade'),\n    })\n      .then(() => this.$state.go('dbaas.logs.detail.offer', { serviceName }));\n  }\n\n  /**\n   * creates guide menu object having LDP and OVH guide links\n   */\n  initGuides() {\n    this.guides = {};\n    this.guides.title = this.$translate.instant('logs_guides');\n    this.guides.list = [{\n      name: this.$translate.instant('logs_guides_title'),\n      url: this.ovhDocUrl.getDocUrl(this.LogsConstants.LOGS_DOCS_NAME),\n      external: true,\n    }];\n    this.guides.footer = {\n      name: this.$translate.instant('logs_guides_footer'),\n      url: this.URLS.guides.home.FR,\n      external: true,\n    };\n  }\n\n  getGuides() {\n    return this.guides;\n  }\n\n  /**\n   * return true if account is of type basic, false otherwise\n   * @param {accountDetails} account\n   */\n  static isBasicOffer(account) {\n    return !account.offer.reference.startsWith('logs-pro');\n  }\n\n  isAccountDisabled(account) {\n    return account.state === this.LogsConstants.SERVICE_STATE_DISABLED;\n  }\n\n  accountSetupRequired(account) {\n    return account.state === this.LogsConstants.SERVICE_STATE_TO_CONFIG;\n  }\n}\n\nangular.module('managerApp').service('LogsHelperService', LogsHelperService);\n"]}