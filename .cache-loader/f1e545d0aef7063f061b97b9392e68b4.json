{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/failover/buy/cloud-project-compute-infrastructure-ip-failover-buy.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/ip/failover/buy/cloud-project-compute-infrastructure-ip-failover-buy.controller.js","mtime":1539717141983},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["\n\nangular.module('managerApp')\n  .controller('CloudProjectComputeInfrastructureIpFailoverBuyCtrl', function CloudProjectComputeInfrastructureIpFailoverBuyCtrl($scope, $uibModalInstance, OvhApiIp, $translate, CloudMessage, OvhApiCloudProjectInstance, $stateParams, OvhApiOrderCloudProjectIp, OvhApiCloudProjectFlavor, OvhApiCloudProjectIpFailover, $window, $q, atInternet, OvhApiMe, CLOUD_GEOLOCALISATION, CLOUD_IPFO_ORDER_LIMIT) {\n    const self = this;\n    const { projectId } = $stateParams;\n\n    function getBuyIpsInfo() {\n      if (self.form.instance && self.form.country && self.form.quantity) {\n        self.loaders.billingInfo = true;\n        self.form.contractsAccepted = false;\n        OvhApiOrderCloudProjectIp.v6().get({\n          serviceName: projectId,\n        }, {\n          country: self.form.country.toLowerCase(),\n          instanceId: self.form.instance.id,\n          quantity: self.form.quantity,\n        }).$promise.then((result) => {\n          self.datas.billingInfo = result;\n        }, (err) => {\n          self.datas.billingInfo = null;\n          CloudMessage.error([$translate.instant('cpciif_buy_init_error'), (err.data && err.data.message) || '', self.form.instance.region, self.form.country].join(' '));\n          $uibModalInstance.dismiss();\n        }).finally(() => {\n          self.loaders.billingInfo = false;\n        });\n      }\n    }\n\n    self.datas = {\n      me: null,\n      billingInfo: null,\n    };\n\n    self.form = {\n      instances: [],\n      flavors: [],\n      failoverIps: [],\n      instance: null,\n      maxIp: 0,\n      quantity: 1,\n      quantityChanged() {\n        self.datas.billingInfo = null;\n        getBuyIpsInfo();\n      },\n      instanceChanged() {\n        const instanceLoc = _.first(\n          _.keys(\n            _.pick(CLOUD_GEOLOCALISATION.instance,\n              region => _.indexOf(region, self.form.instance.region) >= 0),\n          ),\n        );\n        self.form.countryEnum = _.defaults(CLOUD_GEOLOCALISATION.ipfo, {\n          instanceLoc: [],\n        })[instanceLoc];\n        self.datas.billingInfo = null;\n        self.form.country = null;\n      },\n      country: null,\n      countryEnum: null,\n      countryChanged() {\n        self.datas.billingInfo = null;\n        getBuyIpsInfo();\n      },\n      contractsAccepted: false,\n    };\n\n    self.loaders = {\n      init: false,\n      billingInfo: false,\n      buying: false,\n    };\n\n    $scope.countryTranslated = function countryTranslated(code) {\n      return $translate.instant(`country_${code.toUpperCase()}`);\n    };\n\n    // ---------INIT---------\n\n    function initInstance() {\n      OvhApiCloudProjectInstance.v6().resetQueryCache();\n      return OvhApiCloudProjectInstance.v6().query({\n        serviceName: projectId,\n      }).$promise.then((result) => {\n        self.form.instances = result;\n      }, (err) => {\n        self.form.instances = [];\n        CloudMessage.error([\n          $translate.instant('cpciif_buy_init_error'),\n          (err.data && err.data.message) || '',\n        ].join(' '));\n        $uibModalInstance.dismiss();\n        return $q.reject(err);\n      });\n    }\n\n    function initFlavors() {\n      return OvhApiCloudProjectFlavor.v6().query({\n        serviceName: projectId,\n      }).$promise.then((result) => {\n        self.form.flavors = result;\n      }, (err) => {\n        self.form.flavors = [];\n        CloudMessage.error([$translate.instant('cpciif_buy_init_error'), (err.data && err.data.message) || ''].join(' '));\n        $uibModalInstance.dismiss();\n        return $q.reject(err);\n      });\n    }\n\n    function initIp() {\n      OvhApiCloudProjectIpFailover.v6().resetQueryCache();\n      return OvhApiCloudProjectIpFailover.v6().query({\n        serviceName: projectId,\n      }).$promise.then((result) => {\n        self.form.failoverIps = result;\n      }, (err) => {\n        self.form.failoverIps = [];\n        CloudMessage.error([$translate.instant('cpciif_buy_init_error'), (err.data && err.data.message) || ''].join(' '));\n        $uibModalInstance.dismiss();\n        return $q.reject(err);\n      });\n    }\n\n    function init() {\n      const promises = [initInstance(), initFlavors(), initIp()];\n      self.loaders.init = true;\n      return $q.allSettled(promises).then(() => {\n        // compute the max limit of IP Failovers\n        angular.forEach(self.form.instances, (instance) => {\n          const flavor = _.first(_.filter(self.form.flavors, { id: instance.flavorId }));\n          if (flavor) {\n            const limit = +CLOUD_IPFO_ORDER_LIMIT[flavor.type];\n            if (_.isNumber(limit) && _.isNumber(limit)) {\n              self.form.maxIp += limit;\n            }\n          }\n        });\n\n        // subtract current IP from limit\n        const currentIps = _.filter(\n          self.form.failoverIps,\n          ip => !ip.routedTo || _.find(\n            self.form.instances,\n            instance => instance.id === ip.routedTo,\n          ),\n        );\n        self.form.maxIp -= currentIps.length;\n\n        // IP Failover must be attached to an ACTIVE instance\n        self.form.instances = _.filter(self.form.instances, { status: 'ACTIVE' });\n\n        // If no instance are available, disable buy IP\n        if (self.form.instances.length === 0) {\n          self.form.maxIp = 0;\n        }\n      }).finally(() => {\n        self.loaders.init = false;\n      });\n    }\n\n    // ---------MODAL---------\n\n    function buyIps() {\n      self.loaders.buying = true;\n\n      OvhApiOrderCloudProjectIp.v6().buy({\n        serviceName: projectId,\n      }, {\n        country: self.form.country.toLowerCase(),\n        instanceId: self.form.instance.id,\n        quantity: self.form.quantity,\n      }).$promise.then((result) => {\n        $window.open(result.url, '_blank');\n        CloudMessage.success($translate.instant('cpciif_buy_success', { url: result.url }), { hideAfter: false });\n        $uibModalInstance.dismiss();\n        atInternet.trackOrder({\n          name: `[IP]ipfailover[ip-failover-${self.form.country}]`,\n          page: 'iaas::pci-project::compute::infrastructure::order',\n          priceTaxFree: self.datas.billingInfo.prices.withoutTax.value / self.form.quantity,\n          quantity: self.form.quantity,\n        });\n      }, (err) => {\n        CloudMessage.error([$translate.instant('cpciif_buy_error'), (err.data && err.data.message) || ''].join(' '));\n        $uibModalInstance.dismiss();\n        return $q.reject(err);\n      }).finally(() => {\n        self.loaders.buying = false;\n      });\n    }\n\n    self.confirm = function confirm() {\n      buyIps();\n    };\n\n    self.cancel = $uibModalInstance.dismiss;\n\n    // ---------API CALLS---------\n\n    init();\n  });\n"]}