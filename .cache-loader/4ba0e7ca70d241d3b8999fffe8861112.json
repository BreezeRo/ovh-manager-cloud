{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/dashboard/vps-dashboard.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/dashboard/vps-dashboard.controller.js","mtime":1539717142287},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VpsDashboardCtrl {\n  constructor($filter, $q, $scope, $state, $stateParams, $translate, CloudMessage,\n    ControllerHelper, RegionService, SidebarMenu, VpsActionService, VpsService) {\n    this.$filter = $filter;\n    this.$q = $q;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.RegionService = RegionService;\n    this.serviceName = $stateParams.serviceName;\n    this.SidebarMenu = SidebarMenu;\n    this.VpsActionService = VpsActionService;\n    this.VpsService = VpsService;\n\n    this.plan = {};\n    this.summary = {};\n    this.vps = {};\n\n    this.loaders = {\n      disk: false,\n      ip: false,\n      polling: false,\n    };\n  }\n\n  initLoaders() {\n    this.vps = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.VpsService.getSelectedVps(this.serviceName),\n      successHandler: () => {\n        this.getRegionsGroup(this.vps.data.location.datacentre);\n        if (!this.vps.data.isExpired) {\n          this.loadIps();\n          this.hasAdditionalDiskOption();\n        }\n      },\n    });\n    this.summary = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.VpsService.getTabSummary(this.serviceName, true),\n      successHandler: () => this.initOptionsActions(),\n    });\n    this.plan = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.VpsService.getServiceInfos(this.serviceName),\n    });\n  }\n\n  $onInit() {\n    this.initActions();\n    this.initLoaders();\n\n    this.vps.load();\n    this.summary.load();\n    this.plan.load();\n\n    this.$scope.$on('tasks.pending', (event, opt) => {\n      if (opt === this.serviceName) {\n        this.loaders.polling = true;\n      }\n    });\n    this.$scope.$on('tasks.success', (event, opt) => {\n      if (opt === this.serviceName) {\n        this.loaders.polling = false;\n        this.vps.load();\n      }\n    });\n  }\n\n  loadIps() {\n    this.loaders.ips = true;\n    this.VpsService.getIps(this.serviceName).then((ips) => {\n      this.vps.data.ipv6Gateway = _.get(_.find(ips.results, { version: 'v6' }), 'gateway');\n      this.loaders.ips = false;\n    });\n  }\n\n  hasAdditionalDiskOption() {\n    if (!_.include(this.vps.data.availableOptions, 'ADDITIONAL_DISK')) {\n      this.hasAdditionalDisk = false;\n      return this.hasAdditionalDisk;\n    }\n    return this.loadAdditionalDisks();\n  }\n\n  loadAdditionalDisks() {\n    this.loaders.disk = true;\n    this.hasAdditionalDisk = true;\n    this.VpsService.getDisks(this.serviceName)\n      .then((data) => {\n        const promises = _.map(data, elem => this.VpsService.getDiskInfo(this.serviceName, elem));\n        return this.$q.all(promises)\n          .then((diskInfos) => {\n            this.additionnalDisks = this.VpsService.showOnlyAdditionalDisk(diskInfos);\n            this.canOrderDisk = _.isEmpty(this.additionnalDisks);\n          });\n      })\n      .catch((error) => {\n        this.CloudMessage.error(error || this.$translate.instant('vps_additional_disk_info_fail'));\n        return this.$q.reject(error);\n      })\n      .finally(() => { this.loaders.disk = false; });\n  }\n\n  initBackupStorageActions() {\n    this.backupStorageActions = {\n      manage: {\n        text: this.$translate.instant('common_manage'),\n        callback: () => this.$state.go('iaas.vps.detail.backup-storage', { serviceName: this.serviceName }),\n        isAvailable: () => !this.vps.loading,\n      },\n      order: {\n        text: this.$translate.instant('common_order'),\n        callback: () => this.$state.go('iaas.vps.detail.backup-storage.order', { serviceName: this.serviceName }),\n        isAvailable: () => !this.vps.loading,\n      },\n      terminate: {\n        text: this.$translate.instant('vps_configuration_desactivate_option'),\n        callback: () => this.VpsActionService.terminateBackupStorageOption(this.serviceName),\n        isAvailable: () => !this.vps.loading,\n      },\n    };\n  }\n\n  initSnapshotActions() {\n    this.snapshotDescription = this.summary.data.snapshot.creationDate\n      ? `${this.$translate.instant('vps_tab_SUMMARY_snapshot_creationdate')} ${moment(this.summary.data.snapshot.creationDate).format('LLL')}`\n      : this.$translate.instant('vps_status_enabled');\n    this.snapshotActions = {\n      delete: {\n        text: this.$translate.instant('vps_configuration_delete_snapshot_title_button'),\n        callback: () => this.VpsActionService.deleteSnapshot(this.serviceName),\n        isAvailable: () => !this.summary.loading\n          && this.summary.data.snapshot.creationDate\n          && !this.loaders.polling,\n      },\n      order: {\n        text: this.$translate.instant('common_order'),\n        callback: () => this.$state.go('iaas.vps.detail.snapshot-order', { serviceName: this.serviceName }),\n        isAvailable: () => !this.summary.loading && this.summary.data.snapshot.optionAvailable,\n      },\n      restore: {\n        text: this.$translate.instant('vps_configuration_snapshot_restore_title_button'),\n        callback: () => this.VpsActionService.restoreSnapshot(this.serviceName),\n        isAvailable: () => !this.summary.loading\n          && this.summary.data.snapshot.creationDate\n          && !this.loaders.polling,\n      },\n      take: {\n        text: this.$translate.instant('vps_configuration_snapshot_take_title_button'),\n        callback: () => this.VpsActionService.takeSnapshot(this.serviceName),\n        isAvailable: () => !this.summary.loading\n          && this.summary.data.snapshot.optionActivated\n          && !this.summary.data.snapshot.creationDate && !this.loaders.polling,\n      },\n      terminate: {\n        text: this.$translate.instant('vps_configuration_desactivate_option'),\n        callback: () => this.VpsActionService.terminateSnapshotOption(this.serviceName),\n        isAvailable: () => !this.summary.loading && this.summary.data.snapshot.optionActivated,\n      },\n    };\n  }\n\n  initVeeamActions() {\n    this.veeamActions = {\n      manage: {\n        text: this.$translate.instant('common_manage'),\n        callback: () => this.$state.go('iaas.vps.detail.veeam', { serviceName: this.serviceName }),\n        isAvailable: () => !this.vps.loading,\n      },\n      order: {\n        text: this.$translate.instant('common_order'),\n        callback: () => this.$state.go('iaas.vps.detail.veeam.order', { serviceName: this.serviceName }),\n        isAvailable: () => !this.vps.loading,\n      },\n      terminate: {\n        text: this.$translate.instant('vps_configuration_desactivate_option'),\n        callback: () => this.VpsActionService.terminateVeeamOption(this.serviceName),\n        isAvailable: () => !this.vps.loading,\n      },\n    };\n  }\n\n  initOptionsActions() {\n    this.initBackupStorageActions();\n    this.initSnapshotActions();\n    this.initVeeamActions();\n  }\n\n  updateName(newDisplayName) {\n    return this.VpsService.updateDisplayName(this.serviceName, newDisplayName)\n      .then(() => {\n        this.$scope.$emit('changeDescription', newDisplayName);\n        const menuItem = this.SidebarMenu.getItemById(this.serviceName);\n        menuItem.title = newDisplayName;\n\n        this.CloudMessage.success(this.$translate.instant('vps_setting_name_updated'));\n      })\n      .catch(err => this.CloudMessage.error(err))\n      .finally(() => this.vps.load());\n  }\n\n  initActions() {\n    this.actions = {\n      changeName: {\n        text: this.$translate.instant('common_edit'),\n        callback: () => this.ControllerHelper.modal.showNameChangeModal({\n          serviceName: this.serviceName,\n          displayName: this.vps.data.displayName,\n          onSave: newDisplayName => this.updateName(newDisplayName),\n        }),\n        isAvailable: () => !this.vps.loading,\n      },\n      changeOwner: {\n        text: this.$translate.instant('vps_change_owner'),\n        atInternetClickTag: 'VPS-Actions-ChangeOwner',\n        isAvailable: () => !this.loaders.url,\n        isExternal: true,\n      },\n      kvm: {\n        text: this.$translate.instant('vps_configuration_kvm_title_button'),\n        callback: () => this.VpsActionService.kvm(this.serviceName, this.vps.data.noVNC),\n        isAvailable: () => !this.loaders.polling && !this.vps.loading,\n      },\n      manageAutorenew: {\n        text: this.$translate.instant('common_manage'),\n        href: this.ControllerHelper.navigation.getUrl('renew', { serviceName: this.serviceName, serviceType: 'VPS' }),\n        isAvailable: () => !this.vps.loading && !this.loaders.plan,\n      },\n      manageContact: {\n        text: this.$translate.instant('common_manage'),\n        href: this.ControllerHelper.navigation.getUrl('contacts', { serviceName: this.serviceName }),\n        isAvailable: () => !this.vps.loading,\n      },\n      manageIps: {\n        text: this.$translate.instant('vps_configuration_add_ipv4_title_button'),\n        href: this.ControllerHelper.navigation.getUrl('ip', { serviceName: this.serviceName }),\n        isAvailable: () => !this.vps.loading && !this.loaders.ip,\n      },\n      displayIps: {\n        text: this.$translate.instant('vps_dashboard_ips_additional'),\n        callback: () => this.VpsActionService.displayIps(this.serviceName),\n        isAvailable: () => !this.vps.loading && !this.loaders.ip,\n      },\n      manageSla: {\n        text: this.$translate.instant('common_manage'),\n        callback: () => this.VpsActionService\n          .monitoringSla(this.serviceName, !this.vps.data.slaMonitoring),\n        isAvailable: () => !this.vps.loading && !this.loaders.polling,\n      },\n      viewIpSla: {\n        text: this.$translate.instant('vps_dashboard_monitoring_sla_ips'),\n        callback: () => this.VpsActionService.monitoringSla(this.serviceName, true, true),\n        isAvailable: () => !this.vps.loading,\n      },\n      orderAdditionalDiskOption: {\n        text: this.$translate.instant('vps_additional_disk_add_button'),\n        callback: () => this.$state.go('iaas.vps.detail.additional-disk.order'),\n        isAvailable: () => !this.loaders.disk && this.canOrderDisk,\n      },\n      orderWindows: {\n        text: this.$translate.instant('common_order'),\n        callback: () => this.$state.go('iaas.vps.detail.windows-order', { serviceName: this.serviceName }),\n        isAvailable: () => !this.summary.loading && !this.summary.windowsActivated,\n      },\n      reboot: {\n        text: this.$translate.instant('vps_configuration_reboot_title_button'),\n        callback: () => this.VpsActionService.reboot(this.serviceName),\n        isAvailable: () => !this.loaders.polling && !this.vps.loading,\n      },\n      reinstall: {\n        text: this.$translate.instant('vps_configuration_reinstall_title_button'),\n        callback: () => this.VpsActionService.reinstall(this.serviceName),\n        isAvailable: () => !this.loaders.polling && !this.vps.loading,\n      },\n      rebootRescue: {\n        text: this.$translate.instant('vps_configuration_reboot_rescue'),\n        callback: () => this.VpsActionService.rescue(this.serviceName),\n        isAvailable: () => !this.loaders.polling && !this.vps.loading,\n      },\n      reverseDns: {\n        text: this.$translate.instant('vps_configuration_reversedns_title_button'),\n        callback: () => this.VpsActionService.reverseDns(this.serviceName),\n        isAvailable: () => !this.loaders.ip,\n      },\n      terminateAdditionalDiskOption: {\n        text: this.$translate.instant('vps_configuration_desactivate_option'),\n        callback: () => this.VpsActionService.terminateAdditionalDiskOption(this.serviceName),\n        isAvailable: () => !this.loaders.disk && !this.canOrderDisk,\n      },\n      terminateWindows: {\n        text: this.$translate.instant('vps_configuration_desactivate_option'),\n        callback: () => this.VpsActionService.terminateWindows(this.serviceName),\n        isAvailable: () => !this.summary.loading && this.summary.data.windowsActivated,\n      },\n      upgrade: {\n        text: this.$translate.instant('vps_configuration_upgradevps_title_button'),\n        state: 'iaas.vps.detail.upgrade',\n        stateParams: { serviceName: this.serviceName },\n        isAvailable: () => !this.loaders.polling && !this.vps.loading,\n      },\n    };\n    this.ControllerHelper.navigation.getConstant('changeOwner').then((url) => { this.actions.changeOwner.href = url; });\n  }\n\n  getRegionsGroup(regions) {\n    this.regionsGroup = [];\n    if (regions) {\n      this.detailedRegions = !_.isArray(regions)\n        ? [this.RegionService.getRegion(regions)]\n        : _.map(regions, region => this.RegionService.getRegion(region));\n    }\n    this.regionsGroup = _.groupBy(this.detailedRegions, 'country');\n  }\n\n  hasMultipleRegions() {\n    return _(this.detailedRegions).isArray() && this.detailedRegions.length > 1;\n  }\n\n  static getActionStateParamString(params) {\n    return params ? `(${JSON.stringify(params)})` : '';\n  }\n}\n\nangular.module('managerApp').controller('VpsDashboardCtrl', VpsDashboardCtrl);\n"]}