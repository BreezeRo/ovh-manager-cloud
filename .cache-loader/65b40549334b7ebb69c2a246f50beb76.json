{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/veeam-enterprise/veeam-enterprise.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/veeam-enterprise/veeam-enterprise.service.js","mtime":1539717374615},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VeeamEnterpriseService {\n  constructor($q, $translate, OvhApiVeeamEnterprise) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.veeamEnterprise = OvhApiVeeamEnterprise.v6();\n\n    this.unitOfWork = { };\n    this.unitOfWork.init = () => {\n      this.unitOfWork.messages = [];\n    };\n  }\n\n  getConfigurationInfos(serviceName) {\n    return this.veeamEnterprise\n      .get({ serviceName })\n      .$promise\n      .then(response => this.acceptResponse(response))\n      .catch(response => this.rejectResponse(\n        response,\n        this.$translate.instant('veeam_enterprise_infos_configuration_load_error'),\n      ));\n  }\n\n  getSubscriptionInfos(serviceName) {\n    return this.veeamEnterprise\n      .getServiceInfos({ serviceName })\n      .$promise\n      .then(response => this.acceptResponse(response))\n      .catch(response => this.rejectResponse(\n        response.data,\n        this.$translate.instant('veeam_enterprise_infos_subscription_load_error'),\n      ));\n  }\n\n  postConfiguration(action, serviceName, ip, port, username, password) {\n    if (action === 'register') {\n      return this.veeamEnterprise\n        .register(\n          { serviceName },\n          {\n            ip, port, username, password,\n          },\n        )\n        .$promise\n        .then(response => this.acceptResponse(\n          response,\n          this.$translate.instant('veeam_enterprise_infos_license_register_success'),\n        ))\n        .catch((response) => {\n          const alreadyRegistered = _.get(response, 'data.message') === 'This backup server enterprise has already been registered';\n          const message = alreadyRegistered\n            ? this.$translate.instant('veeam_enterprise_infos_license_already_registered_error')\n            : this.$translate.instant('veeam_enterprise_infos_license_register_error');\n\n          return this.rejectResponse(\n            response.data,\n            message,\n          );\n        });\n    }\n\n    // If action is \"update\"\n    return this.veeamEnterprise\n      .update(\n        { serviceName },\n        {\n          ip, port, username, password,\n        },\n      )\n      .$promise\n      .then(response => this.acceptResponse(\n        response,\n        this.$translate.instant('veeam_enterprise_infos_license_update_success'),\n      ))\n      .catch(response => this.rejectResponse(\n        response.data,\n        this.$translate.instant('veeam_enterprise_infos_license_update_error'),\n      ));\n  }\n\n  terminate(serviceName) {\n    return this.veeamEnterprise\n      .terminate({ serviceName })\n      .$promise\n      .then(response => this.acceptResponse(\n        response,\n        this.$translate.instant('veeam_enterprise_terminate_success'),\n      ))\n      .catch(response => this.rejectResponse(\n        response.data,\n        this.$translate.instant('veeam_enterprise_terminate_error'),\n      ));\n  }\n\n  acceptResponse(data, message) {\n    return this.$q.resolve({\n      status: 'OK',\n      data,\n      message,\n    });\n  }\n\n  rejectResponse(data, message) {\n    return this.$q.reject({\n      status: 'ERROR',\n      data,\n      message,\n    });\n  }\n}\n\nangular.module('managerApp').service('VeeamEnterpriseService', VeeamEnterpriseService);\n"]}