{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/cloud-database/order/vps-cloud-database-order.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/cloud-database/order/vps-cloud-database-order.controller.js","mtime":1539717374622},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsCloudDatabaseOrderCtrl =\n/*#__PURE__*/\nfunction () {\n  VpsCloudDatabaseOrderCtrl.$inject = [\"$q\", \"$timeout\", \"$translate\", \"$window\", \"atInternet\", \"CloudMessage\", \"OvhApiHostingPrivateDatabase\", \"OvhApiOrderPrivateDatabase\", \"OvhApiMe\"];\n\n  function VpsCloudDatabaseOrderCtrl($q, $timeout, $translate, $window, atInternet, CloudMessage, OvhApiHostingPrivateDatabase, OvhApiOrderPrivateDatabase, OvhApiMe) {\n    _classCallCheck(this, VpsCloudDatabaseOrderCtrl);\n\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.atInternet = atInternet;\n    this.CloudMessage = CloudMessage;\n    this.ApiPrivateDb = OvhApiHostingPrivateDatabase.v6();\n    this.ApiOrderDb = OvhApiOrderPrivateDatabase.v6();\n    this.ApiMe = OvhApiMe.v6();\n  }\n\n  _createClass(VpsCloudDatabaseOrderCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.loading = {\n        durations: false,\n        redirection: false,\n        purchaseOrder: false\n      };\n      this.versions = [];\n      this.ramAmounts = [];\n      this.datacenters = [];\n      this.durations = null;\n      this.currentOrder = {\n        version: null,\n        ram: null,\n        datacenter: null,\n        duration: null,\n        contractsAccepted: false\n      };\n      this.purchaseOrder = null;\n      this.redirectionTimeout = null;\n      this.loadSelectValues();\n      this.ApiMe.get().$promise.then(function (user) {\n        _this.user = user;\n      });\n    }\n  }, {\n    key: \"loadSelectValues\",\n    value: function loadSelectValues() {\n      var _this2 = this;\n\n      return this.ApiPrivateDb.availableOrderCapacities({\n        offer: 'public'\n      }).$promise.then(function (capacity) {\n        _this2.versions = capacity.version.sort().map(function (version) {\n          return {\n            value: version,\n            name: _this2.$translate.instant(\"common_database_version_\".concat(version.replace('.', '')))\n          };\n        });\n        _this2.ramAmounts = capacity.ram.map(function (ram) {\n          return {\n            value: ram,\n            name: \"\".concat(ram, \" \").concat(_this2.$translate.instant('unit_size_MB'))\n          };\n        });\n        _this2.datacenters = capacity.datacenter.map(function (datacenter) {\n          return {\n            value: datacenter,\n            name: _this2.$translate.instant(\"common_datacenter_\".concat(datacenter))\n          };\n        });\n      }).catch(function (error) {\n        return _this2.CloudMessage.error([_this2.$translate.instant('vps_tab_cloud_database_order_fetch_capacities_failed'), _(error).get('data.message', error)].join(' '));\n      });\n    }\n  }, {\n    key: \"showOrRefreshDurations\",\n    value: function showOrRefreshDurations() {\n      var _this3 = this;\n\n      this.cancelFurtherChoices();\n\n      if (!this.currentOrder.version || !this.currentOrder.ram || !this.currentOrder.datacenter) {\n        return this.$q.when();\n      }\n\n      var version = this.currentOrder.version.value;\n      var ram = this.currentOrder.ram.value;\n      var datacenter = this.currentOrder.datacenter.value;\n      this.loading.durations = true;\n      return this.ApiOrderDb.getNew({\n        version: version,\n        ram: ram,\n        datacenter: datacenter\n      }).$promise.then(function (durations) {\n        _this3.durations = _.map(durations, function (duration) {\n          return {\n            value: duration,\n            prices: null\n          };\n        }); // we run this in parallel, so no return\n\n        _this3.getPricesForEachDuration(_this3.durations, version, ram, datacenter);\n      }).catch(function (error) {\n        return _this3.CloudMessage.error([_this3.$translate.instant('vps_tab_cloud_database_order_fetch_duration_failed'), _(error).get('data.message', error)].join(' '));\n      }).finally(function () {\n        _this3.loading.durations = false;\n      });\n    }\n  }, {\n    key: \"cancelFurtherChoices\",\n    value: function cancelFurtherChoices() {\n      this.$timeout.cancel(this.redirectionTimeout);\n      this.loading.purchaseOrder = false;\n      this.loading.redirection = false;\n      this.currentOrder.duration = null;\n      this.currentOrder.contractsAccepted = false;\n      this.purchaseOrder = null;\n    }\n  }, {\n    key: \"getPricesForEachDuration\",\n    value: function getPricesForEachDuration(durations, version, ram, datacenter) {\n      var _this4 = this;\n\n      return this.$q.all(_.map(durations, function (duration) {\n        return _this4.getPrices(duration, version, ram, datacenter);\n      })).catch(function (error) {\n        return _this4.CloudMessage.error([_this4.$translate.instant('vps_tab_cloud_database_order_fetch_prices_failed'), _(error).get('data.message', error)].join(' '));\n      });\n    }\n  }, {\n    key: \"getPrices\",\n    value: function getPrices(duration, version, ram, datacenter) {\n      return this.ApiOrderDb.getNewDetails({\n        duration: duration.value,\n        version: version,\n        ram: ram,\n        datacenter: datacenter\n      }).$promise.then(function (details) {\n        // we want to trigger a change in the UI\n        // by assigning prices to each already shown duration\n        Object.assign(duration, {\n          details: details\n        });\n      });\n    }\n  }, {\n    key: \"canOrder\",\n    value: function canOrder() {\n      return !_.any(this.loading) && this.currentOrder.version && this.currentOrder.ram && this.currentOrder.datacenter && this.currentOrder.duration && this.currentOrder.contractsAccepted;\n    }\n  }, {\n    key: \"generatePurchaseOrder\",\n    value: function generatePurchaseOrder() {\n      var _this5 = this;\n\n      this.loading.purchaseOrder = true;\n      this.loading.redirection = true;\n      return this.ApiOrderDb.orderNew({\n        duration: this.currentOrder.duration.value\n      }, {\n        version: this.currentOrder.version.value,\n        ram: this.currentOrder.ram.value,\n        datacenter: this.currentOrder.datacenter.value,\n        offer: 'public'\n      }).$promise.then(function (order) {\n        _this5.purchaseOrder = order;\n        _this5.redirectionTimeout = _this5.$timeout(function () {\n          _this5.loading.redirection = false;\n\n          _this5.openPurchaseOrder(false);\n        }, 5000);\n      }).catch(function (error) {\n        return _this5.CloudMessage.error([_this5.$translate.instant('vps_tab_cloud_database_order_failed'), _(error).get('data.message', error)].join(' '));\n      }).finally(function () {\n        _this5.loading.purchaseOrder = false;\n      });\n    }\n  }, {\n    key: \"openPurchaseOrder\",\n    value: function openPurchaseOrder(killAutoRedirection) {\n      if (killAutoRedirection) {\n        this.loading.redirection = false;\n        this.$timeout.cancel(this.redirectionTimeout);\n      }\n\n      this.atInternet.trackOrder({\n        name: \"[sql-public]::\".concat(this.currentOrder.version.value),\n        page: 'web::payment-pending',\n        orderId: this.purchaseOrder.orderId,\n        priceTaxFree: this.purchaseOrder.prices.withoutTax.value,\n        price: this.purchaseOrder.prices.withTax.value,\n        status: 1\n      });\n      this.$window.open(this.purchaseOrder.url);\n    }\n  }]);\n\n  return VpsCloudDatabaseOrderCtrl;\n}();\n\nangular.module('managerApp').controller('VpsCloudDatabaseOrderCtrl', VpsCloudDatabaseOrderCtrl);",null]}