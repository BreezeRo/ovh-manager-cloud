{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/dbaas-metrics/token/metrics-token.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/dbaas-metrics/token/metrics-token.controller.js","mtime":1539717142072},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var MetricsTokenCtrl =\n  /*#__PURE__*/\n  function () {\n    MetricsTokenCtrl.$inject = [\"$scope\", \"$stateParams\", \"$translate\", \"ControllerHelper\", \"MetricService\", \"ovhDocUrl\"];\n\n    function MetricsTokenCtrl($scope, $stateParams, $translate, ControllerHelper, MetricService, ovhDocUrl) {\n      _classCallCheck(this, MetricsTokenCtrl);\n\n      this.scope = $scope;\n      this.$stateParams = $stateParams;\n      this.serviceName = $stateParams.serviceName;\n      this.$translate = $translate;\n      this.ControllerHelper = ControllerHelper;\n      this.MetricService = MetricService;\n      this.ovhDocUrl = ovhDocUrl;\n      this.tokens = [];\n      this.loading = false;\n    }\n\n    _createClass(MetricsTokenCtrl, [{\n      key: \"$onInit\",\n      value: function $onInit() {\n        this.getTokens(this.serviceName);\n      }\n    }, {\n      key: \"getTokens\",\n      value: function getTokens(serviceName) {\n        var _this = this;\n\n        this.loading = true;\n        this.MetricService.getTokens(serviceName).then(function (data) {\n          _this.tokens = data.filter(function (token) {\n            return token.isRevoked === false;\n          });\n          _this.loading = false;\n        });\n      }\n    }, {\n      key: \"getGuides\",\n      value: function getGuides() {\n        return this.ovhDocUrl.getDocUrl('cloud/metrics');\n      }\n    }, {\n      key: \"showPreview\",\n      value: function showPreview(_tokenID) {\n        var _this2 = this;\n\n        this.ControllerHelper.modal.showModal({\n          modalConfig: {\n            templateUrl: 'app/dbaas/dbaas-metrics/token/preview/metrics-token-preview.html',\n            controller: 'MetricsTokenPreviewCtrl',\n            controllerAs: '$ctrl',\n            resolve: {\n              serviceName: function serviceName() {\n                return _this2.serviceName;\n              },\n              tokenID: function tokenID() {\n                return _tokenID;\n              }\n            }\n          }\n        });\n      }\n    }, {\n      key: \"edit\",\n      value: function edit(_tokenID2, desc) {\n        var _this3 = this;\n\n        this.ControllerHelper.modal.showModal({\n          modalConfig: {\n            templateUrl: 'app/dbaas/dbaas-metrics/token/edit/metrics-token-edit.html',\n            controller: 'MetricsTokenEditCtrl',\n            controllerAs: '$ctrl',\n            resolve: {\n              metricsType: function metricsType() {\n                return 'name';\n              },\n              metricsValue: function metricsValue() {\n                return desc;\n              },\n              serviceName: function serviceName() {\n                return _this3.serviceName;\n              },\n              tokenID: function tokenID() {\n                return _tokenID2;\n              }\n            }\n          },\n          successHandler: function successHandler() {\n            return _this3.getTokens(_this3.serviceName);\n          }\n        });\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(_tokenID3) {\n        var _this4 = this;\n\n        this.ControllerHelper.modal.showModal({\n          modalConfig: {\n            templateUrl: 'app/dbaas/dbaas-metrics/token/delete/metrics-token-delete.html',\n            controller: 'MetricsTokenDeleteCtrl',\n            controllerAs: '$ctrl',\n            backdrop: 'static',\n            resolve: {\n              serviceName: function serviceName() {\n                return _this4.serviceName;\n              },\n              tokenID: function tokenID() {\n                return _tokenID3;\n              }\n            }\n          },\n          successHandler: function successHandler() {\n            return _this4.getTokens(_this4.serviceName);\n          }\n        });\n      }\n    }], [{\n      key: \"displayRemainingLabels\",\n      value: function displayRemainingLabels(number) {\n        return \"+\".concat(number);\n      }\n    }]);\n\n    return MetricsTokenCtrl;\n  }();\n\n  angular.module('managerApp').controller('MetricsTokenCtrl', MetricsTokenCtrl);\n})();",null]}