{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/add/project-add.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/add/project-add.service.js","mtime":1539717142370},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* eslint-disable consistent-return */\n(function () {\n  var CloudProjectAdd =\n  /*#__PURE__*/\n  function () {\n    CloudProjectAdd.$inject = [\"$q\", \"$translate\", \"$state\", \"$window\", \"atInternet\", \"Toast\", \"OvhApiCloud\", \"OvhApiMe\", \"OvhApiVrack\", \"CloudProjectSidebar\"];\n\n    function CloudProjectAdd($q, $translate, $state, $window, atInternet, Toast, OvhApiCloud, OvhApiMe, OvhApiVrack, CloudProjectSidebar) {\n      _classCallCheck(this, CloudProjectAdd);\n\n      this.$q = $q;\n      this.$translate = $translate;\n      this.$state = $state;\n      this.$window = $window;\n      this.atInternet = atInternet;\n      this.Toast = Toast;\n      this.Cloud = OvhApiCloud;\n      this.User = OvhApiMe;\n      this.Vrack = OvhApiVrack;\n      this.CloudProjectSidebar = CloudProjectSidebar;\n    }\n\n    _createClass(CloudProjectAdd, [{\n      key: \"startProject\",\n      value: function startProject(voucher, description, catalogVersion) {\n        var _this = this;\n\n        // Agreements should be already accepted\n        return this.Cloud.v6().createProject({}, {\n          voucher: voucher,\n          description: description,\n          catalogVersion: catalogVersion\n        }).$promise.then(function (response) {\n          var error;\n\n          switch (response.status) {\n            case 'creating':\n              // User needs to pay something\n              _this.User.Order().v6().get({\n                orderId: response.orderId\n              }).$promise.then(function (order) {\n                _this.$window.open(order.url, '_blank');\n\n                _this.updateManager(response.project, description);\n\n                _this.atInternet.trackEvent({\n                  name: '[PCI]NewProject',\n                  page: 'cloud-project::offer',\n                  customObject: {\n                    voucher: voucher\n                  }\n                });\n\n                _this.$state.go('iaas.pci-project.details', {\n                  projectId: response.project,\n                  fromProjectAdd: true\n                });\n\n                _this.Toast.success(_this.$translate.instant('cpa_success', {\n                  url: order.url\n                }));\n              }).catch(function () {\n                _this.Toast.error(_this.$translate.instant('cpa_error'));\n              });\n\n              break;\n\n            case 'ok':\n              if (response.project) {\n                // Success: go to it\n                _this.updateManager(response.project, description);\n\n                _this.$state.go('iaas.pci-project.details', {\n                  projectId: response.project,\n                  fromProjectAdd: true,\n                  createNewVm: true\n                });\n              } else {\n                // Because it's not normal\n                _this.Toast.error(_this.$translate.instant('cpa_error'));\n              }\n\n              break;\n\n            case 'waitingAgreementsValidation':\n              error = {\n                agreements: _this.getAllAgreementsInfo(response.agreements)\n              };\n\n              _this.Toast.info(_this.$translate.instant('cpa_error_contracts_tosign'));\n\n              return _this.$q.reject(error);\n            // case \"validationPending\":\n\n            default:\n          }\n        }).catch(function (err) {\n          if (err && err.status) {\n            switch (err.status) {\n              case 400:\n                return _this.Toast.error(_this.$translate.instant('cpa_error_invalid_paymentmean'));\n\n              case 404:\n                return _this.Toast.error(_this.$translate.instant('cpa_error_invalid_voucher'));\n\n              case 409:\n                return _this.Toast.error(_this.$translate.instant('cpa_error_over_quota'));\n\n              default:\n                return _this.Toast.error(_this.$translate.instant('cpa_error') + (err.data && err.data.message ? \" (\".concat(err.data.message, \")\") : ''));\n            }\n          } else if (err && err.agreements) {\n            return _this.$q.reject(err);\n          }\n        });\n      }\n    }, {\n      key: \"getProjectInfo\",\n      value: function getProjectInfo() {\n        var _this2 = this;\n\n        return this.Cloud.v6().createProjectInfo().$promise.then(function (response) {\n          return _this2.$q.all({\n            agreementsToAccept: _this2.getAllAgreementsInfo(response.agreements),\n            orderToPay: _this2.$q.when(response.order)\n          });\n        }).catch(function (err) {\n          if (err && err.status) {\n            switch (err.status) {\n              case 409:\n                _this2.Toast.error(_this2.$translate.instant('cpa_error_over_quota'));\n\n                break;\n\n              default:\n                _this2.Toast.error(_this2.$translate.instant('cpa_error') + (err.data && err.data.message ? \" (\".concat(err.data.message, \")\") : ''));\n\n            }\n          }\n        });\n      }\n    }, {\n      key: \"getAllAgreementsInfo\",\n      value: function getAllAgreementsInfo(agreementsIds) {\n        var _this3 = this;\n\n        var agreements = [];\n\n        if (agreementsIds && agreementsIds.length) {\n          _.forEach(agreementsIds, function (contractId) {\n            agreements.push(_this3.getContractInfo(contractId));\n          });\n        }\n\n        return this.$q.all(agreements);\n      }\n    }, {\n      key: \"getContractInfo\",\n      value: function getContractInfo(contractId) {\n        return this.User.Agreements().v6().contract({\n          id: contractId\n        }).$promise.then(function (contract) {\n          _.set(contract, 'id', contractId);\n\n          return contract;\n        });\n      }\n    }, {\n      key: \"updateManager\",\n      value: function updateManager(projectId, description) {\n        this.CloudProjectSidebar.addToSection({\n          project_id: projectId,\n          // jshint ignore:line\n          description: description\n        });\n        this.Vrack.v6().resetCache();\n        this.Vrack.CloudProject().v6().resetQueryCache();\n      }\n    }]);\n\n    return CloudProjectAdd;\n  }();\n\n  angular.module('managerApp').service('CloudProjectAdd', CloudProjectAdd);\n})();\n/* eslint-enable consistent-return */",null]}