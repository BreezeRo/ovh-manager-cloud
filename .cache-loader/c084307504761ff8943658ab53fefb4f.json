{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/consumption/estimate/cloud-project-billing-consumption-estimate.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/billing/consumption/estimate/cloud-project-billing-consumption-estimate.controller.js","mtime":1539717141956},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('CloudProjectBillingConsumptionEstimateCtrl',\n  function CloudProjectBillingConsumptionEstimateCtrl($q, $uibModal, $stateParams, $translate,\n    OvhApiCloudProjectAlerting, CloudMessage, OvhApiCloudProjectUsageForecast,\n    OvhApiCloudProjectUsageCurrent, CloudProjectBillingService) {\n    const self = this;\n    self.loading = false;\n    self.data = {\n      currencySymbol: null,\n      alert: null,\n      estimateTotals: null,\n      currentTotals: null,\n    };\n\n    self.loaders = {\n      alert: false,\n      forecast: false,\n      current: false,\n      deleteAlert: false,\n    };\n\n    self.getCurrentMonth = function () {\n      return moment();\n    };\n\n    self.getNextMonth = function () {\n      return moment().add(1, 'month');\n    };\n\n    function initForecast() {\n      self.loaders.forecast = true;\n      return OvhApiCloudProjectUsageForecast.v6()\n        .get({\n          serviceName: $stateParams.projectId,\n        }).$promise\n        .then(billingInfo => CloudProjectBillingService\n          .getConsumptionDetails(billingInfo, billingInfo)\n          .then((data) => {\n            self.data.estimateTotals = data.totals;\n            self.data.currencySymbol = self.data.estimateTotals.currencySymbol;\n          })\n          .finally(() => {\n            self.loaders.forecast = false;\n          }));\n    }\n\n    function initCurrent() {\n      self.loaders.current = true;\n      return OvhApiCloudProjectUsageCurrent.v6()\n        .get({\n          serviceName: $stateParams.projectId,\n        }).$promise\n        .then(billingInfo => CloudProjectBillingService.getConsumptionDetails(\n          billingInfo,\n          billingInfo,\n        ))\n        .then((data) => {\n          self.data.currentTotals = data.totals;\n        })\n        .finally(() => {\n          self.loaders.current = false;\n        });\n    }\n\n    function getAlertIds() {\n      OvhApiCloudProjectAlerting.v6().resetCache();\n      return OvhApiCloudProjectAlerting.v6().getIds({\n        serviceName: $stateParams.projectId,\n      }).$promise;\n    }\n\n    function getAlert(id) {\n      return OvhApiCloudProjectAlerting.v6().get({\n        serviceName: $stateParams.projectId,\n        alertId: id,\n      }).$promise\n        .catch(() => {\n          // We dont rethrow or show a message to hide an API glitch.\n          self.data.alert = null;\n          return null;\n        });\n    }\n\n    function initConsumptionChart() {\n      const labelNow = $translate.instant('cpbe_estimate_alert_chart_label_now');\n      const labelFuture = $translate.instant('cpbe_estimate_alert_chart_label_future');\n      const labelLimit = $translate.instant('cpbe_estimate_alert_chart_label_limit');\n\n      self.consumptionChartData = {\n        estimate: {\n          now: {\n            value: self.data.currentTotals.hourly.total,\n            currencyCode: self.data.estimateTotals.currencySymbol,\n            label: labelNow,\n          },\n          endOfMonth: {\n            value: self.data.estimateTotals.hourly.total,\n            currencyCode: self.data.estimateTotals.currencySymbol,\n            label: labelFuture,\n          },\n        },\n        threshold: {\n          now: {\n            value: self.data.alert.monthlyThreshold,\n            currencyCode: self.data.estimateTotals.currencySymbol,\n            label: labelLimit,\n          },\n          endOfMonth: {\n            value: self.data.alert.monthlyThreshold,\n            currencyCode: self.data.estimateTotals.currencySymbol,\n            label: labelLimit,\n          },\n        },\n      };\n    }\n\n    function initAlert() {\n      self.loaders.alert = true;\n      // list alerts ids\n      return getAlertIds()\n        .then((alertIds) => {\n          if (_.isEmpty(alertIds)) {\n            return null;\n          }\n          return getAlert(_.first(alertIds));\n        })\n        .then((alertObject) => {\n          self.data.alert = alertObject;\n          if (!_.isNull(alertObject)) {\n            initConsumptionChart();\n          }\n        }).finally(() => {\n          self.loaders.alert = false;\n        });\n    }\n\n    function init() {\n      initForecast().then(() => initCurrent()).then(() => initAlert()).catch((err) => {\n        CloudMessage.error([$translate.instant('cpbe_estimate_price_error_message'), (err.data && err.data.message) || ''].join(' '));\n      });\n    }\n\n    self.openAlertAddModal = function () {\n      const modal = $uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/billing/consumption/estimate/alert/add/cloud-project-billing-consumption-estimate-alert-add.html',\n        controller: 'CloudProjectBillingConsumptionEstimateAlertAddCtrl',\n        controllerAs: 'CloudProjectBillingConsumptionEstimateAlertAddCtrl',\n        resolve: {\n          dataContext() {\n            return self.data;\n          },\n        },\n      });\n\n      modal.result.then(() => {\n        initAlert();\n      });\n    };\n\n    self.deleteAlert = function () {\n      self.loaders.deleteAlert = true;\n      // we query alerts to check if an alert already exists, in this case we delete it\n      OvhApiCloudProjectAlerting.v6().getIds({\n        serviceName: $stateParams.projectId,\n      }).$promise.then((alertIds) => {\n        if (!_.isEmpty(alertIds)) {\n          return OvhApiCloudProjectAlerting.v6().delete({\n            serviceName: $stateParams.projectId,\n            alertId: _.first(alertIds),\n          }).$promise.then(() => {\n            CloudMessage.success($translate.instant('cpbe_estimate_alert_delete_success'));\n          });\n        }\n        return $q.reject({ data: { message: 'Alert not found' } });\n      }).catch((err) => {\n        CloudMessage.error([$translate.instant('cpbe_estimate_alert_delete_error'), (err.data && err.data.message) || ''].join(' '));\n        return $q.reject(err);\n      }).finally(() => {\n        self.loaders.deleteAlert = false;\n      });\n\n      initAlert();\n    };\n\n    init();\n  });\n"]}