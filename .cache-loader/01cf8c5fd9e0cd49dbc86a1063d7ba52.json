{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/logs-roles.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/roles/logs-roles.service.js","mtime":1539717142142},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsRolesService {\n  constructor($q, $translate, CloudPoll, ControllerHelper, LogsAliasesService,\n    LogsDashboardsService, LogsHelperService, LogsIndexService, LogsOptionsService,\n    LogsConstants, LogsStreamsService, OvhApiDbaas, ServiceHelper) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.ServiceHelper = ServiceHelper;\n    this.ControllerHelper = ControllerHelper;\n    this.LogsDashboardsService = LogsDashboardsService;\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsAliasesService = LogsAliasesService;\n    this.LogsIndexService = LogsIndexService;\n    this.LogsStreamsService = LogsStreamsService;\n    this.LogsHelperService = LogsHelperService;\n\n    this.LogsConstants = LogsConstants;\n    this.CloudPoll = CloudPoll;\n    this.LogsApiService = OvhApiDbaas.Logs().v6();\n    this.MembersApiService = OvhApiDbaas.Logs().Role().Member().v6();\n    this.PermissionsApiService = OvhApiDbaas.Logs().Role().Permission().v6();\n\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.RolesApiService = OvhApiDbaas.Logs().Role().v6();\n    this.RolesAapiService = OvhApiDbaas.Logs().Role().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n\n    this.newRole = {\n      description: '',\n      name: '',\n      optionId: null,\n    };\n    this.permissions = {\n      dashboard: [],\n      alias: [],\n      index: [],\n      stream: [],\n    };\n  }\n\n  getNewPermissions() {\n    this.permissions.dashboard.length = 0;\n    this.permissions.alias.length = 0;\n    this.permissions.index.length = 0;\n    this.permissions.stream.length = 0;\n    return this.permissions;\n  }\n\n  getAllStreams(serviceName) {\n    return this.LogsStreamsService.getShareableStreams(serviceName);\n  }\n\n  getAllAliases(serviceName) {\n    return this.LogsAliasesService.getShareableAliases(serviceName);\n  }\n\n  getAllDashboards(serviceName) {\n    return this.LogsDashboardsService.getShareableDashboards(serviceName);\n  }\n\n  getAllIndices(serviceName) {\n    return this.LogsIndexService.getShareableIndices(serviceName);\n  }\n\n  addAlias(serviceName, roleId, alias) {\n    return this.PermissionsApiService\n      .addAlias({ serviceName, roleId, aliasId: alias.aliasId }).$promise\n      .then((operation) => {\n        this.RolesAapiService.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_roles_add_alias_error', err, { tokenName: alias.name }));\n  }\n\n  addDashboard(serviceName, roleId, dashboard) {\n    return this.PermissionsApiService\n      .addDashboard({ serviceName, roleId, dashboardId: dashboard.dashboardId }).$promise\n      .then((operation) => {\n        this.RolesAapiService.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_roles_add_dashboard_error', err, { tokenName: dashboard.title }));\n  }\n\n  addIndex(serviceName, roleId, index) {\n    return this.PermissionsApiService\n      .addIndex({ serviceName, roleId, indexId: index.indexId }).$promise\n      .then((operation) => {\n        this.RolesAapiService.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_roles_add_index_error', err, { tokenName: index.name }));\n  }\n\n  addStream(serviceName, roleId, stream) {\n    return this.PermissionsApiService\n      .addStream({ serviceName, roleId, streamId: stream.streamId }).$promise\n      .then((operation) => {\n        this.RolesAapiService.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation);\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_roles_add_stream_error', err, { tokenName: stream.title }));\n  }\n\n  removePermission(serviceName, roleId, permission) {\n    return this.PermissionsApiService\n      .remove({ serviceName, roleId }, { permissionId: permission[0].permissionId }).$promise\n      .then(operation => this.LogsHelperService.handleOperation(\n        serviceName,\n        operation.data || operation,\n      ))\n      .catch(err => this.LogsHelperService.handleError('logs_remove_permission_error', err, { tokenName: permission[0].name || permission[0].title }));\n  }\n\n  getNewRole() {\n    return this.newRole;\n  }\n\n  getLogs() {\n    return this.LogsApiService.query().$promise\n      .then((logs) => {\n        const promises = logs.map(serviceName => this.getLogDetails(serviceName));\n        return this.$q.all(promises);\n      })\n      .catch(this.ServiceHelper.errorHandler('logs_get_error'));\n  }\n\n  getLogDetails(serviceName) {\n    return this.LogsApiService.logDetail({ serviceName }).$promise;\n  }\n\n  getQuota(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then((me) => {\n        const quota = {\n          max: me.total.maxNbRole,\n          mainOfferMax: me.offer.maxNbRole,\n          mainOfferCurrent: me.offer.curNbRole,\n          configured: me.total.curNbRole,\n          currentUsage: me.total.curNbRole * 100 / me.total.maxNbRole,\n        };\n        return quota;\n      }).catch(err => this.LogsHelperService.handleError('logs_roles_quota_get_error', err, {}));\n  }\n\n  getRoles(serviceName) {\n    return this.RolesApiService.query({ serviceName }).$promise\n      .then((roles) => {\n        const promises = roles.map(roleId => this.getRoleDetails(serviceName, roleId));\n        return this.$q.all(promises);\n      }).catch(err => this.LogsHelperService.handleError('logs_roles_get_error', err, {}));\n  }\n\n  getRoleDetails(serviceName, roleId) {\n    return this.RolesAapiService.get({ serviceName, roleId }).$promise;\n  }\n\n  getSubscribedOptions(serviceName) {\n    return this.LogsOptionsService.getSubscribedOptionsByType(\n      serviceName,\n      this.LogsConstants.ROLE_OPTION_REFERENCE,\n    );\n  }\n\n  addRole(serviceName, object) {\n    return this.RolesApiService.create({ serviceName }, object).$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_add_success', { name: object.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_role_add_error', err, { name: object.name }));\n  }\n\n  updateRole(serviceName, roleId, object) {\n    return this.RolesApiService.update({ serviceName, roleId }, object).$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_update_success', { name: object.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_role_update_error', err, { name: object.name }));\n  }\n\n  deleteRole(serviceName, role) {\n    return this.RolesApiService.remove({ serviceName, roleId: role.roleId }).$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_delete_success', { name: role.name });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_role_delete_error', err, { name: role.name }));\n  }\n\n  deleteModal(role) {\n    return this.ControllerHelper.modal.showDeleteModal({\n      titleText: this.$translate.instant('logs_role_modal_delete_title'),\n      textHtml: this.$translate.instant('logs_role_modal_delete_question', { name: role.name }),\n    });\n  }\n\n  createMember(serviceName, roleId, userDetails) {\n    return this.MembersApiService.create({ serviceName, roleId }, userDetails).$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_member_add_success', { name: userDetails.username });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_role_member_add_error', err, { name: userDetails.username }));\n  }\n\n  removeMember(serviceName, roleId, username) {\n    return this.MembersApiService.remove({ serviceName, roleId, username }).$promise\n      .then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_role_member_remove_success', { name: username });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_role_member_remove_error', err, { name: username }));\n  }\n\n  deleteMemberModal(username) {\n    return this.ControllerHelper.modal.showDeleteModal({\n      titleText: this.$translate.instant('logs_member_delete_title'),\n      textHtml: this.$translate.instant('logs_member_delete_question', { username }),\n    });\n  }\n\n  resetAllCache() {\n    this.RolesApiService.resetAllCache();\n    this.RolesAapiService.resetAllCache();\n    this.MembersApiService.resetAllCache();\n    this.AccountingAapiService.resetAllCache();\n  }\n}\n\nangular.module('managerApp').service('LogsRolesService', LogsRolesService);\n"]}