{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/cloud-consumption/consumption-chart.directive.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/cloud-consumption/consumption-chart.directive.js","mtime":1539717142365},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp')\n/**\n * A simple consumption chart directive using d3 js library for rendering.\n *\n * Example usage :\n *\n * var consumptionData = {\n *     data : [\n *         { timestamp: ..., value: ... },\n *         { timestamp: ..., value: ... },\n *         ...\n *     ],\n *     ymin : 0 (y axis minimum value OPTIONAL, default is minimum value of data series)\n *     ymax : 1 (y axis maximum value OPTIONAL, default is maximum value of data series)\n *     xmin : 0 (x axis minimum value OPTIONAL)\n *     xmax : 1 (x axis maximum value OPTIONAL)\n *     unit : \"Mb\" (y axis unit to be displayed OPTIONAL, default is none)\n *     timeScale : { unit: \"hours\", amount: 1, format: \"%H\" }\n *     yTicks : ticks count on y axis (OPTIONAL, default is 4)\n *     margin: {top: 10, right: 10, bottom: 10, left: 10} (chart margins, OPTIONAL)\n * };\n *\n * <div style=\"width: 400px; height: 300px\">\n *     <consumption-chart model=\"myConsumptionData\"></consumption-chart>\n * </div>\n *\n */\n.directive('consumptionChart', [\"$window\", function ($window) {\n  function Chart() {\n    this.width = 250;\n    this.height = 150;\n    this.textSpacing = 4; // default values, can be customized in model parameter\n\n    this.margin = {\n      top: 20,\n      right: 0,\n      bottom: 20,\n      left: 80\n    }; // d3js elements\n\n    this.x = null;\n    this.y = null;\n    this.xAxis = null;\n    this.barNow = null;\n    this.barFuture = null;\n    this.data = null; // d3js graphics\n\n    this.g = {\n      svg: null,\n      x: null,\n      y: null,\n      line: null,\n      barNow: null,\n      barFuture: null\n    };\n  }\n\n  Chart.prototype.init = function (d3, el) {\n    this.x = d3.scale.ordinal();\n    this.y = d3.scale.linear();\n    this.xAxis = d3.svg.axis().scale(this.x).orient('bottom');\n    this.g.svg = d3.select(el).append('svg').attr('class', 'cloud-consumption-chart');\n    this.g.barNow = this.g.svg.append('rect').attr('class', 'barNow');\n    this.g.barFuture = this.g.svg.append('rect').attr('class', 'barFuture');\n    this.g.line = this.g.svg.append('line').attr('class', 'line');\n    this.g.thresholdText = this.g.svg.append('text').attr('class', 'threshold-text');\n    this.g.thresholdAmount = this.g.svg.append('text').attr('class', 'threshold-amount-text');\n    this.g.barText1 = this.g.svg.append('text').attr('class', 'bar-text');\n    this.g.barText2 = this.g.svg.append('text').attr('class', 'bar-text');\n    this.g.x = this.g.svg.append('g').attr('class', 'axis');\n    this.g.y = this.g.svg.append('g').attr('class', 'axis');\n  };\n\n  Chart.prototype.resize = function () {\n    if (this.width > this.margin.left + this.margin.right && this.height > this.margin.top + this.margin.bottom) {\n      this.g.svg.attr({\n        width: this.width,\n        height: this.height\n      });\n      this.x.rangeRoundBands([0, this.width], 0.50, 0.70);\n      this.y.range([this.height - this.margin.bottom, this.margin.top, 0]);\n      this.g.x.attr('transform', \"translate(\".concat([0, this.y.range()[0]], \")\"));\n      this.g.y.attr('transform', \"translate(\".concat([this.x.range()[0], 0], \")\"));\n      this.g.barText1.attr('transform', \"translate(\".concat([this.x.rangeBand() / 2, 0], \")\"));\n      this.g.barText2.attr('transform', \"translate(\".concat([this.x.rangeBand() / 2, 0], \")\"));\n      this.update();\n    }\n  };\n\n  Chart.prototype.update = function () {\n    // refresh scale\n    this.g.x.call(this.xAxis);\n    this.g.barNow.attr('x', this.x(this.data.estimate.now.label)).attr('y', this.y(this.data.estimate.now.value)).attr('height', this.height - this.y(this.data.estimate.now.value) - this.margin.bottom).attr('width', this.x.rangeBand());\n    this.g.barText1.attr('x', this.x(this.data.estimate.now.label)).attr('y', this.y(this.data.estimate.now.value) - this.textSpacing).text(\"\".concat(this.data.estimate.now.value, \" \").concat(this.data.estimate.now.currencyCode)).attr('width', this.x.rangeBand());\n    this.g.barFuture.attr('x', this.x(this.data.estimate.endOfMonth.label)).attr('y', this.y(this.data.estimate.endOfMonth.value)).attr('height', this.height - this.y(this.data.estimate.endOfMonth.value) - this.margin.bottom).attr('width', this.x.rangeBand());\n    this.g.barText2.attr('x', this.x(this.data.estimate.endOfMonth.label)).attr('y', this.y(this.data.estimate.endOfMonth.value) - this.textSpacing).text(\"\".concat(this.data.estimate.endOfMonth.value, \" \").concat(this.data.estimate.endOfMonth.currencyCode)).attr('width', this.x.rangeBand());\n    this.g.thresholdText.attr('x', 20).attr('y', this.y(this.data.threshold.now.value)).text(this.data.threshold.now.label).attr('width', this.x.rangeBand());\n    this.g.thresholdAmount.attr('x', this.width).attr('y', this.y(this.data.threshold.now.value) - this.textSpacing).text(\"\".concat(this.data.threshold.now.value, \" \").concat(this.data.threshold.now.currencyCode)).attr('width', this.x.rangeBand());\n    this.g.line.attr('x1', this.x(this.data.estimate.now.label) - 16).attr('x2', this.width).attr('y1', this.y(this.data.threshold.now.value)).attr('y2', this.y(this.data.threshold.endOfMonth.value));\n  };\n\n  Chart.prototype.setModel = function (model) {\n    this.data = model;\n\n    var dataValues = _.values(model.estimate);\n\n    this.x.domain(dataValues.map(function (d) {\n      return d.label;\n    }));\n    var maxYDomainEstimate = d3.max(dataValues, function (d) {\n      return d.value;\n    });\n    var maxYDomainThreshold = d3.max(_.values(model.threshold), function (d) {\n      return d.value;\n    });\n\n    var maxYDomain = _.max([maxYDomainEstimate, maxYDomainThreshold]);\n\n    this.y.domain([0, maxYDomain * 1.20]);\n    this.margin = model.margin || this.margin;\n    this.resize();\n    this.update();\n  };\n\n  return {\n    restrict: 'E',\n    scope: {\n      model: '=model'\n    },\n    link: function link($scope, $element) {\n      var self = this;\n      self.d3 = $window.d3;\n\n      if (self.d3) {\n        var chart = new Chart();\n        chart.init(d3, $element[0]); // initialize new chart\n        // fill parent container on resize\n\n        $scope.$watch(function () {\n          if ($element.parent().width() > 0 && $element.parent().height() > 0) {\n            chart.width = $element.parent().width();\n            chart.height = $element.parent().height();\n          }\n\n          return chart.width + chart.height;\n        }, function () {\n          if (chart.data) {\n            chart.resize();\n          }\n        }); // update on model change\n\n        $scope.$watch('model', function (model) {\n          chart.setModel(model);\n        });\n      } else {\n        throw new Error('Missing D3.js dependency');\n      }\n    }\n  };\n}]);",null]}