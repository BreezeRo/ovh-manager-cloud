{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/graph/iplb-graph.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/graph/iplb-graph.controller.js","mtime":1539717142198},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerGraphCtrl {\n  constructor($stateParams, ControllerHelper, IpLoadBalancerConstant,\n    IpLoadBalancerMetricsService, moment) {\n    this.$stateParams = $stateParams;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerMetricsService = IpLoadBalancerMetricsService;\n    this.moment = moment;\n  }\n\n  $onInit() {\n    this.connLoader = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.getData('conn'),\n    });\n    this.reqmLoader = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.getData('reqm'),\n    });\n    this.offerLoader = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.IpLoadBalancerMetricsService\n        .getService(this.$stateParams.serviceName),\n    });\n\n    this.initGraph();\n    this.loadGraphs();\n  }\n\n  initGraph() {\n    this.data = {};\n    this.metricsList = this.IpLoadBalancerConstant.graphs;\n    this.options = {\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false,\n          },\n        }],\n        yAxes: [{\n          id: 'y-axe',\n          type: 'linear',\n          ticks: {\n            min: 0,\n            beginAtZero: true,\n          },\n        }],\n      },\n      elements: {\n        line: {\n          fill: 'bottom',\n          backgroundColor: '#59d2ef',\n          borderColor: '#00a2bf',\n          borderWidth: 4,\n        },\n        point: {\n          radius: 0,\n        },\n      },\n    };\n  }\n\n  loadGraphs() {\n    this.offerLoader.load().then((service) => {\n      let scales = this.IpLoadBalancerConstant.graphScales[service.offer];\n      if (!scales) {\n        scales = this.IpLoadBalancerConstant.graphScales.lb1;\n      }\n      this.scales = _.reduce(scales, (scalesParam, scale) => {\n        const scales = scalesParam; // eslint-disable-line\n        scales[scale] = this.IpLoadBalancerConstant.graphParams[scale];\n        return scales;\n      }, {});\n      this.scale = _.first(_.keys(this.scales));\n      this.connLoader.load();\n      this.reqmLoader.load();\n    });\n  }\n\n  refreshGraphs() {\n    this.connLoader.load();\n    this.reqmLoader.load();\n  }\n\n  getData(metric) {\n    const { downsample } = this.IpLoadBalancerConstant.graphParams[this.scale];\n    const downsampleAggregation = this.metric === 'conn' ? 'sum' : 'max';\n\n    return this.IpLoadBalancerMetricsService.getData(metric, this.scale, null, {\n      downsample: `${downsample}-${downsampleAggregation}`,\n    })\n      .then((data) => {\n        if (data.length && data[0].dps) {\n          return {\n            data: {\n              data: _.values(data[0].dps),\n              labels: this.humanizeLabels(_.keys(data[0].dps)),\n            },\n          };\n        }\n        return {};\n      });\n  }\n\n  humanizeLabels(labels) {\n    return labels.map(label => this.moment(label, 'X').format('MM/DD/YY - HH:mm:ss'));\n  }\n\n  onScaleChange() {\n    this.refreshGraphs();\n  }\n}\n\nangular.module('managerApp').controller('IpLoadBalancerGraphCtrl', IpLoadBalancerGraphCtrl);\n"]}