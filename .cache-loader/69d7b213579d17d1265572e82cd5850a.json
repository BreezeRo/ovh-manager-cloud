{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/add/logs-streams-add.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/add/logs-streams-add.controller.js","mtime":1539717142144},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsStreamsAddCtrl {\n  constructor($q, $state, $stateParams, LogsStreamsService, ControllerHelper, CloudMessage,\n    LogsConstants) {\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.serviceName = this.$stateParams.serviceName;\n    this.LogsStreamsService = LogsStreamsService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.LogsConstants = LogsConstants;\n    this.isEdit = false;\n    this.compressionAlgorithms = this.LogsStreamsService.getCompressionAlgorithms();\n    this.storageDurations = this.LogsStreamsService.getStorageDurations();\n    this.coldStoragePrice = { price: '' };\n    this.initLoaders();\n  }\n\n  /**\n   * initializes options list\n   *\n   * @memberof LogsStreamsHomeCtrl\n   */\n  initLoaders() {\n    this.options = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsStreamsService.getSubscribedOptions(this.serviceName),\n    });\n    this.options.load();\n\n    this.mainOffer = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsStreamsService.getMainOffer(this.serviceName),\n    });\n    this.catalog = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.LogsStreamsService.getOrderCatalog(this.ovhSubsidiary),\n    });\n    this.accountDetails = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsStreamsService.getAccountDetails(this.serviceName),\n    });\n\n    this.accountDetails.load().then(() => {\n      this.ovhSubsidiary = this.accountDetails.data.me.ovhSubsidiary;\n      this.$q.all([this.mainOffer.load(), this.catalog.load()]).then(() => {\n        if (this.mainOffer.data.planCode === this.LogsConstants.basicOffer && !this.isEdit) {\n          this.stream.data.webSocketEnabled = false;\n        }\n        const selectedCatalog = this.catalog.data.plans\n          .find(plan => plan.planCode === this.mainOffer.data.planCode);\n        const coldstorage = selectedCatalog.addonsFamily\n          .find(addon => addon.family === this.LogsConstants.COLDSTORAGE);\n        this.coldStoragePrice.price = coldstorage.addons[0].plan.details.pricings.default[0]\n          .price.text;\n      });\n    });\n\n    if (this.$stateParams.streamId) {\n      this.isEdit = true;\n      this.stream = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: () => this.LogsStreamsService\n          .getStream(this.serviceName, this.$stateParams.streamId),\n      });\n      this.stream.load();\n    } else {\n      this.isEdit = false;\n      this.stream = this.LogsStreamsService.getNewStream();\n    }\n  }\n\n  submit() {\n    if (this.isEdit) {\n      this.updateStream();\n    } else {\n      this.createStream();\n    }\n  }\n\n  /**\n   * update stream\n   *\n   * @memberof LogsStreamsHomeCtrl\n   */\n  updateStream() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.CloudMessage.flushChildMessage();\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsStreamsService.updateStream(this.serviceName, this.stream.data)\n        .then(() => this.$state.go('dbaas.logs.detail.streams'))\n        .catch(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    return this.saving.load();\n  }\n\n  /**\n   * create new stream\n   *\n   * @memberof LogsStreamsHomeCtrl\n   */\n  createStream() {\n    if (this.form.$invalid) {\n      return this.$q.reject();\n    }\n    this.CloudMessage.flushChildMessage();\n    this.saving = this.ControllerHelper.request.getHashLoader({\n      loaderFunction: () => this.LogsStreamsService.createStream(this.serviceName, this.stream.data)\n        .then(() => this.$state.go('dbaas.logs.detail.streams'))\n        .catch(() => this.ControllerHelper.scrollPageToTop()),\n    });\n    return this.saving.load();\n  }\n}\n\nangular.module('managerApp').controller('LogsStreamsAddCtrl', LogsStreamsAddCtrl);\n"]}