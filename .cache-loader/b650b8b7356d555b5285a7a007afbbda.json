{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/runabove/promise-task-state/promise-task-state.component.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/runabove/promise-task-state/promise-task-state.component.js","mtime":1539717142416},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').component('promiseTaskState', {\n  templateUrl: 'components/runabove/promise-task-state/promise-task-state.html',\n  controller: ['$timeout', 'CloudStorageContainerTasksRunner', function ($timeout, CloudStorageContainerTasksRunner) {\n    const self = this;\n\n    self.showDetails = false;\n    self.taskCount = NaN;\n    self.closeTimeout = null;\n    self.runner = CloudStorageContainerTasksRunner;\n\n    self.sumTasks = function () {\n      return CloudStorageContainerTasksRunner.countTotalTasks();\n    };\n\n    self.getGlobalProgress = function (state) {\n      let percents;\n      switch (state) {\n        case 'done':\n          percents = Math.round((CloudStorageContainerTasksRunner\n            .countDoneTasks() / self.sumTasks()) * 100);\n          break;\n        case 'error':\n          percents = Math.round((CloudStorageContainerTasksRunner\n            .countErrorTasks() / self.sumTasks()) * 100);\n          break;\n        case 'pending':\n          percents = Math.round((CloudStorageContainerTasksRunner\n            .countPendingTasks() / self.sumTasks()) * 100);\n          break;\n        default:\n          break;\n      }\n      if (state === 'done' && percents === 100) {\n        self.closeTimeout = $timeout(() => {\n          self.close();\n        }, 3000);\n      }\n      return percents;\n    };\n\n    self.show = function (state) {\n      if (self.showDetails === state) {\n        self.showDetails = false;\n        return;\n      }\n      self.showDetails = state;\n    };\n\n    // self.retry = function (task) {\n    //     Task.retry(task);\n    // };\n\n    // self.abort = function (task) {\n    //     Task.abort(task);\n    // };\n\n    self.close = function () {\n      if (self.closeTimeout) {\n        $timeout.cancel(self.closeTimeout);\n        self.closeTimeout = null;\n      }\n      CloudStorageContainerTasksRunner.flush();\n    };\n  }],\n});\n"]}