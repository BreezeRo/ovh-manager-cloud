{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/virtualMachine/add/cloud-project-compute-infrastructure-virtualMachine-add.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/virtualMachine/add/cloud-project-compute-infrastructure-virtualMachine-add.service.js","mtime":1539717374477},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectVirtualMachineAddService =\n/*#__PURE__*/\nfunction () {\n  CloudProjectVirtualMachineAddService.$inject = [\"$q\", \"$translate\", \"CloudFlavorService\", \"CloudImageService\", \"ControllerModalHelper\", \"OvhApiCloudProject\", \"OvhApiCloudProjectInstance\", \"OvhApiCloudProjectNetworkPrivateSubnet\"];\n\n  function CloudProjectVirtualMachineAddService($q, $translate, CloudFlavorService, CloudImageService, ControllerModalHelper, OvhApiCloudProject, OvhApiCloudProjectInstance, OvhApiCloudProjectNetworkPrivateSubnet) {\n    _classCallCheck(this, CloudProjectVirtualMachineAddService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudFlavorService = CloudFlavorService;\n    this.CloudImageService = CloudImageService;\n    this.ControllerModalHelper = ControllerModalHelper;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n    this.OvhApiCloudProjectInstance = OvhApiCloudProjectInstance;\n    this.OvhApiCloudProjectNetworkPrivateSubnet = OvhApiCloudProjectNetworkPrivateSubnet;\n  }\n\n  _createClass(CloudProjectVirtualMachineAddService, [{\n    key: \"getAugmentedImages\",\n    value: function getAugmentedImages(images) {\n      return _.map(_.uniq(images, 'id'), this.CloudImageService.constructor.augmentImage);\n    }\n  }, {\n    key: \"filterFlavorsByType\",\n    value: function filterFlavorsByType(flavors, type) {\n      var _this = this;\n\n      return _(flavors).filter({\n        available: true,\n        osType: type\n      }).map(function (flavor) {\n        return _this.CloudFlavorService.augmentFlavor(flavor);\n      }).filter({\n        diskType: 'ssd',\n        flex: false\n      }).value();\n    }\n  }, {\n    key: \"getImageApps\",\n\n    /* eslint-disable no-nested-ternary */\n    value: function getImageApps(images) {\n      return _.uniq(_.forEach(this.CloudImageService.constructor.getApps(images), function (app) {\n        _.set(app, 'appName', _.get(app, 'name', '').replace(/^[a-z0-9\\s]+ - /ig, '').replace(' - deprecated', ''));\n\n        delete app.region; // eslint-disable-line\n\n        delete app.id; // eslint-disable-line\n      }), 'name').sort(function (image1, image2) {\n        return image1.appName < image2.appName ? -1 : image1.appName > image2.appName ? 1 : 0;\n      });\n    }\n    /* eslint-enable no-nested-ternary */\n\n  }, {\n    key: \"getPrivateNetworksSubNets\",\n    value: function getPrivateNetworksSubNets(serviceName, privateNetworks) {\n      var _this2 = this;\n\n      var networkIds = [];\n      return _.chain(privateNetworks).map(_.property('id')).tap(function (ids) {\n        networkIds = ids;\n      }).map(function (networkId) {\n        return _this2.OvhApiCloudProjectNetworkPrivateSubnet.v6().query({\n          serviceName: serviceName,\n          networkId: networkId\n        }).$promise;\n      }).thru(function (promises) {\n        // .mapKeys on a more recent lodash.\n        var collection = {};\n\n        _.forEach(promises, function (promise, key) {\n          collection[networkIds[key]] = promise;\n        });\n\n        return _this2.$q.all(collection);\n      }).value().then(function (subNets) {\n        return subNets;\n      }).catch(function () {\n        return [];\n      });\n    }\n  }, {\n    key: \"getRegionsByImageType\",\n    value: function getRegionsByImageType(regions, allImages, imageType) {\n      if (this.CloudImageService.constructor.isSnapshot(imageType)) {\n        return _.filter(regions, function (region) {\n          return _.get(imageType, 'region', '') === region.microRegion.code;\n        });\n      }\n\n      var filteredImages = _.filter(_.cloneDeep(allImages), {\n        distribution: _.get(imageType, 'distribution'),\n        nameGeneric: _.get(imageType, 'nameGeneric'),\n        status: 'active'\n      });\n\n      var filteredRegions = _.uniq(_.map(filteredImages, function (image) {\n        return image.region;\n      }));\n\n      return _.filter(regions, function (region) {\n        return _.indexOf(filteredRegions, region.microRegion.code) > -1;\n      });\n    }\n  }, {\n    key: \"groupFlavorsByCategory\",\n    value: function groupFlavorsByCategory(flavors, flavorsTypes) {\n      var _this3 = this;\n\n      return _(flavorsTypes).chain().reduce(function (previousValues, flavorType) {\n        var flavorsOfCurrentFlavorType = _(flavors).filter({\n          type: flavorType\n        }).value();\n\n        if (_(flavorsOfCurrentFlavorType).isEmpty()) {\n          return previousValues;\n        }\n\n        var category = _this3.CloudFlavorService.getCategory(flavorType, true);\n\n        var categoryObject = _(previousValues).find({\n          category: category.id\n        });\n\n        var matchingFlavors = _(flavors).filter({\n          type: flavorType\n        }).value();\n\n        if (!categoryObject) {\n          return previousValues.concat({\n            category: category.id,\n            order: category.order,\n            flavors: matchingFlavors\n          });\n        }\n\n        categoryObject.flavors = categoryObject.flavors.concat(matchingFlavors).sort(function (a, b) {\n          return a.name.localeCompare(b.name, undefined, {\n            numeric: true,\n            sensitivity: 'base'\n          });\n        });\n        return previousValues;\n      }, []).sortBy('order').value();\n    }\n  }, {\n    key: \"hasVRack\",\n    value: function hasVRack(serviceName) {\n      var _this4 = this;\n\n      return this.OvhApiCloudProject.v6().vrack({\n        serviceName: serviceName\n      }).$promise.then(function () {\n        return true;\n      }).catch(function (err) {\n        if (_.get(err, 'status') === 404) {\n          return false;\n        }\n\n        return _this4.$q.reject(err);\n      });\n    }\n  }, {\n    key: \"openSshKeyRegionModal\",\n    value: function openSshKeyRegionModal(sshKey) {\n      return this.ControllerModalHelper.showConfirmationModal({\n        titleText: this.$translate.instant('cpcivm_add_step1_sshKey_regions_title'),\n        text: this.$translate.instant('cpcivm_add_step1_sshKey_regions_message', {\n          sshKey: sshKey\n        })\n      });\n    }\n  }, {\n    key: \"openQuotaModal\",\n    value: function openQuotaModal(type) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.ControllerModalHelper.showWarningModal({\n        title: this.$translate.instant(\"cpcivm_add_step3_disabled_\".concat(type)),\n        message: this.$translate.instant(\"cpcivm_add_step3_disabled_message_\".concat(type), params)\n      });\n    }\n  }, {\n    key: \"createVirtualMachine\",\n    value: function createVirtualMachine(serviceName, data) {\n      var postVm = {\n        flavorId: _.get(data, 'flavor.id'),\n        imageId: _.get(data, 'imageId.id'),\n        name: _.get(data, 'name', 'No Name'),\n        region: _.get(data, 'region.microRegion.code'),\n        sshKeyId: _.get(data, 'sshKey.id', undefined),\n        monthlyBilling: _.get(data, 'billingPeriod', '') === 'monthly',\n        userData: _.get(data, 'userData', undefined),\n        networks: _.get(data, 'networks', undefined)\n      };\n\n      if (data.number > 1) {\n        postVm.number = data.number;\n        return this.OvhApiCloudProjectInstance.v6().bulk({\n          serviceName: serviceName\n        }, postVm).$promise;\n      }\n\n      return this.OvhApiCloudProjectInstance.v6().save({\n        serviceName: serviceName\n      }, postVm).$promise;\n    }\n  }], [{\n    key: \"getFilteredFlavorsByRegion\",\n    value: function getFilteredFlavorsByRegion(flavors, regionCode) {\n      var filteredFlavors = _.uniq(_.remove(flavors, {\n        region: regionCode\n      }), 'name');\n\n      var usedFlavorNames = _.uniq(_.map(filteredFlavors, function (flavor) {\n        return flavor.name;\n      }));\n\n      var notAvailableFlavors = _.filter(flavors, function (flavor) {\n        return !_.include(usedFlavorNames, flavor.name);\n      });\n\n      var outOfRegionFlavors = _.map(_.uniq(notAvailableFlavors, 'name'), function (flavor) {\n        _.set(flavor, 'regions', _.map(_.filter(notAvailableFlavors, function (f) {\n          return f.name === flavor.name;\n        }), 'region'));\n\n        _.set(flavor, 'disabled', 'NOT_AVAILABLE');\n\n        delete flavor.region; // eslint-disable-line\n\n        delete flavor.price; // eslint-disable-line\n\n        return flavor;\n      });\n\n      return filteredFlavors.concat(outOfRegionFlavors);\n    }\n  }, {\n    key: \"getFilteredPrivateNetworksByRegion\",\n    value: function getFilteredPrivateNetworksByRegion(privateNetworks, regionCode) {\n      var subNets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return _.chain(privateNetworks).filter(function (network) {\n        if (!_.has(subNets, network.id)) {\n          return false;\n        }\n\n        return _.some(network.regions, 'region', regionCode);\n      }).sortBy('vlanId').map(function (network) {\n        var pad = Array(5).join('0');\n        return _.assign(network, {\n          vlanId: pad.substring(0, pad.length - network.vlanId.toString().length) + network.vlanId\n        });\n      }).value();\n    }\n  }, {\n    key: \"getMostRecentVm\",\n    value: function getMostRecentVm(vms) {\n      return _.filter(vms, {\n        status: 'ACTIVE'\n      }).sort(function (vm1, vm2) {\n        return new Date(vm2.created) - new Date(vm1.created);\n      })[0] || null;\n    }\n  }, {\n    key: \"groupRegionsByDatacenter\",\n    value: function groupRegionsByDatacenter(regions) {\n      var groupedByMacroRegions = _.groupBy(regions, 'macroRegion.code');\n\n      var groupedRegions = _.map(groupedByMacroRegions, function (microRegions) {\n        var region = _.cloneDeep(microRegions[0]);\n\n        region.dataCenters = microRegions;\n        delete region.microRegion;\n        delete region.disabled;\n        return region;\n      });\n\n      return groupedRegions;\n    }\n  }, {\n    key: \"roundBandwidthValue\",\n    value: function roundBandwidthValue(value) {\n      return Math.floor(value / 50) * 50;\n    }\n  }]);\n\n  return CloudProjectVirtualMachineAddService;\n}();\n\nangular.module('managerApp').service('CloudProjectVirtualMachineAddService', CloudProjectVirtualMachineAddService);",null]}