{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm-edit.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm-edit.controller.js","mtime":1539717142214},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerServerFarmEditCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerServerFarmEditCtrl.$inject = [\"$q\", \"$state\", \"$stateParams\", \"CloudMessage\", \"ControllerHelper\", \"IpLoadBalancerConstant\", \"IpLoadBalancerServerFarmService\", \"IpLoadBalancerVrackService\", \"IpLoadBalancerZoneService\"];\n\n  function IpLoadBalancerServerFarmEditCtrl($q, $state, $stateParams, CloudMessage, ControllerHelper, IpLoadBalancerConstant, IpLoadBalancerServerFarmService, IpLoadBalancerVrackService, IpLoadBalancerZoneService) {\n    _classCallCheck(this, IpLoadBalancerServerFarmEditCtrl);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.CloudMessage = CloudMessage;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerServerFarmService = IpLoadBalancerServerFarmService;\n    this.IpLoadBalancerVrackService = IpLoadBalancerVrackService;\n    this.IpLoadBalancerZoneService = IpLoadBalancerZoneService;\n    this.initLoaders();\n  }\n\n  _createClass(IpLoadBalancerServerFarmEditCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.zones = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerZoneService.getZonesSelectData(_this.$stateParams.serviceName);\n        }\n      });\n      this.privateNetworks = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerVrackService.getPrivateNetworks(_this.$stateParams.serviceName);\n        }\n      });\n      this.apiFarm = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerServerFarmService.getAllFarmsTypes(_this.$stateParams.serviceName).then(function (farms) {\n            var farm = _.find(farms, {\n              id: parseInt(_this.$stateParams.farmId, 10)\n            });\n\n            return _this.IpLoadBalancerServerFarmService.getServerFarm(_this.$stateParams.serviceName, _this.$stateParams.farmId, farm.type);\n          }).then(function (farm) {\n            return _this.parseFarm(farm);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.farm = {\n        balance: 'roundrobin',\n        port: 80,\n        probe: {\n          type: ''\n        }\n      };\n      this.saving = false;\n      this.protocol = 'http';\n      this.type = 'http';\n      this.protocols = this.IpLoadBalancerConstant.protocols;\n      this.balances = this.IpLoadBalancerConstant.balances;\n      this.stickinesses = this.IpLoadBalancerConstant.stickinesses;\n      this.probeTypes = this.IpLoadBalancerConstant.probeTypes;\n      this.portLimit = this.IpLoadBalancerConstant.portLimit;\n      this.zones.load();\n      this.privateNetworks.load();\n      this.updateStickinessList();\n\n      if (this.$stateParams.farmId) {\n        this.edition = true;\n        this.apiFarm.load();\n      }\n    }\n  }, {\n    key: \"isProtocolDisabled\",\n    value: function isProtocolDisabled(protocol) {\n      if (!this.edition) {\n        return false;\n      }\n\n      if (this.type === 'http' && /http/.test(protocol)) {\n        return false;\n      }\n\n      if (this.protocol === protocol) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onProtocolChange\",\n    value: function onProtocolChange() {\n      switch (this.protocol) {\n        case 'http':\n          this.type = 'http';\n          this.farm.port = 80;\n          break;\n\n        case 'https':\n          this.type = 'http';\n          this.farm.port = 443;\n          break;\n\n        case 'tcp':\n          this.type = 'tcp';\n          delete this.farm.port;\n          break;\n\n        case 'udp':\n          this.type = 'udp';\n          delete this.farm.port;\n          break;\n\n        case 'tls':\n          this.type = 'tcp';\n          delete this.farm.port;\n          break;\n\n        default:\n          break;\n      }\n\n      this.updateStickinessList();\n    }\n  }, {\n    key: \"updateStickinessList\",\n    value: function updateStickinessList() {\n      if (this.type === 'tcp') {\n        this.availableStickinesses = this.stickinesses.filter(function (stickiness) {\n          return stickiness !== 'cookie';\n        });\n      } else {\n        this.availableStickinesses = this.stickinesses;\n      }\n    }\n    /**\n     * Parse farm object from API and send it to form.\n     * @return parsed farm object\n     */\n\n  }, {\n    key: \"parseFarm\",\n    value: function parseFarm(farm) {\n      this.type = farm.type;\n      this.protocol = farm.type;\n\n      _.set(farm, 'port', parseInt(farm.port, 10));\n\n      if (!farm.probe || farm.probe && !farm.probe.type) {\n        _.set(farm, 'probe', {\n          type: ''\n        });\n      }\n\n      if (!farm.stickiness) {\n        _.set(farm, 'stickiness', 'none');\n      }\n\n      this.updateStickinessList();\n      this.farm = angular.copy(farm);\n      return farm;\n    }\n    /**\n     * Clean farm from form and send it to API.\n     * @return clean farm object\n     */\n\n  }, {\n    key: \"getCleanFarm\",\n    value: function getCleanFarm() {\n      var request = angular.copy(this.farm);\n      delete request.type;\n      delete request.zoneText;\n\n      if (request.stickiness === 'none') {\n        request.stickiness = null;\n      }\n\n      request.probe = this.getCleanProbe();\n\n      if (this.type === 'udp') {\n        delete request.balance;\n        delete request.stickiness;\n        delete request.probe;\n      }\n\n      return request;\n    }\n  }, {\n    key: \"getCleanProbe\",\n    value: function getCleanProbe() {\n      var request = angular.copy(this.farm);\n      var pickList = ['type', 'pattern', 'interval', 'negate'];\n\n      switch (request.probe.type) {\n        case 'http':\n          pickList.push('url');\n          pickList.push('port');\n          pickList.push('method');\n          pickList.push('match');\n          break;\n\n        case 'mysql':\n        case 'pgsql':\n        case 'smtp':\n          pickList.push('port');\n          break;\n\n        case 'tcp':\n          pickList.push('port');\n\n          if (_.includes(['default', 'contains', 'matches'], request.probe.match)) {\n            pickList.push('match');\n          } else {\n            request.probe.pattern = '';\n            request.probe.negate = null;\n          }\n\n          break;\n\n        case 'oco':\n          break;\n\n        default:\n          request.probe = {};\n      }\n\n      return _.pick(request.probe, pickList);\n    }\n  }, {\n    key: \"editProbe\",\n    value: function editProbe() {\n      var _this2 = this;\n\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/serverFarm/probe/iplb-server-farm-probe.html',\n          controller: 'IpLoadBalancerServerFarmProbeEditCtrl',\n          controllerAs: 'IpLoadBalancerServerFarmProbeEditCtrl',\n          resolve: {\n            availableProbes: function availableProbes() {\n              return _this2.IpLoadBalancerServerFarmService.getAvailableFarmProbes(_this2.$stateParams.serviceName);\n            },\n            farm: function farm() {\n              return _this2.farm;\n            },\n            edition: function edition() {\n              return _this2.edition;\n            }\n          }\n        }\n      }).then(function (probe) {\n        _.assign(_this2.farm, {\n          probe: probe\n        });\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this3 = this;\n\n      if (this.form.$invalid) {\n        return this.$q.reject();\n      }\n\n      this.saving = true;\n      this.CloudMessage.flushChildMessage();\n      return this.IpLoadBalancerServerFarmService.create(this.type, this.$stateParams.serviceName, this.getCleanFarm()).then(function () {\n        _this3.$state.go('network.iplb.detail.server-farm');\n      }).finally(function () {\n        _this3.saving = false;\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this4 = this;\n\n      if (this.form.$invalid) {\n        return this.$q.reject();\n      }\n\n      this.saving = true;\n      this.CloudMessage.flushChildMessage();\n      return this.IpLoadBalancerServerFarmService.update(this.type, this.$stateParams.serviceName, this.farm.farmId, this.getCleanFarm()).then(function () {\n        _this4.$state.go('network.iplb.detail.server-farm');\n      }).finally(function () {\n        _this4.saving = false;\n      });\n    }\n  }], [{\n    key: \"validateSelection\",\n    value: function validateSelection(value) {\n      return value && value !== '0';\n    }\n  }]);\n\n  return IpLoadBalancerServerFarmEditCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerServerFarmEditCtrl', IpLoadBalancerServerFarmEditCtrl);",null]}