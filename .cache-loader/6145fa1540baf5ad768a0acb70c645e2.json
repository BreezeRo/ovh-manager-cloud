{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/image.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/image.service.js","mtime":1539717141977},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["(() => {\n  const cloudApplicationList = [\n    'docker',\n    'plesk',\n    'kubernetes',\n    'swarm',\n    'cozycloud',\n    'wordpress',\n    'prestashop',\n    'lamp',\n    'cassandra',\n    'hadoop',\n    'mongodb',\n    'elasticsearch',\n    'gitlab',\n    'cpanel',\n    'spark',\n    'postgre',\n    'owncloud',\n    'sqlserver',\n    'ansible',\n    'rancheros',\n    'routeros',\n    'joomla',\n    'drupal',\n    'mariadb',\n    'kafka',\n    'hbase',\n    'marathon',\n    'mesos',\n    'pfsense',\n    'opensuse',\n    'dcos',\n    'openvpn',\n    'vestacp',\n    'virtualmin',\n    'datascience',\n    'deeplearning',\n    'rstudio',\n    'minikube',\n  ];\n\n  class CloudImageService {\n    static augmentImage(image) {\n      if (!image) {\n        return null;\n      }\n      const augmentedImage = _.cloneDeep(image);\n\n      if (_.includes(augmentedImage.tags, 'application')) {\n        augmentedImage.apps = true;\n        augmentedImage.applications = _.intersection(augmentedImage.tags, cloudApplicationList);\n      } else {\n        augmentedImage.apps = false;\n      }\n      if (image.flavorType) {\n        augmentedImage.flavorType = image.flavorType.split(',');\n      }\n      return augmentedImage;\n    }\n\n    static getImageTypes(images) {\n      return _.uniq(_.map(images, 'type'));\n    }\n\n    static getImagesByType(images, imagesTypes, region = null) {\n      const filteredImages = {};\n      const filter = { apps: false, status: 'active' };\n\n      if (_.isString(region)) {\n        filter.region = region;\n      }\n\n      _.forEach(imagesTypes, (imageType) => {\n        filter.type = imageType;\n        filteredImages[imageType] = _.filter(_.cloneDeep(images), filter);\n      });\n\n      return filteredImages;\n    }\n\n    static getApps(images, region = null) {\n      const filter = { apps: true, status: 'active' };\n\n      if (_.isString(region)) {\n        _.set(filter, 'region', region);\n      }\n\n      return _.filter(_.cloneDeep(images), filter);\n    }\n\n    /* eslint-disable no-nested-ternary */\n    groupImagesByType(images, imagesTypes, region = null) {\n      const filteredImages = this.constructor.getImagesByType(images, imagesTypes, region);\n      const groupedImages = {};\n\n      _.forEach(filteredImages, (list, type) => {\n        groupedImages[type] = _.groupBy(list, 'distribution');\n        _.forEach(groupedImages[type], (version, distribution) => {\n          groupedImages[type][distribution] = _.uniq(_.forEach(version, (image) => {\n            delete image.region; // eslint-disable-line\n            delete image.id; // eslint-disable-line\n          }), 'name').sort((image1, image2) => (image1.name > image2.name ? -1 : image1.name < image2.name ? 1 : 0));\n        });\n      });\n\n      return groupedImages;\n    }\n    /* eslint-enable no-nested-ternary */\n\n    static isSnapshot(image) {\n      return _.get(image, 'visibility', '') === 'private';\n    }\n  }\n\n  angular.module('managerApp').service('CloudImageService', CloudImageService);\n})();\n"]}