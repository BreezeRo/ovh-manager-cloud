{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/services/containers.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/services/containers.service.js","mtime":1539717142051},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').service('CloudStorageContainers', [\n  '$q',\n  'OvhApiCloudProjectStorage',\n  'CloudStorageContainersConfiguration',\n  'CloudStorageContainer',\n  function CloudStorageContainers($q, OvhApiCloudProjectStorage, storageContainerConfig,\n    storageContainer) {\n    const self = this;\n\n    /**\n     * Get the list of the containers.\n     * @param  {string} projectId    project id\n     * @return {Promise}\n     */\n    self.list = function (projectId) {\n      function saveNameAndRegion(container) {\n        const data = storageContainerConfig.containerMetaCache.get(projectId, container.id);\n        if (!data) {\n          storageContainerConfig.containerMetaCache.set(projectId, container.id, _.pick(container, ['name', 'region']));\n        }\n      }\n\n      return OvhApiCloudProjectStorage.v6().query({\n        projectId,\n      }).$promise\n        .then((containers) => {\n          // Cache name and region of each container\n          containers.forEach((container) => {\n            saveNameAndRegion(container);\n          });\n          return containers;\n        });\n    };\n\n    /**\n     * Create a container.\n     * @param  {string} projectId     project id\n     * @param  {string} containerName container name\n     * @param  {string} region        region\n     * @param  {string} type          storage type (swift_cname|swift_public|swift_private|pca)\n     * @return {Promise}\n     */\n    self.create = function (projectId, containerName, region, type) {\n      const data = {\n        containerName,\n        region,\n      };\n      let containerData = {};\n      let currentContainerId;\n\n      if (type === 'archive') {\n        data.archive = true;\n      }\n\n      return OvhApiCloudProjectStorage.v6()\n        .save({\n          projectId,\n        }, data).$promise\n        .then((result) => {\n          currentContainerId = result.id;\n          containerData = result;\n\n          // Make container a static hosting\n          if (type === 'static') {\n            return OvhApiCloudProjectStorage.v6().static({\n              projectId,\n              containerId: currentContainerId,\n            }, {}).$promise;\n          }\n\n          // Make container public\n          if (type === 'public') {\n            return storageContainer.setAsPublic(projectId, currentContainerId);\n          }\n\n          return $q.when();\n        })\n        .then(() => storageContainer.getMetaData(projectId, currentContainerId))\n        .then(metaData => angular.extend(containerData, metaData));\n    };\n\n    /**\n     * Delete a container.\n     * @param  {string} projectId   project id\n     * @param  {string} containerId container id\n     * @return {Promise}\n     */\n    self.delete = function (projectId, containerId) {\n      return OvhApiCloudProjectStorage.v6().get({\n        projectId,\n        containerId,\n      }).$promise\n        .then((containerData) => {\n          if (containerData.objects.length) {\n            return $q.reject('NON_EMPTY_CONTAINER');\n          }\n          return OvhApiCloudProjectStorage.v6().delete({\n            projectId,\n            containerId,\n          }).$promise;\n        });\n    };\n  }]);\n"]}