{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/openstackClient/cloud-project-compute-infrastructure-openstack-client.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/openstackClient/cloud-project-compute-infrastructure-openstack-client.service.js","mtime":1539717374456},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeInfrastructureOpenstackClientService {\n  constructor($q, $stateParams, $interval, OvhApiCloudProjectOpenstackClient,\n    OvhApiCloudProjectRegion, ServiceHelper) {\n    this.$q = $q;\n    this.$interval = $interval;\n    this.OvhApiCloudProjectOpenstackClient = OvhApiCloudProjectOpenstackClient;\n    this.OvhApiCloudProjectRegion = OvhApiCloudProjectRegion;\n    this.ServiceHelper = ServiceHelper;\n\n    this.ws = null;\n  }\n\n  setSession(session, term) {\n    if (!session) {\n      return this.$q.when();\n    }\n\n    this.session = session;\n    this.updateExpiresAt();\n\n    if (!term) {\n      return session;\n    }\n\n    return this.initWebSocket(session, term);\n  }\n\n  getSession({ serviceName, term }) {\n    return this.OvhApiCloudProjectOpenstackClient.v6().post({ serviceName }, {}).$promise\n      .then(session => this.setSession(session, term))\n      .catch(this.ServiceHelper.errorHandler('cpci_openstack_client_session_error', 'iaas.pci-project.compute.openstack-console'));\n  }\n\n  getRegions(serviceName) {\n    return this.OvhApiCloudProjectRegion.v6().query({ serviceName }).$promise\n      .catch(this.ServiceHelper.errorHandler('cpci_openstack_client_regions_error', 'iaas.pci-project.compute.openstack-console'));\n  }\n\n  sendAction(action) {\n    this.clear();\n    this.send(`${action}\\n`);\n  }\n\n  pasteAction(action) {\n    this.clear();\n    this.send(action);\n  }\n\n  updateExpiresAt() {\n    this.expiresAt = moment(this.session.expires).fromNow(true);\n  }\n\n  ping() {\n    this.updateExpiresAt();\n    this.ws.send('1');\n  }\n\n  initWebSocket(session, term) {\n    const defer = this.$q.defer();\n    let pingTimer;\n\n    if (!session) {\n      return defer.reject();\n    }\n\n    this.ws = new WebSocket(session.websocket);\n    this.ws.onopen = () => {\n      this.retry = false;\n      this.ws.opened = true;\n      pingTimer = this.$interval(() => this.ping(), 15 * 1000);\n      defer.resolve(session);\n    };\n\n    this.ws.onmessage = (event) => {\n      const data = event.data.slice(1);\n      switch (event.data[0]) {\n        case '0':\n          term.write(atob(data));\n          break;\n        default: break;\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (pingTimer) {\n        this.$interval.cancel(pingTimer);\n      }\n      if (this.success) {\n        return;\n      }\n      if (!this.retry && moment(this.session.expires).isAfter()) {\n        this.retry = true;\n        this.initWebSocket(session, term);\n        return;\n      }\n      this.ServiceHelper.errorHandler('cpci_openstack_client_session_closed', 'iaas.pci-project.compute.openstack-console')({ data: 'Expired Session' });\n      defer.reject();\n    };\n\n    this.ws.onerror = (err) => {\n      this.ServiceHelper.errorHandler('cpci_openstack_client_session_error', 'iaas.pci-project.compute.openstack-console')(err);\n      defer.reject(err);\n    };\n\n    return defer.promise;\n  }\n\n  close() {\n    this.success = true;\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n\n  send(data) {\n    if (!this.wsReady()) {\n      return;\n    }\n    this.ws.send(`0${data}`);\n  }\n\n  clear() {\n    // to clear the line before sending data\n    this.ws.send('0\\x15\\x0b');\n  }\n\n  setRegion(region) {\n    if (!this.wsReady()) {\n      return;\n    }\n    this.clear();\n    this.send(`export OS_REGION_NAME=${region}\\n`);\n  }\n\n  setConfig(config) {\n    if (!this.wsReady()) {\n      return;\n    }\n    this.ws.send(`2${JSON.stringify(config)}`);\n  }\n\n  wsReady() {\n    return this.ws && this.ws.opened;\n  }\n}\n\n\nangular.module('managerApp').service('CloudProjectComputeInfrastructureOpenstackClientService', CloudProjectComputeInfrastructureOpenstackClientService);\n"]}