{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/configure/compute-loadbalancer-configure.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/configure/compute-loadbalancer-configure.controller.js","mtime":1539717142028},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectComputeLoadbalancerConfigureCtrl =\n/*#__PURE__*/\nfunction () {\n  CloudProjectComputeLoadbalancerConfigureCtrl.$inject = [\"$anchorScroll\", \"$scope\", \"$state\", \"$stateParams\", \"$q\", \"$location\", \"$window\", \"$translate\", \"CloudProjectComputeLoadbalancerService\", \"OvhApiIpLoadBalancing\", \"OvhApiCloudProjectIplb\", \"OvhApiCloudProject\", \"ovhDocUrl\", \"CloudMessage\", \"IpLoadBalancerTaskService\", \"ControllerHelper\", \"CloudPoll\", \"ServiceHelper\"];\n\n  function CloudProjectComputeLoadbalancerConfigureCtrl($anchorScroll, $scope, $state, $stateParams, $q, $location, $window, $translate, CloudProjectComputeLoadbalancerService, OvhApiIpLoadBalancing, OvhApiCloudProjectIplb, OvhApiCloudProject, ovhDocUrl, CloudMessage, IpLoadBalancerTaskService, ControllerHelper, CloudPoll, ServiceHelper) {\n    _classCallCheck(this, CloudProjectComputeLoadbalancerConfigureCtrl);\n\n    this.$anchorScroll = $anchorScroll;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$q = $q;\n    this.$location = $location;\n    this.$window = $window;\n    this.$translate = $translate;\n    this.CloudProjectComputeLoadbalancerService = CloudProjectComputeLoadbalancerService;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.OvhApiCloudProjectIplb = OvhApiCloudProjectIplb;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n    this.ovhDocUrl = ovhDocUrl;\n    this.CloudMessage = CloudMessage;\n    this.IpLoadBalancerTaskService = IpLoadBalancerTaskService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudPoll = CloudPoll;\n    this.ServiceHelper = ServiceHelper;\n    this.serviceName = $stateParams.projectId;\n    this.loadbalancerId = $stateParams.loadbalancerId;\n    this.validate = $stateParams.validate;\n    this.loaders = {\n      loadbalancer: true,\n      table: {\n        server: false\n      },\n      form: {\n        loadbalancer: false\n      }\n    }; // Data\n\n    this.loadbalancer = {};\n    this.table = {\n      server: []\n    };\n    this.form = {\n      openstack: false,\n      protocole: 'HTTP',\n      servers: {}\n    };\n    this.toggle = {\n      updatedMessage: false\n    };\n  }\n\n  _createClass(CloudProjectComputeLoadbalancerConfigureCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      // Get loadbalancer pending tasks and define poller\n      this.tasks = this.ControllerHelper.request.getArrayLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerTaskService.getTasks(_this.loadbalancerId).then(function (tasks) {\n            return _.filter(tasks, function (task) {\n              return _.includes(['todo', 'doing'], task.status);\n            });\n          });\n        },\n        successHandler: function successHandler() {\n          return _this.startTaskPolling();\n        }\n      });\n      this.tasks.load();\n      var validatePromise; // Terminate validation if params exists\n\n      if (this.validate) {\n        this.loaders.loadbalancer = true;\n        validatePromise = this.OvhApiCloudProjectIplb.v6().validate({\n          serviceName: this.serviceName,\n          id: this.validate\n        }, {}).$promise.then(function () {\n          _this.$location.search('validate', null);\n\n          _this.toggle.updatedMessage = true;\n        }).catch(function (err) {\n          return _this.CloudMessage.error([_this.$translate.instant('cpc_loadbalancer_error'), err.data && err.data.message || ''].join(' '));\n        }).finally(function () {\n          _this.loaders.loadbalancer = false;\n        });\n        this.validate = '';\n      } else {\n        validatePromise = Promise.resolve('');\n      }\n\n      validatePromise.then(function () {\n        return _this.getLoadbalancer(true);\n      });\n      this.$scope.$on('$destroy', function () {\n        return _this.stopTaskPolling();\n      });\n      this.initGuides();\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      this.$state.go('iaas.pci-project.compute.loadbalancer');\n    }\n  }, {\n    key: \"initGuides\",\n    value: function initGuides() {\n      this.guides = {\n        horizon: this.ovhDocUrl.getDocUrl('g1773.creer_un_acces_a_horizon')\n      };\n    } // Get cloud servers to add in the loadbalancer\n\n  }, {\n    key: \"getServerList\",\n    value: function getServerList() {\n      var _this2 = this;\n\n      if (this.loaders.table.server) {\n        return this.$q.reject('servers already loading');\n      }\n\n      this.loaders.table.server = true;\n      return this.CloudProjectComputeLoadbalancerService.getServerList({\n        serviceName: this.serviceName,\n        loadbalancer: this.loadbalancer\n      }).then(function (_ref) {\n        var servers = _ref.servers,\n            attachedServers = _ref.attachedServers;\n        _this2.attachedServers = attachedServers;\n        _this2.form.servers = _.mapValues(_this2.attachedServers, function (e) {\n          return !!e;\n        });\n        _this2.table.server = servers;\n      }).catch(function () {\n        _this2.table.server = null;\n      }).finally(function () {\n        _this2.loaders.table.server = false;\n      });\n    }\n  }, {\n    key: \"configureAndDeployLoadbalancer\",\n    value: function configureAndDeployLoadbalancer() {\n      var _this3 = this;\n\n      if (this.loaders.form.loadbalancer) {\n        return this.$q.reject('already sending configuration');\n      }\n\n      this.loaders.form.loadbalancer = true;\n      var configurePromise = this.$q.resolve(); // Configure the HTTP(80) loadbalancer\n\n      var configLoadBalancer = _.values(this.form.servers).length && _.reduce(this.form.servers, function (res, value) {\n        return res && value;\n      }, true) || _.values(this.attachedServers).length > 0;\n\n      if (this.loadbalancer.status !== 'custom' && this.loadbalancer.status !== 'unavailable' && configLoadBalancer) {\n        if (this.loadbalancer.status === 'available') {\n          // Create farm and front\n          configurePromise = configurePromise.then(function () {\n            return _this3.OvhApiIpLoadBalancing.Farm().Http().v6().post({\n              serviceName: _this3.loadbalancerId\n            }, {\n              displayName: 'PublicCloud',\n              port: 80,\n              zone: 'all'\n            }).$promise;\n          }).then(function (farm) {\n            _this3.loadbalancer.farm = farm;\n          }).then(function () {\n            return _this3.OvhApiIpLoadBalancing.Frontend().Http().v6().post({\n              serviceName: _this3.loadbalancerId\n            }, {\n              displayName: 'PublicCloud',\n              port: 80,\n              zone: 'all',\n              defaultFarmId: _this3.loadbalancer.farm.farmId\n            }).$promise;\n          }).then(function (frontend) {\n            _this3.loadbalancer.frontend = frontend;\n          });\n        } // Add or remove servers\n\n\n        var modified = false;\n\n        _.forEach(this.form.servers, function (enable, ip) {\n          var server = _.find(_this3.table.server, {\n            ip: ip\n          });\n\n          var displayName = server ? server.label : null;\n\n          if (enable && !_this3.attachedServers[ip]) {\n            modified = true;\n            configurePromise = configurePromise.then(function () {\n              return _this3.OvhApiIpLoadBalancing.Farm().Http().Server().v6().post({\n                serviceName: _this3.loadbalancerId,\n                farmId: _this3.loadbalancer.farm.farmId\n              }, {\n                displayName: displayName,\n                port: 80,\n                address: ip,\n                status: 'active'\n              }).$promise;\n            });\n          }\n\n          if (!enable && _this3.attachedServers[ip]) {\n            modified = true;\n            configurePromise = configurePromise.then(function () {\n              return _this3.OvhApiIpLoadBalancing.Farm().Http().Server().v6().delete({\n                serviceName: _this3.loadbalancerId,\n                serverId: _this3.attachedServers[ip].serverId,\n                farmId: _this3.loadbalancer.farm.farmId\n              }).$promise;\n            });\n          }\n        }); // Deploy configuration\n\n\n        if (modified) {\n          configurePromise = configurePromise.then(function () {\n            return _this3.OvhApiIpLoadBalancing.v6().refresh({\n              serviceName: _this3.loadbalancerId\n            }, {}).$promise;\n          }).then(function () {\n            return _this3.tasks.load();\n          }).then(function () {\n            return _this3.getLoadbalancer(true);\n          });\n        }\n      } // Configure the openstack importation\n\n\n      if (this.form.openstack && (!this.loadBalancerImported || this.loadBalancerImported.status !== 'validated')) {\n        // Need to remove old import to recreate it\n        if (this.loadBalancerImported) {\n          configurePromise = configurePromise.then(function () {\n            return _this3.OvhApiCloudProjectIplb.v6().delete({\n              serviceName: _this3.serviceName,\n              id: _this3.loadBalancerImported.id\n            }).$promise;\n          });\n        }\n\n        configurePromise = configurePromise.then(function () {\n          return _this3.OvhApiCloudProjectIplb.v6().post({\n            serviceName: _this3.serviceName\n          }, {\n            ipLoadbalancingServiceName: _this3.loadbalancerId,\n            redirection: \"\".concat(_this3.$location.hash('').absUrl().replace(/\\?.*$/, ''), \"?validate=%id\")\n          }).$promise.then(function (result) {\n            _this3.$window.location.href = result.validationUrl;\n            _this3.loaders.form.redirect = true;\n          });\n        });\n      } else if (!this.form.openstack && this.loadBalancerImported) {\n        configurePromise = configurePromise.then(function () {\n          return _this3.OvhApiCloudProjectIplb.v6().delete({\n            serviceName: _this3.serviceName,\n            id: _this3.loadBalancerImported.id\n          }).$promise;\n        }).then(function () {\n          _this3.loadBalancerImported = null;\n          _this3.form.openstack = false;\n        });\n      }\n\n      return configurePromise.then(function () {\n        _this3.toggle.updatedMessage = true;\n      }).catch(function (err) {\n        return _this3.CloudMessage.error([_this3.$translate.instant('cpc_loadbalancer_error'), err.data && err.data.message || ''].join(' '));\n      }).finally(function () {\n        _this3.$location.hash('compute-loadbalancer-configure');\n\n        _this3.$anchorScroll();\n\n        _this3.loaders.form.loadbalancer = false;\n      });\n    }\n  }, {\n    key: \"getLoadbalancer\",\n    value: function getLoadbalancer(clearCache) {\n      var _this4 = this;\n\n      this.loaders.loadbalancer = true;\n\n      if (clearCache) {\n        this.OvhApiCloudProjectIplb.v6().resetQueryCache();\n        this.OvhApiIpLoadBalancing.v6().resetQueryCache();\n      }\n\n      return this.$q.all({\n        loadbalancer: this.CloudProjectComputeLoadbalancerService.getLoadbalancer(this.loadbalancerId),\n        loadbalancersImported: this.CloudProjectComputeLoadbalancerService.getLoadbalancersImported(this.serviceName)\n      }).then(function (_ref2) {\n        var loadbalancer = _ref2.loadbalancer,\n            loadbalancersImported = _ref2.loadbalancersImported;\n        _this4.loadbalancer = loadbalancer;\n        _this4.loadBalancerImported = loadbalancersImported[_this4.loadbalancer.serviceName];\n\n        if (!_this4.loadBalancerImported) {\n          return;\n        }\n\n        if (_this4.loadBalancerImported.status === 'validated') {\n          _this4.form.openstack = true;\n        }\n      }).then(function () {\n        _this4.loaders.loadbalancer = false;\n      }).then(function () {\n        return _this4.getServerList();\n      }).catch(function (err) {\n        _this4.loadbalancer = null;\n\n        _this4.CloudMessage.error([_this4.$translate.instant('cpc_loadbalancer_error'), err.data && err.data.message || ''].join(' '));\n      });\n    }\n  }, {\n    key: \"startTaskPolling\",\n    value: function startTaskPolling() {\n      var _this5 = this;\n\n      this.stopTaskPolling();\n      this.poller = this.CloudPoll.pollArray({\n        items: this.tasks.data,\n        pollFunction: function pollFunction(task) {\n          return _this5.IpLoadBalancerTaskService.getTask(_this5.loadbalancerId, task.id);\n        },\n        stopCondition: function stopCondition(task) {\n          var res = _.includes(['done', 'error'], task.status); // Remove terminated tasks\n\n\n          if (res) {\n            _this5.tasks.data = _.filter(_this5.tasks.data, function (t) {\n              return t.id !== task.id;\n            });\n          }\n\n          return res;\n        }\n      });\n    }\n  }, {\n    key: \"stopTaskPolling\",\n    value: function stopTaskPolling() {\n      if (this.poller) {\n        this.poller.kill();\n      }\n    }\n  }]);\n\n  return CloudProjectComputeLoadbalancerConfigureCtrl;\n}();\n\nangular.module('managerApp').controller('CloudProjectComputeLoadbalancerConfigureCtrl', CloudProjectComputeLoadbalancerConfigureCtrl);",null]}