{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/iplb-action.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/iplb-action.service.js","mtime":1539717142203},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerActionService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerActionService.$inject = [\"ControllerHelper\"];\n\n  function IpLoadBalancerActionService(ControllerHelper) {\n    _classCallCheck(this, IpLoadBalancerActionService);\n\n    this.ControllerHelper = ControllerHelper;\n  }\n\n  _createClass(IpLoadBalancerActionService, [{\n    key: \"showFailoverIpDetail\",\n    value: function showFailoverIpDetail(_serviceName) {\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/modal/failover-ip/iplb-failover-ip-detail.html',\n          controller: 'IpLoadBalancerFailoverIpDetailCtrl',\n          controllerAs: 'IpLoadBalancerFailoverIpDetailCtrl',\n          resolve: {\n            serviceName: function serviceName() {\n              return _serviceName;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"showNatIpDetail\",\n    value: function showNatIpDetail(_serviceName2) {\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/modal/nat-ip/iplb-nat-ip-detail.html',\n          controller: 'IpLoadBalancerNatIpDetailCtrl',\n          controllerAs: 'IpLoadBalancerNatIpDetailCtrl',\n          resolve: {\n            serviceName: function serviceName() {\n              return _serviceName2;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"cipherChange\",\n    value: function cipherChange(_serviceName3, successHandler) {\n      this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/modal/cipher/iplb-cipher-change.html',\n          controller: 'IpLoadBalancerCipherChangeCtrl',\n          controllerAs: 'IpLoadBalancerCipherChangeCtrl',\n          resolve: {\n            serviceName: function serviceName() {\n              return _serviceName3;\n            }\n          }\n        },\n        successHandler: successHandler\n      });\n    }\n  }, {\n    key: \"deleteFrontend\",\n    value: function deleteFrontend(_serviceName4, _frontend) {\n      return this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/frontends/delete/iplb-frontends-delete.html',\n          controller: 'IpLoadBalancerFrontendDeleteCtrl',\n          controllerAs: 'IpLoadBalancerFrontendDeleteCtrl',\n          backdrop: 'static',\n          resolve: {\n            serviceName: function serviceName() {\n              return _serviceName4;\n            },\n            frontend: function frontend() {\n              return _frontend;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"deleteFarm\",\n    value: function deleteFarm(_serviceName5, _farm) {\n      return this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/serverFarm/delete/iplb-server-farm-delete.html',\n          controller: 'IpLoadBalancerServerFarmDeleteCtrl',\n          controllerAs: 'IpLoadBalancerServerFarmDeleteCtrl',\n          backdrop: 'static',\n          resolve: {\n            serviceName: function serviceName() {\n              return _serviceName5;\n            },\n            farm: function farm() {\n              return _farm;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"deleteServer\",\n    value: function deleteServer(_serviceName6, _farm2, _server) {\n      return this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/server/delete/iplb-server-delete.html',\n          controller: 'IpLoadBalancerServerDeleteCtrl',\n          controllerAs: 'IpLoadBalancerServerDeleteCtrl',\n          backdrop: 'static',\n          resolve: {\n            serviceName: function serviceName() {\n              return _serviceName6;\n            },\n            farm: function farm() {\n              return _farm2;\n            },\n            server: function server() {\n              return _server;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"updateCertificate\",\n    value: function updateCertificate(_serviceName7, _ssl) {\n      return this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/sslCertificate/update/iplb-ssl-certificate-update.html',\n          controller: 'IpLoadBalancerSslCertificateUpdateCtrl',\n          controllerAs: 'IpLoadBalancerSslCertificateUpdateCtrl',\n          resolve: {\n            serviceName: function serviceName() {\n              return _serviceName7;\n            },\n            ssl: function ssl() {\n              return _ssl;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"deleteCertificate\",\n    value: function deleteCertificate(_serviceName8, _ssl2) {\n      return this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/iplb/sslCertificate/delete/iplb-ssl-certificate-delete.html',\n          controller: 'IpLoadBalancerSslCertificateDeleteCtrl',\n          controllerAs: 'IpLoadBalancerSslCertificateDeleteCtrl',\n          backdrop: 'static',\n          resolve: {\n            serviceName: function serviceName() {\n              return _serviceName8;\n            },\n            ssl: function ssl() {\n              return _ssl2;\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return IpLoadBalancerActionService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerActionService', IpLoadBalancerActionService);",null]}