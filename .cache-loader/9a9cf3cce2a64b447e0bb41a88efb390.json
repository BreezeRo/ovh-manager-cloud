{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/archives/streams-archives.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/archives/streams-archives.service.js","mtime":1539717142149},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsStreamsArchivesService =\n/*#__PURE__*/\nfunction () {\n  LogsStreamsArchivesService.$inject = [\"$http\", \"$q\", \"LogsConstants\", \"OvhApiDbaas\", \"ServiceHelper\"];\n\n  function LogsStreamsArchivesService($http, $q, LogsConstants, OvhApiDbaas, ServiceHelper) {\n    _classCallCheck(this, LogsStreamsArchivesService);\n\n    this.$http = $http;\n    this.$q = $q;\n    this.LogsConstants = LogsConstants;\n    this.ArchivesApiService = OvhApiDbaas.Logs().Archive().v6();\n    this.ServiceHelper = ServiceHelper;\n  }\n  /**\n   * Get the IDs of all archives\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @returns promise which will resolve with a list of archive IDs\n   * @memberof LogsStreamsArchivesService\n   */\n\n\n  _createClass(LogsStreamsArchivesService, [{\n    key: \"getArchiveIds\",\n    value: function getArchiveIds(serviceName, streamId) {\n      return this.ArchivesApiService.query({\n        serviceName: serviceName,\n        streamId: streamId\n      }).$promise.catch(this.ServiceHelper.errorHandler('streams_archives_ids_loading_error'));\n    }\n    /**\n     * Gets the archive objects corresponding to the archiveIds\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @param {any} archiveIds - list of archive IDs for which archive objects are to be fetched\n     * @returns promise which will be resolve with the list of archives\n     * @memberof LogsStreamsArchivesService\n     */\n\n  }, {\n    key: \"getArchives\",\n    value: function getArchives(serviceName, streamId, archiveIds) {\n      var _this = this;\n\n      return this.getArchiveDetails(serviceName, streamId, archiveIds).then(function (archives) {\n        archives.forEach(function (archive) {\n          return _this.transformArchive(archive);\n        });\n        return archives;\n      }).catch(this.ServiceHelper.errorHandler('streams_archives_loading_error'));\n    }\n    /**\n     * Gets the archive objects corresponding to the archiveIds\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @param {any} archiveIds - list of archive IDs for which archive objects are to be fetched\n     * @returns promise which will be resolve with the list of archives\n     * @memberof LogsStreamsArchivesService\n     */\n\n  }, {\n    key: \"getArchiveDetails\",\n    value: function getArchiveDetails(serviceName, streamId, archiveIds) {\n      var _this2 = this;\n\n      var promises = archiveIds.map(function (archiveId) {\n        return _this2.getArchive(serviceName, streamId, archiveId);\n      });\n      return this.$q.all(promises);\n    }\n    /**\n     * Gets the archive object corresponding to the archiveId\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @param {any} archiveId - the archive ID for which the archive object is to be fetched\n     * @returns promise which will resolve with the archive\n     * @memberof LogsStreamsArchivesService\n     */\n\n  }, {\n    key: \"getArchive\",\n    value: function getArchive(serviceName, streamId, archiveId) {\n      return this.ArchivesApiService.get({\n        serviceName: serviceName,\n        streamId: streamId,\n        archiveId: archiveId\n      }).$promise;\n    }\n    /**\n     * Gets the download URL for an archive\n     *\n     * @param {any} serviceName\n     * @param {any} streamId\n     * @returns promise which will be resolve with the URL information for the archive\n     * @memberof LogsStreamsArchivesService\n     */\n\n  }, {\n    key: \"getDownloadUrl\",\n    value: function getDownloadUrl(serviceName, streamId, archiveId) {\n      return this.ArchivesApiService.url({\n        serviceName: serviceName,\n        streamId: streamId,\n        archiveId: archiveId,\n        expirationInSeconds: this.LogsConstants.expirationInSeconds\n      }).$promise.then(function (response) {\n        return response.data;\n      });\n    }\n    /**\n     * Transforms the archive by adding additional information to it\n     *\n     * @param {any} archive\n     * @memberof LogsStreamsArchivesService\n     */\n\n  }, {\n    key: \"transformArchive\",\n    value: function transformArchive(archive) {\n      _.set(archive, 'retrievalStateType', this.LogsConstants.stateType[archive.retrievalState]);\n    }\n  }]);\n\n  return LogsStreamsArchivesService;\n}();\n\nangular.module('managerApp').service('LogsStreamsArchivesService', LogsStreamsArchivesService);",null]}