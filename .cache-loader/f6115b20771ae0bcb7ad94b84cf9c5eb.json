{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/serverFarm/iplb-server-farm.service.js","mtime":1539717142217},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerServerFarmService {\n  constructor($q, $translate, IpLoadBalancerConfigurationService, OvhApiIpLoadBalancing,\n    ServiceHelper, RegionService) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.IpLoadBalancerConfigurationService = IpLoadBalancerConfigurationService;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n\n    this.Farm = {\n      all: this.IpLoadBalancing.Farm().v6(),\n      tcp: this.IpLoadBalancing.Farm().Tcp().v6(),\n      udp: this.IpLoadBalancing.Farm().Udp().v6(),\n      http: this.IpLoadBalancing.Farm().Http().v6(),\n    };\n\n    this.Server = {\n      tcp: this.IpLoadBalancing.Farm().Tcp().Server().v6(),\n      udp: this.IpLoadBalancing.Farm().Udp().Server().v6(),\n      http: this.IpLoadBalancing.Farm().Http().Server().v6(),\n    };\n  }\n\n  getAvailableFarmProbes(serviceName) {\n    return this.IpLoadBalancing.v6().availableFarmProbes({ serviceName })\n      .$promise\n      .catch(this.ServiceHelper.errorHandler('iplb_farm_edit_probe_info_error'));\n  }\n\n  getServerFarms(serviceName, networkId) {\n    return this.Farm.all.query({ serviceName, vrackNetworkId: networkId })\n      .$promise\n      .then((farms) => {\n        const promises = _.map(farms, farm => this.getServerFarm(serviceName, farm.id, farm.type));\n        return this.$q.all(promises);\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_farm_list_loading_error'));\n  }\n\n  getServerFarm(serviceName, farmId, type) {\n    return this.Farm[type].get({ serviceName }, { farmId })\n      .$promise\n      .then((farm) => {\n        _.set(farm, 'type', type);\n        _.set(farm, 'zoneText', this.RegionService.getRegion(farm.zone));\n        return farm;\n      });\n  }\n\n  getAllFarmsTypes(serviceName) {\n    return this.Farm.all.query({ serviceName })\n      .$promise;\n  }\n\n  getServerFarmServers(serviceName, farmId, type) {\n    return this.Server[type].query({ serviceName, farmId })\n      .$promise\n      .then((serverIds) => {\n        const promises = _.map(serverIds, serverId => this.Server[type]\n          .get({ serviceName, farmId, serverId })\n          .$promise\n          .then((server) => {\n            if (!server.serverState) {\n              _.set(server, 'serverState', []);\n            }\n            return server;\n          }));\n        return this.$q.all(promises);\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_farm_server_list_loading_error'));\n  }\n\n  create(type, serviceName, farm) {\n    return this.Farm[type].post({ serviceName }, farm)\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_farm_add_success'))\n      .then(() => this.Farm.all.resetQueryCache())\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_farm_add_error'));\n  }\n\n  update(type, serviceName, farmId, farm) {\n    return this.Farm[type].put({\n      serviceName,\n      farmId,\n    }, farm)\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_farm_update_success'))\n      .then(() => this.Farm.all.resetQueryCache())\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_farm_update_error'));\n  }\n\n  delete(type, serviceName, farmId) {\n    return this.Farm[type].delete({\n      serviceName,\n      farmId,\n    })\n      .$promise\n      .then(this.ServiceHelper.successHandler('iplb_farm_delete_success'))\n      .then(() => this.Farm.all.resetQueryCache())\n      .then(() => this.IpLoadBalancerConfigurationService.showRefreshWarning())\n      .catch(this.ServiceHelper.errorHandler('iplb_farm_delete_error'));\n  }\n\n  humanizeBalance(balance) {\n    if (!balance) {\n      return '-';\n    }\n\n    return this.$translate.instant(`iplb_farm_balance_${balance}`);\n  }\n\n  humanizeStickiness(stickiness) {\n    if (!stickiness) {\n      return this.$translate.instant('iplb_farm_stickiness_none');\n    }\n\n    return this.$translate.instant(`iplb_farm_stickiness_${stickiness}`);\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerServerFarmService', IpLoadBalancerServerFarmService);\n"]}