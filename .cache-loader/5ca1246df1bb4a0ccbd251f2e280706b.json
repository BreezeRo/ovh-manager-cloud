{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/home/iplb-home.service.js","mtime":1539717142202},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerHomeService {\n  constructor($q, SidebarMenu, IpLoadBalancerCipherService, OvhApiIpLoadBalancing, RegionService,\n    ServiceHelper) {\n    this.$q = $q;\n    this.SidebarMenu = SidebarMenu;\n    this.IpLoadBalancerCipherService = IpLoadBalancerCipherService;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  getInformations(serviceName) {\n    return this.$q.all({\n      configuration: this.OvhApiIpLoadBalancing.v6().get({ serviceName }).$promise,\n      failoverIp: this.OvhApiIpLoadBalancing.v6().failoverIp({ serviceName }).$promise,\n      natIp: this.OvhApiIpLoadBalancing.v6().natIp({ serviceName }).$promise,\n    })\n      .then(response => ({\n        ipV4: response.configuration.ipLoadbalancing,\n        ipV6: response.configuration.ipv6,\n        failoverIp: response.failoverIp,\n        natIp: response.natIp,\n      }))\n      .catch(this.ServiceHelper.errorHandler('iplb_information_loading_error'));\n  }\n\n  getConfiguration(serviceName) {\n    return this.OvhApiIpLoadBalancing.v6().get({ serviceName })\n      .$promise\n      .then((response) => {\n        response.displayName = response.displayName || response.serviceName;\n        response.sslConfiguration = this.IpLoadBalancerCipherService\n          .transformCipher(response.sslConfiguration);\n        return response;\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_configuration_loading_error'));\n  }\n\n  getUsage(serviceName) {\n    return this.OvhApiIpLoadBalancing.Quota().v6().query({ serviceName })\n      .$promise\n      .then(zones => this.$q.all(zones.map(zone => this.getUsageForZone(serviceName, zone))))\n      .then(quotas => quotas.map((quota) => {\n        _.set(quota, 'region', this.RegionService.getRegion(quota.zone));\n        return quota;\n      }))\n      .catch(this.ServiceHelper.errorHandler('iplb_usage_loading_error'));\n  }\n\n  getUsageForZone(serviceName, zoneName) {\n    return this.OvhApiIpLoadBalancing.Quota().v6().get({\n      serviceName,\n      zoneName,\n    }).$promise;\n  }\n\n  updateQuota(serviceName, zoneName, alert) {\n    return this.OvhApiIpLoadBalancing.Quota().v6().put({\n      serviceName,\n      zoneName,\n    }, {\n      alert,\n    }).$promise\n      .catch(this.ServiceHelper.errorHandler('iplb_utilisation_update_alert_error'));\n  }\n\n  updateName(serviceName, newName) {\n    return this.OvhApiIpLoadBalancing.v6().put({ serviceName }, { displayName: newName })\n      .$promise\n      .then((response) => {\n        this.getConfiguration(serviceName)\n          .then(configuration => this.changeMenuTitle(\n            serviceName,\n            configuration.displayName || serviceName,\n          ));\n        return response;\n      })\n      .catch(this.ServiceHelper.errorHandler('iplb_modal_name_change_updating_error'));\n  }\n\n  changeMenuTitle(serviceName, displayName) {\n    const menuItem = this.SidebarMenu.getItemById(serviceName);\n    if (menuItem) {\n      menuItem.title = displayName;\n    }\n  }\n\n  getSubscription(serviceName) {\n    return this.$q.all({\n      configuration: this.OvhApiIpLoadBalancing.v6().get({ serviceName }).$promise,\n      serviceInfos: this.OvhApiIpLoadBalancing.v6().serviceInfos({ serviceName }).$promise,\n    })\n      .then(response => _.extend(response.serviceInfos, { offer: response.configuration.offer }))\n      .catch(this.ServiceHelper.errorHandler('iplb_subscription_loading_error'));\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerHomeService', IpLoadBalancerHomeService);\n"]}