{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/infrastructure/internet/internet.factory.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/infrastructure/internet/internet.factory.js","mtime":1539717142383},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').factory('CloudProjectComputeInfraInternetFactory',\n  (CloudProjectComputeInfraIpFactory, OrderedHashFactory) => {\n    /**\n     *  Defines a cloud project compute infrastructure internet\n     *\n     *  @param    {Object}  optionsParam\n     *                      Options for creating a new CloudProjectComputeInfraInternet\n     *  @param    {Array}   optionsParam.ipList\n     *                      List of ips present in CloudProjectComputeInfraInternet instance\n     */\n    const InternetFactory = (function () {\n      return function CloudProjectComputeInfraInternetFactory(optionsParam) {\n        const self = this;\n        let options = optionsParam;\n\n        if (!options) {\n          options = {};\n        }\n\n        this.serviceName = options.serviceName || null;\n        this.ipList = new OrderedHashFactory(); // TODO : make it an array of OrderedHashFactory\n\n        // Init le internet\n        if (options.ipList && options.ipList.length) {\n          angular.forEach(options.ipList, (ip) => {\n            self.addIpToList(ip);\n          });\n        }\n      };\n    }());\n\n    // ///////////////////////\n    // /     FUNCTIONS      //\n    // ///////////////////////\n\n    /**\n     *  Check if ip is already an instance or an options object\n     */\n    function checkIp(ip) {\n      return (ip instanceof CloudProjectComputeInfraIpFactory.public\n        || ip instanceof CloudProjectComputeInfraIpFactory.failover)\n        ? ip\n        : new CloudProjectComputeInfraIpFactory[ip.type](ip);\n    }\n\n    // ///////////////////////\n    //       METHODS       //\n    // ///////////////////////\n\n    /**\n     *  Get an infra ip from its ID.\n     */\n    InternetFactory.prototype.getIpById = function (ipId) {\n      return this.ipList.get(ipId);\n    };\n\n    /**\n     *  Get next index in IPs list.\n     */\n    InternetFactory.prototype.getNextIpIndex = function () {\n      return this.ipList.length();\n    };\n\n    // ---\n\n    /**\n     *  Add an ip into ip list.\n     */\n    InternetFactory.prototype.addIpToList = function (ip) {\n      _.set(ip, 'serviceName', this.serviceName); // Add projectId to IP\n      ip = checkIp(ip); // eslint-disable-line\n      this.ipList.push(ip);\n      return ip;\n    };\n\n    /**\n     *  Remove given IP from ipList\n     */\n    InternetFactory.prototype.removeIpFromList = function (ipToDelete) {\n      this.ipList.removeItem(ipToDelete);\n      return ipToDelete;\n    };\n\n    // ---\n\n    /**\n     *  Prepare object to json encode function to avoid function being encoded\n     */\n    InternetFactory.prototype.prepareToJson = function () {\n      const self = this;\n      return {\n        ipList: _.map(this.ipList.sortedKeys, ipId => self.ipList.get(ipId).prepareToJson()),\n      };\n    };\n\n    return InternetFactory;\n  });\n"]}