{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/openstack/users/rclone/openstack-users-rclone.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/openstack/users/rclone/openstack-users-rclone.service.js","mtime":1539717142048},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CloudProjectOpenstackUsersRcloneService =\n/*#__PURE__*/\nfunction () {\n  CloudProjectOpenstackUsersRcloneService.$inject = [\"$httpParamSerializer\", \"$q\", \"CONFIG_API\", \"OvhApiCloud\", \"RegionService\", \"ServiceHelper\"];\n\n  function CloudProjectOpenstackUsersRcloneService($httpParamSerializer, $q, CONFIG_API, OvhApiCloud, RegionService, ServiceHelper) {\n    _classCallCheck(this, CloudProjectOpenstackUsersRcloneService);\n\n    this.$httpParamSerializer = $httpParamSerializer;\n    this.$q = $q;\n    this.CONFIG_API = CONFIG_API;\n    this.OvhApiCloud = OvhApiCloud;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  _createClass(CloudProjectOpenstackUsersRcloneService, [{\n    key: \"getValidRcloneRegions\",\n    value: function getValidRcloneRegions(projectId) {\n      var _this = this;\n\n      return this.OvhApiCloud.Project().Region().v6().query({\n        serviceName: projectId\n      }).$promise.then(function (regions) {\n        return _.map(regions, function (region) {\n          return _this.RegionService.getRegion(region);\n        });\n      }).catch(this.ServiceHelper.errorHandler('cpou_rclone_modal_loading_error'));\n    }\n  }, {\n    key: \"getRcloneFileInfo\",\n    value: function getRcloneFileInfo(projectId, userId, region) {\n      var url = [(_.find(this.CONFIG_API.apis, {\n        serviceType: 'apiv6'\n      }) || {}).urlPrefix, this.OvhApiCloud.Project().User().v6().services.rclone.url, '?', this.$httpParamSerializer({\n        region: region\n      })].join('');\n      var replacements = {\n        serviceName: projectId,\n        userId: userId\n      };\n      Object.keys(replacements).forEach(function (paramName) {\n        url = url.replace(\":\".concat(paramName), replacements[paramName]);\n      });\n      return this.OvhApiCloud.Project().User().v6().rclone({\n        serviceName: projectId,\n        userId: userId,\n        region: region\n      }, {}).$promise.then(function (response) {\n        _.assign(response, {\n          url: url\n        });\n\n        return response;\n      });\n    }\n  }]);\n\n  return CloudProjectOpenstackUsersRcloneService;\n}();\n\nangular.module('managerApp').service('CloudProjectOpenstackUsersRcloneService', CloudProjectOpenstackUsersRcloneService);",null]}