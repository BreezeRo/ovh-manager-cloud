{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/volumes/volume/volume.factory.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/compute/volumes/volume/volume.factory.js","mtime":1539717142390},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').factory('CloudProjectComputeVolumesVolumeFactory', [\"$q\", \"OvhApiCloudProjectVolume\", \"OvhCloudPriceHelper\", function ($q, OvhApiCloudProjectVolume, OvhCloudPriceHelper) {\n  /**\n   *  Defines a cloud project compute volume\n   *\n   *  /!\\ Take care when modifying this!!! Check setInfos, and prepareToJson too.\n   */\n  var VolumeFactory = function () {\n    return function CloudProjectComputeVolumesVolumeFactory(optionsParam) {\n      var options = optionsParam;\n\n      if (!options) {\n        options = {};\n      } // Set custom values\n\n\n      options = this.getCustomOptions(options); // Extend and set default values\n\n      angular.extend(this, angular.extend({\n        id: Math.floor(Math.random() * 1000 * new Date().getTime()),\n        status: '',\n        createdAt: new Date().toISOString()\n      }, options)); // Updating price\n\n      this.getFullInformations();\n    };\n  }(); // /////////////////////\n  //      METHODS      //\n  // /////////////////////\n\n  /**\n   *  Set customs options (for init, and updates)\n   *  -> @devs: put your customs values here\n   */\n\n\n  VolumeFactory.prototype.getCustomOptions = function (options) {\n    return angular.extend(options, {\n      attachedTo: options.attachedTo ? _.flatten([options.attachedTo]) : [] // Ensure attachedTo is always an array\n\n    });\n  };\n  /**\n   *  Set infos after initialization\n   */\n\n\n  VolumeFactory.prototype.setInfos = function (optionsParam) {\n    var options = optionsParam; // Set custom values\n\n    options = this.getCustomOptions(options || {}); // Ok now extend it\n\n    angular.extend(this, options); // Updating price\n\n    return this.getFullInformations();\n  };\n  /**\n   *  [API] Get the item from API using its id\n   */\n\n\n  VolumeFactory.prototype.get = function () {\n    var self = this;\n    return OvhApiCloudProjectVolume.v6().get({\n      serviceName: this.serviceName,\n      volumeId: this.id\n    }).$promise.then(function (volOptions) {\n      return self.setInfos(volOptions);\n    });\n  };\n  /**\n   *  [API] Get additional informations about volume (price)\n   *  Create a volumePricesMap attribute like { 'planCode' : { 'price' : {} } }\n   */\n\n\n  VolumeFactory.prototype.getFullInformations = function () {\n    var self = this;\n    return OvhCloudPriceHelper.getPrices(this.serviceName).then(function (response) {\n      self.volumePricesMap = response;\n    });\n  };\n  /**\n   *  Calculate price with GB price and volume size\n   */\n\n\n  VolumeFactory.prototype.calculatePrice = function () {\n    return this.getPrice(this.region, this.type, this.size);\n  };\n\n  VolumeFactory.prototype.getPrice = function (region, type) {\n    var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    // in case if getFullInformations is not resolved yet\n    if (this.volumePricesMap) {\n      var volumeByRegionAndTypePrice = this.volumePricesMap[this.planCode] || this.volumePricesMap[\"volume.\".concat(type, \".consumption.\").concat(region)] || this.volumePricesMap[\"volume.\".concat(type, \".consumption\")];\n\n      if (volumeByRegionAndTypePrice) {\n        var calculatedPriceValue = size * volumeByRegionAndTypePrice.priceInUcents / 100000000;\n        var calculatedMonthlyPriceValue = calculatedPriceValue * moment.duration(1, 'months').asHours();\n        return {\n          price: {\n            currencyCode: volumeByRegionAndTypePrice.price.currencyCode,\n            text: volumeByRegionAndTypePrice.price.text.replace(/\\d+(?:[.,]\\d+)?/, \"\".concat(calculatedPriceValue.toFixed(2))),\n            value: calculatedPriceValue\n          },\n          monthlyPrice: {\n            currencyCode: volumeByRegionAndTypePrice.price.currencyCode,\n            text: volumeByRegionAndTypePrice.price.text.replace(/\\d+(?:[.,]\\d+)?/, \"\".concat(calculatedMonthlyPriceValue.toFixed(2))),\n            value: calculatedMonthlyPriceValue\n          }\n        };\n      }\n    }\n\n    return {\n      price: {},\n      monthlyPrice: {}\n    };\n  };\n  /**\n   *   Get type of status.\n   */\n\n\n  VolumeFactory.prototype.getStatusGroup = function () {\n    if (~['available', 'in-use'].indexOf(this.status)) {\n      return 'ACTIVE';\n    }\n\n    if (~['creating', 'attaching', 'detaching', 'deleting', 'backing-up', 'restoring-backup', 'snapshotting'].indexOf(this.status)) {\n      return 'PENDING';\n    }\n\n    if (~['error', 'error_deleting', 'error_restoring', 'error_extending'].indexOf(this.status)) {\n      return 'ERROR';\n    }\n\n    return this.status;\n  };\n  /**\n   *  [API] Create new volume. POST informations for creating a volume to API\n   */\n\n\n  VolumeFactory.prototype.create = function () {\n    var self = this;\n    return OvhApiCloudProjectVolume.v6().save({\n      serviceName: this.serviceName\n    }, {\n      description: this.description || undefined,\n      name: this.name || undefined,\n      region: this.region,\n      size: parseInt(this.size, 10),\n      type: this.type,\n      bootable: this.bootable,\n      snapshotId: this.snapshot ? this.snapshot.id : undefined\n    }).$promise.then(function (volOptions) {\n      self.id = volOptions.id; // we must do it because old id is a fake one\n\n      self.status = volOptions.status;\n      return self;\n    });\n  };\n  /**\n   *  [API] Delete a volume.\n   */\n\n\n  VolumeFactory.prototype.remove = function () {\n    var self = this;\n    return OvhApiCloudProjectVolume.v6().remove({\n      serviceName: this.serviceName,\n      volumeId: this.id\n    }).$promise.then(function () {\n      self.status = 'deleting';\n      return self;\n    });\n  };\n  /**\n   *  [API] Edit the volume\n   */\n\n\n  VolumeFactory.prototype.edit = function () {\n    var self = this;\n    var promises = [];\n\n    if (self.hasChange('name') || self.hasChange('description') || self.hasChange('bootable')) {\n      promises.push(OvhApiCloudProjectVolume.v6().put({\n        serviceName: self.serviceName,\n        volumeId: self.id\n      }, {\n        description: self.description || undefined,\n        name: self.name || undefined,\n        bootable: self.bootable\n      }).$promise.then(function () {\n        return self;\n      }, function (error) {\n        return $q.reject({\n          error: error.data,\n          requestName: 'put'\n        });\n      }));\n    } // upscale\n\n\n    if (self.hasChange('size')) {\n      promises.push(OvhApiCloudProjectVolume.v6().upsize({\n        serviceName: self.serviceName,\n        volumeId: self.id\n      }, {\n        size: parseInt(self.size, 10)\n      }).$promise.then(function () {\n        return self;\n      }, function (error) {\n        return $q.reject({\n          error: error.data,\n          requestName: 'upsize'\n        });\n      }));\n    }\n\n    return $q.allSettled(promises).catch(function (responses) {\n      var tabError = responses.filter(function (val) {\n        return !!val.error;\n      });\n      return $q.reject({\n        errors: tabError,\n        vm: self\n      });\n    });\n  };\n  /**\n   *  Enable the edition mode.\n   */\n\n\n  VolumeFactory.prototype.startEdition = function () {\n    var self = this; // Edit\n\n    if (self.getStatusGroup() === 'ACTIVE') {\n      self.saveForEdition = {\n        name: angular.copy(self.name),\n        description: angular.copy(self.description),\n        size: angular.copy(self.size),\n        bootable: angular.copy(self.bootable)\n      };\n    }\n\n    self.openDetail = true;\n  };\n  /**\n   *  Disable the edition mode.\n   */\n\n\n  VolumeFactory.prototype.stopEdition = function (cancel) {\n    var self = this; // Edit\n\n    if (self.saveForEdition && cancel) {\n      self.name = angular.copy(self.saveForEdition.name);\n      self.description = angular.copy(self.saveForEdition.description);\n      self.size = angular.copy(self.saveForEdition.size);\n      self.bootable = angular.copy(self.saveForEdition.bootable);\n    }\n\n    self.saveForEdition = false;\n    self.openDetail = false;\n  };\n  /**\n   * [EDIT] Item has changes ?\n   */\n\n\n  VolumeFactory.prototype.hasChange = function (targetSection) {\n    var self = this;\n\n    if (!self.saveForEdition) {\n      return null;\n    }\n\n    if (targetSection) {\n      switch (targetSection) {\n        case 'name':\n          return self.name !== self.saveForEdition.name;\n\n        case 'description':\n          return self.description !== self.saveForEdition.description;\n\n        case 'size':\n          return self.size !== self.saveForEdition.size;\n\n        case 'bootable':\n          return self.bootable !== self.saveForEdition.bootable;\n\n        default:\n          return null;\n      }\n    } else {\n      return self.hasChange('name') || self.hasChange('description') || self.hasChange('size') || self.hasChange('bootable');\n    }\n  };\n  /**\n   * Attach a volume to a vm\n   */\n\n\n  VolumeFactory.prototype.attach = function (vmId) {\n    var self = this;\n    return OvhApiCloudProjectVolume.v6().attach({\n      serviceName: this.serviceName,\n      volumeId: this.id\n    }, {\n      instanceId: vmId\n    }).$promise.then(function (volOptions) {\n      self.status = volOptions.status;\n    });\n  };\n  /**\n       * Detach a volume from a vm\n       */\n\n\n  VolumeFactory.prototype.detach = function (vmId) {\n    var self = this;\n    return OvhApiCloudProjectVolume.v6().detach({\n      serviceName: this.serviceName,\n      volumeId: this.id\n    }, {\n      instanceId: vmId\n    }).$promise.then(function (volOptions) {\n      self.status = volOptions.status;\n    });\n  };\n  /*= =========  ---  ========== */\n\n  /**\n       *  Prepare a vm to be JSON stringified by returning only attributes.\n       */\n\n\n  VolumeFactory.prototype.prepareToJson = function () {\n    if (this.status === 'DRAFT') {\n      return {\n        id: this.id,\n        status: this.status,\n        name: this.name,\n        description: this.description || null,\n        size: this.size || null,\n        type: this.type || null,\n        region: this.region || null,\n        bootable: this.bootable || false,\n        attachedTo: this.attachedTo || []\n      };\n    }\n\n    return {\n      id: this.id,\n      status: this.status\n    };\n  };\n\n  return VolumeFactory;\n}]);",null]}