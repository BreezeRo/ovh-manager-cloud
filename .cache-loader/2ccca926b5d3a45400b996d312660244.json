{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/translate/translate.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/translate/translate.service.js","mtime":1539717142432},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["/**\n * @ngdoc service\n * @name managerApp.service:TranslateService\n * @description Manage translations\n */\nclass TranslateServiceProvider {\n  constructor(LANGUAGES, TARGET) {\n    this.LANGUAGES = LANGUAGES;\n    this.TARGET = TARGET;\n    this.localeRegex = /^([a-zA-Z]+)(?:[_-]([a-zA-Z]+))?$/;\n    this.availableLangsKeys = _.map(this.LANGUAGES.available, 'key');\n    this.currentLanguage = this.LANGUAGES.defaultLoc;\n  }\n\n  /**\n   * @ngdoc function\n   * @methodOf managerApp.service:TranslateService\n   * @name setUserLocale\n   * @description Set current user locale (in localStorage)\n   * @param  {String} localeParam - (optional) Force to set the gicen locale identifier\n   */\n  setUserLocale(localeParam) {\n    let locale = localeParam;\n    if (!locale) {\n      if (localStorage['univers-selected-language']) {\n        locale = localStorage['univers-selected-language'];\n      } else if (navigator.language || navigator.userLanguage) {\n        locale = navigator.language || navigator.userLanguage;\n      } else {\n        locale = this.LANGUAGES.defaultLoc;\n      }\n    }\n    const splittedLocale = locale.match(this.localeRegex);\n    if (splittedLocale) {\n      // Format the value\n      const language = splittedLocale[1];\n      const country = splittedLocale[2] ? splittedLocale[2] : this.preferredCountry(language);\n      this.currentLanguage = this.findLanguage(language, country);\n    } else {\n      // Incorrect value\n      this.currentLanguage = this.currentLanguage || this.LANGUAGES.defaultLoc;\n    }\n    // Save it!\n    localStorage['univers-selected-language'] = this.currentLanguage;\n  }\n\n  /**\n   * @ngdoc function\n   * @methodOf managerApp.service:TranslateService\n   * @name getUserLocale\n   * @description Returns the current user locale\n   * @param  {Boolean} min - (optional) Return the base locale only\n   * @return {String}      - Current locale\n   */\n  getUserLocale(min) {\n    if (min) {\n      return this.currentLanguage.split('_')[0];\n    }\n    return this.currentLanguage;\n  }\n\n  /**\n   * @ngdoc function\n   * @methodOf managerApp.service:TranslateService\n   * @name getGeneralLanguage\n   * @description Returns either fr or en depending on current language\n   * @return {String}      - Current locale\n   */\n  getGeneralLanguage() {\n    if (/fr/i.test(this.currentLanguage.split('_')[0])) {\n      return 'fr';\n    }\n    return 'en';\n  }\n\n  preferredCountry(language) {\n    if (_.indexOf(['FR', 'EN'], language.toUpperCase() > -1)) {\n      const customLanguage = _.get(this.LANGUAGES.preferred, `${language}.${this.TARGET}`);\n      if (customLanguage) {\n        return customLanguage;\n      }\n    }\n    return language;\n  }\n\n  findLanguage(language, country) {\n    const locale = `${language.toLowerCase()}_${country.toUpperCase()}`;\n    if (this.availableLangsKeys.indexOf(locale) > -1) {\n      return locale;\n    }\n    // Not found: Try to find another country with same base language\n    const similarLanguage = _.find(\n      this.availableLangsKeys,\n      val => this.localeRegex.test(val) && val.match(this.localeRegex)[1] === language,\n    );\n    if (similarLanguage) {\n      return similarLanguage;\n    }\n    // Not found\n    return this.LANGUAGES.defaultLoc;\n  }\n\n  $get() {\n    return {\n      getUserLocale: locale => this.getUserLocale(locale),\n      getGeneralLanguage: () => this.getGeneralLanguage(),\n      setUserLocale: min => this.setUserLocale(min),\n    };\n  }\n}\n\nangular.module('managerApp').provider('TranslateService', TranslateServiceProvider);\n"]}