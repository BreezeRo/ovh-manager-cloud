{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplb-zone-add.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/zone/iplb-zone-add.service.js","mtime":1539717142229},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class IpLoadBalancerZoneAddService {\n  constructor($q, $translate, $window, CloudMessage, OrderHelperService, OvhApiIpLoadBalancing,\n    RegionService, ServiceHelper) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.CloudMessage = CloudMessage;\n    this.OrderHelperService = OrderHelperService;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  getOrderableZones(serviceName) {\n    return this.$q.all({\n      orderableZones: this.OvhApiIpLoadBalancing.v6()\n        .get({ serviceName })\n        .$promise\n        .then(response => response.orderableZone),\n      suspendedZones: this.getSuspendedZones(serviceName),\n    })\n      .then((response) => {\n        const availableZones = response.orderableZones.concat(response.suspendedZones);\n        return _.map(\n          availableZones,\n          zone => _.extend(zone, this.RegionService.getRegion(zone.name)),\n        );\n      })\n      .then(availableZones => _.map(availableZones, zone => _.extend(zone, {\n        selectable: {\n          value: true,\n          reason: zone.state === 'released' ? this.$translate.instant('iplb_zone_add_available_released') : '',\n        },\n      })))\n      .catch(this.ServiceHelper.errorHandler('iplb_zone_add_loading_error'));\n  }\n\n  addZones(serviceName, zones) {\n    if (zones.length === 0) {\n      return this.ServiceHelper.errorHandler('iplb_zone_add_selection_error')({});\n    }\n\n    return this.$q.all({\n      created: this.createZones(serviceName, _.filter(zones, zone => zone.state !== 'released')),\n      activated: this.activateZones(serviceName, _.filter(zones, zone => zone.state === 'released')),\n    })\n      .then((response) => {\n        if (response.created.quantity > 0) {\n          this.$window.open(response.created.url, '_blank');\n          return this.ServiceHelper.successHandler({\n            text: this.$translate.instant(zones.length > 1 ? 'iplb_zone_add_plural_success' : 'iplb_zone_add_single_success'),\n            link: {\n              text: this.$translate.instant('common_complete_order'),\n              value: response.created.url,\n            },\n          })(response);\n        }\n\n        if (response.activated.quantity > 0) {\n          return this.ServiceHelper.successHandler({\n            text: this.$translate.instant(zones.length > 1 ? 'iplb_zone_activate_plural_success' : 'iplb_zone_activate_single_success'),\n          })(response);\n        }\n\n        return this.$q.reject();\n      });\n  }\n\n  createZones(serviceName, zones) {\n    const emptyResponse = this.$q.when({ quantity: 0 });\n    if (!zones.length) {\n      return emptyResponse;\n    }\n\n    return this.OrderHelperService.getExpressOrderUrl(_.map(zones, zone => ({\n      productId: 'ipLoadbalancing',\n      serviceName,\n      planCode: zone.planCode,\n    })))\n      .then(response => ({\n        quantity: zones.length,\n        url: response,\n      }))\n      .catch((response) => {\n        this.ServiceHelper.errorHandler(zones.length > 1 ? 'iplb_zone_add_plural_error' : 'iplb_zone_add_single_error')(response);\n        return emptyResponse;\n      });\n  }\n\n  activateZones(serviceName, zones) {\n    const emptyResponse = this.$q.when({ quantity: 0 });\n    if (!zones.length) {\n      return emptyResponse;\n    }\n\n    const promises = _.map(\n      zones,\n      zone => this.OvhApiIpLoadBalancing.Zone().v6()\n        .cancelDelete({ serviceName, name: zone.name }, {}).$promise,\n    );\n    return this.$q.all(promises)\n      .then(() => ({\n        quantity: zones.length,\n      }))\n      .catch((response) => {\n        this.ServiceHelper.errorHandler(zones.length > 1 ? 'iplb_zone_add_plural_error' : 'iplb_zone_add_single_error')(response);\n        return emptyResponse;\n      });\n  }\n\n  getSuspendedZones(serviceName) {\n    return this.OvhApiIpLoadBalancing.Zone().v6().query({ serviceName })\n      .$promise\n      .then((zoneIds) => {\n        const promises = _.map(\n          zoneIds,\n          zoneId => this.OvhApiIpLoadBalancing.Zone().v6()\n            .get({ serviceName, name: zoneId }).$promise,\n        );\n        return this.$q.all(promises);\n      })\n      .then(zones => _.filter(zones, zone => zone.state === 'released'));\n  }\n}\n\nangular.module('managerApp').service('IpLoadBalancerZoneAddService', IpLoadBalancerZoneAddService);\n"]}