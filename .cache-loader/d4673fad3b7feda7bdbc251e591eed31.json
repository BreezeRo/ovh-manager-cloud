{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/cloud-project-compute-infrastructure.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/cloud-project-compute-infrastructure.service.js","mtime":1539717141972},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeInfrastructureService {\n  constructor($rootScope, $state, $translate, $uibModal, CloudMessage, CloudUserPref,\n    CloudProjectComputeInfrastructureOrchestrator, ControllerHelper, ServiceHelper, TARGET) {\n    this.$rootScope = $rootScope;\n    this.$state = $state;\n    this.$translate = $translate;\n    this.$uibModal = $uibModal;\n    this.CloudMessage = CloudMessage;\n    this.CloudUserPref = CloudUserPref;\n    this.CloudProjectComputeInfrastructureOrchestrator = CloudProjectComputeInfrastructureOrchestrator; // eslint-disable-line\n    this.ControllerHelper = ControllerHelper;\n    this.ServiceHelper = ServiceHelper;\n    this.TARGET = TARGET;\n  }\n\n  buyIpFailOver() {\n    if (this.TARGET === 'US') {\n      return this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/compute/infrastructure/ip/failover/buy/cloud-project-compute-infrastructure-ip-failover-buy-agora.html',\n        controller: 'CloudProjectComputeInfrastructureIpFailoverBuyAgoraCtrl',\n        controllerAs: '$ctrl',\n      }).result;\n    }\n    return this.$uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/infrastructure/ip/failover/buy/cloud-project-compute-infrastructure-ip-failover-buy.html',\n      controller: 'CloudProjectComputeInfrastructureIpFailoverBuyCtrl',\n      controllerAs: 'CPCIIpFailoverBuyCtrl',\n    }).result;\n  }\n\n  importIpFailOver(pendingImportIps) {\n    return this.$uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/infrastructure/ip/failover/import/cloud-project-compute-infrastructure-ip-failover-import.html',\n      controller: 'CloudProjectComputeInfrastructureIpFailoverImportCtrl',\n      controllerAs: 'CPCIIpFailoverImportCtrl',\n      resolve: {\n        pendingImportIps: () => angular.copy(pendingImportIps),\n      },\n    }).result;\n  }\n\n  orderCredit() {\n    if (this.TARGET === 'US') {\n      return this.$uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/billing/vouchers/addCredit/cloud-project-billing-vouchers-add-credit-agora.html',\n        controller: 'CloudProjectBillingVouchersAddcreditAgoraCtrl',\n        controllerAs: '$ctrl',\n      }).result;\n    }\n    return null;\n  }\n\n  openLoginInformations(vm) {\n    return this.$uibModal.open({\n      templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/loginInformation/cloud-project-compute-infrastructure-virtual-machine-login-information.html',\n      controller: 'CloudProjectComputeInfrastructureVirtualMachineLoginInformationCtrl',\n      controllerAs: 'VmLoginInformationCtrl',\n      size: 'md',\n      resolve: {\n        params: () => ({\n          serviceName: vm.serviceName,\n          id: vm.id,\n          ipAddresses: vm.ipAddresses,\n          image: vm.image,\n        }),\n      },\n    }).result;\n  }\n\n  openDeleteProjectModal() {\n    return this.$uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/delete/cloud-project-delete.html',\n      controller: 'CloudProjectDeleteCtrl',\n      controllerAs: 'CloudProjectDeleteCtrl',\n    }).result;\n  }\n\n  openMonthlyConfirmation(vm) {\n    this.$uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/monthlyConfirm/cloud-project-compute-infrastructure-virtual-machine-monthlyConfirm.html',\n      controller: 'CloudProjectComputeInfrastructureVirtualmachineMonthlyConfirm',\n      controllerAs: 'CPCIVirtualmachineMonthlyConfirm',\n      resolve: {\n        params: () => vm,\n      },\n    }).result.then(() => {\n      this.$rootScope.$broadcast('infra.refresh.links');\n    });\n  }\n\n  openSnapshotWizard(vm) {\n    return this.$uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/snapshot/add/cloud-project-compute-snapshot-add.html',\n      controller: 'CloudProjectComputeSnapshotAddCtrl',\n      controllerAs: 'CloudProjectComputeSnapshotAddCtrl',\n      resolve: {\n        params: () => vm,\n      },\n    }).result;\n  }\n\n  openVnc(vm) {\n    return this.$uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/vnc/cloud-project-compute-infrastructure-virtual-machine-vnc.html',\n      controller: 'CloudProjectComputeInfrastructureVirtualmachineVncCtrl',\n      controllerAs: 'VmVncCtrl',\n      size: 'lg',\n      resolve: {\n        params: () => vm,\n      },\n    }).result;\n  }\n\n  rebootVirtualMachine(vm, type) {\n    return this.ControllerHelper.modal.showConfirmationModal({\n      titleText: type === 'hard' ? this.$translate.instant('cpci_vm_action_reboot_hard') : this.$translate.instant('cpci_vm_action_reboot'),\n      text: this.$translate.instant('cpci_vm_confirm_reboot', { name: vm.name || '' }),\n    }).then(() => this.CloudProjectComputeInfrastructureOrchestrator.rebootVm(vm, type)\n      .then(this.ServiceHelper.successHandler('cpci_vm_reboot_submit_success'))\n      .catch(this.ServiceHelper.errorHandler('cpci_vm_reboot_submit_error')));\n  }\n\n  reinstallVirtualMachine(vm) {\n    return this.ControllerHelper.modal.showConfirmationModal({\n      titleText: this.$translate.instant('cpci_vm_action_reinstall'),\n      text: this.$translate.instant('cpci_vm_reinstall_warn'),\n    }).then(() => this.CloudProjectComputeInfrastructureOrchestrator.reinstallVm(vm)\n      .catch(this.ServiceHelper.errorHandler('cpci_vm_reinstall_submit_error')));\n  }\n\n  deleteVirtualMachine(vm) {\n    this.$uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/delete/cloud-project-compute-infrastructure-virtual-machine-delete.html',\n      controller: 'CloudprojectcomputeinfrastructurevirtualmachinedeleteCtrl',\n      controllerAs: '$ctrl',\n      resolve: {\n        params: () => vm,\n      },\n    }).result.then(() => this.CloudProjectComputeInfrastructureOrchestrator.deleteVm(vm)\n      .catch(this.ServiceHelper.errorHandler('cpci_vm_delete_submit_error')));\n  }\n\n  rescueMode(vm) {\n    return this.$uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/rescue/cloud-project-compute-infrastructure-virtual-machine-rescue.html',\n      controller: 'CloudProjectComputeInfrastructureVirtualmachineRescueCtrl',\n      controllerAs: 'VmRescueCtrl',\n      size: 'md',\n      resolve: {\n        params: () => vm,\n      },\n    }).result;\n  }\n\n  resumeVirtualMachine(vm) {\n    const oldStatus = vm.status;\n    _.set(vm, 'status', 'RESUMING');\n    return this.CloudProjectComputeInfrastructureOrchestrator.resumeVm(vm)\n      .catch((err) => {\n        this.CloudMessage.error(`${this.$translate.instant('cpci_vm_resume_submit_error')} ${_.get(err, 'data.message', '')}`);\n        _.set(vm, 'status', oldStatus);\n      });\n  }\n\n  stopRescueMode(vm, enable) {\n    _.set(vm, 'confirmLoading', true);\n    return this.CloudProjectComputeInfrastructureOrchestrator.rescueVm(vm, enable)\n      .then(() => {\n        _.set(vm, 'confirm', null);\n      })\n      .catch(this.ServiceHelper.errorHandler('cpci_vm_rescue_end_error'))\n      .finally(() => {\n        _.set(vm, 'confirmLoading', false);\n      });\n  }\n\n  addVirtualMachine() {\n    return this.$state.go('iaas.pci-project.compute.infrastructure.diagram', {\n      createNewVm: true,\n      createNewVolume: false,\n      editVm: null,\n      monitorVm: null,\n    });\n  }\n\n  addVolume() {\n    return this.$state.go('iaas.pci-project.compute.infrastructure.diagram', {\n      createNewVm: false,\n      createNewVolume: true,\n      editVm: null,\n      monitorVm: null,\n    });\n  }\n\n  editVirtualMachine(vmId) {\n    return this.$state.go('iaas.pci-project.compute.infrastructure.diagram', {\n      createNewVm: false,\n      createNewVolume: false,\n      editVm: vmId,\n      monitorVm: null,\n    });\n  }\n\n  monitorVirtualMachine(vmId) {\n    return this.$state.go('iaas.pci-project.compute.infrastructure.diagram', {\n      createNewVm: false,\n      createNewVolume: false,\n      editVm: null,\n      monitorVm: vmId,\n    });\n  }\n\n  setPreferredView(view) {\n    if (_.includes(['diagram', 'list'], view)) {\n      this.CloudUserPref.set('CLOUD_PROJECT_INFRA_PREFERRED_VIEW', {\n        view,\n      });\n    }\n  }\n\n  getPreferredView() {\n    return this.CloudUserPref.get('CLOUD_PROJECT_INFRA_PREFERRED_VIEW')\n      .then(view => _.get(view, 'view', 'diagram'));\n  }\n}\n\nangular.module('managerApp').service('CloudProjectComputeInfrastructureService', CloudProjectComputeInfrastructureService);\n"]}