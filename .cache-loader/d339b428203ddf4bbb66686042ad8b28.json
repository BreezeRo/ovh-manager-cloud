{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vrack/vrack.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vrack/vrack.service.js","mtime":1539717142313},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VrackService =\n/*#__PURE__*/\nfunction () {\n  VrackService.$inject = [\"$q\", \"$translate\", \"ControllerHelper\", \"OvhApiVrack\"];\n\n  function VrackService($q, $translate, ControllerHelper, OvhApiVrack) {\n    _classCallCheck(this, VrackService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.OvhApiVrack = OvhApiVrack;\n  }\n\n  _createClass(VrackService, [{\n    key: \"isGroupedServiceType\",\n    value: function isGroupedServiceType(serviceType) {\n      return _.includes(this.constructor.getGroupedServiceTypes(), serviceType);\n    }\n  }, {\n    key: \"getVracks\",\n    value: function getVracks() {\n      this.OvhApiVrack.Aapi().resetCache();\n      return this.OvhApiVrack.Aapi().query().$promise.then(function (vracks) {\n        _.map(vracks, function (vrack) {\n          _.set(vrack, 'serviceName', vrack.id);\n\n          _.set(vrack, 'displayName', vrack.name || vrack.id);\n        });\n\n        return vracks;\n      });\n    }\n  }, {\n    key: \"getOrderUrl\",\n    value: function getOrderUrl() {\n      return this.ControllerHelper.navigation.getConstant('website_order.vrack');\n    }\n  }, {\n    key: \"selectVrackModal\",\n    value: function selectVrackModal(vRacks, orderUrl) {\n      return this.ControllerHelper.modal.showModal({\n        modalConfig: {\n          templateUrl: 'app/vrack/modals/selectVrack.html',\n          controller: 'SelectVrackCtrl',\n          controllerAs: '$ctrl',\n          resolve: {\n            params: function params() {\n              return {\n                orderUrl: orderUrl,\n                vRacks: vRacks\n              };\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"selectVrack\",\n    value: function selectVrack() {\n      var _this = this;\n\n      return this.$q.all({\n        orderUrl: this.getOrderUrl(),\n        vracks: this.getVracks()\n      }).then(function (data) {\n        return _this.selectVrackModal(data.vracks, data.orderUrl);\n      });\n    }\n  }, {\n    key: \"linkCloudProjectToVrack\",\n    value: function linkCloudProjectToVrack(selectedVrack, projectId) {\n      return this.OvhApiVrack.CloudProject().v6().create({\n        serviceName: selectedVrack\n      }, {\n        project: projectId\n      }).$promise.then(function (vrackTask) {\n        return vrackTask.data.id;\n      });\n    }\n  }, {\n    key: \"unlinkVrackModal\",\n    value: function unlinkVrackModal(text) {\n      return this.ControllerHelper.modal.showConfirmationModal({\n        submitButtonText: this.$translate.instant('common_deactivate'),\n        titleText: this.$translate.instant('private_network_deactivate'),\n        text: text || this.$translate.instant('private_network_deactivate_confirmation')\n      });\n    }\n  }, {\n    key: \"unlinkCloudProjectFromVrack\",\n    value: function unlinkCloudProjectFromVrack(selectedVrack, projectId) {\n      return this.OvhApiVrack.CloudProject().v6().delete({\n        serviceName: selectedVrack,\n        project: projectId\n      }).$promise.then(function (vrackTask) {\n        return vrackTask.data.id;\n      });\n    }\n  }, {\n    key: \"getTask\",\n    value: function getTask(serviceName, taskId) {\n      return this.OvhApiVrack.v6().task({\n        serviceName: serviceName,\n        taskId: taskId\n      }).$promise;\n    }\n  }], [{\n    key: \"getGroupedServiceTypes\",\n    value: function getGroupedServiceTypes() {\n      return ['dedicatedCloudDatacenter', 'dedicatedCloud', 'dedicatedServerInterface'];\n    }\n  }]);\n\n  return VrackService;\n}();\n\nangular.module('managerApp').service('VrackService', VrackService);",null]}