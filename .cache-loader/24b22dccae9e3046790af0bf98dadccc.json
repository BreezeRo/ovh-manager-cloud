{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/modal/shortcut/reinstall/vps-reinstall.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/modal/shortcut/reinstall/vps-reinstall.controller.js","mtime":1539717142297},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VpsReinstallCtrl {\n  constructor($scope, $translate, $uibModalInstance, CloudMessage, serviceName, SidebarMenu,\n    VpsReinstallService, VpsService) {\n    this.$scope = $scope;\n    this.$translate = $translate;\n    this.$uibModalInstance = $uibModalInstance;\n    this.CloudMessage = CloudMessage;\n    this.serviceName = serviceName;\n    this.SidebarMenu = SidebarMenu;\n    this.VpsReinstallService = VpsReinstallService;\n    this.VpsService = VpsService;\n\n    this.loaders = {\n      save: false,\n      sshKeys: false,\n      summary: false,\n      template: false,\n      packages: false,\n    };\n\n    this.summary = {};\n    this.template = {\n      value: null,\n      language: null,\n      softwares: [],\n      sshKeys: [],\n      sendPassword: true,\n    };\n    this.templates = [];\n    this.userSshKeys = null;\n  }\n\n  $onInit() {\n    this.loaders.init = true;\n    this.VpsService.getTaskInError(this.serviceName)\n      .then(tasks => this.loadTemplate(tasks))\n      .catch(err => this.loadTemplate(err))\n      .finally(() => { this.loaders.init = false; });\n    this.loadSshKeys();\n    this.loadSummary();\n  }\n\n  loadTemplate(tasks) {\n    this.template.language = null;\n    this.loaders.template = true;\n    if (!tasks || !tasks.length) {\n      this.VpsService.getTemplates(this.serviceName)\n        .then((data) => { this.templates = data.results; })\n        .catch(err => this.$uibModalInstance.dismiss(this.CloudMessage.error(err.message || this.$translate.instant('vps_configuration_polling_fail'))))\n        .finally(() => { this.loaders.template = false; });\n    }\n  }\n\n  loadSshKeys() {\n    this.loaders.sshKeys = true;\n    this.VpsReinstallService.getSshKeys()\n      .then((data) => {\n        this.userSshKeys = data;\n        return this.userSshKeys;\n      })\n      .catch(() => this.CloudMessage.error(this.$translate.instant('vps_configuration_reinstall_loading_sshKeys_error')))\n      .finally(() => { this.loaders.sshKeys = false; });\n  }\n\n  loadSummary() {\n    this.loaders.summary = true;\n    this.VpsService.getTabSummary(this.serviceName, true)\n      .then((data) => { this.summary = data; })\n      .catch(() => this.CloudMessage.error(this.$translate.instant('vps_configuration_reinstall_loading_summary_error')))\n      .finally(() => { this.loaders.summary = false; });\n  }\n\n  loadPackages(distribution) {\n    this.loaders.packages = true;\n    this.template.packages = [];\n    this.VpsReinstallService.getPackages(distribution)\n      .then((data) => { this.template.packages = data; })\n      .finally(() => { this.loaders.packages = false; });\n  }\n\n  getSoftwareLabel(soft) {\n    let result = soft.name;\n    if (soft.status !== 'STABLE') {\n      result += ` (${this.$translate.instant(`vps_configuration_reinstall_step2_software_status_${soft.status}`)})`;\n    }\n    return result;\n  }\n\n  getSoftwareSummaryList() {\n    const names = [];\n    if (this.template.database) {\n      names.push(this.$scope.selectedTemplate.database.name);\n    }\n    if (this.template.webserver) {\n      names.push(this.$scope.selectedTemplate.webserver.name);\n    }\n    if (this.template.environment) {\n      names.push(this.$scope.selectedTemplate.environment.name);\n    }\n    return names.join(', ');\n  }\n\n  getSelectedLanguage() {\n    if (this.template.value) {\n      return (this.template.value.availableLanguage.length > 1)\n        ? this.template.language\n        : this.template.value.locale;\n    }\n    return null;\n  }\n\n  getLanguageTraduction(language) {\n    return this.$translate.instant(`language_${language}`);\n  }\n\n  static isWindows(os) {\n    return os && /Windows/.test(os.name);\n  }\n\n  confirm() {\n    this.loaders.save = true;\n    const softIds = [];\n\n    if (this.template.database) {\n      softIds.push(this.$scope.selectedTemplate.database.id);\n    }\n    if (this.template.webserver) {\n      softIds.push(this.$scope.selectedTemplate.webserver.id);\n    }\n    if (this.template.environment) {\n      softIds.push(this.$scope.selectedTemplate.environment.id);\n    }\n\n    this.VpsService.reinstall(\n      this.serviceName,\n      this.template.value.idTemplate,\n      this.getSelectedLanguage(),\n      softIds,\n      this.template.sshKeys,\n      (this.template.sendPassword ? 0 : 1),\n    )\n      .then(() => this.$uibModalInstance.close())\n      .catch(() => this.$uibModalInstance.dismiss())\n      .finally(() => { this.loaders.save = false; });\n  }\n\n  cancel() {\n    this.$uibModalInstance.dismiss();\n  }\n}\n\nangular.module('managerApp').controller('VpsReinstallCtrl', VpsReinstallCtrl);\n"]}