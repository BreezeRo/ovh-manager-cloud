{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/project.factory.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/project.factory.js","mtime":1539717142395},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').factory('CloudProjectFactory',\n  (CloudProjectComputeFactory) => {\n    /**\n     *  Defines a cloud project\n     *\n     *  @param    {Object}  options                 - Options for creating a new CloudProject\n     *  @param    {String}  options.serviceName     - Name (the unique id) of the CloudProject\n     *  @param    {Object}  options.compute         - Options of the CloudProject compute part\n     */\n    const ProjectFactory = (function () {\n      return function CloudProjectFactory(optionsParam) {\n        let options = optionsParam;\n\n        if (!options) {\n          options = {};\n        }\n\n        if (!options.serviceName) {\n          throw new Error('serviceName option must be specified when creating a new CloudProjectFactory');\n        }\n\n        this.serviceName = options.serviceName || null;\n        this.compute = new CloudProjectComputeFactory(angular.extend(\n          (options.compute || {}),\n          { serviceName: this.serviceName },\n        ));\n        // + storage\n      };\n    }());\n\n    // /////////////////////////////\n    // /         METHODS          //\n    // /////////////////////////////\n\n    /**\n     *  Prepare object to json encode function to avoid function being encoded.\n     */\n    ProjectFactory.prototype.prepareToJson = function () {\n      return {\n        serviceName: this.serviceName,\n        compute: this.compute.prepareToJson(),\n      };\n    };\n\n    return ProjectFactory;\n  });\n"]}