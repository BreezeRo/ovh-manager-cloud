{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/archives/streams-archives.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/streams/archives/streams-archives.service.js","mtime":1539717142149},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsStreamsArchivesService {\n  constructor($http, $q, LogsConstants, OvhApiDbaas, ServiceHelper) {\n    this.$http = $http;\n    this.$q = $q;\n    this.LogsConstants = LogsConstants;\n    this.ArchivesApiService = OvhApiDbaas.Logs().Archive().v6();\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  /**\n   * Get the IDs of all archives\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @returns promise which will resolve with a list of archive IDs\n   * @memberof LogsStreamsArchivesService\n   */\n  getArchiveIds(serviceName, streamId) {\n    return this.ArchivesApiService.query({\n      serviceName,\n      streamId,\n    }).$promise\n      .catch(this.ServiceHelper.errorHandler('streams_archives_ids_loading_error'));\n  }\n\n  /**\n   * Gets the archive objects corresponding to the archiveIds\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} archiveIds - list of archive IDs for which archive objects are to be fetched\n   * @returns promise which will be resolve with the list of archives\n   * @memberof LogsStreamsArchivesService\n   */\n  getArchives(serviceName, streamId, archiveIds) {\n    return this.getArchiveDetails(serviceName, streamId, archiveIds)\n      .then((archives) => {\n        archives.forEach(archive => this.transformArchive(archive));\n        return archives;\n      })\n      .catch(this.ServiceHelper.errorHandler('streams_archives_loading_error'));\n  }\n\n  /**\n   * Gets the archive objects corresponding to the archiveIds\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} archiveIds - list of archive IDs for which archive objects are to be fetched\n   * @returns promise which will be resolve with the list of archives\n   * @memberof LogsStreamsArchivesService\n   */\n  getArchiveDetails(serviceName, streamId, archiveIds) {\n    const promises = archiveIds.map(archiveId => this.getArchive(serviceName, streamId, archiveId));\n    return this.$q.all(promises);\n  }\n\n  /**\n   * Gets the archive object corresponding to the archiveId\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @param {any} archiveId - the archive ID for which the archive object is to be fetched\n   * @returns promise which will resolve with the archive\n   * @memberof LogsStreamsArchivesService\n   */\n  getArchive(serviceName, streamId, archiveId) {\n    return this.ArchivesApiService.get({ serviceName, streamId, archiveId }).$promise;\n  }\n\n  /**\n   * Gets the download URL for an archive\n   *\n   * @param {any} serviceName\n   * @param {any} streamId\n   * @returns promise which will be resolve with the URL information for the archive\n   * @memberof LogsStreamsArchivesService\n   */\n  getDownloadUrl(serviceName, streamId, archiveId) {\n    return this.ArchivesApiService.url({\n      serviceName,\n      streamId,\n      archiveId,\n      expirationInSeconds: this.LogsConstants.expirationInSeconds,\n    }).$promise.then(response => response.data);\n  }\n\n  /**\n   * Transforms the archive by adding additional information to it\n   *\n   * @param {any} archive\n   * @memberof LogsStreamsArchivesService\n   */\n  transformArchive(archive) {\n    _.set(archive, 'retrievalStateType', this.LogsConstants.stateType[archive.retrievalState]);\n  }\n}\n\nangular.module('managerApp').service('LogsStreamsArchivesService', LogsStreamsArchivesService);\n"]}