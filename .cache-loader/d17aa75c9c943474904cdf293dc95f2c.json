{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/storage.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/storage.controller.js","mtime":1539717142056},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('RA.storageCtrl', [\n  '$filter',\n  '$rootScope',\n  '$scope',\n  '$stateParams',\n  '$translate',\n  '$uibModal',\n  'CloudStorageContainer',\n  'CloudStorageContainers',\n  'CloudStorageContainerTasksRunner',\n  'CloudMessage',\n  'ovhDocUrl',\n  'RegionService',\n  function ($filter, $rootScope, $scope, $stateParams, $translate, $uibModal, CloudStorageContainer,\n    CloudStorageContainers, CloudStorageContainerTasksRunner, CloudMessage, ovhDocUrl,\n    RegionService) {\n    $scope.projectId = $stateParams.projectId;\n    $scope.loaders = {\n      storages: true,\n      details: true,\n    };\n\n    $scope.storages = null;\n    $scope.storagesFiltered = null; // for searching\n    $scope.open = {};\n    $scope.regionService = RegionService;\n\n    // guides\n    $scope.guides = {\n      title: $translate.instant('storage_details_guide_title'),\n      list: [{\n        name: $translate.instant('storage_details_guide_pca'),\n        url: ovhDocUrl.getDocUrl('cloud/storage/pca'),\n      }, {\n        name: $translate.instant('storage_details_guide_pcs'),\n        url: ovhDocUrl.getDocUrl('cloud/storage/pcs'),\n      }],\n      footer: $translate.instant('storage_details_guide_footer'),\n\n    };\n\n    // table sorting\n    $scope.order = {\n      by: 'name',\n      reverse: true,\n      filter: $filter('orderBy'),\n    };\n\n    // table searching\n    $scope.filter = {\n      name: '',\n    };\n\n    // handle messages\n    $scope.messages = [];\n\n    function refreshMessage() {\n      $scope.messages = $scope.messageHandler.getMessages();\n    }\n\n    function loadMessage() {\n      CloudMessage.unSubscribe('iaas.pci-project.compute.storage');\n      $scope.messageHandler = CloudMessage.subscribe('iaas.pci-project.compute.storage', { onMessage: () => refreshMessage() });\n    }\n\n    // Do things on page change...\n    $scope.$watch('storagesPaginated', _.debounce((storages) => {\n      if (!storages || !storages.length) {\n        return;\n      }\n\n      function getStorage(name, region) {\n        return _.find($scope.storagesFiltered, { name, region });\n      }\n\n      // ... like load metadata for each container\n      storages.forEach((container) => {\n        if (container.shortcut) {\n          return;\n        }\n        CloudStorageContainer.getMetaData($scope.projectId, container.id)\n          .then((containerMeta) => {\n            angular.merge(container, containerMeta);\n            // Update source\n            angular.merge(getStorage(container.name, container.region), containerMeta);\n          });\n      });\n    }, 1000));\n\n    // Selection management\n    function resetSelectionModel() {\n      $scope.selectionModel = {\n        selected: [],\n        allSelected: false,\n      };\n    }\n\n    $scope.$watch('currentPage', () => {\n      resetSelectionModel();\n    });\n\n    // Search callbacks\n    $scope.search = function (value) {\n      const regexp = new RegExp(value, 'i');\n      $scope.storagesFiltered = _.filter($scope.storages, storage => regexp.test(storage.name));\n    };\n\n    $scope.showAll = function () {\n      $scope.storagesFiltered = $scope.storages;\n    };\n\n    // Filtering and ordering\n    $scope.orderStorages = function (by) {\n      if (by) {\n        if ($scope.order.by === by) {\n          $scope.order.reverse = !$scope.order.reverse;\n        } else {\n          $scope.order.by = by;\n        }\n      }\n      $scope.storagesFiltered = $scope.order.filter(\n        $scope.storagesFiltered,\n        $scope.order.by, $scope.order.reverse,\n      );\n    };\n\n    $scope.filterStorages = function () {\n      if ($scope.filter.enabled) {\n        $scope.storagesFiltered = _.filter(\n          $scope.storages,\n          storage => storage.name\n            && storage.name.toLowerCase().indexOf($scope.filter.name.toLowerCase()) !== -1,\n        );\n      } else {\n        $scope.storagesFiltered = $scope.storages;\n        $scope.filter.name = '';\n      }\n      $scope.orderStorages();\n    };\n\n    /* Delete (a) container(s) */\n    function deleteContainer(container) {\n      function createDeleteObjectTask(object) {\n        return function () {\n          return CloudStorageContainer.delete($scope.projectId, container.id, object.name);\n        };\n      }\n\n      function refreshView() {\n        $rootScope.$broadcast('delete_container', [container.name]);\n        $scope.storages = _.filter($scope.storages, storage => storage.id !== container.id);\n        $scope.filterStorages();\n      }\n\n      function createDeleteContainerTask() {\n        return function () {\n          _.set(container, 'status', 'deleting');\n          return CloudStorageContainers.delete($scope.projectId, container.id)\n            .then((result) => {\n              refreshView();\n              return result;\n            })\n            .finally(() => {\n              delete container.status; // eslint-disable-line\n            });\n        };\n      }\n\n      function checkResult() {\n        if (CloudStorageContainerTasksRunner.countErrorTasks()) {\n          CloudMessage.error($translate.instant('storage_delete_error'));\n        } else {\n          CloudMessage.success($translate.instant('storage_delete_success'));\n        }\n      }\n\n      // First, delete all objects from the container\n      return CloudStorageContainer.list($scope.projectId, container.id)\n        .then(containerData => containerData.objects)\n        .then((objects) => {\n          const deleteObjectTasks = _.map(objects, createDeleteObjectTask);\n          return CloudStorageContainerTasksRunner\n            .enqueue(`delete_objects_${$scope.projectId}_${container.id}`, deleteObjectTasks);\n        })\n        .then(() => CloudStorageContainerTasksRunner\n          .addTask(`delete_container_${$scope.projectId}_${container.id}`,\n            createDeleteContainerTask()))\n        .finally(() => {\n          checkResult();\n        });\n    }\n\n    $scope.delete = function (container) {\n      $uibModal.open({\n        windowTopClass: 'cui-modal',\n        templateUrl: 'app/cloud/project/storage/storage-delete-container/modal.html',\n        controller: 'RA.storage.deleteContainer',\n        controllerAs: 'RA.storage.deleteContainer',\n        windowClass: 'cloud_storage_container_delete',\n        resolve: {\n          storage() {\n            return container;\n          },\n        },\n      }).result.then(() => {\n        deleteContainer(container);\n      });\n    };\n\n    function getStorages() {\n      // Get Access Token before getting all metadata\n      // to prevent triggering simultaneous calls.\n      return CloudStorageContainer.getAccessAndToken($scope.projectId)\n        .then(() => CloudStorageContainers.list($scope.projectId))\n        .then((storages) => {\n          $scope.storages = storages;\n          $scope.storagesFiltered = storages;\n          $scope.orderStorages($scope.order.by);\n        })\n        .catch(() => {\n          CloudMessage.error($translate.instant('storage_load_error'));\n        })\n        .finally(() => {\n          $scope.loaders.storages = false;\n        });\n    }\n\n    function init() {\n      loadMessage();\n      resetSelectionModel();\n      getStorages();\n    }\n\n    init();\n  }]);\n"]}