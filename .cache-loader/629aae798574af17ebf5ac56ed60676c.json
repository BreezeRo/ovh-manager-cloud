{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/ts/project/details/key/dbaasts-project-details-key.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/ts/project/details/key/dbaasts-project-details-key.controller.js","mtime":1539717142164},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('DBaasTsProjectDetailsKeyCtrl',\n  function DBaasTsProjectDetailsKeyCtrl($q, $state, $stateParams, $translate, $uibModal, $scope,\n    Toast, OvhApiMe, OvhApiDBaasTsProject, DBaasTsProjectKey, OvhApiDBaasTsRegion,\n    DBaasTsConstants) {\n    // -- Vairables declaration --\n    const self = this;\n\n    const { serviceName } = $stateParams;\n\n    self.loaders = {};\n    self.errors = {};\n\n    self.data = {};\n\n    // -- Edit key --\n\n    self.edit = function (key) {\n      return $state.go('^.dbaasts-project-details-key-edit', { keyId: key.id });\n    };\n\n    // -- Delete key --\n\n    self.delete = function (key) {\n      $uibModal.open({\n        templateUrl: 'app/dbaas/ts/project/details/key/delete/modal.html',\n        controllerAs: 'ctrl',\n        controller($uibModalInstance) {\n          const modalSelf = this;\n          modalSelf.loaders = { deleting: false };\n\n          modalSelf.confirm = function () {\n            modalSelf.loaders.deleting = true;\n\n            DBaasTsProjectKey.v6().remove({\n              serviceName,\n              keyId: key.id,\n            }).$promise.then(() => {\n              // Remove deleted key\n              self.data.keys = _.reject(self.data.keys, { id: key.id });\n\n              // and clode modal\n              $uibModalInstance.close();\n              Toast.info($translate.instant('dtpdt_key_deletion_successful'));\n            }).catch((err) => {\n              Toast.error([$translate.instant('dtpdt_key_deletion_error'), (err.data && err.data.message) || ''].join(' '));\n            }).finally(() => {\n              modalSelf.loaders.deleting = false;\n            });\n          };\n        },\n      });\n    };\n\n    // -- Example of using a key --\n\n    self.showExample = function (key) {\n      $uibModal.open({\n        templateUrl: 'app/dbaas/ts/project/details/key/example/modal.html',\n        controller: 'DBaasTsProjectDetailsKeyCtrl.exampleUseToken',\n        controllerAs: 'ctrl',\n        resolve: {\n          params() {\n            return {\n              key,\n              apiURL: self.region.url,\n            };\n          },\n        },\n      });\n    };\n\n    self.showRegionInfo = function () {\n      $uibModal.open({\n        templateUrl: 'app/dbaas/ts/project/details/key/region-help/modal.html',\n        controllerAs: 'ctrl',\n        controller: function Ctrl() {\n          this.region = self.region;\n          this.guideURL = self.data.guideDBaasTsConceptsURL;\n        },\n      });\n    };\n\n    self.refresh = function () {\n      DBaasTsProjectKey.v6().resetQueryCache();\n      self.init();\n    };\n\n    this.resetCache = function () {\n      self.loaders.init = true;\n      window.location.reload();\n    };\n\n    // ---------INITIALIZATION---------\n\n    self.init = function () {\n      self.loaders.init = true;\n\n      const futureProject = OvhApiDBaasTsProject.v6().get({\n        serviceName,\n      }).$promise;\n\n      // Load regions to display the project's region name and URL\n      const futureRegions = OvhApiDBaasTsRegion.v6().query().$promise;\n\n      // Load keys\n      const futureKeys = DBaasTsProjectKey.v6().queryDetails(serviceName);\n\n      futureProject.then((project) => {\n        futureKeys.then((keys) => {\n          self.data.keys = keys;\n        });\n\n        futureRegions.then((regions) => {\n          // Find the region for the project\n          self.region = _.find(regions, { id: project.regionId });\n        });\n\n        return $q.all(futureRegions, futureKeys);\n      }).catch((err) => {\n        Toast.error([$translate.instant('dtpdt_key_loading_error'), (err.data && err.data.message) || ''].join(' '));\n        self.data.keys = null;\n        self.errors.init = true;\n      }).finally(() => {\n        self.loaders.init = false;\n      });\n    };\n\n    function initGuideURL() {\n      self.loaders.guide = true;\n      OvhApiMe.v6().get().$promise.then((me) => {\n        const lang = me.ovhSubsidiary;\n        self.data.guideDBaasTsConceptsURL = DBaasTsConstants.guides.concepts[lang]\n          || DBaasTsConstants.guides.concepts.FR;\n      }).finally(() => {\n        self.loaders.guide = false;\n      });\n    }\n\n    self.init();\n    initGuideURL();\n  });\n"]}