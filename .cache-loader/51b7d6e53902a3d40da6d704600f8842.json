{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/storage.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/storage.controller.js","mtime":1539717142056},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').controller('RA.storageCtrl', ['$filter', '$rootScope', '$scope', '$stateParams', '$translate', '$uibModal', 'CloudStorageContainer', 'CloudStorageContainers', 'CloudStorageContainerTasksRunner', 'CloudMessage', 'ovhDocUrl', 'RegionService', function ($filter, $rootScope, $scope, $stateParams, $translate, $uibModal, CloudStorageContainer, CloudStorageContainers, CloudStorageContainerTasksRunner, CloudMessage, ovhDocUrl, RegionService) {\n  $scope.projectId = $stateParams.projectId;\n  $scope.loaders = {\n    storages: true,\n    details: true\n  };\n  $scope.storages = null;\n  $scope.storagesFiltered = null; // for searching\n\n  $scope.open = {};\n  $scope.regionService = RegionService; // guides\n\n  $scope.guides = {\n    title: $translate.instant('storage_details_guide_title'),\n    list: [{\n      name: $translate.instant('storage_details_guide_pca'),\n      url: ovhDocUrl.getDocUrl('cloud/storage/pca')\n    }, {\n      name: $translate.instant('storage_details_guide_pcs'),\n      url: ovhDocUrl.getDocUrl('cloud/storage/pcs')\n    }],\n    footer: $translate.instant('storage_details_guide_footer')\n  }; // table sorting\n\n  $scope.order = {\n    by: 'name',\n    reverse: true,\n    filter: $filter('orderBy')\n  }; // table searching\n\n  $scope.filter = {\n    name: ''\n  }; // handle messages\n\n  $scope.messages = [];\n\n  function refreshMessage() {\n    $scope.messages = $scope.messageHandler.getMessages();\n  }\n\n  function loadMessage() {\n    CloudMessage.unSubscribe('iaas.pci-project.compute.storage');\n    $scope.messageHandler = CloudMessage.subscribe('iaas.pci-project.compute.storage', {\n      onMessage: function onMessage() {\n        return refreshMessage();\n      }\n    });\n  } // Do things on page change...\n\n\n  $scope.$watch('storagesPaginated', _.debounce(function (storages) {\n    if (!storages || !storages.length) {\n      return;\n    }\n\n    function getStorage(name, region) {\n      return _.find($scope.storagesFiltered, {\n        name: name,\n        region: region\n      });\n    } // ... like load metadata for each container\n\n\n    storages.forEach(function (container) {\n      if (container.shortcut) {\n        return;\n      }\n\n      CloudStorageContainer.getMetaData($scope.projectId, container.id).then(function (containerMeta) {\n        angular.merge(container, containerMeta); // Update source\n\n        angular.merge(getStorage(container.name, container.region), containerMeta);\n      });\n    });\n  }, 1000)); // Selection management\n\n  function resetSelectionModel() {\n    $scope.selectionModel = {\n      selected: [],\n      allSelected: false\n    };\n  }\n\n  $scope.$watch('currentPage', function () {\n    resetSelectionModel();\n  }); // Search callbacks\n\n  $scope.search = function (value) {\n    var regexp = new RegExp(value, 'i');\n    $scope.storagesFiltered = _.filter($scope.storages, function (storage) {\n      return regexp.test(storage.name);\n    });\n  };\n\n  $scope.showAll = function () {\n    $scope.storagesFiltered = $scope.storages;\n  }; // Filtering and ordering\n\n\n  $scope.orderStorages = function (by) {\n    if (by) {\n      if ($scope.order.by === by) {\n        $scope.order.reverse = !$scope.order.reverse;\n      } else {\n        $scope.order.by = by;\n      }\n    }\n\n    $scope.storagesFiltered = $scope.order.filter($scope.storagesFiltered, $scope.order.by, $scope.order.reverse);\n  };\n\n  $scope.filterStorages = function () {\n    if ($scope.filter.enabled) {\n      $scope.storagesFiltered = _.filter($scope.storages, function (storage) {\n        return storage.name && storage.name.toLowerCase().indexOf($scope.filter.name.toLowerCase()) !== -1;\n      });\n    } else {\n      $scope.storagesFiltered = $scope.storages;\n      $scope.filter.name = '';\n    }\n\n    $scope.orderStorages();\n  };\n  /* Delete (a) container(s) */\n\n\n  function deleteContainer(container) {\n    function createDeleteObjectTask(object) {\n      return function () {\n        return CloudStorageContainer.delete($scope.projectId, container.id, object.name);\n      };\n    }\n\n    function refreshView() {\n      $rootScope.$broadcast('delete_container', [container.name]);\n      $scope.storages = _.filter($scope.storages, function (storage) {\n        return storage.id !== container.id;\n      });\n      $scope.filterStorages();\n    }\n\n    function createDeleteContainerTask() {\n      return function () {\n        _.set(container, 'status', 'deleting');\n\n        return CloudStorageContainers.delete($scope.projectId, container.id).then(function (result) {\n          refreshView();\n          return result;\n        }).finally(function () {\n          delete container.status; // eslint-disable-line\n        });\n      };\n    }\n\n    function checkResult() {\n      if (CloudStorageContainerTasksRunner.countErrorTasks()) {\n        CloudMessage.error($translate.instant('storage_delete_error'));\n      } else {\n        CloudMessage.success($translate.instant('storage_delete_success'));\n      }\n    } // First, delete all objects from the container\n\n\n    return CloudStorageContainer.list($scope.projectId, container.id).then(function (containerData) {\n      return containerData.objects;\n    }).then(function (objects) {\n      var deleteObjectTasks = _.map(objects, createDeleteObjectTask);\n\n      return CloudStorageContainerTasksRunner.enqueue(\"delete_objects_\".concat($scope.projectId, \"_\").concat(container.id), deleteObjectTasks);\n    }).then(function () {\n      return CloudStorageContainerTasksRunner.addTask(\"delete_container_\".concat($scope.projectId, \"_\").concat(container.id), createDeleteContainerTask());\n    }).finally(function () {\n      checkResult();\n    });\n  }\n\n  $scope.delete = function (container) {\n    $uibModal.open({\n      windowTopClass: 'cui-modal',\n      templateUrl: 'app/cloud/project/storage/storage-delete-container/modal.html',\n      controller: 'RA.storage.deleteContainer',\n      controllerAs: 'RA.storage.deleteContainer',\n      windowClass: 'cloud_storage_container_delete',\n      resolve: {\n        storage: function storage() {\n          return container;\n        }\n      }\n    }).result.then(function () {\n      deleteContainer(container);\n    });\n  };\n\n  function getStorages() {\n    // Get Access Token before getting all metadata\n    // to prevent triggering simultaneous calls.\n    return CloudStorageContainer.getAccessAndToken($scope.projectId).then(function () {\n      return CloudStorageContainers.list($scope.projectId);\n    }).then(function (storages) {\n      $scope.storages = storages;\n      $scope.storagesFiltered = storages;\n      $scope.orderStorages($scope.order.by);\n    }).catch(function () {\n      CloudMessage.error($translate.instant('storage_load_error'));\n    }).finally(function () {\n      $scope.loaders.storages = false;\n    });\n  }\n\n  function init() {\n    loadMessage();\n    resetSelectionModel();\n    getStorages();\n  }\n\n  init();\n}]);",null]}