{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/dbaas-metrics/metrics.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/dbaas-metrics/metrics.service.js","mtime":1539717142069},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class MetricService {\n  constructor($q, $translate, CloudMessage, OvhApiMetrics) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.metrics = OvhApiMetrics;\n  }\n\n  getService(serviceName) {\n    return this.metrics.v6()\n      .get({\n        serviceName,\n      }).$promise\n      .then(response => this.acceptResponse(response))\n      .catch(response => this.rejectResponse(response.data, this.$translate.instant('metrics_err_service')));\n  }\n\n  getServiceInfos(serviceName) {\n    return this.metrics.v6()\n      .getServiceInfos({\n        serviceName,\n      }).$promise\n      .then(response => this.acceptResponse(response))\n      .catch(response => this.rejectResponse(response.data, this.$translate.instant('metrics_err_service')));\n  }\n\n  setServiceDescription(serviceName, description) {\n    return this.metrics.v6()\n      .edit({\n        serviceName,\n      }, {\n        description,\n      }).$promise\n      .then(response => this.acceptResponse(response))\n      .catch(response => this.rejectResponse(response.data, this.$translate.instant('metrics_setting_updated')));\n  }\n\n  getConsumption(serviceName) {\n    return this.metrics.v6()\n      .getConsumption({\n        serviceName,\n      }).$promise\n      .then(response => this.acceptResponse(response))\n      .catch(response => this.rejectResponse(response.data, this.$translate.instant('metrics_err_conso')));\n  }\n\n  getTokens(serviceName) {\n    this.metrics.Token().v6().resetAllCache();\n    return this.metrics.Token().v6()\n      .query({\n        serviceName,\n      })\n      .$promise\n      .then(tokenList => this.$q.all(tokenList.map(tokenID => this.metrics.Token().v6()\n        .get({\n          serviceName,\n          tokenID,\n        }).$promise)));\n  }\n\n  getToken(serviceName, tokenID) {\n    return this.metrics.Token().v6()\n      .get({\n        serviceName,\n        tokenID,\n      }).$promise;\n  }\n\n  addToken(token) {\n    return this.metrics.Token().v6()\n      .save(token)\n      .$promise\n      .then((response) => {\n        this.metrics.Token().v6().resetAllCache();\n        return this.acceptResponse(response, this.$translate.instant('metrics_token_created'));\n      })\n      .catch(response => this.rejectResponse(response.data, this.$translate.instant('metrics_token_err_create')));\n  }\n\n  updateToken(serviceName, tokenID, description) {\n    return this.metrics.Token().v6()\n      .edit({\n        serviceName,\n        tokenID,\n        description,\n      }).$promise\n      .then((response) => {\n        this.metrics.Token().v6().resetAllCache();\n        return this.acceptResponse(response, this.$translate.instant('metrics_token_updated'));\n      })\n      .catch(response => this.rejectResponse(response.data, this.$translate.instant('metrics_token_err_create')));\n  }\n\n  deleteToken(serviceName, tokenID) {\n    return this.metrics.Token().v6()\n      .delete({\n        serviceName,\n        tokenID,\n      })\n      .$promise\n      .then((response) => {\n        this.metrics.Token().v6().resetAllCache();\n        return this.acceptResponse(response, this.$translate.instant('metrics_token_revoked'));\n      })\n      .catch(response => this.rejectResponse(response.data, this.$translate.instant('metrics_err_delete_token')));\n  }\n\n  acceptResponse(data, message) {\n    return this.$q.resolve({\n      status: 'OK',\n      data,\n      message: this.CloudMessage.success(message),\n    });\n  }\n\n  rejectResponse(data, message) {\n    return this.$q.reject({\n      status: 'ERROR',\n      data,\n      message: this.CloudMessage.error(message),\n    });\n  }\n}\n\nangular.module('managerApp').service('MetricService', MetricService);\n"]}