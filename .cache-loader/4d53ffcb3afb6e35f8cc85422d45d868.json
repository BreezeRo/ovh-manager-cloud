{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/add/project-add.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/add/project-add.service.js","mtime":1539717142370},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["/* eslint-disable consistent-return */\n(() => {\n  class CloudProjectAdd {\n    constructor($q, $translate, $state, $window, atInternet, Toast, OvhApiCloud, OvhApiMe,\n      OvhApiVrack, CloudProjectSidebar) {\n      this.$q = $q;\n      this.$translate = $translate;\n      this.$state = $state;\n      this.$window = $window;\n      this.atInternet = atInternet;\n      this.Toast = Toast;\n      this.Cloud = OvhApiCloud;\n      this.User = OvhApiMe;\n      this.Vrack = OvhApiVrack;\n      this.CloudProjectSidebar = CloudProjectSidebar;\n    }\n\n    startProject(voucher, description, catalogVersion) {\n      // Agreements should be already accepted\n\n      return this.Cloud.v6().createProject({}, {\n        voucher,\n        description,\n        catalogVersion,\n      })\n        .$promise\n        .then((response) => {\n          let error;\n          switch (response.status) {\n            case 'creating':\n              // User needs to pay something\n              this.User.Order().v6().get({\n                orderId: response.orderId,\n              }).$promise\n                .then((order) => {\n                  this.$window.open(order.url, '_blank');\n                  this.updateManager(response.project, description);\n                  this.atInternet.trackEvent({\n                    name: '[PCI]NewProject',\n                    page: 'cloud-project::offer',\n                    customObject: {\n                      voucher,\n                    },\n                  });\n                  this.$state.go('iaas.pci-project.details', {\n                    projectId: response.project,\n                    fromProjectAdd: true,\n                  });\n                  this.Toast.success(this.$translate.instant('cpa_success', { url: order.url }));\n                })\n                .catch(() => {\n                  this.Toast.error(this.$translate.instant('cpa_error'));\n                });\n              break;\n            case 'ok':\n              if (response.project) {\n                // Success: go to it\n                this.updateManager(response.project, description);\n                this.$state.go('iaas.pci-project.details', {\n                  projectId: response.project,\n                  fromProjectAdd: true,\n                  createNewVm: true,\n                });\n              } else {\n                // Because it's not normal\n                this.Toast.error(this.$translate.instant('cpa_error'));\n              }\n              break;\n            case 'waitingAgreementsValidation':\n              error = {\n                agreements: this.getAllAgreementsInfo(response.agreements),\n              };\n              this.Toast.info(this.$translate.instant('cpa_error_contracts_tosign'));\n              return this.$q.reject(error);\n              // case \"validationPending\":\n            default:\n          }\n        })\n        .catch((err) => {\n          if (err && err.status) {\n            switch (err.status) {\n              case 400:\n                return this.Toast.error(this.$translate.instant('cpa_error_invalid_paymentmean'));\n              case 404:\n                return this.Toast.error(this.$translate.instant('cpa_error_invalid_voucher'));\n              case 409:\n                return this.Toast.error(this.$translate.instant('cpa_error_over_quota'));\n              default:\n                return this.Toast.error(this.$translate.instant('cpa_error') + (err.data && err.data.message ? ` (${err.data.message})` : ''));\n            }\n          } else if (err && err.agreements) {\n            return this.$q.reject(err);\n          }\n        });\n    }\n\n    getProjectInfo() {\n      return this.Cloud.v6().createProjectInfo()\n        .$promise\n        .then(response => this.$q.all({\n          agreementsToAccept: this.getAllAgreementsInfo(response.agreements),\n          orderToPay: this.$q.when(response.order),\n        }))\n        .catch((err) => {\n          if (err && err.status) {\n            switch (err.status) {\n              case 409:\n                this.Toast.error(this.$translate.instant('cpa_error_over_quota'));\n                break;\n              default:\n                this.Toast.error(this.$translate.instant('cpa_error') + (err.data && err.data.message ? ` (${err.data.message})` : ''));\n            }\n          }\n        });\n    }\n\n    getAllAgreementsInfo(agreementsIds) {\n      const agreements = [];\n      if (agreementsIds && agreementsIds.length) {\n        _.forEach(agreementsIds, (contractId) => {\n          agreements.push(this.getContractInfo(contractId));\n        });\n      }\n      return this.$q.all(agreements);\n    }\n\n    getContractInfo(contractId) {\n      return this.User.Agreements().v6().contract({\n        id: contractId,\n      })\n        .$promise\n        .then((contract) => {\n          _.set(contract, 'id', contractId);\n          return contract;\n        });\n    }\n\n    updateManager(projectId, description) {\n      this.CloudProjectSidebar.addToSection({\n        project_id: projectId, // jshint ignore:line\n        description,\n      });\n      this.Vrack.v6().resetCache();\n      this.Vrack.CloudProject().v6().resetQueryCache();\n    }\n  }\n  angular.module('managerApp').service('CloudProjectAdd', CloudProjectAdd);\n})();\n/* eslint-enable consistent-return */\n"]}