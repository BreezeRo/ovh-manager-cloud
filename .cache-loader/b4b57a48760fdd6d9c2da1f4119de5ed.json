{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/configure/compute-loadbalancer-configure.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/loadbalancer/configure/compute-loadbalancer-configure.controller.js","mtime":1539717142028},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeLoadbalancerConfigureCtrl {\n  constructor(\n    $anchorScroll, $scope, $state, $stateParams, $q, $location, $window, $translate,\n    CloudProjectComputeLoadbalancerService, OvhApiIpLoadBalancing, OvhApiCloudProjectIplb,\n    OvhApiCloudProject, ovhDocUrl, CloudMessage, IpLoadBalancerTaskService,\n    ControllerHelper, CloudPoll, ServiceHelper,\n  ) {\n    this.$anchorScroll = $anchorScroll;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$q = $q;\n    this.$location = $location;\n    this.$window = $window;\n    this.$translate = $translate;\n    this.CloudProjectComputeLoadbalancerService = CloudProjectComputeLoadbalancerService;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.OvhApiCloudProjectIplb = OvhApiCloudProjectIplb;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n    this.ovhDocUrl = ovhDocUrl;\n    this.CloudMessage = CloudMessage;\n    this.IpLoadBalancerTaskService = IpLoadBalancerTaskService;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudPoll = CloudPoll;\n    this.ServiceHelper = ServiceHelper;\n\n    this.serviceName = $stateParams.projectId;\n    this.loadbalancerId = $stateParams.loadbalancerId;\n    this.validate = $stateParams.validate;\n\n    this.loaders = {\n      loadbalancer: true,\n      table: {\n        server: false,\n      },\n      form: {\n        loadbalancer: false,\n      },\n    };\n\n    // Data\n    this.loadbalancer = {};\n    this.table = {\n      server: [],\n    };\n\n    this.form = {\n      openstack: false,\n      protocole: 'HTTP',\n      servers: {},\n    };\n\n    this.toggle = {\n      updatedMessage: false,\n    };\n  }\n\n  $onInit() {\n    // Get loadbalancer pending tasks and define poller\n    this.tasks = this.ControllerHelper.request.getArrayLoader({\n      loaderFunction: () => this.IpLoadBalancerTaskService.getTasks(this.loadbalancerId).then(tasks => _.filter(tasks, task => _.includes(['todo', 'doing'], task.status))),\n      successHandler: () => this.startTaskPolling(),\n    });\n    this.tasks.load();\n\n\n    let validatePromise;\n    // Terminate validation if params exists\n    if (this.validate) {\n      this.loaders.loadbalancer = true;\n      validatePromise = this.OvhApiCloudProjectIplb.v6().validate({\n        serviceName: this.serviceName,\n        id: this.validate,\n      }, {}).$promise\n        .then(() => {\n          this.$location.search('validate', null);\n          this.toggle.updatedMessage = true;\n        })\n        .catch(err => this.CloudMessage.error([\n          this.$translate.instant('cpc_loadbalancer_error'),\n          (err.data && err.data.message) || '',\n        ].join(' ')))\n        .finally(() => { this.loaders.loadbalancer = false; });\n      this.validate = '';\n    } else {\n      validatePromise = Promise.resolve('');\n    }\n\n    validatePromise.then(() => this.getLoadbalancer(true));\n\n    this.$scope.$on('$destroy', () => this.stopTaskPolling());\n    this.initGuides();\n  }\n\n  back() {\n    this.$state.go('iaas.pci-project.compute.loadbalancer');\n  }\n\n  initGuides() {\n    this.guides = {\n      horizon: this.ovhDocUrl.getDocUrl('g1773.creer_un_acces_a_horizon'),\n    };\n  }\n\n  // Get cloud servers to add in the loadbalancer\n  getServerList() {\n    if (this.loaders.table.server) {\n      return this.$q.reject('servers already loading');\n    }\n    this.loaders.table.server = true;\n    return this.CloudProjectComputeLoadbalancerService.getServerList({\n      serviceName: this.serviceName,\n      loadbalancer: this.loadbalancer,\n    })\n      .then(({ servers, attachedServers }) => {\n        this.attachedServers = attachedServers;\n        this.form.servers = _.mapValues(this.attachedServers, e => !!e);\n        this.table.server = servers;\n      }).catch(() => {\n        this.table.server = null;\n      }).finally(() => { this.loaders.table.server = false; });\n  }\n\n  configureAndDeployLoadbalancer() {\n    if (this.loaders.form.loadbalancer) {\n      return this.$q.reject('already sending configuration');\n    }\n    this.loaders.form.loadbalancer = true;\n    let configurePromise = this.$q.resolve();\n\n    // Configure the HTTP(80) loadbalancer\n    const configLoadBalancer = (_.values(this.form.servers).length\n      && _.reduce(\n        this.form.servers,\n        (res, value) => res && value, true,\n      )) || _.values(this.attachedServers).length > 0;\n    if (this.loadbalancer.status !== 'custom' && this.loadbalancer.status !== 'unavailable' && configLoadBalancer) {\n      if (this.loadbalancer.status === 'available') {\n        // Create farm and front\n        configurePromise = configurePromise.then(\n          () => this\n            .OvhApiIpLoadBalancing\n            .Farm()\n            .Http()\n            .v6()\n            .post({\n              serviceName: this.loadbalancerId,\n            }, {\n              displayName: 'PublicCloud',\n              port: 80,\n              zone: 'all',\n            }).$promise,\n        )\n          .then((farm) => { this.loadbalancer.farm = farm; })\n          .then(() => this\n            .OvhApiIpLoadBalancing\n            .Frontend()\n            .Http()\n            .v6()\n            .post({\n              serviceName: this.loadbalancerId,\n            }, {\n              displayName: 'PublicCloud',\n              port: 80,\n              zone: 'all',\n              defaultFarmId: this.loadbalancer.farm.farmId,\n            }).$promise)\n          .then((frontend) => { this.loadbalancer.frontend = frontend; });\n      }\n\n      // Add or remove servers\n      let modified = false;\n      _.forEach(this.form.servers, (enable, ip) => {\n        const server = _.find(this.table.server, { ip });\n        const displayName = server ? server.label : null;\n        if (enable && !this.attachedServers[ip]) {\n          modified = true;\n          configurePromise = configurePromise.then(() => this\n            .OvhApiIpLoadBalancing\n            .Farm()\n            .Http()\n            .Server()\n            .v6()\n            .post({ serviceName: this.loadbalancerId, farmId: this.loadbalancer.farm.farmId }, {\n              displayName,\n              port: 80,\n              address: ip,\n              status: 'active',\n            }).$promise);\n        }\n        if (!enable && this.attachedServers[ip]) {\n          modified = true;\n          configurePromise = configurePromise.then(() => this\n            .OvhApiIpLoadBalancing\n            .Farm()\n            .Http()\n            .Server()\n            .v6()\n            .delete({\n              serviceName: this.loadbalancerId,\n              serverId: this.attachedServers[ip].serverId,\n              farmId: this.loadbalancer.farm.farmId,\n            }).$promise);\n        }\n      });\n\n      // Deploy configuration\n      if (modified) {\n        configurePromise = configurePromise.then(() => this\n          .OvhApiIpLoadBalancing\n          .v6()\n          .refresh({\n            serviceName: this.loadbalancerId,\n          }, {}).$promise)\n          .then(() => this.tasks.load())\n          .then(() => this.getLoadbalancer(true));\n      }\n    }\n    // Configure the openstack importation\n    if (this.form.openstack && (!this.loadBalancerImported || this.loadBalancerImported.status !== 'validated')) {\n      // Need to remove old import to recreate it\n      if (this.loadBalancerImported) {\n        configurePromise = configurePromise.then(() => this\n          .OvhApiCloudProjectIplb\n          .v6()\n          .delete({ serviceName: this.serviceName, id: this.loadBalancerImported.id }).$promise);\n      }\n      configurePromise = configurePromise.then(() => this\n        .OvhApiCloudProjectIplb.v6()\n        .post({\n          serviceName: this.serviceName,\n        }, {\n          ipLoadbalancingServiceName: this.loadbalancerId,\n          redirection: `${this.$location.hash('').absUrl().replace(/\\?.*$/, '')}?validate=%id`,\n        }).$promise\n        .then((result) => {\n          this.$window.location.href = result.validationUrl;\n          this.loaders.form.redirect = true;\n        }));\n    } else if (!this.form.openstack && this.loadBalancerImported) {\n      configurePromise = configurePromise.then(() => this\n        .OvhApiCloudProjectIplb\n        .v6()\n        .delete({ serviceName: this.serviceName, id: this.loadBalancerImported.id }).$promise)\n        .then(() => {\n          this.loadBalancerImported = null;\n          this.form.openstack = false;\n        });\n    }\n    return configurePromise.then(() => {\n      this.toggle.updatedMessage = true;\n    }).catch(err => this.CloudMessage.error([\n      this.$translate.instant('cpc_loadbalancer_error'),\n      (err.data && err.data.message) || '',\n    ].join(' '))).finally(() => {\n      this.$location.hash('compute-loadbalancer-configure');\n      this.$anchorScroll();\n      this.loaders.form.loadbalancer = false;\n    });\n  }\n\n  getLoadbalancer(clearCache) {\n    this.loaders.loadbalancer = true;\n    if (clearCache) {\n      this.OvhApiCloudProjectIplb.v6().resetQueryCache();\n      this.OvhApiIpLoadBalancing.v6().resetQueryCache();\n    }\n    return this.$q.all({\n      loadbalancer: this\n        .CloudProjectComputeLoadbalancerService\n        .getLoadbalancer(this.loadbalancerId),\n      loadbalancersImported: this\n        .CloudProjectComputeLoadbalancerService\n        .getLoadbalancersImported(this.serviceName),\n    }).then(({ loadbalancer, loadbalancersImported }) => {\n      this.loadbalancer = loadbalancer;\n\n      this.loadBalancerImported = loadbalancersImported[this.loadbalancer.serviceName];\n      if (!this.loadBalancerImported) {\n        return;\n      }\n      if (this.loadBalancerImported.status === 'validated') {\n        this.form.openstack = true;\n      }\n    }).then(() => { this.loaders.loadbalancer = false; })\n      .then(() => this.getServerList())\n      .catch((err) => {\n        this.loadbalancer = null;\n        this.CloudMessage.error([\n          this.$translate.instant('cpc_loadbalancer_error'),\n          (err.data && err.data.message) || '',\n        ].join(' '));\n      });\n  }\n\n  startTaskPolling() {\n    this.stopTaskPolling();\n\n    this.poller = this.CloudPoll.pollArray({\n      items: this.tasks.data,\n      pollFunction: task => this.IpLoadBalancerTaskService.getTask(this.loadbalancerId, task.id),\n      stopCondition: (task) => {\n        const res = _.includes(['done', 'error'], task.status);\n        // Remove terminated tasks\n        if (res) {\n          this.tasks.data = _.filter(this.tasks.data, t => t.id !== task.id);\n        }\n        return res;\n      },\n    });\n  }\n\n  stopTaskPolling() {\n    if (this.poller) {\n      this.poller.kill();\n    }\n  }\n}\nangular.module('managerApp').controller('CloudProjectComputeLoadbalancerConfigureCtrl', CloudProjectComputeLoadbalancerConfigureCtrl);\n"]}