{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/cloud-database/order/vps-cloud-database-order.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/cloud-database/order/vps-cloud-database-order.controller.js","mtime":1539717374622},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class VpsCloudDatabaseOrderCtrl {\n  constructor(\n    $q,\n    $timeout,\n    $translate,\n    $window,\n    atInternet,\n    CloudMessage,\n    OvhApiHostingPrivateDatabase,\n    OvhApiOrderPrivateDatabase,\n    OvhApiMe,\n  ) {\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.$translate = $translate;\n    this.$window = $window;\n    this.atInternet = atInternet;\n    this.CloudMessage = CloudMessage;\n    this.ApiPrivateDb = OvhApiHostingPrivateDatabase.v6();\n    this.ApiOrderDb = OvhApiOrderPrivateDatabase.v6();\n    this.ApiMe = OvhApiMe.v6();\n  }\n\n  $onInit() {\n    this.loading = {\n      durations: false,\n      redirection: false,\n      purchaseOrder: false,\n    };\n\n    this.versions = [];\n    this.ramAmounts = [];\n    this.datacenters = [];\n    this.durations = null;\n\n    this.currentOrder = {\n      version: null,\n      ram: null,\n      datacenter: null,\n      duration: null,\n      contractsAccepted: false,\n    };\n\n    this.purchaseOrder = null;\n    this.redirectionTimeout = null;\n\n    this.loadSelectValues();\n    this.ApiMe.get().$promise.then((user) => {\n      this.user = user;\n    });\n  }\n\n  loadSelectValues() {\n    return this.ApiPrivateDb.availableOrderCapacities({ offer: 'public' }).$promise\n      .then((capacity) => {\n        this.versions = capacity.version.sort().map(version => ({\n          value: version,\n          name: this.$translate.instant(`common_database_version_${version.replace('.', '')}`),\n        }));\n        this.ramAmounts = capacity.ram.map(ram => ({\n          value: ram,\n          name: `${ram} ${this.$translate.instant('unit_size_MB')}`,\n        }));\n        this.datacenters = capacity.datacenter.map(datacenter => ({\n          value: datacenter,\n          name: this.$translate.instant(`common_datacenter_${datacenter}`),\n        }));\n      })\n      .catch(error => this.CloudMessage.error([\n        this.$translate.instant('vps_tab_cloud_database_order_fetch_capacities_failed'),\n        _(error).get('data.message', error),\n      ].join(' ')));\n  }\n\n  showOrRefreshDurations() {\n    this.cancelFurtherChoices();\n\n    if (!this.currentOrder.version\n      || !this.currentOrder.ram\n      || !this.currentOrder.datacenter) {\n      return this.$q.when();\n    }\n\n    const version = this.currentOrder.version.value;\n    const ram = this.currentOrder.ram.value;\n    const datacenter = this.currentOrder.datacenter.value;\n\n    this.loading.durations = true;\n    return this.ApiOrderDb.getNew({ version, ram, datacenter }).$promise\n      .then((durations) => {\n        this.durations = _.map(durations, duration => ({ value: duration, prices: null }));\n        // we run this in parallel, so no return\n        this.getPricesForEachDuration(this.durations, version, ram, datacenter);\n      })\n      .catch(error => this.CloudMessage.error([\n        this.$translate.instant('vps_tab_cloud_database_order_fetch_duration_failed'),\n        _(error).get('data.message', error),\n      ].join(' ')))\n      .finally(() => {\n        this.loading.durations = false;\n      });\n  }\n\n  cancelFurtherChoices() {\n    this.$timeout.cancel(this.redirectionTimeout);\n    this.loading.purchaseOrder = false;\n    this.loading.redirection = false;\n\n    this.currentOrder.duration = null;\n    this.currentOrder.contractsAccepted = false;\n    this.purchaseOrder = null;\n  }\n\n  getPricesForEachDuration(durations, version, ram, datacenter) {\n    return this.$q.all(_.map(\n      durations,\n      duration => this.getPrices(duration, version, ram, datacenter),\n    )).catch(error => this.CloudMessage.error([\n      this.$translate.instant('vps_tab_cloud_database_order_fetch_prices_failed'),\n      _(error).get('data.message', error),\n    ].join(' ')));\n  }\n\n  getPrices(duration, version, ram, datacenter) {\n    return this.ApiOrderDb.getNewDetails({\n      duration: duration.value, version, ram, datacenter,\n    }).$promise\n      .then((details) => {\n        // we want to trigger a change in the UI\n        // by assigning prices to each already shown duration\n        Object.assign(duration, { details });\n      });\n  }\n\n  canOrder() {\n    return !_.any(this.loading)\n      && this.currentOrder.version\n      && this.currentOrder.ram\n      && this.currentOrder.datacenter\n      && this.currentOrder.duration\n      && this.currentOrder.contractsAccepted;\n  }\n\n  generatePurchaseOrder() {\n    this.loading.purchaseOrder = true;\n    this.loading.redirection = true;\n    return this.ApiOrderDb.orderNew(\n      { duration: this.currentOrder.duration.value },\n      {\n        version: this.currentOrder.version.value,\n        ram: this.currentOrder.ram.value,\n        datacenter: this.currentOrder.datacenter.value,\n        offer: 'public',\n      },\n    ).$promise\n      .then((order) => {\n        this.purchaseOrder = order;\n        this.redirectionTimeout = this.$timeout(() => {\n          this.loading.redirection = false;\n          this.openPurchaseOrder(false);\n        }, 5000);\n      })\n      .catch(error => this.CloudMessage.error([\n        this.$translate.instant('vps_tab_cloud_database_order_failed'),\n        _(error).get('data.message', error),\n      ].join(' ')))\n      .finally(() => {\n        this.loading.purchaseOrder = false;\n      });\n  }\n\n  openPurchaseOrder(killAutoRedirection) {\n    if (killAutoRedirection) {\n      this.loading.redirection = false;\n      this.$timeout.cancel(this.redirectionTimeout);\n    }\n\n    this.atInternet.trackOrder({\n      name: `[sql-public]::${this.currentOrder.version.value}`,\n      page: 'web::payment-pending',\n      orderId: this.purchaseOrder.orderId,\n      priceTaxFree: this.purchaseOrder.prices.withoutTax.value,\n      price: this.purchaseOrder.prices.withTax.value,\n      status: 1,\n    });\n    this.$window.open(this.purchaseOrder.url);\n  }\n}\n\nangular.module('managerApp').controller('VpsCloudDatabaseOrderCtrl', VpsCloudDatabaseOrderCtrl);\n"]}