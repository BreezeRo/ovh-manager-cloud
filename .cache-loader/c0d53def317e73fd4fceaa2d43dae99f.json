{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/privateNetwork/cloud-project-compute-infrastructure-privateNetwork.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/privateNetwork/cloud-project-compute-infrastructure-privateNetwork.service.js","mtime":1539717141992},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class CloudProjectComputeInfrastructurePrivateNetworkService {\n  constructor($q, $timeout, $translate, CloudMessage, URLS, OvhApiMe, OvhApiCloudProjectRegion,\n    OvhApiCloudProjectNetworkPrivate, OvhApiCloudProjectNetworkPrivateSubnet) {\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.URLS = URLS;\n    this.User = OvhApiMe;\n    this.Region = OvhApiCloudProjectRegion;\n    this.OvhApiCloudProjectNetworkPrivate = OvhApiCloudProjectNetworkPrivate;\n    this.Subnet = OvhApiCloudProjectNetworkPrivateSubnet;\n\n    this.loaders = {\n      privateNetwork: {\n        query: false,\n        get: false,\n      },\n      region: {\n        query: false,\n      },\n      url: false,\n      save: false,\n      delete: false,\n    };\n\n    this.urls = {\n      api: null,\n    };\n\n    this.constraints = {\n      name: {\n        required: true,\n        trim: true,\n        maxlength: 256,\n      },\n      vlanId: {\n        required: true,\n        min: 2,\n        max: 4000,\n        debounce: 50,\n      },\n      subnet: {\n        address: {\n          required: true,\n          trim: true,\n        },\n        mask: {\n          required: true,\n          min: 1,\n          max: 32,\n          trim: true,\n        },\n        start: {\n          required: true,\n          trim: true,\n        },\n        end: {\n          required: true,\n          trim: true,\n        },\n      },\n      region: {\n        required: false,\n      },\n    };\n\n    this.states = {\n      retries: 0,\n    };\n  }\n\n  fetchPrivateNetworks(serviceName) {\n    this.loaders.privateNetwork.query = true;\n    this.OvhApiCloudProjectNetworkPrivate.v6().resetCache();\n\n    return this.OvhApiCloudProjectNetworkPrivate.v6().query({\n      serviceName,\n    }).$promise.catch(() => this.CloudMessage.error(this.$translate.instant('cpcipnd_fetch_private_networks_error')))\n      .finally(() => { this.loaders.privateNetwork.query = false; });\n  }\n\n  arePrivateNetworksLoading() {\n    return this.loaders.privateNetwork.query === true;\n  }\n\n  fetchPrivateNetwork(serviceName, id) {\n    this.loaders.privateNetwork.get = true;\n    this.OvhApiCloudProjectNetworkPrivate.v6().resetCache();\n\n    return this.OvhApiCloudProjectNetworkPrivate.v6().get({\n      serviceName,\n      networkId: id,\n    }).$promise.catch(() => this.CloudMessage.error(this.$translate.instant('cpcipnd_fetch_private_network_error')))\n      .finally(() => { this.loaders.privateNetwork.get = false; });\n  }\n\n  isPrivateNetworkLoading() {\n    return this.loaders.privateNetwork.get === true;\n  }\n\n  fetchRegions(serviceName) {\n    this.loaders.region.query = true;\n\n    return this.Region.v6().query({\n      serviceName,\n    }).$promise\n      .catch(() => this.CloudMessage.error(this.$translate.instant('cpcipnd_fetch_regions_error')))\n      .finally(() => { this.loaders.region.query = false; });\n  }\n\n  areRegionsLoading() {\n    return this.loaders.region.query === true;\n  }\n\n  fetchUrls() {\n    this.loaders.url = true;\n\n    return this.User.v6().get().$promise\n      .then((me) => {\n        this.urls.api = this.URLS.guides.vlans[me.ovhSubsidiary].api;\n      })\n      .catch(() => {\n        this.urls.api = this.URLS.guides.vlans.FR.api;\n      })\n      .finally(() => {\n        this.loaders.url = false;\n      });\n  }\n\n  areUrlsLoading() {\n    return this.loaders.url === true;\n  }\n\n  getUrls() {\n    return this.urls;\n  }\n\n  savePrivateNetwork(projectId, privateNetwork, onSuccess) {\n    this.loaders.save = true;\n\n    return this.OvhApiCloudProjectNetworkPrivate.v6().save({\n      serviceName: projectId,\n    }, privateNetwork).$promise.then((network) => {\n      const options = {\n        serviceName: projectId,\n        privateNetworkId: network.id,\n        status: 'ACTIVE',\n      };\n\n      this.states.retries = 0;\n\n      this.pollPrivateNetworkStatus(options, () => {\n        this.loaders.save = false;\n        onSuccess(network, options);\n      }, (error) => {\n        this.loaders.save = false;\n        this.CloudMessage.error(this.$translate.instant('cpcipnd_poll_error', {\n          message: error.data.message || JSON.stringify(error),\n        }));\n      });\n    }).catch((error) => {\n      this.CloudMessage.error(this.$translate.instant('cpcipnd_save_error', {\n        message: error.data.message || JSON.stringify(error),\n      }));\n      this.loaders.save = false;\n    });\n  }\n\n  pollPrivateNetworkStatus(options, onSuccess, onFailure) {\n    this.$timeout(() => {\n      if (this.isPrivateNetworkLoading()) {\n        return;\n      }\n\n      this.OvhApiCloudProjectNetworkPrivate.v6().resetCache();\n\n      this.fetchPrivateNetwork(\n        options.serviceName,\n        options.privateNetworkId,\n      ).then((network) => {\n        if (this.constructor.areAllRegionsActive(network)) {\n          onSuccess(network, options);\n        } else {\n          this.pollPrivateNetworkStatus(options, onSuccess, onFailure);\n        }\n      }).catch(error => onFailure(error));\n    }, options.delay || 2000);\n  }\n\n  saveSubnet(projectId, networkId, subnet) {\n    this.loaders.save = true;\n\n    return this.Subnet.v6().save({\n      serviceName: projectId,\n      networkId,\n    }, subnet).$promise\n      .catch((error) => {\n        this.CloudMessage.error(this.$translate.instant('cpcipnd_save_error', {\n          message: error.data.message || JSON.stringify(error),\n        }));\n      }).finally(() => {\n        this.loaders.save = false;\n      });\n  }\n\n  isSavePending() {\n    return this.loaders.save === true;\n  }\n\n  getConstraints() {\n    return this.constraints;\n  }\n\n  static areAllRegionsActive(network) {\n    return (network.status === 'ACTIVE')\n      && network.regions\n      && _.every(network.regions, region => region.status === 'ACTIVE');\n  }\n\n  deleteProjectNetworkPrivate(serviceName, networkId) {\n    this.loaders.delete = true;\n    return this.OvhApiCloudProjectNetworkPrivate.v6()\n      .delete({\n        serviceName,\n        networkId,\n      }).$promise\n      .catch(error => this.$q.reject(error))\n      .finally(() => {\n        this.loaders.delete = false;\n      });\n  }\n\n  isDeletePending() {\n    return this.loaders.delete === true;\n  }\n}\n\nangular.module('managerApp').service('CloudProjectComputeInfrastructurePrivateNetworkService', CloudProjectComputeInfrastructurePrivateNetworkService);\n"]}