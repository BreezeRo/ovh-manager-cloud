{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/region/region.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/region/region.service.js","mtime":1539717142398},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class RegionService {\n  constructor($translate) {\n    this.$translate = $translate;\n  }\n\n  static getMacroRegion(region) {\n    const macro = /[\\D]{2,3}/.exec(region);\n    return macro ? macro[0].replace('-', '').toUpperCase() : '';\n  }\n\n  getMacroRegionLowercase(region) {\n    const macro = this.constructor.getMacroRegion(region);\n    return macro ? macro.toLowerCase() : '';\n  }\n\n  static getRegionNumber(region) {\n    const number = /[\\d]+$/.exec(region);\n    return number ? number[0] : '';\n  }\n\n  getAllTranslatedMacroRegion() {\n    return {\n      SBG: this.$translate.instant('cloud_common_region_SBG'),\n      BHS: this.$translate.instant('cloud_common_region_BHS'),\n      GRA: this.$translate.instant('cloud_common_region_GRA'),\n      WAW: this.$translate.instant('cloud_common_region_WAW'),\n      DE: this.$translate.instant('cloud_common_region_DE'),\n      UK: this.$translate.instant('cloud_common_region_UK'),\n      US: this.$translate.instant('cloud_common_region_US'),\n    };\n  }\n\n  getTranslatedMacroRegion(region) {\n    const translatedMacroRegion = this.$translate.instant(`cloud_common_region_${this.constructor.getMacroRegion(region)}`);\n    return translatedMacroRegion || region;\n  }\n\n  getTranslatedMicroRegion(region) {\n    const translatedMicroRegion = this.$translate.instant(`cloud_common_region_${this.constructor.getMacroRegion(region)}_micro`, {\n      micro: region,\n    });\n    return translatedMicroRegion || region;\n  }\n\n  getTranslatedMicroRegionLocation(region) {\n    const translatedMicroRegionLocation = this.$translate.instant(`cloud_common_region_location_${this.constructor.getMacroRegion(region)}`);\n    return translatedMicroRegionLocation || region;\n  }\n\n  getRegionIconFlag(region) {\n    return `flag-icon-${this.getMacroRegionLowercase(region)}`;\n  }\n\n  getTranslatedRegionContinent(region) {\n    const translatedRegionContinent = this.$translate.instant(`cloud_common_region_continent_${this.constructor.getMacroRegion(region)}`);\n    return translatedRegionContinent || region;\n  }\n\n  getRegionCountry(region) {\n    const translatedMicroRegionLocation = this.getTranslatedMicroRegionLocation(region);\n    return _.trim(translatedMicroRegionLocation.split('(')[1], ')');\n  }\n\n  getRegion(regionParam) {\n    let region = regionParam;\n    region = region.toUpperCase();\n    return {\n      macroRegion: {\n        code: this.constructor.getMacroRegion(region),\n        text: this.getTranslatedMacroRegion(region),\n      },\n      microRegion: {\n        code: region,\n        text: this.getTranslatedMicroRegion(region),\n      },\n      location: this.getTranslatedMicroRegionLocation(region),\n      continent: this.getTranslatedRegionContinent(region),\n      icon: this.getRegionIconFlag(region),\n      country: this.getRegionCountry(region),\n    };\n  }\n}\n\nangular.module('managerApp').service('RegionService', RegionService);\n"]}