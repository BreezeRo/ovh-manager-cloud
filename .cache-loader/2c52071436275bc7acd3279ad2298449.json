{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/graph/iplb-graph.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/graph/iplb-graph.controller.js","mtime":1539717142198},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerGraphCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerGraphCtrl.$inject = [\"$stateParams\", \"ControllerHelper\", \"IpLoadBalancerConstant\", \"IpLoadBalancerMetricsService\", \"moment\"];\n\n  function IpLoadBalancerGraphCtrl($stateParams, ControllerHelper, IpLoadBalancerConstant, IpLoadBalancerMetricsService, moment) {\n    _classCallCheck(this, IpLoadBalancerGraphCtrl);\n\n    this.$stateParams = $stateParams;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConstant = IpLoadBalancerConstant;\n    this.IpLoadBalancerMetricsService = IpLoadBalancerMetricsService;\n    this.moment = moment;\n  }\n\n  _createClass(IpLoadBalancerGraphCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this = this;\n\n      this.connLoader = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.getData('conn');\n        }\n      });\n      this.reqmLoader = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.getData('reqm');\n        }\n      });\n      this.offerLoader = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.IpLoadBalancerMetricsService.getService(_this.$stateParams.serviceName);\n        }\n      });\n      this.initGraph();\n      this.loadGraphs();\n    }\n  }, {\n    key: \"initGraph\",\n    value: function initGraph() {\n      this.data = {};\n      this.metricsList = this.IpLoadBalancerConstant.graphs;\n      this.options = {\n        scales: {\n          xAxes: [{\n            gridLines: {\n              display: false\n            }\n          }],\n          yAxes: [{\n            id: 'y-axe',\n            type: 'linear',\n            ticks: {\n              min: 0,\n              beginAtZero: true\n            }\n          }]\n        },\n        elements: {\n          line: {\n            fill: 'bottom',\n            backgroundColor: '#59d2ef',\n            borderColor: '#00a2bf',\n            borderWidth: 4\n          },\n          point: {\n            radius: 0\n          }\n        }\n      };\n    }\n  }, {\n    key: \"loadGraphs\",\n    value: function loadGraphs() {\n      var _this2 = this;\n\n      this.offerLoader.load().then(function (service) {\n        var scales = _this2.IpLoadBalancerConstant.graphScales[service.offer];\n\n        if (!scales) {\n          scales = _this2.IpLoadBalancerConstant.graphScales.lb1;\n        }\n\n        _this2.scales = _.reduce(scales, function (scalesParam, scale) {\n          var scales = scalesParam; // eslint-disable-line\n\n          scales[scale] = _this2.IpLoadBalancerConstant.graphParams[scale];\n          return scales;\n        }, {});\n        _this2.scale = _.first(_.keys(_this2.scales));\n\n        _this2.connLoader.load();\n\n        _this2.reqmLoader.load();\n      });\n    }\n  }, {\n    key: \"refreshGraphs\",\n    value: function refreshGraphs() {\n      this.connLoader.load();\n      this.reqmLoader.load();\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(metric) {\n      var _this3 = this;\n\n      var downsample = this.IpLoadBalancerConstant.graphParams[this.scale].downsample;\n      var downsampleAggregation = this.metric === 'conn' ? 'sum' : 'max';\n      return this.IpLoadBalancerMetricsService.getData(metric, this.scale, null, {\n        downsample: \"\".concat(downsample, \"-\").concat(downsampleAggregation)\n      }).then(function (data) {\n        if (data.length && data[0].dps) {\n          return {\n            data: {\n              data: _.values(data[0].dps),\n              labels: _this3.humanizeLabels(_.keys(data[0].dps))\n            }\n          };\n        }\n\n        return {};\n      });\n    }\n  }, {\n    key: \"humanizeLabels\",\n    value: function humanizeLabels(labels) {\n      var _this4 = this;\n\n      return labels.map(function (label) {\n        return _this4.moment(label, 'X').format('MM/DD/YY - HH:mm:ss');\n      });\n    }\n  }, {\n    key: \"onScaleChange\",\n    value: function onScaleChange() {\n      this.refreshGraphs();\n    }\n  }]);\n\n  return IpLoadBalancerGraphCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerGraphCtrl', IpLoadBalancerGraphCtrl);",null]}