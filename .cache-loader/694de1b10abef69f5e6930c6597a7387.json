{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/storage-details/storage-details.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/storage/storage-details/storage-details.controller.js","mtime":1538395460843},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module(\"managerApp\").controller(\"RA.storageDetailsCtrl\", [\n    \"$interval\",\n    \"$rootScope\",\n    \"$scope\",\n    \"$stateParams\",\n    \"$translate\",\n    \"$uibModal\",\n    \"$window\",\n    \"CLOUD_PCA_FILE_STATE\",\n    \"OvhApiCloudProjectUser\",\n    \"CloudStorageContainer\",\n    \"CloudStorageContainerTasksRunner\",\n    \"CloudStorageContainersConfiguration\",\n    \"CloudMessage\",\n    \"ovhDocUrl\",\n    function ($interval, $rootScope, $scope, $stateParams, $translate, $uibModal, $window, CLOUD_PCA_FILE_STATE,\n              OvhApiCloudProjectUser, CloudStorageContainer, CloudStorageContainerTasksRunner,\n              CloudStorageContainersConfiguration, CloudMessage, ovhDocUrl) {\n        \"use strict\";\n\n        $scope.projectId = $stateParams.projectId;\n        $scope.storageId = $stateParams.storageId;\n\n        // make it accessible to the UI\n        $scope.CLOUD_PCA_FILE_STATE = CLOUD_PCA_FILE_STATE;\n\n        $scope.loaders = { details: true, pager: false, uploading: false };\n\n        $scope.model = { allSelected: false, selected: [] };\n\n        $scope.errors = { notfound: false, notdefined: false };\n\n        $scope.showTask = false;\n        $scope.globalProgress = 0;\n\n        $scope.connectionInformation = {};\n        $scope.storage = {};\n        $scope.objects = [];\n        $scope.maxSize = 20;\n        $scope.password = null;\n        $scope.guides = {\n            title: $translate.instant(\"storage_details_guide_title\"),\n            list: [{\n                name: $translate.instant(\"storage_details_guide_pca\"),\n                url: ovhDocUrl.getDocUrl(\"cloud/storage/pca\")\n            }, {\n                name: $translate.instant(\"storage_details_guide_pcs\"),\n                url: ovhDocUrl.getDocUrl(\"cloud/storage/pcs\")\n            }],\n            footer: $translate.instant(\"storage_details_guide_footer\")\n        };\n        $scope.messages = [];\n\n        function refreshMessage () {\n            $scope.messages = $scope.messageHandler.getMessages();\n        }\n\n        function loadMessage () {\n            CloudMessage.unSubscribe(\"iaas.pci-project.compute.storage.details\");\n            $scope.messageHandler = CloudMessage.subscribe(\"iaas.pci-project.compute.storage.details\", { onMessage: () => refreshMessage() });\n        }\n\n        $scope.computeStorageSize = function () {\n            return _.sum(_.map($scope.objects, \"size\"));\n        };\n\n        $scope.openDNSHelp = function () {\n            $uibModal.open({\n                templateUrl: \"app/cloud/project/storage/storage-hosting-help/modal.html\",\n                controller: \"RA.storage.dnsHelp\",\n                controllerAs: \"RA.storage.dnsHelp\",\n                params: {\n                    storage: $scope.storage\n                }\n            });\n        };\n\n        $scope.getPcaPassword = function () {\n            var connectionInformation = $scope.connectionInformation;\n            return [\n                connectionInformation.osTenantName || \"<tenant_name>\",\n                connectionInformation.osUsername || \"<username>\",\n                \"<password>\"\n            ].join(\".\");\n        };\n\n        $scope.addObjects = function () {\n            $uibModal.open({\n                templateUrl: \"app/cloud/project/storage/storage-add-object/modal.html\",\n                controller: \"RA.storage.addObject\",\n                controllerAs: \"RA.storage.addObject\"\n            }).result.then(function (response) {\n                uploadObject(response.files, response.prefix);\n            });\n        };\n\n        $scope.fileDownload = function (file) {\n            if (file.retrievalState === CLOUD_PCA_FILE_STATE.SEALED) {\n                var index = locationOf(file.name, $scope.objects);\n                if (index > -1) {\n                    $scope.objects[index] = _.assign(file, { sealingStateLoading: true });\n                }\n            }\n            CloudStorageContainer.download($scope.projectId, $stateParams.storageId, file)\n                .then(function (url) {\n                    if (url) {\n                        var link = document.createElement(\"a\");\n                        link.setAttribute(\"href\", url);\n                        link.style.visibility = \"hidden\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n\n                    return getObject(file.name)\n                        .then(function (data) {\n                            $scope.objects[index] = _.assign(file, data);\n                            return $scope.objects[index];\n                        })\n                        .then(setFileStateText);\n                })\n                .finally(function () {\n                    file.sealingStateLoading = false;\n                });\n        };\n\n        $scope[\"delete\"] = function (element) {\n            $uibModal.open({\n                templateUrl: \"app/cloud/project/storage/storage-delete-object/modal.html\",\n                controller: \"RA.storage.deleteObject\",\n                controllerAs: \"RA.storage.deleteObject\",\n                resolve: {\n                    params: function () {\n                        return [element];\n                    }\n                }\n            }).result.then(function () {\n                deleteObject(element);\n                resetSelectionModel();\n            });\n        };\n\n        $scope.deleteAll = function () {\n            var toDelete = _.compact(_.map($scope.model.selected, function (selected, index) {\n                return selected ? $scope.files[index] : null;\n            }));\n            $uibModal.open({\n                templateUrl: \"app/cloud/project/storage/storage-delete-object/modal.html\",\n                controller: \"RA.storage.deleteObject\",\n                controllerAs: \"RA.storage.deleteObject\",\n                resolve: {\n                    params: function () {\n                        return toDelete;\n                    }\n                }\n            }).result.then(function () {\n                _.forEach(toDelete, function (object) {\n                    deleteObject(object);\n                });\n                resetSelectionModel();\n            });\n        };\n\n        $scope.selectAll = function () {\n            $scope.model.selected = _.times($scope.files.length, function () {\n                return $scope.model.allSelected;\n            });\n        };\n\n        $scope.select = function () {\n            $scope.model.allSelected = $scope.model.selected.length === $scope.files.length && _.all($scope.model.selected, function (select) { return select; });\n        };\n\n        $scope.manySelected = function () {\n            return $scope.selectionCount() > 1;\n        };\n\n        $scope.selectionCount = function () {\n            return _.size(_.filter($scope.model.selected, function (value) { return value; }));\n        };\n\n        $scope.$on(\"delete_object\", function (event, data) {\n            if (data[0] === $scope.storage.name && data[1] && $scope.storage) {\n                var index = locationOf(data[1], $scope.objects);\n                var elem = $scope.objects[index];\n                $scope.objects.splice(index, 1);\n                $scope.storage.stored -= elem.size;\n            }\n        });\n\n        init();\n\n        function uploadObject (files, prefix) {\n            prefix = prefix.substr(1);\n\n            var queuePromise;\n\n            angular.forEach(files, function (file) {\n                queuePromise = CloudStorageContainerTasksRunner.addTask(\"upload_\" + $scope.projectId + \"_\" + $stateParams.storageId, createUploadTask(file, prefix));\n            });\n\n            queuePromise.then(function () {\n                if (CloudStorageContainerTasksRunner.countErrorTasks()) {\n                    CloudMessage.error($translate.instant(\"storage_object_upload_error\"));\n                }\n            });\n\n            function createUploadTask (file, prefix) {\n                return function () {\n                    $scope.loaders.uploading = true;\n                    return CloudStorageContainer.upload($scope.projectId, $stateParams.storageId, {\n                        file: file,\n                        prefix: prefix\n                    })\n                    .then(function (result) {\n                        refreshList();\n                        return result;\n                    })\n                    .finally(function () {\n                        $scope.loaders.uploading = false;\n                    });\n                };\n\n                function refreshList () {\n                    try {\n                        var newFile = {\n                            name: prefix + file.name,\n                            lastModified: Date.now(),\n                            size: file.size,\n                            contentType: file.type,\n                            retrievalState: $scope.storage.shortcut === \"pca\" ? CLOUD_PCA_FILE_STATE.SEALED : CLOUD_PCA_FILE_STATE.UNSEALED,\n                            region: $scope.storage.region\n                        };\n                        setFileStateText(newFile);\n                        insertIntoStorageList(newFile);\n                        $scope.storage.stored += file.size;\n                    } catch (e) {}\n                }\n            }\n        }\n\n        function deleteObject (elem) {\n            var queuePromise = CloudStorageContainerTasksRunner.addTask(\"upload_\" + $scope.projectId + \"_\" + $stateParams.storageId, createDeleteTask(elem));\n            queuePromise.then(function () {\n                if (CloudStorageContainerTasksRunner.countErrorTasks()) {\n                    CloudMessage.error($translate.instant(\"storage_object_delete_error\"));\n                }\n            });\n            return queuePromise;\n\n            function createDeleteTask (elem) {\n                return function () {\n                    var index = _.findIndex($scope.objects, { name: elem.name, lastModified: elem.lastModified, contentType: elem.contentType });\n                    if (index === -1) {\n                        return;\n                    }\n                    return CloudStorageContainer.delete($scope.projectId, $stateParams.storageId, elem.name)\n                        .then(function (result) {\n                            $rootScope.$broadcast(\"delete_object\", [$scope.storage.name, elem.name]);\n                            return result;\n                        });\n                };\n            }\n        }\n\n        function getObject (name) {\n            return CloudStorageContainer.list($scope.projectId, $stateParams.storageId)\n                .then(function (details) {\n                    var file = _.find(details.objects, { name: name });\n                    file.region = details.region;\n                    return file;\n                });\n        }\n\n        function getObjectList (marker) {\n            var options = { limit: 1000 };\n\n            if (marker) {\n                options.start = marker;\n            }\n\n            $scope.loaders.pager = true;\n            $scope.loaders.details = true;\n\n            var storageDetails;\n\n            return CloudStorageContainer.list($scope.projectId, $stateParams.storageId)\n                .then(function (details) {\n                    storageDetails = details;\n                    $scope.title = `${$translate.instant(\"storage_object_title\")} : ${storageDetails.name}`;\n                    return CloudStorageContainer.getMetaData($scope.projectId, $stateParams.storageId);\n                })\n                .then(function (metaData) {\n                    storageDetails.shortcut = metaData.shortcut;\n\n                    _.each(storageDetails.objects, function (file) {\n                        setFileStateText(file);\n                    });\n\n                    $scope.objects = $scope.objects.concat(storageDetails.objects);\n                    $scope.storage = storageDetails;\n\n                    if (storageDetails.objects.length === options.limit) {\n                        $scope.getObjectList(encodeURIComponent(_.last($scope.objects).name));\n                    } else {\n                        var accessCache = CloudStorageContainersConfiguration.accessCache;\n                        var endpoint = _.find(accessCache.get($scope.projectId).endpoints, { region: $scope.storage.region });\n                        $scope.url = endpoint.url + \"/\" + encodeURIComponent($scope.storage.name);\n                        $scope.loaders.pager = false;\n                    }\n\n                    return loadConnectionInformation($scope.storage.region);\n                })\n                .catch(function (details) {\n                    $scope.loaders.pager = false;\n\n                    if (details.status === 404) {\n                        $scope.errors.notfound = true;\n                    } else {\n                        $scope.errors.notdefined = true;\n                    }\n                })\n                .finally(function () {\n                    $rootScope.$broadcast(\"stopLoading\");\n                    $scope.loaders.details = false;\n                });\n        }\n\n        function setFileStateText (file) {\n            switch (file.retrievalState) {\n                case CLOUD_PCA_FILE_STATE.SEALED:\n                    file.stateText = $translate.instant(\"storage_availability_sealed\");\n                    break;\n                case CLOUD_PCA_FILE_STATE.UNSEALED:\n                    file.stateText = $translate.instant(\"storage_availability_unsealed\");\n                    break;\n                case CLOUD_PCA_FILE_STATE.UNSEALING:\n                    startUnsealingCountdown(file);\n                    break;\n                default:\n                    file.stateText = \"\";\n            }\n        }\n\n        function startUnsealingCountdown (file) {\n            file.stateText = retrivalCountdownText(file.retrievalDelay);\n            file.interval = $interval(function () {\n                file.stateText = retrivalCountdownText(file.retrievalDelay);\n                file.retrievalDelay -= 1;\n                if (file.retrievalDelay === 0) {\n                    file.retrievalState = CLOUD_PCA_FILE_STATE.UNSEALED;\n                    file.stateText = $translate.instant(\"storage_availability_unsealed\");\n                }\n            }, 1000, file.retrievalDelay);\n        }\n\n        function loadConnectionInformation (region) {\n            var request = {\n                serviceName: $stateParams.projectId\n            };\n\n            if ($scope.storage.shortcut !== \"pca\") {\n                return;\n            }\n\n            return OvhApiCloudProjectUser.v6().query(request).$promise\n                .then(function (users) {\n                    $scope.users = users;\n                    if (users.length > 0) {\n                        request.userId = users[0].id;\n                        request.region = region;\n                        return OvhApiCloudProjectUser.Aapi().openrc(request).$promise;\n                    }\n                    return null;\n                })\n                .then(function (response) {\n                    if (!response) {\n                        return;\n                    }\n\n                    $scope.connectionInformation = response;\n\n                    if ($scope.users.length > 1) {\n                        $scope.connectionInformation.osUsername = null;\n                    }\n                });\n        }\n\n        function retrivalCountdownText (delay) {\n            if (delay === 0) {\n                return $translate.instant(\"storage_availability_unsealed\");\n            }\n            var hours = Math.floor(delay / 3600);\n            var minutes = Math.floor((delay - hours * 3600) / 60);\n            var seconds = delay - hours * 3600 - minutes * 60;\n            var delayText = _.map([hours, minutes, seconds], function (time) { return _.padLeft(time, 2, \"0\"); }).join(\":\");\n            return $translate.instant(\"storage_availability_unsealing\", { delay: delayText });\n        }\n\n        function insertIntoStorageList (element) {\n            if (!$scope.objects || $scope.objects.length === 0) {\n                $scope.objects = [element];\n                return;\n            }\n\n            var index = locationOf(element.name, $scope.objects);\n\n            if (index >= $scope.objects.length) {\n                $scope.objects.push(element);\n                return;\n            }\n\n            if ($scope.objects[index].name !== element.name) {\n                $scope.objects.splice(index, 0, element);\n                return;\n            }\n        }\n\n        function locationOf (element, array) {\n            var low = 0;\n            var high = array.length;\n            var mid = -1;\n            var c = 0;\n            while (low < high) {\n                mid = parseInt((low + high) / 2, 10);\n                c = sortAlpha(array[mid].name, element);\n                if (c < 0) {\n                    low = mid + 1;\n                } else if (c > 0) {\n                    high = mid;\n                } else {\n                    return mid;\n                }\n            }\n            return low;\n        }\n\n        function sortAlpha (a, b) {\n            if (a < b) {\n                return -1;\n            }\n            if (a > b) {\n                return 1;\n            }\n            return 0;\n        }\n\n        $scope.$watch(\"currentPage\", function () {\n            resetSelectionModel();\n        });\n\n        function resetSelectionModel () {\n            $scope.model.selected = [];\n            $scope.model.allSelected = false;\n        }\n\n        function init () {\n            getObjectList();\n            loadMessage();\n        }\n    }]);\n"]}