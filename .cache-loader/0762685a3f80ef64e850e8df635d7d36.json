{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/dashboard/vps-dashboard.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/dashboard/vps-dashboard.controller.js","mtime":1539717142287},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsDashboardCtrl =\n/*#__PURE__*/\nfunction () {\n  VpsDashboardCtrl.$inject = [\"$filter\", \"$q\", \"$scope\", \"$state\", \"$stateParams\", \"$translate\", \"CloudMessage\", \"ControllerHelper\", \"RegionService\", \"SidebarMenu\", \"VpsActionService\", \"VpsService\"];\n\n  function VpsDashboardCtrl($filter, $q, $scope, $state, $stateParams, $translate, CloudMessage, ControllerHelper, RegionService, SidebarMenu, VpsActionService, VpsService) {\n    _classCallCheck(this, VpsDashboardCtrl);\n\n    this.$filter = $filter;\n    this.$q = $q;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$translate = $translate;\n    this.ControllerHelper = ControllerHelper;\n    this.CloudMessage = CloudMessage;\n    this.RegionService = RegionService;\n    this.serviceName = $stateParams.serviceName;\n    this.SidebarMenu = SidebarMenu;\n    this.VpsActionService = VpsActionService;\n    this.VpsService = VpsService;\n    this.plan = {};\n    this.summary = {};\n    this.vps = {};\n    this.loaders = {\n      disk: false,\n      ip: false,\n      polling: false\n    };\n  }\n\n  _createClass(VpsDashboardCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this = this;\n\n      this.vps = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.VpsService.getSelectedVps(_this.serviceName);\n        },\n        successHandler: function successHandler() {\n          _this.getRegionsGroup(_this.vps.data.location.datacentre);\n\n          if (!_this.vps.data.isExpired) {\n            _this.loadIps();\n\n            _this.hasAdditionalDiskOption();\n          }\n        }\n      });\n      this.summary = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.VpsService.getTabSummary(_this.serviceName, true);\n        },\n        successHandler: function successHandler() {\n          return _this.initOptionsActions();\n        }\n      });\n      this.plan = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this.VpsService.getServiceInfos(_this.serviceName);\n        }\n      });\n    }\n  }, {\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this2 = this;\n\n      this.initActions();\n      this.initLoaders();\n      this.vps.load();\n      this.summary.load();\n      this.plan.load();\n      this.$scope.$on('tasks.pending', function (event, opt) {\n        if (opt === _this2.serviceName) {\n          _this2.loaders.polling = true;\n        }\n      });\n      this.$scope.$on('tasks.success', function (event, opt) {\n        if (opt === _this2.serviceName) {\n          _this2.loaders.polling = false;\n\n          _this2.vps.load();\n        }\n      });\n    }\n  }, {\n    key: \"loadIps\",\n    value: function loadIps() {\n      var _this3 = this;\n\n      this.loaders.ips = true;\n      this.VpsService.getIps(this.serviceName).then(function (ips) {\n        _this3.vps.data.ipv6Gateway = _.get(_.find(ips.results, {\n          version: 'v6'\n        }), 'gateway');\n        _this3.loaders.ips = false;\n      });\n    }\n  }, {\n    key: \"hasAdditionalDiskOption\",\n    value: function hasAdditionalDiskOption() {\n      if (!_.include(this.vps.data.availableOptions, 'ADDITIONAL_DISK')) {\n        this.hasAdditionalDisk = false;\n        return this.hasAdditionalDisk;\n      }\n\n      return this.loadAdditionalDisks();\n    }\n  }, {\n    key: \"loadAdditionalDisks\",\n    value: function loadAdditionalDisks() {\n      var _this4 = this;\n\n      this.loaders.disk = true;\n      this.hasAdditionalDisk = true;\n      this.VpsService.getDisks(this.serviceName).then(function (data) {\n        var promises = _.map(data, function (elem) {\n          return _this4.VpsService.getDiskInfo(_this4.serviceName, elem);\n        });\n\n        return _this4.$q.all(promises).then(function (diskInfos) {\n          _this4.additionnalDisks = _this4.VpsService.showOnlyAdditionalDisk(diskInfos);\n          _this4.canOrderDisk = _.isEmpty(_this4.additionnalDisks);\n        });\n      }).catch(function (error) {\n        _this4.CloudMessage.error(error || _this4.$translate.instant('vps_additional_disk_info_fail'));\n\n        return _this4.$q.reject(error);\n      }).finally(function () {\n        _this4.loaders.disk = false;\n      });\n    }\n  }, {\n    key: \"initBackupStorageActions\",\n    value: function initBackupStorageActions() {\n      var _this5 = this;\n\n      this.backupStorageActions = {\n        manage: {\n          text: this.$translate.instant('common_manage'),\n          callback: function callback() {\n            return _this5.$state.go('iaas.vps.detail.backup-storage', {\n              serviceName: _this5.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this5.vps.loading;\n          }\n        },\n        order: {\n          text: this.$translate.instant('common_order'),\n          callback: function callback() {\n            return _this5.$state.go('iaas.vps.detail.backup-storage.order', {\n              serviceName: _this5.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this5.vps.loading;\n          }\n        },\n        terminate: {\n          text: this.$translate.instant('vps_configuration_desactivate_option'),\n          callback: function callback() {\n            return _this5.VpsActionService.terminateBackupStorageOption(_this5.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this5.vps.loading;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"initSnapshotActions\",\n    value: function initSnapshotActions() {\n      var _this6 = this;\n\n      this.snapshotDescription = this.summary.data.snapshot.creationDate ? \"\".concat(this.$translate.instant('vps_tab_SUMMARY_snapshot_creationdate'), \" \").concat(moment(this.summary.data.snapshot.creationDate).format('LLL')) : this.$translate.instant('vps_status_enabled');\n      this.snapshotActions = {\n        delete: {\n          text: this.$translate.instant('vps_configuration_delete_snapshot_title_button'),\n          callback: function callback() {\n            return _this6.VpsActionService.deleteSnapshot(_this6.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this6.summary.loading && _this6.summary.data.snapshot.creationDate && !_this6.loaders.polling;\n          }\n        },\n        order: {\n          text: this.$translate.instant('common_order'),\n          callback: function callback() {\n            return _this6.$state.go('iaas.vps.detail.snapshot-order', {\n              serviceName: _this6.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this6.summary.loading && _this6.summary.data.snapshot.optionAvailable;\n          }\n        },\n        restore: {\n          text: this.$translate.instant('vps_configuration_snapshot_restore_title_button'),\n          callback: function callback() {\n            return _this6.VpsActionService.restoreSnapshot(_this6.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this6.summary.loading && _this6.summary.data.snapshot.creationDate && !_this6.loaders.polling;\n          }\n        },\n        take: {\n          text: this.$translate.instant('vps_configuration_snapshot_take_title_button'),\n          callback: function callback() {\n            return _this6.VpsActionService.takeSnapshot(_this6.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this6.summary.loading && _this6.summary.data.snapshot.optionActivated && !_this6.summary.data.snapshot.creationDate && !_this6.loaders.polling;\n          }\n        },\n        terminate: {\n          text: this.$translate.instant('vps_configuration_desactivate_option'),\n          callback: function callback() {\n            return _this6.VpsActionService.terminateSnapshotOption(_this6.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this6.summary.loading && _this6.summary.data.snapshot.optionActivated;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"initVeeamActions\",\n    value: function initVeeamActions() {\n      var _this7 = this;\n\n      this.veeamActions = {\n        manage: {\n          text: this.$translate.instant('common_manage'),\n          callback: function callback() {\n            return _this7.$state.go('iaas.vps.detail.veeam', {\n              serviceName: _this7.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this7.vps.loading;\n          }\n        },\n        order: {\n          text: this.$translate.instant('common_order'),\n          callback: function callback() {\n            return _this7.$state.go('iaas.vps.detail.veeam.order', {\n              serviceName: _this7.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this7.vps.loading;\n          }\n        },\n        terminate: {\n          text: this.$translate.instant('vps_configuration_desactivate_option'),\n          callback: function callback() {\n            return _this7.VpsActionService.terminateVeeamOption(_this7.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this7.vps.loading;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"initOptionsActions\",\n    value: function initOptionsActions() {\n      this.initBackupStorageActions();\n      this.initSnapshotActions();\n      this.initVeeamActions();\n    }\n  }, {\n    key: \"updateName\",\n    value: function updateName(newDisplayName) {\n      var _this8 = this;\n\n      return this.VpsService.updateDisplayName(this.serviceName, newDisplayName).then(function () {\n        _this8.$scope.$emit('changeDescription', newDisplayName);\n\n        var menuItem = _this8.SidebarMenu.getItemById(_this8.serviceName);\n\n        menuItem.title = newDisplayName;\n\n        _this8.CloudMessage.success(_this8.$translate.instant('vps_setting_name_updated'));\n      }).catch(function (err) {\n        return _this8.CloudMessage.error(err);\n      }).finally(function () {\n        return _this8.vps.load();\n      });\n    }\n  }, {\n    key: \"initActions\",\n    value: function initActions() {\n      var _this9 = this;\n\n      this.actions = {\n        changeName: {\n          text: this.$translate.instant('common_edit'),\n          callback: function callback() {\n            return _this9.ControllerHelper.modal.showNameChangeModal({\n              serviceName: _this9.serviceName,\n              displayName: _this9.vps.data.displayName,\n              onSave: function onSave(newDisplayName) {\n                return _this9.updateName(newDisplayName);\n              }\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.vps.loading;\n          }\n        },\n        changeOwner: {\n          text: this.$translate.instant('vps_change_owner'),\n          atInternetClickTag: 'VPS-Actions-ChangeOwner',\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.url;\n          },\n          isExternal: true\n        },\n        kvm: {\n          text: this.$translate.instant('vps_configuration_kvm_title_button'),\n          callback: function callback() {\n            return _this9.VpsActionService.kvm(_this9.serviceName, _this9.vps.data.noVNC);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.polling && !_this9.vps.loading;\n          }\n        },\n        manageAutorenew: {\n          text: this.$translate.instant('common_manage'),\n          href: this.ControllerHelper.navigation.getUrl('renew', {\n            serviceName: this.serviceName,\n            serviceType: 'VPS'\n          }),\n          isAvailable: function isAvailable() {\n            return !_this9.vps.loading && !_this9.loaders.plan;\n          }\n        },\n        manageContact: {\n          text: this.$translate.instant('common_manage'),\n          href: this.ControllerHelper.navigation.getUrl('contacts', {\n            serviceName: this.serviceName\n          }),\n          isAvailable: function isAvailable() {\n            return !_this9.vps.loading;\n          }\n        },\n        manageIps: {\n          text: this.$translate.instant('vps_configuration_add_ipv4_title_button'),\n          href: this.ControllerHelper.navigation.getUrl('ip', {\n            serviceName: this.serviceName\n          }),\n          isAvailable: function isAvailable() {\n            return !_this9.vps.loading && !_this9.loaders.ip;\n          }\n        },\n        displayIps: {\n          text: this.$translate.instant('vps_dashboard_ips_additional'),\n          callback: function callback() {\n            return _this9.VpsActionService.displayIps(_this9.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.vps.loading && !_this9.loaders.ip;\n          }\n        },\n        manageSla: {\n          text: this.$translate.instant('common_manage'),\n          callback: function callback() {\n            return _this9.VpsActionService.monitoringSla(_this9.serviceName, !_this9.vps.data.slaMonitoring);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.vps.loading && !_this9.loaders.polling;\n          }\n        },\n        viewIpSla: {\n          text: this.$translate.instant('vps_dashboard_monitoring_sla_ips'),\n          callback: function callback() {\n            return _this9.VpsActionService.monitoringSla(_this9.serviceName, true, true);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.vps.loading;\n          }\n        },\n        orderAdditionalDiskOption: {\n          text: this.$translate.instant('vps_additional_disk_add_button'),\n          callback: function callback() {\n            return _this9.$state.go('iaas.vps.detail.additional-disk.order');\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.disk && _this9.canOrderDisk;\n          }\n        },\n        orderWindows: {\n          text: this.$translate.instant('common_order'),\n          callback: function callback() {\n            return _this9.$state.go('iaas.vps.detail.windows-order', {\n              serviceName: _this9.serviceName\n            });\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.summary.loading && !_this9.summary.windowsActivated;\n          }\n        },\n        reboot: {\n          text: this.$translate.instant('vps_configuration_reboot_title_button'),\n          callback: function callback() {\n            return _this9.VpsActionService.reboot(_this9.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.polling && !_this9.vps.loading;\n          }\n        },\n        reinstall: {\n          text: this.$translate.instant('vps_configuration_reinstall_title_button'),\n          callback: function callback() {\n            return _this9.VpsActionService.reinstall(_this9.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.polling && !_this9.vps.loading;\n          }\n        },\n        rebootRescue: {\n          text: this.$translate.instant('vps_configuration_reboot_rescue'),\n          callback: function callback() {\n            return _this9.VpsActionService.rescue(_this9.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.polling && !_this9.vps.loading;\n          }\n        },\n        reverseDns: {\n          text: this.$translate.instant('vps_configuration_reversedns_title_button'),\n          callback: function callback() {\n            return _this9.VpsActionService.reverseDns(_this9.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.ip;\n          }\n        },\n        terminateAdditionalDiskOption: {\n          text: this.$translate.instant('vps_configuration_desactivate_option'),\n          callback: function callback() {\n            return _this9.VpsActionService.terminateAdditionalDiskOption(_this9.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.disk && !_this9.canOrderDisk;\n          }\n        },\n        terminateWindows: {\n          text: this.$translate.instant('vps_configuration_desactivate_option'),\n          callback: function callback() {\n            return _this9.VpsActionService.terminateWindows(_this9.serviceName);\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.summary.loading && _this9.summary.data.windowsActivated;\n          }\n        },\n        upgrade: {\n          text: this.$translate.instant('vps_configuration_upgradevps_title_button'),\n          state: 'iaas.vps.detail.upgrade',\n          stateParams: {\n            serviceName: this.serviceName\n          },\n          isAvailable: function isAvailable() {\n            return !_this9.loaders.polling && !_this9.vps.loading;\n          }\n        }\n      };\n      this.ControllerHelper.navigation.getConstant('changeOwner').then(function (url) {\n        _this9.actions.changeOwner.href = url;\n      });\n    }\n  }, {\n    key: \"getRegionsGroup\",\n    value: function getRegionsGroup(regions) {\n      var _this10 = this;\n\n      this.regionsGroup = [];\n\n      if (regions) {\n        this.detailedRegions = !_.isArray(regions) ? [this.RegionService.getRegion(regions)] : _.map(regions, function (region) {\n          return _this10.RegionService.getRegion(region);\n        });\n      }\n\n      this.regionsGroup = _.groupBy(this.detailedRegions, 'country');\n    }\n  }, {\n    key: \"hasMultipleRegions\",\n    value: function hasMultipleRegions() {\n      return _(this.detailedRegions).isArray() && this.detailedRegions.length > 1;\n    }\n  }], [{\n    key: \"getActionStateParamString\",\n    value: function getActionStateParamString(params) {\n      return params ? \"(\".concat(JSON.stringify(params), \")\") : '';\n    }\n  }]);\n\n  return VpsDashboardCtrl;\n}();\n\nangular.module('managerApp').controller('VpsDashboardCtrl', VpsDashboardCtrl);",null]}