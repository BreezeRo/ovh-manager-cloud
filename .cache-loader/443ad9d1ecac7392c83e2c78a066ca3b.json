{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/bytes/bytes.filter.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/bytes/bytes.filter.js","mtime":1539717142351},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["angular.module('managerApp').filter('bytes', ($translate) => {\n  // TODO: Add this filter in UX components\n  const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  const unitsKibi = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n\n  function translateUnit(unit) {\n    const key = `unit_size_${unit}`;\n    const translatedUnit = $translate.instant(key);\n    // if translation is not found use the default unit\n    return key === translatedUnit ? unit : translatedUnit;\n  }\n\n  const translatedUnits = _.map(units, translateUnit);\n  const translatedUnitsKibi = _.map(unitsKibi, translateUnit);\n\n  return function (bytesParams, precisionParam, toKibi, fromUnit, toRawBytes) {\n    let bytes = bytesParams;\n    let precision = precisionParam;\n\n    if (fromUnit) {\n      const fromKibiUnitIndex = _.indexOf(unitsKibi, fromUnit);\n      const fromUnitIndex = _.indexOf(units, fromUnit);\n\n      if (fromKibiUnitIndex !== -1) {\n        if (fromKibiUnitIndex > 0) {\n          bytes *= Math.pow(1024, fromKibiUnitIndex); // eslint-disable-line\n        }\n      } else if (fromUnitIndex !== -1) {\n        if (fromUnitIndex > 0) {\n          bytes *= Math.pow(1000, fromUnitIndex); // eslint-disable-line\n        }\n      } else {\n        return '?';\n      }\n    }\n\n    if (toRawBytes === true) {\n      return bytes;\n    }\n\n    if (bytes === 0) {\n      return '0';\n    }\n    if (Number.isNaN(parseFloat(bytes)) || !Number.isFinite(bytes)) {\n      return '?';\n    }\n    if (typeof precision === 'undefined') {\n      precision = 0;\n    }\n\n    const divider = toKibi ? 1024 : 1000;\n    const number = Math.floor(Math.log(bytes) / Math.log(divider));\n\n    let value = (bytes / Math.pow(divider, Math.floor(number))).toFixed(precision); // eslint-disable-line\n\n    if (/\\.0+$/.test(value)) {\n      value = value.replace(/\\.0+$/, '');\n    }\n\n    return `${value} ${toKibi ? translatedUnitsKibi[number] : translatedUnits[number]}`;\n  };\n});\n"]}