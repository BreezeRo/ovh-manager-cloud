{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/frontends/iplb-frontends.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/frontends/iplb-frontends.service.js","mtime":1539717142197},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerFrontendsService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerFrontendsService.$inject = [\"$q\", \"$translate\", \"IpLoadBalancerConfigurationService\", \"IpLoadBalancerZoneService\", \"OvhApiIpLoadBalancing\", \"RegionService\", \"ServiceHelper\"];\n\n  function IpLoadBalancerFrontendsService($q, $translate, IpLoadBalancerConfigurationService, IpLoadBalancerZoneService, OvhApiIpLoadBalancing, RegionService, ServiceHelper) {\n    _classCallCheck(this, IpLoadBalancerFrontendsService);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.IpLoadBalancerConfigurationService = IpLoadBalancerConfigurationService;\n    this.IpLoadBalancerZoneService = IpLoadBalancerZoneService;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n    this.Frontend = {\n      all: this.IpLoadBalancing.Frontend().v6(),\n      tcp: this.IpLoadBalancing.Frontend().Tcp().v6(),\n      udp: this.IpLoadBalancing.Frontend().Udp().v6(),\n      http: this.IpLoadBalancing.Frontend().Http().v6()\n    };\n    this.Farm = {\n      tcp: this.IpLoadBalancing.Farm().Tcp().v6(),\n      udp: this.IpLoadBalancing.Farm().Udp().v6(),\n      http: this.IpLoadBalancing.Farm().Http().v6()\n    };\n  }\n\n  _createClass(IpLoadBalancerFrontendsService, [{\n    key: \"getFrontends\",\n    value: function getFrontends(serviceName) {\n      var _this = this;\n\n      return this.getFrontendIndex(serviceName).then(function (frontends) {\n        return frontends.map(function (frontend) {\n          return _this.transformFrontend(frontend);\n        });\n      }).catch(this.ServiceHelper.errorHandler('iplb_frontend_list_error'));\n    }\n  }, {\n    key: \"getFrontendIndex\",\n    value: function getFrontendIndex(serviceName) {\n      var _this2 = this;\n\n      return this.getAllFrontendsTypes(serviceName).then(function (frontends) {\n        var promises = frontends.map(function (frontend) {\n          return _this2.getFrontend(frontend.type, serviceName, frontend.id);\n        });\n        return _this2.$q.all(promises);\n      });\n    }\n  }, {\n    key: \"getFrontend\",\n    value: function getFrontend(type, serviceName, frontendId) {\n      return this.Frontend[type].get({\n        serviceName: serviceName,\n        frontendId: frontendId\n      }).$promise.then(function (frontend) {\n        _.set(frontend, 'protocol', type);\n\n        return frontend;\n      });\n    }\n  }, {\n    key: \"getAllFrontendsTypes\",\n    value: function getAllFrontendsTypes(serviceName) {\n      return this.Frontend.all.query({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"transformFrontend\",\n    value: function transformFrontend(frontend) {\n      if (frontend.zone === 'all') {\n        _.set(frontend, 'region', {\n          macroRegion: {\n            code: null,\n            text: this.$translate.instant('iplb_zone_all')\n          }\n        });\n      } else {\n        _.set(frontend, 'region', this.RegionService.getRegion(frontend.zone));\n      } // Needed to trigger row loading with datagrid.\n\n\n      delete frontend.$promise; // eslint-disable-line\n\n      return frontend;\n    }\n  }, {\n    key: \"getFarm\",\n    value: function getFarm(type, serviceName, farmId) {\n      return this.Farm[type].get({\n        serviceName: serviceName,\n        farmId: farmId\n      }).$promise;\n    }\n  }, {\n    key: \"getFarms\",\n    value: function getFarms(type, serviceName) {\n      var _this3 = this;\n\n      return this.Farm[type].query({\n        serviceName: serviceName\n      }).$promise.then(function (ids) {\n        return _this3.$q.all(ids.map(function (id) {\n          return _this3.getFarm(type, serviceName, id);\n        }));\n      }).then(function (farms) {\n        return farms.map(function (farm) {\n          return _this3.constructor.transformFarm(farm, type);\n        });\n      });\n    }\n  }, {\n    key: \"getFarmsChoices\",\n    value: function getFarmsChoices(type, serviceName, zone) {\n      var _this4 = this;\n\n      return this.getFarms(type, serviceName).then(function (farmsParam) {\n        var farms = farmsParam;\n\n        if (zone) {\n          farms = _.filter(farms, {\n            zone: zone\n          });\n        }\n\n        farms.unshift({\n          displayName: _this4.$translate.instant('iplb_frontend_add_farm_no_farm'),\n          farmId: null\n        });\n        farms.unshift({\n          displayName: _this4.$translate.instant('iplb_frontend_add_select_placeholder'),\n          farmId: 0\n        });\n        return farms;\n      });\n    }\n  }, {\n    key: \"getZones\",\n    value: function getZones() {\n      var _this5 = this;\n\n      return this.IpLoadBalancerZoneService.getIPLBZones().then(function (zones) {\n        return zones.reduce(function (zonesMapParam, zoneName) {\n          var zonesMap = zonesMapParam;\n          zonesMap[zoneName] = _this5.RegionService.getRegion(zoneName).microRegion.text;\n          return zonesMap;\n        }, {});\n      }).then(function (zones) {\n        _.set(zones, 'all', _this5.$translate.instant('iplb_frontend_add_datacenter_all'));\n\n        return Object.keys(zones).map(function (zoneKey) {\n          return {\n            id: zoneKey,\n            name: zones[zoneKey]\n          };\n        });\n      });\n    }\n  }, {\n    key: \"getCertificatesChoices\",\n    value: function getCertificatesChoices(serviceName) {\n      var _this6 = this;\n\n      return this.getCertificates(serviceName).then(function (certificates) {\n        certificates.unshift({\n          displayName: _this6.$translate.instant('iplb_frontend_add_default_certificate_no_certificate'),\n          id: 0\n        });\n        return certificates;\n      });\n    }\n  }, {\n    key: \"getCertificates\",\n    value: function getCertificates(serviceName) {\n      var _this7 = this;\n\n      return this.IpLoadBalancing.Ssl().v6().query({\n        serviceName: serviceName\n      }).$promise.then(function (ids) {\n        return _this7.$q.all(ids.map(function (id) {\n          return _this7.getCertificate(serviceName, id);\n        }));\n      });\n    }\n  }, {\n    key: \"getCertificate\",\n    value: function getCertificate(serviceName, sslId) {\n      return this.IpLoadBalancing.Ssl().v6().get({\n        serviceName: serviceName,\n        sslId: sslId\n      }).$promise;\n    }\n  }, {\n    key: \"createFrontend\",\n    value: function createFrontend(type, serviceName, frontend) {\n      var _this8 = this;\n\n      return this.Frontend[type].post({\n        serviceName: serviceName\n      }, frontend).$promise.then(this.ServiceHelper.successHandler('iplb_frontend_add_success')).then(function () {\n        return _this8.Frontend.all.resetQueryCache();\n      }).then(function () {\n        return _this8.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_frontend_add_error'));\n    }\n  }, {\n    key: \"updateFrontend\",\n    value: function updateFrontend(type, serviceName, frontendId, frontend) {\n      var _this9 = this;\n\n      return this.Frontend[type].put({\n        serviceName: serviceName,\n        frontendId: frontendId\n      }, frontend).$promise.then(this.ServiceHelper.successHandler('iplb_frontend_update_success')).then(function () {\n        return _this9.Frontend.all.resetQueryCache();\n      }).then(function () {\n        return _this9.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_frontend_update_error'));\n    }\n  }, {\n    key: \"deleteFrontend\",\n    value: function deleteFrontend(type, serviceName, frontendId) {\n      var _this10 = this;\n\n      return this.Frontend[type].delete({\n        serviceName: serviceName,\n        frontendId: frontendId\n      }).$promise.then(this.ServiceHelper.successHandler('iplb_frontend_delete_success')).then(function () {\n        return _this10.Frontend.all.resetQueryCache();\n      }).then(function () {\n        return _this10.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_frontend_delete_error'));\n    }\n  }, {\n    key: \"toggleFrontend\",\n    value: function toggleFrontend(type, serviceName, frontend) {\n      var _this11 = this;\n\n      return this.Frontend[type].put({\n        serviceName: serviceName,\n        frontendId: frontend.frontendId\n      }, {\n        disabled: frontend.disabled\n      }).$promise.then(this.ServiceHelper.successHandler('iplb_frontend_toggle_success')).then(function () {\n        return _this11.Frontend.all.resetQueryCache();\n      }).then(function () {\n        return _this11.IpLoadBalancerConfigurationService.showRefreshWarning();\n      }).catch(this.ServiceHelper.errorHandler('iplb_frontend_toggle_error'));\n    }\n  }], [{\n    key: \"transformFarm\",\n    value: function transformFarm(farm, type) {\n      _.set(farm, 'type', type);\n\n      return farm;\n    }\n  }]);\n\n  return IpLoadBalancerFrontendsService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerFrontendsService', IpLoadBalancerFrontendsService);",null]}