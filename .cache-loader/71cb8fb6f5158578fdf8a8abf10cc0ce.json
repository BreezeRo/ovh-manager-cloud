{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/diagram/cloud-project-compute-infrastructure-diagram.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/compute/infrastructure/diagram/cloud-project-compute-infrastructure-diagram.controller.js","mtime":1539717141975},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["(() => {\n  class CloudProjectComputeInfrastructureDiagramCtrl {\n    constructor($rootScope, $scope, $document, $filter, $q, $state, $stateParams, $timeout,\n      $transitions, $translate, $uibModal, $window, CloudMessage, CloudNavigation,\n      CloudProjectComputeInfrastructureOrchestrator, CloudProjectComputeInfrastructureService,\n      CloudProjectComputeVolumesOrchestrator, CloudProjectOrchestrator, CloudUserPref,\n      OvhApiCloud, OvhApiCloudProject, OvhApiCloudProjectFlavor, OvhApiCloudProjectImage,\n      OvhApiCloudProjectNetworkPrivate, OvhApiCloudProjectRegion, OvhApiCloudProjectSnapshot,\n      OvhApiCloudProjectSshKey, OvhApiCloudProjectVolumeSnapshot, OvhApiIp, OvhApiMe,\n      jsPlumbService, Poller, RegionService,\n      CLOUD_UNIT_CONVERSION, CLOUD_MONITORING, REDIRECT_URLS, TARGET, URLS) {\n      this.$rootScope = $rootScope;\n      this.$scope = $scope;\n      this.$document = $document;\n      this.$filter = $filter;\n      this.$q = $q;\n      this.$state = $state;\n      this.$stateParams = $stateParams;\n      this.$timeout = $timeout;\n      this.$transitions = $transitions;\n      this.$translate = $translate;\n      this.$uibModal = $uibModal;\n      this.$window = $window;\n\n      this.CloudMessage = CloudMessage;\n      this.CloudNavigation = CloudNavigation;\n      this.CloudProjectComputeInfrastructureOrchestrator = CloudProjectComputeInfrastructureOrchestrator; // eslint-disable-line\n      this.InfrastructureService = CloudProjectComputeInfrastructureService;\n      this.CloudProjectComputeVolumesOrchestrator = CloudProjectComputeVolumesOrchestrator;\n      this.CloudProjectOrchestrator = CloudProjectOrchestrator;\n      this.CloudUserPref = CloudUserPref;\n\n      this.Cloud = OvhApiCloud;\n      this.OvhApiCloudProject = OvhApiCloudProject;\n      this.OvhApiCloudProjectFlavor = OvhApiCloudProjectFlavor;\n      this.OvhApiCloudProjectImage = OvhApiCloudProjectImage;\n      this.OvhApiCloudProjectNetworkPrivate = OvhApiCloudProjectNetworkPrivate;\n      this.OvhApiCloudProjectRegion = OvhApiCloudProjectRegion;\n      this.OvhApiCloudProjectSnapshot = OvhApiCloudProjectSnapshot;\n      this.OvhApiCloudProjectSshKey = OvhApiCloudProjectSshKey;\n      this.OvhApiCloudProjectVolumeSnapshot = OvhApiCloudProjectVolumeSnapshot;\n      this.OvhApiIp = OvhApiIp;\n      this.OvhApiMe = OvhApiMe;\n\n      this.jsPlumbService = jsPlumbService;\n      this.Poller = Poller;\n      this.RegionService = RegionService;\n      this.conversion = CLOUD_UNIT_CONVERSION;\n      this.CLOUD_MONITORING = CLOUD_MONITORING;\n      this.REDIRECT_URLS = REDIRECT_URLS;\n      this.TARGET = TARGET;\n      this.URLS = URLS;\n    }\n\n    $onInit() {\n      this.serviceName = null;\n      this.sortInterval = null;\n\n      this.CloudNavigation.init({\n        state: 'iaas.pci-project.compute.infrastructure.diagram',\n        stateParams: {\n          serviceName: this.serviceName,\n        },\n      });\n\n      this.collections = {\n        privateNetworks: [],\n      };\n      this.errors = {\n        init: false,\n      };\n      this.helpDisplay = {\n        openUnlinkVolume: false,\n      };\n      this.openstackClientOpen = true;\n      this.importedIpFailoverPending = []; // List of pending import ipFO\n      this.infra = null;\n      this.jsplumbInstance = null;\n      this.loaders = {\n        init: true,\n        vRack: false,\n        vlans: false,\n        ips: false,\n        volumes: false,\n        jsPlumb: false,\n        linkActionConfirm: false,\n        volumeActionConfirm: false,\n        privateNetworks: {\n          query: false,\n        },\n      };\n      this.model = {\n        currentLinkEdit: null,\n      };\n      this.vlans = {\n        vRackStatus: null,\n      };\n      this.regions = null;\n      this.sort = {\n        ipAutoSort: true,\n        ipNaturalSort: true,\n      };\n      this.states = {\n        sorting: false,\n      };\n      this.user = null;\n      this.volumes = null;\n\n      this.InfrastructureService.setPreferredView('diagram');\n\n      // Hide highlighted-element on change state\n      const hook = this.$transitions.onStart({ from: 'iaas.pci-project.compute.infrastructure.diagram' }, () => {\n        this.$rootScope.$broadcast('highlighed-element.hide');\n      });\n\n      this.$scope.$on('$destroy', hook);\n\n      this.$scope.$on('compute.infrastructure.vm.status-update', (evt, newStatus, oldStatus, vm) => {\n        if (oldStatus === 'BUILD' && newStatus === 'ACTIVE') {\n          this.displayVmAuthInfo(vm);\n        }\n      });\n\n      this.$scope.$on('infra.refresh.links', () => {\n        this.refreshLinks();\n      });\n\n      this.$scope.$on('infra.refresh.links.delayed', () => {\n        // delay the execution, on VM deletion, VMS need to be moved before we refresh or links\n        // aren't place properly\n        this.$timeout(() => {\n          this.refreshLinks();\n        }, 1000);\n      });\n\n      this.initIpEdit();\n      this.initVolumeEdit();\n\n      // ------- jsPLUMB EVENTS -------\n\n      this.initJsPlumb();\n\n      // what to do when instance is created\n      this.$scope.$on('jsplumb.instance.created', (evt, instance) => {\n        this.jsplumbInstance = instance;\n        window.JSPLUMBINSTANCE = this.jsplumbInstance;\n      });\n\n      // what to do when a connection is made\n      this.$scope.$on('jsplumb.instance.connection', (evt, connection, source, target, instance, originalEvent) => {\n        const isVmSource = this.constructor.sourceIsVm(connection.source, connection.target);\n        const connectedIpId = isVmSource ? connection.targetId : connection.sourceId;\n        const connectedVmId = isVmSource ? connection.sourceId : connection.targetId;\n        const connectedIp = this.infra.internet.getIpById(connectedIpId);\n        const connectedVm = this.infra.vrack.getVmById(connectedVmId);\n\n        if (!connectedIp || !connectedVm) {\n          return;\n        }\n\n        // Set connection style\n        connection.setPaintStyle({\n          strokeStyle: this.constructor.getLinkColor(connectedIp.type),\n          lineWidth: 4,\n        });\n        connection.addClass(`_jsPlumb_connector_ip_${connectedIp.type || ''}`);\n        connection.addClass('fade-transition');\n\n        // Don't up the size when hover ip public\n        if (connectedIp.type === 'public') {\n          connection.setHoverPaintStyle({ lineWidth: 4 });\n        }\n\n        // It's a connection drawn by the user (with its mouse)\n        if (originalEvent) {\n          const vmContinent = this.getVmContinent(connectedVm);\n          const continentCode = _.get(connectedIp, 'continentCode');\n          const isValidLink = vmContinent && vmContinent === continentCode;\n\n          if (isValidLink && (!this.model.currentLinkEdit || this.model.currentLinkEdit.action === 'attach')) {\n            // set dotted line\n            connection.setPaintStyle({ strokeStyle: this.constructor.getLinkColor(connectedIp.type), lineWidth: 8, dashstyle: '2 1' });\n\n            if (connectedIp.type === 'failover') {\n              if (connectedIp.routedTo.length > 0) {\n                // It's a \"move\" : show a confirmation\n                const connectedVmCurrent = this.infra.vrack.getVmById(connectedIp.routedTo[0]);\n\n                _.set(this.model, 'currentLinkEdit', {\n                  connection,\n                  connectedIp,\n                  connectedVm,\n                  connectedVmCurrent,\n                  action: 'attach',\n                });\n\n                this.$rootScope.$broadcast('highlighed-element.show', `compute,${connectedIp.id},${connectedVmId}`);\n                this.model.currentLinkEdit.connection.addClass('highlighed-element highlighed-element-active');\n              } else {\n                this.ipEdit.attach.confirm(connectedVm, connectedIp)\n                  .catch(() => {\n                    this.jsplumbInstance.disconnectEndpoints(connection);\n                  });\n              }\n            }\n          } else {\n            this.jsplumbInstance.disconnectEndpoints(connection);\n          }\n        }\n      });\n\n      // ------- END jsPLUMB EVENTS -------\n\n      // ------- JQUERY UI SORTABLE -------\n\n      this.initSortable();\n\n      // what to do when sort start\n      this.$scope.$on('ui.sortable.start', () => {\n        this.states.sorting = true;\n        this.initInterval();\n      });\n\n      // what to do when sort stop\n      this.$scope.$on('ui.sortable.stop', () => {\n        this.states.sorting = false;\n        if (this.sortInterval) {\n          clearInterval(this.sortInterval);\n          // redraw links for the last time and re-validate offset of non connected items\n          this.redrawLinks(true);\n        }\n      });\n\n      // what to do when position has changed\n      this.$scope.$on('ui.sortable.update', (ngEvent, jqEvent, ui) => {\n        const $sortedElem = $(ui.item);\n        if ($sortedElem.hasClass('public-cloud-vm')) {\n          // ------ TODO: warning: ASYNC call!!!!!!\n          this.CloudProjectComputeInfrastructureOrchestrator.saveToUserPref();\n        } else if ($sortedElem.hasClass('ip')) {\n          // ------ TODO: warning: ASYNC call!!!!!!\n          this.CloudProjectComputeInfrastructureOrchestrator.saveToUserPref();\n        }\n      });\n\n      // Kill polling\n      this.$scope.$on('$destroy', () => {\n        this.CloudProjectComputeInfrastructureOrchestrator.killPollVms();\n        this.CloudProjectComputeInfrastructureOrchestrator.killPollIps();\n        this.CloudProjectComputeVolumesOrchestrator.killPollVolumes();\n        this.Poller.kill({ namespace: 'cloud.infra.ips.genericMoveFloatingIp' });\n      });\n\n      // ------- JQUERY UI DRAGGABLE -------\n\n      this.initDraggable();\n\n      this.$scope.$on('draggable.start', (event, obj) => {\n        this.dragDropHelper.currentDraggedVolume = obj.draggable;\n        this.dragDropHelper.draggingIsDoing = true;\n        $('.tooltip').hide(); // force hide tooltip to avoid display bug when dragging\n      });\n\n      this.$scope.$on('draggable.stop', () => {\n        if (!this.dragDropHelper.currentDroppableVmId) {\n          this.dragDropHelper.currentDraggedVolume = null;\n          this.refreshLinks();\n        }\n        this.dragDropHelper.draggingIsDoing = false;\n      });\n\n      // ------- JQUERY UI DROPPABLE -------\n\n      this.initDroppable();\n\n      this.$scope.$on('droppable.over', (event, obj) => {\n        this.dragDropHelper.currentDroppableVmId = obj.droppable.droppableId;\n        this.refreshLinks();\n      });\n\n      this.$scope.$on('droppable.out', () => {\n        this.dragDropHelper.currentDroppableVmId = null;\n        this.refreshLinks();\n      });\n\n      this.$scope.$on('droppable.drop', (event, obj) => {\n        const srcVmId = _.get(this.dragDropHelper, 'currentDraggedVolume.draggableInfo.srcVmId');\n        const targetVmId = obj.droppable.droppableId;\n\n        if (srcVmId === 'unlinked') { // No Confirmation\n          // Is not Volume factory !\n          this.volumeEdit.volume = this.dragDropHelper.currentDraggedVolume.draggableInfo.volume;\n          this.volumeEdit.targetVm = this.infra.vrack.getVmById(targetVmId);\n          this.volumeEdit.move.confirm();\n        } else {\n          this.volumeEdit.move.launchConfirm( // Confirmation\n            // Is not Volume factory !\n            this.dragDropHelper.currentDraggedVolume.draggableInfo.volume,\n            this.infra.vrack.getVmById(srcVmId),\n            targetVmId !== 'unlinked' ? this.infra.vrack.getVmById(targetVmId) : null,\n          );\n        }\n      });\n\n      return this.init();\n    }\n\n    init() {\n      this.loaders.init = true;\n      this.initDragDropHelper();\n\n      // Get type of project\n      this.getProjectContext();\n\n      this.getUser();\n      // @todo: reset cache\n\n      // Pre-load required data (all this data will be cached)\n      return this.$q.all([\n        this.OvhApiCloudProjectRegion.v6().query({ serviceName: this.serviceName }).$promise,\n        this.OvhApiCloudProjectImage.v6().query({ serviceName: this.serviceName }).$promise,\n        this.OvhApiCloudProjectSnapshot.v6().query({ serviceName: this.serviceName }).$promise,\n        this.OvhApiCloudProjectFlavor.v6().query({ serviceName: this.serviceName }).$promise,\n        this.OvhApiCloudProjectSshKey.v6().query({ serviceName: this.serviceName }).$promise,\n        this.OvhApiCloudProjectVolumeSnapshot.v6()\n          .query({ serviceName: this.serviceName }).$promise,\n        this.initRegions(this.serviceName),\n      ])\n        .then(() => this.initInfra())\n        .catch(() => {\n          this.errors.init = true;\n        }).finally(() => {\n          this.loaders.init = false;\n        });\n    }\n\n    initDragDropHelper() {\n      this.dragDropHelper = {\n        draggingIsDoing: false,\n        currentDraggedVolume: null,\n        currentDroppableVmId: null,\n      };\n    }\n\n    getProjectContext() {\n      this.serviceName = this.$stateParams.projectId;\n      this.instanceId = this.$stateParams.projectId;\n    }\n\n    getUser() {\n      return this.OvhApiMe.v6().get().$promise\n        .then((user) => {\n          this.user = user;\n        });\n    }\n\n    /**\n         * Fetch all the regions\n         * @param {string} serviceName\n         */\n    initRegions(serviceName) {\n      return this.OvhApiCloudProjectRegion.v6().query({ serviceName }).$promise\n        .then(regionIds => this.initRegionFromIds(serviceName, regionIds));\n    }\n\n    /**\n         * Build the list of GET region calls from region ids list\n         * @param {string} serviceName\n         * @param {array} regionIds\n         */\n    initRegionFromIds(serviceName, regionIds) {\n      const getRegions = _.map(\n        regionIds,\n        regionId => this.OvhApiCloudProjectRegion.v6().get({ serviceName, id: regionId }).$promise,\n      );\n      return this.$q.all(getRegions)\n        .then((result) => {\n          this.regions = result;\n        });\n    }\n\n    initInfra() {\n      const initInfraQueue = [];\n      const { serviceName } = this;\n\n      this.loaders.vRack = true;\n      this.loaders.ips = true;\n      this.loaders.jsPlumb = true;\n      this.loaders.vlans = true;\n      this.loaders.volumes = true;\n      this.errors.init = false;\n\n      this.importedIpFailoverPending = [];\n\n      // Init jsPlumb\n      initInfraQueue.push(this.jsPlumbService.jsplumbInit()\n        .finally(() => {\n          this.loaders.jsPlumb = false;\n          this.jsPlumbService.importDefaults({\n            MaxConnections: -1,\n          });\n        }));\n\n      // Init Infra\n      initInfraQueue.push(this.CloudProjectOrchestrator.initInfrastructure({ serviceName })\n        .then((infra) => {\n          this.infra = infra;\n\n          // check if there are IPFO import to poll\n          this.checkPendingImportIpFailOver(serviceName);\n\n          // check if IPs auto sort is enabled\n          this.checkIpAutoSort(serviceName);\n        })\n        .then(() => this.updateReverseDns(this.infra.internet.ipList.getItems()))\n        .then(() => this.shouldDisplayInstancesRetracted().then((retracted) => {\n          if (retracted) {\n            this.CloudProjectComputeInfrastructureOrchestrator.collapseAllVm();\n          }\n        }))\n        .then(() => this.initVlan()));\n\n      // Init Volumes\n      initInfraQueue.push(this.CloudProjectOrchestrator.initVolumes({ serviceName })\n        .then((volumes) => {\n          this.volumes = _.get(volumes, 'volumes');\n        }));\n\n      return this.$q.all(initInfraQueue)\n        .catch(() => {\n          this.errors.init = true;\n        })\n        .finally(() => {\n          this.loaders.vRack = false;\n          this.loaders.ips = false;\n          this.loaders.volumes = false;\n\n          if (this.$stateParams.openVncWithId) {\n            this.openVncWithId(this.$stateParams.openVncWithId);\n          }\n\n          if (this.$stateParams.createNewVm) {\n            this.addVirtualMachine();\n          } else if (this.$stateParams.createNewVolume) {\n            // check if we need to display the volume creation popup\n            this.addVolume();\n          } else if (this.$stateParams.createNewVolumeFromSnapshot.snapshot) {\n            this.addVolumeFromSnapshot(this.$stateParams.createNewVolumeFromSnapshot.snapshot);\n          } else if (_.isString(this.$stateParams.editVm) && !_.isEmpty(this.$stateParams.editVm)) {\n            this.toggleVmEditionState(this.infra.vrack.publicCloud.items[this.$stateParams.editVm]);\n          } else if (_.isString(this.$stateParams.monitorVm)\n            && !_.isEmpty(this.$stateParams.monitorVm)) {\n            this.openVmMonitoringPanel(this.infra.vrack.publicCloud\n              .items[this.$stateParams.monitorVm]);\n          }\n\n          if (this.CLOUD_MONITORING.alertingEnabled) {\n            // Monitoring loading must begin at the end\n            this.CloudProjectComputeInfrastructureOrchestrator.loadVmMonitoringData();\n          }\n        });\n    }\n\n    initVlan() {\n      return this.CloudProjectComputeInfrastructureOrchestrator.hasVrack()\n        .then((hasVrack) => {\n          _.set(this.vlans, 'vRackStatus', hasVrack ? 'activated' : 'none');\n        })\n        .finally(() => {\n          this.loaders.vlans = false;\n        });\n    }\n\n    // ------- END INIT -------\n\n    /**\n         * At init, check if there are IPFO importation to poll\n         * @param {string} serviceName\n         */\n    checkPendingImportIpFailOver(serviceName) {\n      // On page refresh, get pending IPFO import\n      return this.CloudUserPref.get(`cloud_project_${serviceName}_infra_ipfo_import`)\n        .then((ipfoToImportParam) => {\n          let ipfoToImport = ipfoToImportParam;\n          ipfoToImport = _.get(ipfoToImport, 'ips', []);\n          if (_.isArray(ipfoToImport) && ipfoToImport.length > 0) {\n            _.forEach(ipfoToImport, (ipfo) => {\n              this.pollImportIpFailOver(serviceName, ipfo);\n            });\n          }\n        });\n    }\n\n    /**\n         * Poll a given IPFO address\n         * @param {string} serviceName\n         * @param {string} ip the ip object\n         * @param taskObj (optional) task to poll\n         */\n    pollImportIpFailOver(serviceName, ip, taskObj = null) {\n      // Already polling\n      if (~this.importedIpFailoverPending.indexOf(ip)) {\n        return;\n      }\n\n      const taskToPoll = taskObj ? taskObj.taskId : this.OvhApiIp.v6().getPendingTask(ip, 'genericMoveFloatingIp');\n\n      this.$q.when(taskToPoll)\n        .then((taskId) => {\n          if (taskId) {\n            this.importedIpFailoverPending.push(ip);\n\n            this.CloudUserPref.set(`cloud_project_${serviceName}_infra_ipfo_import`, {\n              ips: this.importedIpFailoverPending,\n            });\n\n            return this.Poller.poll(`/ip/${encodeURIComponent(ip)}/task/${taskId}`, null, {\n              namespace: 'cloud.infra.ips.genericMoveFloatingIp',\n            }).then(() => {\n              // On success: the IP should be in the /cloud/.../ip/failover list.\n              this.CloudProjectComputeInfrastructureOrchestrator.pollIps('failover');\n              this.CloudMessage.success(this.$translate.instant('cpci_ipfo_import_success', { ip }));\n            }).catch((err) => {\n              if (err && err.status) {\n                // On error: remove the IP from list\n                this.CloudMessage.error(this.$translate.instant('cpci_ipfo_import_error', { ip }));\n              }\n            });\n          }\n          return null;\n        }).then(() => {\n          _.pull(this.importedIpFailoverPending, ip);\n          this.CloudUserPref.set(`cloud_project_${serviceName}_infra_ipfo_import`, {\n            ips: this.importedIpFailoverPending,\n          });\n        }).finally(() => {\n          this.refreshLinks();\n        });\n    }\n\n    /**\n         * Check in local storage if IPs auto sort is enabled\n         * @param {string} serviceName\n         */\n    checkIpAutoSort(serviceName) {\n      this.CloudUserPref.get(`cloud_project_${serviceName}_infra_ip_autosort`)\n        .then((ipAutoSort) => {\n          if (ipAutoSort) {\n            this.sort.ipAutoSort = ipAutoSort.enabled;\n            // activate naturalSort if autoSort is enabled\n            this.sort.ipNaturalSort = ipAutoSort.enabled;\n            this.refreshLinks();\n          }\n        });\n    }\n\n    /**\n         * Updates reverse dns of given ips.\n         */\n    updateReverseDns(ips) {\n      const reverseQueue = _.map(\n        ips,\n        ip => this.OvhApiIp.Reverse().v6()\n          .getReverseDns(ip.ip, ip.block)\n          .then((dns) => {\n            _.set(ip, 'reverse', dns);\n          })\n          .catch(() => this.$q.when(null)),\n        // ok we choose to ignore errors here, so the application can still be used,\n        // instead of displaying an ugly error message just because one reverse dns call failed\n        // let's assume the reverse dns is just null);\n      );\n      return this.$q.all(reverseQueue);\n    }\n\n    shouldDisplayInstancesRetracted() {\n      return this.$q.all({\n        hasTooManyInstances: this.CloudProjectOrchestrator\n          .hasTooManyInstances(this.$stateParams.projectId),\n        hasTooManyIps: this.CloudProjectOrchestrator.hasTooManyIps(this.$stateParams.projectId),\n      }).then(result => result.hasTooManyInstances || result.hasTooManyIps);\n    }\n\n    refreshLinks() {\n      this.$timeout(() => {\n        if (this.jsplumbInstance) {\n          this.jsplumbInstance.revalidateEverything();\n        }\n      }, 99);\n    }\n\n    openVncWithId(vmId) {\n      const completeVm = this.infra.vrack.publicCloud.get(vmId);\n      if (completeVm) {\n        this.InfrastructureService.openVnc(completeVm);\n      }\n    }\n\n    addVolume() {\n      this.refreshLinks();\n      this.helpDisplay.openUnlinkVolume = true;\n      this.CloudProjectComputeVolumesOrchestrator.addNewVolumeToList('unlinked')\n        .then((volumeDraft) => {\n          this.CloudProjectComputeVolumesOrchestrator.turnOnVolumeEdition(volumeDraft);\n        });\n    }\n\n    addVolumeFromSnapshot(snapshot) {\n      this.refreshLinks();\n      this.helpDisplay.openUnlinkVolume = true;\n      this.CloudProjectComputeVolumesOrchestrator.addNewVolumeFromSnapshotToList('unlinked', snapshot)\n        .then((volumeDraft) => {\n          this.CloudProjectComputeVolumesOrchestrator.turnOnVolumeEdition(volumeDraft);\n        })\n        .catch((err) => {\n          this.CloudMessage.error(`${this.$translate.instant('cpci_volume_add_from_snapshot_error')} ${_.get(err, 'data.message', '')}`);\n        });\n    }\n\n    addVirtualMachine() {\n      this.CloudProjectComputeInfrastructureOrchestrator.addNewVmToList()\n        .then((vm) => {\n          this.CloudProjectComputeInfrastructureOrchestrator.turnOnVmEdition(vm);\n        });\n    }\n\n    // ------- REGION ACTIONS -------\n\n    getVmContinent(vm) {\n      const region = _.find(this.regions, { name: vm.region });\n      return _.get(region, 'continentCode', undefined);\n    }\n\n    // ------- END REGION -------\n\n    // ------- VM ACTIONS -------\n\n    deleteConfirmPending(vm) {\n      // We display a popover warning in two cases :\n      //  - the vm is in monthly billing\n      //  - the vm is routed to failOver IPs\n      if (vm.monthlyBilling && vm.monthlyBilling.status === 'ok') {\n        this.$uibModal.open({\n          windowTopClass: 'cui-modal',\n          templateUrl: 'app/cloud/project/compute/infrastructure/virtualMachine/delete/cloud-project-compute-infrastructure-virtual-machine-delete.html',\n          controller: 'CloudprojectcomputeinfrastructurevirtualmachinedeleteCtrl',\n          controllerAs: '$ctrl',\n          resolve: {\n            params: () => vm,\n          },\n        }).result.then(() => {\n          this.deleteVirtualMachine(vm);\n        });\n      } else {\n        this.InfrastructureService.deleteVirtualMachine(vm);\n      }\n    }\n\n    deleteVirtualMachine(vm) {\n      _.set(vm, 'confirmLoading', true);\n      this.CloudProjectComputeInfrastructureOrchestrator.deleteVm(vm)\n        .catch((err) => {\n          this.CloudMessage.error(`${this.$translate.instant('cpci_vm_delete_submit_error')} ${_.get(err, 'data.message', '')}`);\n        })\n        .finally(() => {\n          _.set(vm, 'confirmLoading', false);\n        });\n    }\n\n    openVolumeSnapshotWizard(volume) {\n      this.$uibModal.open({\n        templateUrl: 'app/cloud/project/compute/volume/snapshot/cloud-project-compute-volume-snapshot-add.html',\n        controller: 'CloudProjectComputeVolumeSnapshotAddCtrl',\n        controllerAs: 'CloudProjectComputeVolumeSnapshotAddCtrl',\n        resolve: {\n          params: () => volume,\n        },\n      });\n    }\n\n    // ------- END VM -------\n\n    // ------- VM DISPLAY TOOLS -------\n\n    toggleVmEditionState(vm, param) {\n      if (vm.openDetail) {\n        this.CloudProjectComputeInfrastructureOrchestrator.turnOffVmEdition(true);\n        this.$rootScope.$broadcast('highlighed-element.hide');\n      } else {\n        if (param) {\n          this.CloudProjectComputeInfrastructureOrchestrator.setEditVmParam(param);\n        }\n        this.CloudProjectComputeInfrastructureOrchestrator.turnOnVmEdition(vm);\n      }\n    }\n\n    openVmMonitoringPanel(vm) {\n      this.CloudProjectComputeInfrastructureOrchestrator.openMonitoringPanel(vm);\n    }\n\n    displayVmAuthInfo(vm) {\n      const completeVm = this.infra.vrack.publicCloud.get(vm.id);\n      this.InfrastructureService.openLoginInformations(completeVm);\n    }\n\n    collapseAll() {\n      this.CloudProjectComputeInfrastructureOrchestrator.collapseAllVm();\n      this.refreshLinks();\n    }\n\n    unCollapseAll() {\n      this.CloudProjectComputeInfrastructureOrchestrator.uncollapseAllVm();\n      this.refreshLinks();\n    }\n\n    toggleCollapsedState(vm) {\n      this.CloudProjectComputeInfrastructureOrchestrator.toggleVmCollapsedState(vm);\n      this.refreshLinks();\n    }\n\n    toggleCollapsedVolumes(vm) {\n      if (vm) {\n        this.CloudProjectComputeInfrastructureOrchestrator.toggleCollapsedVolumes(vm);\n      } else {\n        this.helpDisplay.openUnlinkVolume = !this.helpDisplay.openUnlinkVolume;\n      }\n      this.refreshLinks();\n      if (!vm && (!this.volumes.unlinked || !this.volumes.unlinked.length)) {\n        this.addVolume();\n      }\n    }\n\n    // ------- END VM DISPLAY TOOLS -------\n\n    // ------- IPS ACTIONS -------\n\n    importIpFailover() {\n      this.InfrastructureService\n        .importIpFailOver(this.importedIpFailoverPending)\n        .then((listTasksListIpsWithTasks) => {\n          // Launch polling\n          _.forEach(listTasksListIpsWithTasks, (ipWithTask) => {\n            this.pollImportIpFailOver(this.$stateParams.projectId, ipWithTask.ip, ipWithTask.task);\n          });\n          this.refreshLinks();\n        });\n    }\n\n    /**\n         * Toggle automatic sorting of ips\n         */\n    toggleIpSort() {\n      const autoSortEnable = !this.sort.ipAutoSort;\n      this.sort.ipAutoSort = autoSortEnable;\n      this.sort.ipNaturalSort = autoSortEnable; // activate naturalSort if autoSort is enabled\n      this.refreshLinks();\n      this.CloudUserPref.set(`cloud_project_${this.$stateParams.projectId}_infra_ip_autosort`, {\n        enabled: autoSortEnable,\n      });\n    }\n\n    /**\n         * Sort the ip in order to have the least crossing between links\n         */\n    ipAutoSort() {\n      const ipAutoSort = _.get(this.sort, 'ipAutoSort', false);\n      const ipListSortedKeys = _.get(this.infra, 'internet.ipList.sortedKeys', []);\n      const publicCloudSortedKeys = _.get(this.infra, 'vrack.publicCloud.sortedKeys', []);\n\n      return (ip) => {\n        // only if autoSort is enabled ...\n        if (!ipAutoSort) {\n          return _.indexOf(ipListSortedKeys, ip.id);\n        }\n        let order = 0;\n        let routeCount = 0;\n        _.forEach(ip.routedTo, (route) => {\n          const vmPosition = _.indexOf(publicCloudSortedKeys, route);\n          if (vmPosition !== -1) {\n            order += vmPosition * 5; // arbitrary weight of 5 for a link with a vm\n            routeCount += 1;\n          }\n        });\n\n        if (routeCount > 0) {\n          order /= routeCount; // compute our position with average order\n          if (ip.type === 'failover') {\n            order += 1;\n          }\n          return order;\n        }\n\n        return Number.MAX_VALUE; // goes to the bottom\n      };\n    }\n\n    /**\n         * Sort IPs in their natural order\n         */\n    ipSortNatural() {\n      const ipNaturalSort = _.get(this.sort, 'ipNaturalSort', false);\n      const ipListSortedKeys = _.get(this.infra, 'internet.ipList.sortedKeys', []);\n\n      return (ip) => {\n        // only if natural sort is activated ...\n        if (!ipNaturalSort) {\n          return _.indexOf(ipListSortedKeys, ip.id);\n        }\n\n        const ipRegex = new RegExp(/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/);\n        if (ip && ipRegex.test(ip.ip)) { // IPv4 ...\n          const values = ipRegex.exec(ip.ip);\n          let score = 0;\n          score += parseInt(values[1], 10) * 1000000000;\n          score += parseInt(values[2], 10) * 1000000;\n          score += parseInt(values[3], 10) * 1000;\n          score += parseInt(values[4], 10);\n          return score;\n        }\n        return ip.ip;\n      };\n    }\n\n    ipReverse(ip) {\n      return this.$translate.instant('cloud_public_ip_failover_reverse', { ip: ip.reverse });\n    }\n\n    // ------- END IPS  -------\n\n    // ******* jsPLUMB *******\n\n    // ------- jsPLUMB TOOLS -------\n\n    static sourceIsVm(source, target) {\n      return $(source).hasClass('vm-port') && $(target).hasClass('ip-port');\n    }\n\n    static getLinkColor(type) {\n      const defaultColor = '#a8e0d5';\n      switch (type) {\n        case 'disabled':\n          return '#bbdcd5';\n        case 'public':\n          return '#444444';\n        case 'failover':\n          return defaultColor;\n        default:\n          return defaultColor;\n      }\n    }\n\n    redrawLinks(reValidateEmptyEndpoints) {\n      if (this.jsplumbInstance) {\n        this.jsplumbInstance.repaintEverything(reValidateEmptyEndpoints);\n      }\n    }\n\n    // ------- JSPLUMB CONF -------\n\n    initJsPlumb() {\n      // Default options\n      this.srcDrawOptionsBase = {\n        connector: ['Bezier', { curviness: 100 }],\n        connectorStyle: {\n          strokeStyle: this.constructor.getLinkColor(),\n          lineWidth: 4,\n        },\n      };\n\n      // ------- JSPLUMB VM FUNCTION CONF -------\n      this.vmSourceDrawOptions = {\n        connector: this.srcDrawOptionsBase.connector,\n        connectorStyle: this.srcDrawOptionsBase.connectorStyle,\n        anchor: [0.5, 0.5, 1, 0],\n        endpoint: ['Blank', { cssClass: 'vm-source' }],\n        filter: '.port-inner',\n        dragOptions: {\n          start: () => {\n            const id = $(this).attr('elid');\n            const vm = this.infra.vrack.getVmById(id);\n            if (vm) {\n              this.$rootScope.$broadcast('highlighed-element.show', `compute,${vm.id},ip-failover-ok-${this.getVmContinent(vm)}`);\n            }\n          },\n          stop: () => {\n            const id = $(this).attr('elid');\n            const vm = this.infra.vrack.getVmById(id);\n            if (vm) {\n              this.$rootScope.$broadcast('highlighed-element.hide', `compute,${vm.id},ip-failover-ok-${this.getVmContinent(vm)}`);\n            }\n          },\n        },\n      };\n\n      // ------- jsPLUMB VM FUNCTION CONF -------\n      this.vmTargetDrawOptions = {\n        anchor: [0.5, 0.5, 1, 0],\n        endpoint: ['Blank', { cssClass: 'vm-target' }],\n        dropOptions: {\n          accept: '.ip-source',\n          hoverClass: 'hover-port',\n        },\n      };\n\n      // ------- jsPLUMB IP FUNCTION CONF -------\n      this.ipTargetDrawOptions = {\n        anchor: [0.5, 0.5, -1, 0],\n        endpoint: ['Blank', { cssClass: 'ip-target' }],\n        dropOptions: {\n          accept: '.vm-source',\n          hoverClass: 'hover-port',\n        },\n      };\n\n      this.ipSourceDrawOptions = {\n        connector: this.srcDrawOptionsBase.connector,\n        connectorStyle: this.srcDrawOptionsBase.connectorStyle,\n        connectorHoverStyle: this.srcDrawOptionsBase.connectorHoverStyle,\n        // anchor: \"LeftMiddle\",\n        anchor: [0.5, 0.5, -1, 0],\n        endpoint: ['Blank', { cssClass: 'ip-source' }],\n        filter: '.port-inner',\n        dragOptions: {\n          start: () => {\n            const id = $(this).attr('elid');\n            const ip = this.infra.internet.getIpById(id);\n            if (ip) {\n              this.$rootScope.$broadcast('highlighed-element.show', `compute,${_.get(ip, 'id', '')},vm-ACTIVE-${_.get(ip, 'continentCode', '')}`);\n            }\n          },\n          stop: () => {\n            const id = $(this).attr('elid');\n            const ip = this.infra.internet.getIpById(id);\n            if (ip) {\n              this.$rootScope.$broadcast('highlighed-element.hide', `compute,${_.get(ip, 'id', '')},vm-ACTIVE-${_.get(ip, 'continentCode', '')}`);\n            }\n          },\n        },\n      };\n    }\n\n    // ******* END jsPLUMB *******\n\n    initIpEdit() {\n      this.ipEdit = {\n        attach: {\n          confirm: (vm, ip) => {\n            if (!this.loaders.linkActionConfirm) {\n              const connectedVm = vm || this.model.currentLinkEdit.connectedVm;\n              const connectedIp = ip || this.model.currentLinkEdit.connectedIp;\n\n              this.loaders.linkActionConfirm = true;\n\n              return this.CloudProjectComputeInfrastructureOrchestrator\n                .attachIptoVm(connectedIp, connectedVm)\n                .then(() => {\n                  this.$rootScope.$broadcast('highlighed-element.hide');\n                  this.model.currentLinkEdit = null;\n                  let successMessage = {\n                    text: this.$translate.instant('cpci_ip_attach_success', { ip: connectedIp.ip, instance: connectedVm.name }),\n                  };\n                  if (connectedIp.type === 'failover' && connectedVm.image) {\n                    const distribution = connectedVm.image.distribution\n                      || this.URLS.guides.ip_failover.defaultDistribution;\n                    successMessage = {\n                      textHtml: `${successMessage.text} ${this.$translate.instant('cpci_ip_attach_failover_help', {\n                        link: this.URLS.guides.ip_failover[this.user.ovhSubsidiary][distribution],\n                      })}`,\n                    };\n                  }\n                  this.CloudMessage.success(successMessage);\n                })\n                .catch((err) => {\n                  this.CloudMessage.error(`${this.$translate.instant('cpci_ip_attach_error', { ip: connectedIp.ip, instance: connectedVm.name })} ${_.get(err, 'data.message', '')}`);\n                  return this.$q.reject(err);\n                })\n                .finally(() => {\n                  this.loaders.linkActionConfirm = false;\n                });\n            }\n            return null;\n          },\n          cancel: () => {\n            if (!this.loaders.linkActionConfirm && this.model.currentLinkEdit) {\n              // if user drawn a line: delete it\n              if (this.model.currentLinkEdit.connection) {\n                this.jsplumbInstance.disconnectEndpoints(this.model.currentLinkEdit.connection);\n              }\n\n              // for manual attach\n              if (this.model.currentLinkEdit.connectionCurrent) {\n                // this.model.currentLinkEdit.connectionCurrent\n                //   .setHoverPaintStyle({ lineWidth : 8 });\n                this.model.currentLinkEdit.connectionCurrent.removeClass('highlighed-element highlighed-element-active');\n              }\n\n              this.$rootScope.$broadcast('highlighed-element.hide');\n              this.model.currentLinkEdit = null;\n            }\n          },\n          button: (ip) => {\n            // input radio\n            if (ip.type === 'failover') {\n              // list of compatible(s) vm(s) to attach the ip\n              const compatibleVms = _.filter(\n                this.infra.vrack.publicCloud.items,\n                vm => this.ipEdit.attach.canAttachIpToVm(ip, vm),\n              );\n\n              // do we have at least one compatible vm?\n              if (_.isArray(compatibleVms) && compatibleVms.length > 0) {\n                _.set(this.model, 'currentLinkEdit', {\n                  connectionCurrentVmId: ip.routedTo.length > 0 ? ip.routedTo[0] : null,\n                  connectionVmId: ip.routedTo.length > 0 ? ip.routedTo[0] : null,\n\n                  connectionCurrent: ip.routedTo.length > 0\n                    ? this.jsplumbInstance.getConnectionBySourceIdAndTargetId(\n                      ip.id,\n                      ip.routedTo[0],\n                    )\n                    : null,\n                  connection: null,\n\n                  connectedIp: ip,\n                  connectedVmCurrent: ip.routedTo.length > 0\n                    ? this.infra.vrack.getVmById(ip.routedTo[0])\n                    : null,\n                  action: 'attach',\n                  isManual: true,\n                });\n\n                // If there are a connection already, highlight it\n                if (this.model.currentLinkEdit.connectionCurrent) {\n                  this.model.currentLinkEdit.connectionCurrent.setHoverPaintStyle({ lineWidth: 4 });\n                  this.model.currentLinkEdit.connectionCurrent.addClass('highlighed-element highlighed-element-active');\n                }\n\n                this.$rootScope.$broadcast('highlighed-element.show', `compute,vm-ACTIVE-${_.get(this.model, 'currentLinkEdit.connectedIp.continentCode', '')}`);\n              } else {\n                this.CloudMessage.error(this.$translate.instant('cpci_ipfo_attach_error'));\n              }\n            }\n          },\n          changeRadioConnection: () => {\n            // If there are already a link: detach it\n            if (this.model.currentLinkEdit.connection) {\n              this.jsplumbInstance.disconnectEndpoints(this.model.currentLinkEdit.connection);\n              this.model.currentLinkEdit.connection = null;\n              this.model.currentLinkEdit.connectedVm = null;\n            }\n\n            if (this.model.currentLinkEdit.connectionCurrentVmId !== this.model\n              .currentLinkEdit.connectionVmId) {\n              // create connection\n              this.model.currentLinkEdit.connection = this.jsplumbInstance\n                .connectEndpoints(\n                  this.model.currentLinkEdit.connectedIp.id,\n                  this.model.currentLinkEdit.connectionVmId,\n                );\n              this.model.currentLinkEdit.connectedVm = this.infra.vrack\n                .getVmById(this.model.currentLinkEdit.connectionVmId);\n\n              // set connection style\n              this.model.currentLinkEdit.connection.setPaintStyle({ strokeStyle: this.constructor.getLinkColor(this.model.currentLinkEdit.connectedIp.type), lineWidth: 8, dashstyle: '2 1' });\n              this.model.currentLinkEdit.connection.addClass('highlighed-element highlighed-element-active');\n            } else if (this.model.currentLinkEdit.connectionCurrent) {\n              this.model.currentLinkEdit.connectionCurrent.setPaintStyle({\n                strokeStyle: this.constructor\n                  .getLinkColor(this.model.currentLinkEdit.connectedIp.type),\n                lineWidth: 4,\n              });\n            }\n          },\n          canAttachIpToVm: (ipSource, vmDest) => {\n            const continentCode = _.get(ipSource, 'continentCode');\n            let attachable = true;\n            attachable = attachable && ipSource && vmDest;\n            attachable = attachable && vmDest.status === 'ACTIVE';\n            attachable = attachable\n              && continentCode\n              && continentCode === this.getVmContinent(vmDest);\n            return attachable;\n          },\n        },\n      };\n    }\n\n    // ------- JQUERY UI SORTABLE -------\n\n    initInterval() {\n      // redraw jsPlumb after sort\n      this.sortInterval = setInterval(this.redrawLinks, 33);\n    }\n\n    initSortable() {\n      this.sortableOptions = {\n        cancel: '.sortable-disabled',\n        axis: 'y',\n        start: () => {\n          this.states.sorting = true;\n          this.initInterval();\n        },\n        stop: () => {\n          this.states.sorting = false;\n          if (this.sortInterval) {\n            clearInterval(this.sortInterval);\n            // redraw links for the last time and re-validate offset of non connected items\n            this.redrawLinks(true);\n          }\n        },\n        update: () => {\n          this.$timeout(() => {\n            // deffer save to let jqUI update the array\n            this.CloudProjectComputeInfrastructureOrchestrator.saveToUserPref();\n          });\n        },\n      };\n\n      // create vm sortable options by extending sortable options\n      this.vmSortableOptions = angular.extend({ handle: '.vm-grip' }, this.sortableOptions);\n\n      // create ip sortable options by extending sortable options\n      this.ipSortableOptions = angular.extend({ handle: '.ip-grip' }, this.sortableOptions);\n    }\n\n    // ------- END JQUERY UI SORTABLE -------\n\n    // ------- VOLUME DISPLAY TOOLS -------\n\n    initVolumeEdit() {\n      this.volumeEdit = {\n        action: null,\n        volume: null, // Can be factory or not !\n        srcVm: null,\n        targetVm: null,\n        targetVmId: null, // use for checkbox vm\n        remove: {\n          launchConfirm: (volume) => {\n            this.OvhApiCloudProjectVolumeSnapshot.v6()\n              .query({ serviceName: this.serviceName }).$promise\n              .then((snapshots) => {\n                if (_.find(snapshots, { volumeId: volume.id })) {\n                  this.CloudMessage.error({\n                    textHtml: this.$translate.instant('cpci_volume_snapshotted_delete_info', {\n                      url: this.$state.href('iaas.pci-project.compute.snapshot'),\n                    }),\n                  });\n                } else {\n                  this.volumeEdit.action = 'remove';\n                  this.volumeEdit.volume = volume;\n                  this.$rootScope.$broadcast('highlighed-element.show', `compute,${volume.id}`);\n                }\n              })\n              .catch((err) => {\n                this.CloudMessage.error(`${this.$translate.instant('cpci_volume_snapshot_error')} ${_.get(err, 'data.message', '')}`);\n              });\n          },\n          cancel: () => {\n            this.volumeEdit.reInit();\n            this.$rootScope.$broadcast('highlighed-element.hide');\n          },\n          confirm: () => {\n            this.loaders.volumeActionConfirm = true;\n            this.CloudProjectComputeVolumesOrchestrator.deleteVolume(this.volumeEdit.volume.id)\n              .then(() => {\n                this.volumeEdit.reInit();\n                this.$rootScope.$broadcast('highlighed-element.hide');\n              })\n              .catch((err) => {\n                this.CloudMessage.error(`${this.$translate.instant('cpci_volume_delete_error')} ${_.get(err, 'data.message', '')}`);\n              })\n              .finally(() => {\n                this.loaders.volumeActionConfirm = false;\n              });\n          },\n        },\n        move: {\n          launchConfirm: (volume, srcVm, targetVm) => {\n            this.volumeEdit.action = 'move';\n            this.volumeEdit.volume = volume;\n            this.volumeEdit.srcVm = srcVm; // use in interface\n            this.volumeEdit.targetVm = targetVm;\n\n            // set overlay\n            this.$timeout(() => { // otherwise LAG\n              this.$rootScope.$broadcast('highlighed-element.show', `compute,${targetVm ? targetVm.id : 'unlinked_volumes'}`);\n            }, 100);\n          },\n          cancel: () => {\n            this.initDragDropHelper(); // :-/\n            this.volumeEdit.reInit();\n            this.$rootScope.$broadcast('highlighed-element.hide');\n          },\n          confirm: () => {\n            // Open volumes of VM target\n            if (this.volumeEdit.targetVm && !this.volumeEdit.targetVm.collapsedVolumes) {\n              this.CloudProjectComputeInfrastructureOrchestrator\n                .toggleCollapsedVolumes(this.volumeEdit.targetVm);\n              this.refreshLinks();\n            }\n\n            this.initDragDropHelper(); // :-/\n            this.loaders.volumeActionConfirm = true;\n            this.CloudProjectComputeVolumesOrchestrator.moveVolume(this.volumeEdit.volume.id, this.volumeEdit.targetVm ? this.volumeEdit.targetVm.id : 'unlinked')\n              .then(() => {\n                if (this.volumeEdit.targetVm && this.volumeEdit.targetVm.image && this.volumeEdit.targetVm.image.type === 'windows') {\n                  this.CloudMessage.info(this.$translate.instant('cpci_volume_confirm_attach_windows_info'));\n                }\n              })\n              .catch((err) => {\n                this.CloudMessage.error(`${this.$translate.instant('cpci_volume_confirm_detach_error')} ${_.get(err, 'data.message', '')}`);\n              })\n              .finally(() => {\n                this.loaders.volumeActionConfirm = false;\n                this.volumeEdit.reInit();\n                this.$rootScope.$broadcast('highlighed-element.hide');\n              });\n          },\n        },\n        moveCheckbox: {\n          launchConfirm: (volume, srcVm) => {\n            // list of compatible(s) vm(s) to attach the volume\n            const compatibleVms = _.filter(\n              this.infra.vrack.publicCloud.items,\n              vm => this.volumeEdit.canAttachVolumeToVm(volume, vm),\n            );\n\n            // do we have at least one compatible vm?\n            if (_.isArray(compatibleVms) && compatibleVms.length > 0) {\n              this.volumeEdit.action = 'moveCheckbox';\n              this.volumeEdit.volume = volume;\n              this.volumeEdit.srcVm = srcVm; // use in interface\n\n              // set overlay\n              this.$timeout(() => { // otherwise LAG\n                this.$rootScope.$broadcast('highlighed-element.show', `compute,vm-ACTIVE-${volume.region}`);\n              }, 100);\n            } else {\n              this.CloudMessage.error(this.$translate.instant('cpci_volume_attach_error'));\n            }\n          },\n          cancel: () => {\n            this.volumeEdit.move.cancel();\n          },\n          confirm: () => {\n            this.volumeEdit.move.confirm();\n          },\n          isInvalid: () => !this.volumeEdit.targetVm,\n          checkboxChange: (targetVm) => {\n            this.volumeEdit.targetVm = targetVm;\n          },\n        },\n        reInit: () => {\n          this.volumeEdit.action = null;\n          this.volumeEdit.volume = null;\n          this.volumeEdit.srcVm = null;\n          this.volumeEdit.targetVm = null;\n        },\n        canAttachVolumeToVm: (volumeSource, vmDest) => {\n          let attachable = true;\n          attachable = attachable && volumeSource && vmDest;\n          attachable = attachable && vmDest.status === 'ACTIVE';\n          attachable = attachable && volumeSource.region === vmDest.region;\n          attachable = attachable && _.first(volumeSource.attachedTo) !== vmDest.id;\n          return attachable;\n        },\n      };\n    }\n\n    toggleVolumeEditionState(volume, param) {\n      if (!volume.openDetail) {\n        if (param) {\n          this.CloudProjectComputeVolumesOrchestrator.setEditVolumeParam(param);\n        }\n        this.CloudProjectComputeVolumesOrchestrator.turnOnVolumeEdition(volume);\n      } else {\n        this.CloudProjectComputeVolumesOrchestrator.turnOffVolumeEdition(true);\n        this.$rootScope.$broadcast('highlighed-element.hide');\n      }\n    }\n\n    /**\n         * return the list of regions in which there is at least one unlinked volume\n         * @returns {Array}\n         */\n    getUnlinkedVolumesRegions() {\n      const regions = _.map(this.volumes.unlinked, volume => volume.region);\n\n      // if we are doing a drag & drop, we add the dragged volume region to the list\n      // so it will be displayed as a droppable target in the region list\n      if (this.dragDropHelper.currentDraggedVolume) {\n        regions.push(this.dragDropHelper.currentDraggedVolume.draggableInfo.volume.region);\n      }\n\n      return _.uniq(regions);\n    }\n\n    getTranslatedRegion(region) {\n      return region ? this.RegionService.getTranslatedMicroRegion(region) : '';\n    }\n\n    // ------- JQUERY UI DRAGGABLE -------\n\n    initDraggable() {\n      this.draggableOptions = {\n        unlinked: {\n          revert: 'invalid', // when not dropped, the item will revert back to its initial position\n          containment: '#cloud-project-compute-infrastructure',\n          scroll: true,\n          scrollSensitivity: 100,\n          appendTo: '#cloud-project-compute-infrastructure',\n          helper: 'clone', // !important\n        },\n        linked: {\n          revert: 'invalid', // when not dropped, the item will revert back to its initial position\n          containment: '#cloud-project-compute-infrastructure',\n          scroll: true,\n          scrollSensitivity: 100,\n          appendTo: '#cloud-project-compute-infrastructure',\n          helper: 'clone', // !important\n        },\n      };\n    }\n\n    // ------- JQUERY UI DROPPABLE -------\n\n    initDroppable() {\n      this.droppableOptions = {\n        unlinked: {\n          accept: '.volume-content-linked-items > li',\n        },\n        vmUnlinked: vm => `.volume-content-unlinked-items > li.volume-detail-item-${vm.region},\n                    .volume-content-linked-items:not('.volume-content-linked-items-${vm.id}') > li.volume-detail-item-${vm.region}`,\n        // , linked: { } // Specific of region\n      };\n    }\n\n    // ------- END VOLUME DISPLAY TOOLS -------\n\n    // ------- PRIVATE NETWORKS -------\n\n    static getVirtualMachinePrivateAddresses(vm) {\n      if (!vm || !vm.ipAddresses) {\n        return false;\n      }\n\n      return _.chain(vm.ipAddresses)\n        .filter(ip => ip.type === 'private')\n        .map(ip => ip.ip)\n        .value();\n    }\n\n    fetchPrivateNetworks() {\n      if (this.loaders.privateNetworks.query) {\n        return;\n      }\n\n      this.loaders.privateNetworks.query = true;\n\n      this.OvhApiCloudProjectNetworkPrivate.v6().query({ serviceName: this.serviceName }).$promise\n        .then((networks) => {\n          this.collections.privateNetworks = networks;\n        })\n        .catch((err) => {\n          this.collections.privateNetwork = [];\n          this.CloudMessage.error(this.$translate.instant('cpci_private_network_query_error', {\n            message: _.get(err, 'data.message', ''),\n          }));\n        })\n        .finally(() => {\n          this.loaders.privateNetworks.query = false;\n        });\n    }\n\n    hasPrivateIp(vm) {\n      if (!this.vlans.vRackStatus) {\n        return false;\n      }\n\n      return !!this.constructor.getVirtualMachinePrivateAddresses(vm).length;\n    }\n\n    anyVmEditMenuOpen() {\n      return _.any(this.$document.find('.vm-actions-dropdown.open'));\n    }\n\n    removeAllFades() {\n      if (this.anyVmEditMenuOpen()) {\n        // disable the action when editing a VM.\n        return;\n      }\n\n      const selectors = ['.faded-out', '.faded-path'];\n      _.each(selectors, (selector) => {\n        const nodes = this.$document.find(selector);\n        _.each(nodes, (node) => {\n          $(node).toggleClass(_.rest(selector).join(''));\n        });\n      });\n      this.jsplumbInstance.select().removeClass('faded-path');\n    }\n\n    highlightInstanceAndPublicIP(e) {\n      if (this.anyVmEditMenuOpen()) {\n        // disable the action when editing a VM.\n        return;\n      }\n\n      // instanceId can be a string of an id or an array of id.\n      let currentInstanceId = $(e.currentTarget).data().instanceId;\n\n      // always work with an array for uniformity\n      if (_.isString(currentInstanceId)) {\n        currentInstanceId = [currentInstanceId];\n      }\n\n      const instancesBox = this.$document.find('.public-cloud-vm');\n      const publicIPs = this.$document.find('.ip');\n      const plumbLink = this.jsplumbInstance.select({ target: currentInstanceId });\n\n      // instanceBox is the currently highlighted instance\n      const instanceBox = _.find(\n        instancesBox,\n        box => _.includes(currentInstanceId, $(box).data().instanceId),\n      );\n\n      // ips linked to the currently highlighted instance\n      const currentIps = _.filter(publicIPs, (ip) => {\n        const { instanceId } = $(ip).data();\n        return _.any(_.intersection(instanceId, currentInstanceId));\n      });\n\n      // fade everything\n      // put fade on vm-infos, does not work directly on .public-cloud-vm\n      // because of css conflicts I guess...\n      instancesBox.find('.vm-infos').addClass('faded-out');\n      publicIPs.addClass('faded-out');\n      this.jsplumbInstance.select().addClass('faded-path');\n\n      // remove faded for current instance/ip/instance->ip link\n      plumbLink.removeClass('faded-path');\n      $(instanceBox).find('.vm-infos').removeClass('faded-out');\n      $(currentIps).removeClass('faded-out');\n    }\n\n    // ------- END PRIVATE NETWORKS -------\n  }\n\n  angular.module('managerApp').controller('CloudProjectComputeInfrastructureDiagramCtrl', CloudProjectComputeInfrastructureDiagramCtrl);\n})();\n"]}