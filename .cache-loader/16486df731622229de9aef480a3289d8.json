{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/home/logs-home.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/home/logs-home.service.js","mtime":1539717142083},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class LogsHomeService {\n  constructor($http, $q, $translate, LogsHelperService, LogsConstants, LogsOptionsService,\n    OvhApiDbaas, ServiceHelper, SidebarMenu) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$translate = $translate;\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.ContactsApiLexiService = OvhApiDbaas.Logs().Contacts().v6();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.InputsApiAapiService = OvhApiDbaas.Logs().Input().Aapi();\n    this.InputsApiLexiService = OvhApiDbaas.Logs().Input().v6();\n    this.LogsLexiService = OvhApiDbaas.Logs().v6();\n    this.LogsHelperService = LogsHelperService;\n    this.LogsConstants = LogsConstants;\n    this.LogsOptionsService = LogsOptionsService;\n    this.OperationApiService = OvhApiDbaas.Logs().Operation().v6();\n    this.ServiceHelper = ServiceHelper;\n    this.SidebarMenu = SidebarMenu;\n  }\n\n  /**\n   * Gets the transformed account object\n   *\n   * @param {any} serviceName\n   * @returns promise which will resolve to the account object\n   * @memberof LogsHomeService\n   */\n  getAccount(serviceName) {\n    return this.AccountingAapiService.me({ serviceName }).$promise\n      .then(account => this.transformAccount(account))\n      .catch(this.ServiceHelper.errorHandler('logs_home_account_get_error'));\n  }\n\n  /**\n   * Gets the transformed account details object\n   *\n   * @param {any} serviceName\n   * @returns promise which will resolve to the account details object\n   * @memberof LogsHomeService\n   */\n  getAccountDetails(serviceName) {\n    return this.DetailsAapiService.me({ serviceName }).$promise\n      .then(accountDetails => this.transformAccountDetails(accountDetails))\n      .catch(this.ServiceHelper.errorHandler('logs_home_account_details_get_error'));\n  }\n\n  /**\n   * Gets the current offer object\n   *\n   * @param {any} serviceName\n   * @returns promise which will resolve to the current offer object\n   * @memberof LogsHomeService\n   */\n  getCurrentOffer(serviceName) {\n    return this.LogsOfferService\n      .getOffer(serviceName)\n      .then(offer => this.transformOffer(offer));\n  }\n\n  /**\n   * Gets the data usage statistics data (number of documents and data received)\n   *\n   * @param {any} serviceName\n   * @returns promise which will resolve with the statistics data\n   * @memberof LogsHomeService\n   */\n  getDataUsage(serviceName) {\n    return this.getAccount(serviceName)\n      .then((account) => {\n        const token = btoa(account.metrics.token);\n        const query = {\n          start: moment().subtract(this.LogsConstants.DATA_STORAGE.TIME_PERIOD_MONTHS, 'month').unix() * 1000,\n          queries: [{\n            metric: this.LogsConstants.DATA_STORAGE.METRICS.SUM,\n            aggregator: this.LogsConstants.DATA_STORAGE.AGGREGATORS.MAX,\n            downsample: this.LogsConstants.DATA_STORAGE.DOWNSAMPLING_MODE['24H_MAX'],\n          },\n          {\n            metric: this.LogsConstants.DATA_STORAGE.METRICS.COUNT,\n            aggregator: this.LogsConstants.DATA_STORAGE.AGGREGATORS.MAX,\n            downsample: this.LogsConstants.DATA_STORAGE.DOWNSAMPLING_MODE['24H_MAX'],\n          }],\n        };\n        return this.$http({\n          method: 'POST',\n          url: `${account.metrics.host}/api/query`,\n          headers: {\n            Authorization: `Basic ${token}`,\n          },\n          preventLogout: true,\n          data: JSON.stringify(query),\n        });\n      })\n      .then((data) => {\n        const timestamps = data.data.length > 0 ? Object.keys(data.data[0].dps) : [];\n        data = data.data.map(dat => timestamps.map(timestamp => dat.dps[timestamp])); // eslint-disable-line\n        return {\n          timestamps: timestamps.map(timestamp => timestamp * 1000),\n          usageData: data,\n        };\n      })\n      .catch(this.ServiceHelper.errorHandler('logs_home_data_get_error'));\n  }\n\n  /**\n   * Gets the cold storage data volume\n   *\n   * @param {any} serviceName\n   * @returns promise which will resolve with the data volume\n   * @memberof LogsHomeService\n   */\n  getColdstorage(serviceName) {\n    return this.getAccount(serviceName)\n      .then((account) => {\n        const token = btoa(account.metrics.token);\n        return this.$http({\n          method: 'GET',\n          url: `${account.metrics.host}/api/query/last`,\n          params: { timeseries: this.LogsConstants.DATA_STORAGE.METRICS.COLD_STORAGE_TOTAL },\n          headers: {\n            Authorization: `Basic ${token}`,\n          },\n          preventLogout: true,\n        }).then(data => ({\n          coldStorage: data.data.length > 0\n            ? Math.floor(data.data[0].value)\n            : undefined,\n        }));\n      });\n  }\n\n  /**\n   * Gets the currently subscribed options\n   *\n   * @param {any} serviceName\n   * @returns promise which will resolve to the array of subscribed options\n   * @memberof LogsHomeService\n   */\n  getOptions(serviceName) {\n    return this.LogsOptionsService.getSubscribedOptionsMap(serviceName)\n      .then((options) => {\n        options.forEach(option => this.constructor.transformOption(option));\n        return options;\n      });\n  }\n\n  /**\n   * Gets the service info\n   *\n   * @param {any} serviceName\n   * @returns promise which will resolve to the service info\n   * @memberof LogsHomeService\n   */\n  getServiceInfos(serviceName) {\n    return this.LogsLexiService.serviceInfos({ serviceName }).$promise\n      .catch(this.ServiceHelper.errorHandler('logs_home_service_info_get_error'));\n  }\n\n  /**\n   * Converts the number to a more readable formhttps://sharepoint.corp.ovh.com/my/personal/gio-94fbba0f2de44122/_layouts/15/WopiFrame.aspx?sourcedoc={935AFCC0-72B9-4B54-AAC4-135A9AE8415D}&file=UX%20Projects%20-%20W12-13.pptx&action=default\n   *\n   * @param {any} number\n   * @returns the number in more readable form\n   * @memberof LogsHomeService\n   */\n  /* eslint-disable no-restricted-properties */\n  static humanizeNumber(number) {\n    if (number < 1000) {\n      return Math.round(number * 100) / 100;\n    }\n    const si = ['K', 'M', 'G', 'T', 'P', 'H'];\n    const exp = Math.floor(Math.log(number) / Math.log(1000));\n    let result = number / Math.pow(1000, exp);\n    result = result % 1 > (1 / Math.pow(1000, exp - 1))\n      ? Math.round(result.toFixed(2) * 100) / 100\n      : result.toFixed(0);\n    const unit = si[exp - 1];\n    return `${result} ${unit}`;\n  }\n  /* eslint-enable no-restricted-properties */\n\n  /**\n   * Updates the current display name information\n   *\n   * @param {any} serviceName\n   * @param {string} displayName\n   * @returns promise which will resolve or reject once the operation is complete\n   * @memberof LogsHomeService\n   */\n  updateDisplayName(serviceName, displayName) {\n    return this.LogsLexiService.update({ serviceName }, { displayName })\n      .$promise.then((operation) => {\n        this.resetAllCache();\n        return this.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_home_display_name_update_success', { })\n          .then((res) => {\n            this.changeMenuTitle(serviceName, displayName || serviceName);\n            return res;\n          });\n      })\n      .catch(err => this.LogsHelperService.handleError('logs_home_display_name_update_error', err, { }));\n  }\n\n  /**\n   * Finds and returns a url from a list of urls based on it's type\n   *\n   * @param {any} urls the list of urls\n   * @param {string} type the type of url that has to be retrieved\n   * @returns the found url\n   * @memberof LogsHomeService\n   */\n  static findUrl(urls, type) {\n    return urls.reduce((foundUrl, url) => (url.type === type ? url.address : foundUrl), '');\n  }\n\n  /**\n   * Gets the Elasticsearch url from the object\n   *\n   * @param {any} object the object with urls\n   * @returns the Elasticsearch url\n   * @memberof LogsHomeService\n   */\n  getElasticSearchApiUrl(object) {\n    const elasticSearchApiUrl = this.constructor.findUrl(\n      object.urls,\n      this.LogsConstants.URLS.ELASTICSEARCH_API,\n    );\n    _.set(object, 'elasticSearchApiUrl', `${elasticSearchApiUrl}/_cluster/health?pretty=true`);\n    return object;\n  }\n\n  /**\n   * Gets the Greylog API url from the object\n   *\n   * @param {any} object the object with urls\n   * @returns the Greylog API url\n   * @memberof LogsHomeService\n   */\n  getGreyLogApiUrl(object) {\n    _.set(object, 'graylogApiUrl', this.constructor.findUrl(object.urls, this.LogsConstants.URLS.GRAYLOG_API));\n    return object;\n  }\n\n  /**\n   * Gets the Greylog url from the object\n   *\n   * @param {any} object the object with urls\n   * @returns the Greylog url\n   * @memberof LogsHomeService\n   */\n  getGreyLogUrl(object) {\n    _.set(object, 'graylogWebuiUrl', this.constructor.findUrl(\n      object.urls,\n      this.LogsConstants.URLS.GRAYLOG_WEBUI,\n    ));\n    return object;\n  }\n\n  /**\n   * Builds and returns the ports and messages information from the account details object\n   *\n   * @param {any} accountDetails\n   * @returns the ports and messages information\n   * @memberof LogsHomeService\n   */\n  getPortsAndMessages(accountDetails) {\n    const portsAndMessages = {};\n    accountDetails.urls.forEach((url) => {\n      const urlInfo = this.LogsConstants.URL_TYPES[url.type];\n      if (urlInfo) {\n        portsAndMessages[urlInfo.PORT] = portsAndMessages[urlInfo.PORT]\n          || { name: this.LogsConstants.PORT_TYPES[urlInfo.PORT] };\n        portsAndMessages[urlInfo.PORT][urlInfo.MESSAGE] = url.address.split(':')[1]; // eslint-disable-line\n      }\n    });\n    return Object.keys(portsAndMessages).map(portType => portsAndMessages[portType]);\n  }\n\n  /**\n   * Resets all relevant caches\n   *\n   * @memberof LogsHomeService\n   */\n  resetAllCache() {\n    this.DetailsAapiService.resetAllCache();\n    this.LogsLexiService.resetAllCache();\n  }\n\n  /**\n   * Returns the transformed account object\n   *\n   * @param {any} account\n   * @returns the transformed account object\n   * @memberof LogsHomeService\n   */\n  transformAccount(account) {\n    if (_.isEmpty(account.offer)) {\n      _.set(account, 'offer.description', '');\n    } else if (account.offer.reference === this.LogsConstants.basicOffer) {\n      _.set(account, 'offer.description', this.LogsConstants.offertypes.BASIC);\n    } else {\n      const dataVolume = this.$translate.instant('logs_home_data_volume');\n      const dataVolumeValue = this.$translate.instant(account.offer.reference);\n      _.set(account, 'offer.description', `${this.LogsConstants.offertypes.PRO} - ${dataVolume}: ${dataVolumeValue}`);\n    }\n    return account;\n  }\n\n  /**\n   * Returns the transformed account details object\n   *\n   * @param {any} accountDetails\n   * @returns the transformed account detials object\n   * @memberof LogsHomeService\n   */\n  transformAccountDetails(accountDetails) {\n    _.set(accountDetails, 'email', accountDetails.service.contact\n      ? accountDetails.service.contact.email\n      : accountDetails.me.email);\n    this.getGreyLogUrl(accountDetails);\n    this.getGreyLogApiUrl(accountDetails);\n    _.set(accountDetails, 'graylogApiUrl', `${accountDetails.graylogApiUrl}/api-browser`);\n    _.set(accountDetails, 'graylogEntryPoint', accountDetails.graylogWebuiUrl\n      .replace('https://', '')\n      .replace('/api', ''));\n    this.getElasticSearchApiUrl(accountDetails);\n    if (accountDetails.last_stream) { this.getGreyLogUrl(accountDetails.last_stream); }\n    if (accountDetails.last_dashboard) { this.getGreyLogUrl(accountDetails.last_dashboard); }\n    _.set(accountDetails, 'portsAndMessages', this.getPortsAndMessages(accountDetails));\n    return accountDetails;\n  }\n\n  /**\n   * Returns the transformed option object\n   *\n   * @param {any} option\n   * @returns the transformed option object\n   * @memberof LogsHomeService\n   */\n  static transformOption(option) {\n    _.set(option, 'description', `${option.quantity} ${option.type}: ${option.detail}`);\n    return option;\n  }\n\n  /**\n   * Sets the menu's title\n   *\n   * @param {any} serviceName\n   * @param {any} displayName\n   * @memberof LogsHomeService\n   */\n  changeMenuTitle(serviceName, displayName) {\n    const menuItem = this.SidebarMenu.getItemById(serviceName);\n    if (menuItem) {\n      menuItem.title = displayName;\n    }\n  }\n}\n\nangular.module('managerApp').service('LogsHomeService', LogsHomeService);\n"]}