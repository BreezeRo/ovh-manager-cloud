{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/iplb-ssl-certificate.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/sslCertificate/iplb-ssl-certificate.service.js","mtime":1539717142220},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerSslCertificateService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerSslCertificateService.$inject = [\"$q\", \"OvhApiIpLoadBalancing\", \"OvhApiMe\", \"OvhApiOrder\", \"ServiceHelper\"];\n\n  function IpLoadBalancerSslCertificateService($q, OvhApiIpLoadBalancing, OvhApiMe, OvhApiOrder, ServiceHelper) {\n    _classCallCheck(this, IpLoadBalancerSslCertificateService);\n\n    this.$q = $q;\n    this.OvhApiIpLoadBalancing = OvhApiIpLoadBalancing;\n    this.Ssl = OvhApiIpLoadBalancing.Ssl().v6();\n    this.User = OvhApiMe;\n    this.OvhApiOrder = OvhApiOrder;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  _createClass(IpLoadBalancerSslCertificateService, [{\n    key: \"getCertificates\",\n    value: function getCertificates(serviceName) {\n      var _this = this;\n\n      return this.Ssl.query({\n        serviceName: serviceName\n      }).$promise.then(function (sslIds) {\n        return _this.$q.all(sslIds.map(function (sslId) {\n          return _this.getCertificate(serviceName, sslId);\n        }));\n      }).catch(this.ServiceHelper.errorHandler('iplb_ssl_list_error'));\n    }\n  }, {\n    key: \"getCertificate\",\n    value: function getCertificate(serviceName, sslId) {\n      return this.Ssl.get({\n        serviceName: serviceName,\n        sslId: sslId\n      }).$promise;\n    }\n  }, {\n    key: \"create\",\n    value: function create(serviceName, ssl) {\n      return this.Ssl.post({\n        serviceName: serviceName\n      }, ssl).$promise.then(this.ServiceHelper.successHandler('iplb_ssl_add_success')).catch(this.ServiceHelper.errorHandler('iplb_ssl_add_error'));\n    }\n  }, {\n    key: \"update\",\n    value: function update(serviceName, sslId, ssl) {\n      return this.Ssl.put({\n        serviceName: serviceName,\n        sslId: sslId\n      }, ssl).$promise.then(this.ServiceHelper.successHandler('iplb_ssl_update_success')).catch(this.ServiceHelper.errorHandler('iplb_ssl_update_error'));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(serviceName, sslId) {\n      return this.Ssl.delete({\n        serviceName: serviceName,\n        sslId: sslId\n      }).$promise.then(this.ServiceHelper.successHandler('iplb_ssl_delete_success')).catch(this.ServiceHelper.errorHandler('iplb_ssl_delete_error'));\n    }\n  }, {\n    key: \"getCertificateProducts\",\n    value: function getCertificateProducts(serviceName) {\n      return this.OvhApiOrder.Cart().ServiceOption().v6().get({\n        productName: 'ipLoadbalancing',\n        serviceName: serviceName\n      }).$promise.then(function (options) {\n        return options.filter(function (option) {\n          return option.family === 'ssl';\n        });\n      }).then(function (options) {\n        return options.map(function (option) {\n          // Keep only 1 year prices\n          _.set(option, 'prices', option.prices.filter(function (price) {\n            return price.interval === 12;\n          }));\n\n          return option;\n        });\n      }).catch(this.ServiceHelper.errorHandler('iplb_ssl_order_loading_error'));\n    }\n    /**\n       * Order a paid certificate\n       * @param  String serviceName       the service name\n       * @param  Object options           order parameters\n       * @param  Object configuration     item configuration\n       * @return Object                   the result of the order\n       *\n       * options must contains:\n       *\n       *  - duration\n       *  - planCode\n       *  - pricingMode\n       *  - quantity\n       */\n\n  }, {\n    key: \"orderPaidCertificate\",\n    value: function orderPaidCertificate(serviceName, orderOptions, configuration) {\n      var _this2 = this;\n\n      var cartId;\n      return this.User.v6().get().$promise.then(function (me) {\n        return _this2.OvhApiOrder.Cart().v6().post({}, {\n          ovhSubsidiary: me.ovhSubsidiary\n        }).$promise;\n      }).then(function (cart) {\n        cartId = _.get(cart, 'cartId');\n        return _this2.OvhApiOrder.Cart().v6().assign({\n          cartId: cartId\n        }).$promise;\n      }).then(function () {\n        return _this2.OvhApiOrder.Cart().ServiceOption().v6().post({\n          productName: 'ipLoadbalancing',\n          serviceName: serviceName\n        }, Object.assign({}, orderOptions, {\n          cartId: cartId\n        })).$promise;\n      }).then(function (item) {\n        // Apply item configuration\n        var promises = Object.keys(configuration).map(function (label) {\n          return _this2.configureCartItem(cartId, item.itemId, label, configuration[label]);\n        });\n        return _this2.$q.all(promises);\n      }).then(function () {\n        return _this2.OvhApiOrder.Cart().v6().checkout({\n          cartId: cartId\n        }, {}).$promise;\n      }).catch(function (err) {\n        if (cartId) {\n          _this2.OvhApiOrder.Cart().v6().delete({\n            cartId: cartId\n          });\n        }\n\n        _this2.ServiceHelper.errorHandler('iplb_ssl_order_error')(err);\n      });\n    }\n  }, {\n    key: \"configureCartItem\",\n    value: function configureCartItem(cartId, itemId, label, value) {\n      return this.OvhApiOrder.Cart().Item().Configuration().v6().post({\n        cartId: cartId,\n        itemId: itemId\n      }, {\n        label: label,\n        value: value\n      }).$promise;\n    }\n  }, {\n    key: \"orderFreeCertificate\",\n    value: function orderFreeCertificate(serviceName, fqdn) {\n      var _this3 = this;\n\n      return this.OvhApiIpLoadBalancing.v6().freeCertificate({\n        serviceName: serviceName\n      }, {\n        fqdn: fqdn\n      }).$promise.then(this.ServiceHelper.successHandler('iplb_ssl_order_success')).then(function () {\n        return _this3.Ssl.resetQueryCache();\n      }).catch(this.ServiceHelper.errorHandler('iplb_ssl_order_error'));\n    }\n  }]);\n\n  return IpLoadBalancerSslCertificateService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerSslCertificateService', IpLoadBalancerSslCertificateService);",null]}