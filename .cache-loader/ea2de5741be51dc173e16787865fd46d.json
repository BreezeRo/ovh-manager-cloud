{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.service.js","mtime":1539717142194},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerConfigurationService =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerConfigurationService.$inject = [\"$q\", \"$state\", \"$translate\", \"CloudMessage\", \"OvhApiIpLoadBalancing\", \"RegionService\", \"ServiceHelper\"];\n\n  function IpLoadBalancerConfigurationService($q, $state, $translate, CloudMessage, OvhApiIpLoadBalancing, RegionService, ServiceHelper) {\n    _classCallCheck(this, IpLoadBalancerConfigurationService);\n\n    this.$q = $q;\n    this.$state = $state;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.IpLoadBalancing = OvhApiIpLoadBalancing;\n    this.RegionService = RegionService;\n    this.ServiceHelper = ServiceHelper;\n  }\n\n  _createClass(IpLoadBalancerConfigurationService, [{\n    key: \"getPendingChanges\",\n    value: function getPendingChanges(serviceName) {\n      return this.IpLoadBalancing.v6().pendingChanges({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"getAllZonesChanges\",\n    value: function getAllZonesChanges(serviceName) {\n      var _this = this;\n\n      return this.$q.all({\n        description: this.IpLoadBalancing.v6().get({\n          serviceName: serviceName\n        }),\n        pendingChanges: this.getPendingChanges(serviceName),\n        tasks: this.getRefreshTasks(serviceName)\n      }).then(function (_ref) {\n        var description = _ref.description,\n            pendingChanges = _ref.pendingChanges,\n            tasks = _ref.tasks;\n        return description.zone.map(function (zone) {\n          var pending = _.find(pendingChanges, {\n            zone: zone\n          });\n\n          return {\n            id: zone,\n            name: _this.RegionService.getRegion(zone).microRegion.text,\n            changes: pending ? pending.number : 0,\n            task: _this.constructor.getLastUndoneTask(tasks, zone)\n          };\n        });\n      }).catch(this.ServiceHelper.errorHandler('iplb_configuration_info_error'));\n    }\n  }, {\n    key: \"getZoneChanges\",\n    value: function getZoneChanges(serviceName, zone) {\n      var _this2 = this;\n\n      return this.$q.all({\n        pendingChanges: this.getPendingChanges(serviceName),\n        tasks: this.getRefreshTasks(serviceName, ['todo', 'doing', 'done'])\n      }).then(function (_ref2) {\n        var pendingChanges = _ref2.pendingChanges,\n            tasks = _ref2.tasks;\n\n        var pending = _.find(pendingChanges, {\n          zone: zone\n        });\n\n        return {\n          id: zone,\n          name: _this2.RegionService.getRegion(zone).microRegion.text,\n          changes: pending ? pending.number : 0,\n          task: _this2.constructor.getLastUndoneTask(tasks, zone)\n        };\n      }).catch(this.ServiceHelper.errorHandler('iplb_configuration_info_error'));\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh(serviceName, zone) {\n      return this.IpLoadBalancing.v6().refresh({\n        serviceName: serviceName\n      }, {\n        zone: zone\n      }).$promise.then(this.ServiceHelper.successHandler('iplb_configuration_apply_success')).catch(this.ServiceHelper.errorHandler('iplb_configuration_apply_error'));\n    }\n  }, {\n    key: \"batchRefresh\",\n    value: function batchRefresh(serviceName, zones) {\n      var _this3 = this;\n\n      var promises = zones.map(function (zone) {\n        return _this3.IpLoadBalancing.v6().refresh({\n          serviceName: serviceName\n        }, {\n          zone: zone\n        }).$promise;\n      });\n      return this.$q.all(promises).then(this.ServiceHelper.successHandler('iplb_configuration_apply_success')).catch(this.ServiceHelper.errorHandler('iplb_configuration_apply_error'));\n    }\n  }, {\n    key: \"getRefreshTasks\",\n    value: function getRefreshTasks(serviceName, statuses) {\n      var _this4 = this;\n\n      var tasksPromise;\n\n      if (statuses) {\n        tasksPromise = this.$q.all(statuses.map(function (status) {\n          return _this4.IpLoadBalancing.Task().v6().query({\n            serviceName: serviceName,\n            action: 'refreshIplb',\n            status: status\n          }).$promise;\n        })).then(function (tasksResults) {\n          return _.flatten(tasksResults);\n        });\n      } else {\n        tasksPromise = this.IpLoadBalancing.Task().v6().query({\n          serviceName: serviceName,\n          action: 'refreshIplb'\n        }).$promise;\n      }\n\n      return tasksPromise.then(function (ids) {\n        return _this4.$q.all(ids.map(function (id) {\n          return _this4.IpLoadBalancing.Task().v6().get({\n            serviceName: serviceName,\n            taskId: id\n          }).$promise;\n        }));\n      });\n    }\n  }, {\n    key: \"showRefreshWarning\",\n    value: function showRefreshWarning() {\n      this.CloudMessage.warning({\n        text: this.$translate.instant('iplb_configuration_pending_changes'),\n        link: {\n          type: 'state',\n          text: this.$translate.instant('iplb_configuration_action_apply'),\n          state: 'network.iplb.detail.configuration'\n        }\n      }, 'network.iplb.detail');\n    }\n  }], [{\n    key: \"getLastUndoneTask\",\n    value: function getLastUndoneTask(tasks, zone) {\n      var result = tasks.sort(function (a, b) {\n        if (a.creationDate > b.creationDate) {\n          return -1;\n        }\n\n        if (a.creationDate === b.creationDate) {\n          return 0;\n        }\n\n        return 1;\n      });\n      return _.find(result, function (task) {\n        return task.zones && task.zones.indexOf(zone) > -1;\n      });\n    }\n  }]);\n\n  return IpLoadBalancerConfigurationService;\n}();\n\nangular.module('managerApp').service('IpLoadBalancerConfigurationService', IpLoadBalancerConfigurationService);",null]}