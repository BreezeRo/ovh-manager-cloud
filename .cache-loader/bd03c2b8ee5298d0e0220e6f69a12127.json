{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/monitoring/vps-monitoring.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/vps/monitoring/vps-monitoring.controller.js","mtime":1539717142303},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VpsMonitoringCtrl =\n/*#__PURE__*/\nfunction () {\n  VpsMonitoringCtrl.$inject = [\"$q\", \"$stateParams\", \"$translate\", \"CloudMessage\", \"VpsActionService\", \"VpsMonitoringConstant\", \"VpsService\"];\n\n  function VpsMonitoringCtrl($q, $stateParams, $translate, CloudMessage, VpsActionService, VpsMonitoringConstant, VpsService) {\n    _classCallCheck(this, VpsMonitoringCtrl);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.serviceName = $stateParams.serviceName;\n    this.VpsActionService = VpsActionService;\n    this.VpsMonitoringConstant = VpsMonitoringConstant;\n    this.VpsService = VpsService;\n    this.loaders = {\n      init: false\n    };\n    this.data = {};\n    this.period = 'LASTDAY';\n  }\n\n  _createClass(VpsMonitoringCtrl, [{\n    key: \"$onInit\",\n    value: function $onInit() {\n      this.loadOptions();\n      this.loadMonitoring();\n    }\n  }, {\n    key: \"loadMonitoring\",\n    value: function loadMonitoring() {\n      var _this = this;\n\n      this.loaders.init = true;\n      this.reset();\n      this.VpsService.getMonitoring(this.serviceName, this.period).then(function (data) {\n        _this.data = data;\n\n        _this.constructor.humanizeData(data.cpu.values[0].points, _this.monitoring.cpu);\n\n        _this.constructor.humanizeData(data.ram.values[0].points, _this.monitoring.ram);\n\n        _this.constructor.humanizeData(data.netRx.values[0].points, _this.monitoring.net[0]);\n\n        _this.constructor.humanizeData(data.netTx.values[0].points, _this.monitoring.net[1]);\n\n        _this.constructor.generateLabels(data.cpu.values[0].points, data.cpu.pointInterval, data.cpu.pointStart, _this.monitoring.labels);\n\n        _this.noCpuData = _.find(_.get(_this.data, 'messages'), function (type) {\n          return _.get(type, 'params.type').indexOf('cpu') !== -1;\n        });\n        _this.noRamData = _.find(_.get(_this.data, 'messages'), function (type) {\n          return _.get(type, 'params.type').indexOf('mem') !== -1;\n        });\n        _this.noNetData = _.find(_.get(_this.data, 'messages'), function (type) {\n          return _.get(type, 'params.type').indexOf('net') !== -1;\n        });\n      }).catch(function () {\n        _this.error = true;\n      }).finally(function () {\n        _this.loaders.init = false;\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.monitoring = {\n        cpu: [],\n        ram: [],\n        net: [[], []],\n        labels: []\n      };\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions() {\n      this.colors = this.VpsMonitoringConstant.colors;\n      this.series = [this.$translate.instant('vps_monitoring_network_netRx'), this.$translate.instant('vps_monitoring_network_netTx')];\n      this.percentOption = this.VpsMonitoringConstant.percentOption;\n      this.bpsOption = this.VpsMonitoringConstant.bpsOption;\n    }\n  }], [{\n    key: \"humanizeData\",\n    value: function humanizeData(data, tab) {\n      _.forEach(data, function (element) {\n        if (element && element.y) {\n          tab.push(element.y);\n        } else {\n          tab.push(0);\n        }\n      });\n    }\n  }, {\n    key: \"generateLabels\",\n    value: function generateLabels(data, interval, start, tab) {\n      var unitInterval = 'minutes';\n      var pointInterval = interval.standardMinutes;\n      var date = moment(start);\n\n      _.forEach(data, function () {\n        tab.push(date.format('MM/DD/YY - HH:mm:ss'));\n        date = moment(date).add(unitInterval, pointInterval);\n      });\n    }\n  }]);\n\n  return VpsMonitoringCtrl;\n}();\n\nangular.module('managerApp').controller('VpsMonitoringCtrl', VpsMonitoringCtrl);",null]}