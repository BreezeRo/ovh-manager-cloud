{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/navbar/navbar-notification.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/navbar/navbar-notification.service.js","mtime":1539717142406},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class NavbarNotificationService {\n  constructor($interval, $q, $translate, CloudMessage, OvhApiNotificationAapi, TARGET, UNIVERSE) {\n    this.$interval = $interval;\n    this.$q = $q;\n    this.$translate = $translate;\n    this.CloudMessage = CloudMessage;\n    this.OvhApiNotificationAapi = OvhApiNotificationAapi;\n    this.TARGET = TARGET;\n    this.UNIVERSE = UNIVERSE;\n\n    this.NOTIFICATION_REFRESH_TIME = 60000;\n  }\n\n  getMessages() {\n    return this.$translate.refresh().then(() => this.OvhApiNotificationAapi.query({\n      lang: this.$translate.preferredLanguage(),\n      target: this.TARGET,\n      universe: this.UNIVERSE,\n    }).$promise.catch((error) => {\n      this.CloudMessage.error({ textHtml: error.message }, 'index');\n      throw error;\n    }));\n  }\n\n  getSubLinks() {\n    return this\n      .getMessages()\n      .then(messages => messages.map(message => this.convertSubLink(message)))\n      .catch(() => undefined);\n  }\n\n  static formatTime(dateTime) {\n    return moment(dateTime).fromNow();\n  }\n\n  toggleSublinkAction(toUpdate, linkClicked) {\n    if (toUpdate.isActive && !toUpdate.updating) {\n      _.set(toUpdate, 'updating', true);\n      this.OvhApiNotificationAapi.post({ completed: [toUpdate.id] }).$promise.then(() => {\n        _.set(toUpdate, 'isActive', false);\n        _.set(toUpdate, 'acknowledged', true);\n      }).finally(() => { _.set(toUpdate, 'updating', false); });\n    } else if (!toUpdate.isActive && !toUpdate.updating && !linkClicked) {\n      _.set(toUpdate, 'updating', true);\n      this.OvhApiNotificationAapi.post({ acknowledged: [toUpdate.id] }).$promise.then(() => {\n        _.set(toUpdate, 'isActive', true);\n        _.set(toUpdate, 'acknowledged', true);\n      }).finally(() => { _.set(toUpdate, 'updating', false); });\n    }\n  }\n\n  convertSubLink(notification) {\n    _.set(notification, 'time', this.constructor.formatTime(notification.date));\n    _.set(notification, 'url', notification.urlDetails.href);\n    _.set(notification, 'isActive', _.contains(['acknowledged', 'delivered'], notification.status));\n    _.set(notification, 'acknowledged', _.contains(['acknowledged', 'completed', 'unknown'], notification.status));\n    _.set(notification, 'actionClicked', toUpdate => this.toggleSublinkAction(toUpdate));\n    _.set(notification, 'linkClicked', toUpdate => this.toggleSublinkAction(toUpdate, true));\n    return notification;\n  }\n\n  aknowledgeAll() {\n    if (this.navbarContent) {\n      const toAcknowledge = this.navbarContent.subLinks\n        .filter(subLink => !subLink.acknowledged && subLink.isActive);\n      if (toAcknowledge.length) {\n        this.OvhApiNotificationAapi\n          .post({ acknowledged: toAcknowledge.map(x => x.id) }).$promise\n          .then(() => {\n            toAcknowledge.forEach((sublink) => {\n              _.set(sublink, 'acknowledged', true);\n            });\n          });\n      }\n    }\n  }\n\n  setRefreshTime(sublinks) {\n    if (this.formatTimeTask) {\n      this.$interval.cancel(this.formatTimeTask);\n    }\n    this.formatTimeTask = this.$interval(() => {\n      sublinks.forEach((notification) => {\n        _.set(notification, 'time', this.constructor.formatTime(notification.date));\n      });\n    }, this.NOTIFICATION_REFRESH_TIME);\n  }\n\n  getNavbarContent() {\n    return this.getSubLinks().then((sublinks) => {\n      this.setRefreshTime(sublinks);\n      const navbarContent = {\n        name: 'notifications',\n        title: this.$translate.instant('common_navbar_notification_title'),\n        iconClass: 'icon-notifications',\n        limitTo: 10,\n        onClick: () => this.aknowledgeAll(),\n        subLinks: sublinks,\n        show: true,\n      };\n      this.navbarContent = navbarContent;\n      return navbarContent;\n    });\n  }\n}\n\nangular.module('managerApp').service('NavbarNotificationService', NavbarNotificationService);\n"]}