{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/project-orchestrator.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/components/cloud/project/project-orchestrator.service.js","mtime":1539717142394},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["/**\n *  Cloud Project Orchestrator. Gonna touch the stars!\n *  ==================================================\n *\n *  =README=\n *  This orchestrator is used to globally manage a cloud project.\n *\n *  /!\\ Make sure to ALWAYS:\n *      - use this service to init a section\n *      - use this service to trigger cross sections actions (e.g.: create a vm from snapshot)\n */\nangular.module('managerApp').service('CloudProjectOrchestrator',\n  function ($q, CloudProjectFactory, CloudProjectComputeInfrastructureOrchestrator,\n    CloudProjectComputeVolumesOrchestrator,\n    OvhApiCloudProject, OvhApiCloudProjectIpV6, CLOUD_PROJECT_OVERVIEW_THRESHOLD) {\n    const self = this;\n\n    this.project = {}; // by serviceName\n\n    let createInstanceFromSnapshot = null;\n\n\n    /**\n     *  At next infrastructure init, ask to create a vm via a snapshot.\n     */\n    this.askToCreateInstanceFromSnapshot = function (snapshot) {\n      createInstanceFromSnapshot = snapshot;\n      return $q.when(true);\n    };\n\n    this.hasTooManyInstances = function (projectId) {\n      return OvhApiCloudProject.Instance().v6().query({\n        serviceName: projectId,\n      }).$promise\n        .then(instances => instances.length > CLOUD_PROJECT_OVERVIEW_THRESHOLD.instances);\n    };\n\n    this.hasTooManyIps = function (projectId) {\n      return OvhApiCloudProjectIpV6.query({\n        serviceName: projectId,\n      }).$promise\n        .then(ips => ips.length > CLOUD_PROJECT_OVERVIEW_THRESHOLD.ips);\n    };\n\n    /*= =====================================\n    =            INITIALISATION            =\n    ====================================== */\n\n    // Init Project factory, or return it if already created\n    this.init = function (opts) {\n      if (self.project[opts.serviceName]) {\n        return $q.when(self.project[opts.serviceName]);\n      }\n      return $q.when(new CloudProjectFactory(opts)).then((project) => {\n        self.project[opts.serviceName] = project;\n        return project;\n      });\n    };\n\n    /**\n     *  Init infrastructure section\n     */\n    function initInfrastructure(opts) {\n      return CloudProjectComputeInfrastructureOrchestrator.init(opts).then((infra) => {\n        self.project[opts.serviceName].compute.infrastructure = infra;\n        return self.project[opts.serviceName].compute.infrastructure;\n      }).then((infra) => {\n        if (createInstanceFromSnapshot) {\n          return CloudProjectComputeInfrastructureOrchestrator.addNewVmToList({\n            name: createInstanceFromSnapshot.name,\n            imageId: createInstanceFromSnapshot.id,\n            region: createInstanceFromSnapshot.region,\n          }).then((vm) => {\n            CloudProjectComputeInfrastructureOrchestrator.turnOnVmEdition(vm);\n            createInstanceFromSnapshot = null;\n            return infra;\n          });\n        }\n        return infra;\n      });\n    }\n\n    /**\n     *  Init volumes section\n     */\n    function initVolumes(opts) {\n      return CloudProjectComputeVolumesOrchestrator.init(opts).then((volumes) => {\n        self.project[opts.serviceName].compute.volumes = volumes;\n        return self.project[opts.serviceName].compute.volumes;\n      });\n    }\n\n    // Init infrastructure factory only\n    this.initInfrastructure = function (opts) {\n      return this.init(opts).then(() => initInfrastructure(opts));\n    };\n\n    // Init volumes factory only\n    this.initVolumes = function (opts) {\n      return this.init(opts).then(() => initVolumes(opts));\n    };\n  });\n"]}