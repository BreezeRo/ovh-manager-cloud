{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/kubernetes.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/kubernetes/kubernetes.service.js","mtime":1539717374575},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nangular.module('managerApp').service('Kubernetes',\n/*#__PURE__*/\nfunction () {\n  Kubernetes.$inject = [\"$q\", \"$translate\", \"OvhApiCloudProject\", \"OvhApiCloudProjectFlavor\", \"OvhApiCloudProjectInstance\", \"OvhApiKube\", \"OvhApiCloudProjectQuota\", \"KUBERNETES\"];\n\n  function Kubernetes($q, $translate, OvhApiCloudProject, OvhApiCloudProjectFlavor, OvhApiCloudProjectInstance, OvhApiKube, OvhApiCloudProjectQuota, KUBERNETES) {\n    _classCallCheck(this, Kubernetes);\n\n    this.$q = $q;\n    this.$translate = $translate;\n    this.OvhApiCloudProject = OvhApiCloudProject;\n    this.OvhApiCloudProjectFlavor = OvhApiCloudProjectFlavor;\n    this.OvhApiCloudProjectInstance = OvhApiCloudProjectInstance;\n    this.OvhApiKube = OvhApiKube;\n    this.OvhApiCloudProjectQuota = OvhApiCloudProjectQuota;\n    this.KUBERNETES = KUBERNETES;\n  }\n\n  _createClass(Kubernetes, [{\n    key: \"getKubernetesCluster\",\n    value: function getKubernetesCluster(serviceName) {\n      return this.OvhApiKube.v6().get({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"getKubernetesServiceInfos\",\n    value: function getKubernetesServiceInfos(serviceName) {\n      return this.OvhApiKube.v6().getServiceInfos({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"getKubernetesConfig\",\n    value: function getKubernetesConfig(serviceName) {\n      return this.OvhApiKube.v6().getKubeConfig({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"getAssociatedPublicCloudProjects\",\n    value: function getAssociatedPublicCloudProjects(serviceName) {\n      return this.OvhApiKube.PublicCloud().Project().v6().query({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"getAssociatedInstance\",\n    value: function getAssociatedInstance(projectId, instanceId) {\n      return this.OvhApiCloudProjectInstance.v6().get({\n        serviceName: projectId,\n        instanceId: instanceId\n      }).$promise;\n    }\n  }, {\n    key: \"getProject\",\n    value: function getProject(projectId) {\n      return this.OvhApiCloudProject.v6().get({\n        serviceName: projectId\n      }).$promise;\n    }\n  }, {\n    key: \"getProjectQuota\",\n    value: function getProjectQuota(serviceName) {\n      return this.OvhApiCloudProjectQuota.v6().query({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"getNodes\",\n    value: function getNodes(serviceName) {\n      return this.OvhApiKube.PublicCloud().Node().v6().query({\n        serviceName: serviceName\n      }).$promise;\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(serviceName, flavorName) {\n      return this.OvhApiKube.PublicCloud().Node().v6().save({\n        serviceName: serviceName\n      }, {\n        flavorName: flavorName\n      }).$promise;\n    }\n  }, {\n    key: \"deleteNode\",\n    value: function deleteNode(serviceName, nodeId) {\n      return this.OvhApiKube.PublicCloud().Node().v6().delete({\n        serviceName: serviceName,\n        nodeId: nodeId\n      }).$promise;\n    }\n  }, {\n    key: \"resetNodesCache\",\n    value: function resetNodesCache() {\n      this.OvhApiKube.PublicCloud().Node().v6().resetCache();\n      this.OvhApiKube.PublicCloud().Node().v6().resetQueryCache();\n    }\n  }, {\n    key: \"getFlavors\",\n    value: function getFlavors(serviceName) {\n      // Region is constant for now\n      return this.OvhApiCloudProjectFlavor.v6().query({\n        serviceName: serviceName,\n        region: this.KUBERNETES.region\n      }).$promise;\n    }\n  }, {\n    key: \"getFlavorDetails\",\n    value: function getFlavorDetails(serviceName, flavorId) {\n      return this.OvhApiCloudProjectFlavor.get({\n        serviceName: serviceName,\n        flavorId: flavorId\n      }).$promise;\n    }\n  }, {\n    key: \"formatFlavor\",\n    value: function formatFlavor(flavor) {\n      return this.$translate.instant('kube_flavor', {\n        name: flavor.name.toUpperCase(),\n        cpuNumber: flavor.vcpus,\n        ramCapacity: flavor.ram / 1000,\n        diskCapacity: flavor.disk\n      });\n    }\n  }]);\n\n  return Kubernetes;\n}());",null]}