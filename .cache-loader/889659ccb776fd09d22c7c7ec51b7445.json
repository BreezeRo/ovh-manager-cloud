{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/controller-modal-helper.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/helper/controller-modal-helper.service.js","mtime":1539717142185},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["class ControllerModalHelper {\n  constructor($q, $translate, $uibModal) {\n    this.$q = $q;\n    this.$translate = $translate;\n    this.$uibModal = $uibModal;\n    this.unhandledError = ['backdrop click', 'escape key press'];\n  }\n\n  showModal(config = {}) {\n    const modalConfig = _.assign({\n      windowTopClass: 'cui-modal',\n    }, config.modalConfig);\n    const modalInstance = this.$uibModal.open(modalConfig);\n\n    const deferred = this.$q.defer();\n    modalInstance.result.then((result) => {\n      if (config.successHandler) {\n        config.successHandler(result);\n      }\n      deferred.resolve(result);\n    }).catch((err) => {\n      // We check for backdrop click as error.\n      // It happens when we click a button behind the modal.\n      // We don't want an error message for that.\n      if (!_.includes(this.unhandledError, err)) {\n        if (config.errorHandler) {\n          config.errorHandler(err);\n        }\n        deferred.reject(err);\n      }\n    });\n\n    return deferred.promise;\n  }\n\n  showWarningModal(config = {}) {\n    return this.showModal({\n      modalConfig: {\n        templateUrl: 'app/ui-components/modal/warning-modal/warning-modal.html',\n        controller: 'WarningModalController',\n        controllerAs: '$ctrl',\n        resolve: {\n          params: () => config,\n        },\n      },\n    });\n  }\n\n  showInfoModal(config = {}) {\n    return this.showModal({\n      modalConfig: {\n        templateUrl: 'app/ui-components/modal/info-modal/info-modal.html',\n        controller: 'InfoModalController',\n        controllerAs: '$ctrl',\n        resolve: {\n          params: () => config,\n        },\n      },\n    });\n  }\n\n  showConfirmationModal(config = {}) {\n    return this.showModal({\n      modalConfig: {\n        templateUrl: 'app/ui-components/modal/confirmation-modal/confirmation-modal.html',\n        controller: 'ConfirmationModalController',\n        controllerAs: '$ctrl',\n        resolve: {\n          params: () => config,\n        },\n      },\n    });\n  }\n\n  showNameChangeModal(config = {}) {\n    return this.showModal({\n      modalConfig: {\n        templateUrl: 'app/ui-components/modal/name-change-modal/name-change-modal.html',\n        controller: 'NameChangeModalCtrl',\n        controllerAs: '$ctrl',\n        resolve: {\n          params: () => config,\n        },\n      },\n    });\n  }\n\n  showDeleteModal(config = {}) {\n    _.set(config, 'submitButtonText', config.submitButtonText || this.$translate.instant('common_delete'));\n    return this.showConfirmationModal(config);\n  }\n}\n\nangular.module('managerApp').service('ControllerModalHelper', ControllerModalHelper);\n"]}