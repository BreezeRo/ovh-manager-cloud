{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/cloud-project.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/cloud/project/cloud-project.controller.js","mtime":1539717374437},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["\n\nangular.module('managerApp')\n  .controller('CloudProjectCtrl', function CloudProjectCtrl($scope, $state, $stateParams, $transitions, OvhApiCloud, CloudProjectRightService) {\n    const self = this;\n    const serviceName = $stateParams.projectId;\n\n    self.loaders = {\n      project: false,\n    };\n\n    self.model = {\n      project: null,\n      hasWriteRight: true,\n    };\n\n    self.includes = function includes(stateName) {\n      return $state.includes(stateName);\n    };\n\n    // reference to our rootScope state change listener\n    let stateChangeListener = null;\n\n    function init() {\n      self.loaders.project = true;\n\n      // get current project\n      if (serviceName) {\n        OvhApiCloud.Project().v6().get({\n          serviceName,\n        }).$promise\n          .then((project) => {\n            self.model.project = project;\n            // if project is suspended, redirect to error page\n            if (self.model.project.status === 'suspended' || self.model.project.status === 'creating') {\n              $state.go('iaas.pci-project.details');\n            } else {\n              CloudProjectRightService.userHaveReadWriteRights(serviceName)\n                .then((hasWriteRight) => {\n                  self.model.hasWriteRight = hasWriteRight;\n                });\n            }\n          })\n          .catch(() => $state.go('iaas.pci-project.details'))\n          .finally(() => {\n            self.loaders.project = false;\n          });\n      } else {\n        $state.go('iaas.pci-project-new');\n        return;\n      }\n\n      // before a state change, check if the destination project is suspended,\n      // if it's the case just redirect to the error page\n      stateChangeListener = $transitions.onStart({}, (transition) => {\n        const toState = transition.to();\n        const toParams = transition.params();\n        // avoid infinite state redirection loop\n        if (toState && toState.name === 'iaas.pci-project.details') {\n          return;\n        }\n        // check if project is loaded\n        if (!self.model.project) {\n          return;\n        }\n        // redirection is only for suspended projects\n        if (self.model.project.status !== 'suspended' && self.model.project.status !== 'creating') {\n          return;\n        }\n        if (self.model.project.project_id === toParams.projectId) {\n          $state.go('iaas.pci-project.details');\n        }\n      });\n    }\n\n    // when controller is destroyed we must remove global state change listener\n    $scope.$on('$destroy', () => {\n      if (stateChangeListener) {\n        stateChangeListener();\n      }\n    });\n\n    init();\n  });\n"]}