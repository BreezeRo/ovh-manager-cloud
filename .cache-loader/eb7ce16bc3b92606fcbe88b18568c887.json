{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/logs-dashboards.service.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/dbaas/logs/detail/dashboards/logs-dashboards.service.js","mtime":1539717142080},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LogsDashboardsService =\n/*#__PURE__*/\nfunction () {\n  LogsDashboardsService.$inject = [\"$q\", \"OvhApiDbaas\", \"LogsOptionsService\", \"LogsHelperService\", \"LogsConstants\", \"UrlHelper\"];\n\n  function LogsDashboardsService($q, OvhApiDbaas, LogsOptionsService, LogsHelperService, LogsConstants, UrlHelper) {\n    _classCallCheck(this, LogsDashboardsService);\n\n    this.$q = $q;\n    this.DashboardsApiService = OvhApiDbaas.Logs().Dashboard().v6();\n    this.DashboardsAapiService = OvhApiDbaas.Logs().Dashboard().Aapi();\n    this.AccountingAapiService = OvhApiDbaas.Logs().Accounting().Aapi();\n    this.DetailsAapiService = OvhApiDbaas.Logs().Details().Aapi();\n    this.LogsOptionsService = LogsOptionsService;\n    this.LogsHelperService = LogsHelperService;\n    this.LogsConstants = LogsConstants;\n    this.UrlHelper = UrlHelper;\n  }\n  /**\n   * returns array of dashboards with details\n   *\n   * @param {any} serviceName\n   * @returns promise which will be resolve to array of dashboards.\n   *          Each Dashboard will have all details populated.\n   * @memberof LogsDashboardsService\n   */\n\n\n  _createClass(LogsDashboardsService, [{\n    key: \"getDashboards\",\n    value: function getDashboards(serviceName) {\n      var _this = this;\n\n      return this.getDashboardsDetails(serviceName).catch(function (err) {\n        return _this.LogsHelperService.handleError('logs_dashboards_get_error', err, {});\n      });\n    }\n    /**\n     * returns array of owned dashboards with details of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of dashboards.\n     *          Each stream will have all details populated.\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getOwnDashboards\",\n    value: function getOwnDashboards(serviceName) {\n      var _this2 = this;\n\n      return this.getDashboardsDetails(serviceName).then(function (dashboards) {\n        return dashboards.filter(function (dashboard) {\n          return dashboard.info.isEditable;\n        });\n      }).catch(function (err) {\n        return _this2.LogsHelperService.handleError('logs_dashboards_get_error', err, {});\n      });\n    }\n    /**\n     * returns array of shareable dashboards with details of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of dashboards.\n     *          Each stream will have all details populated.\n     * @memberof LogsStreamsService\n     */\n\n  }, {\n    key: \"getShareableDashboards\",\n    value: function getShareableDashboards(serviceName) {\n      var _this3 = this;\n\n      return this.getDashboardsDetails(serviceName).then(function (dashboards) {\n        return dashboards.filter(function (dashboard) {\n          return dashboard.info.isShareable;\n        });\n      }).catch(function (err) {\n        return _this3.LogsHelperService.handleError('logs_dashboards_get_error', err, {});\n      });\n    }\n    /**\n     * gets details for each dashboard in array\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to an array of dashboard objects\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"getDashboardsDetails\",\n    value: function getDashboardsDetails(serviceName) {\n      var _this4 = this;\n\n      return this.getDashboardsIds(serviceName).then(function (dashboards) {\n        var promises = dashboards.map(function (dashboardId) {\n          return _this4.getAapiDashboard(serviceName, dashboardId);\n        });\n        return _this4.$q.all(promises);\n      });\n    }\n    /**\n     * returns array of dashboards id's of logged in user\n     *\n     * @param {any} serviceName\n     * @returns promise which will be resolve to array of dashboards id's\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"getDashboardsIds\",\n    value: function getDashboardsIds(serviceName) {\n      return this.DashboardsApiService.query({\n        serviceName: serviceName\n      }).$promise;\n    }\n    /**\n     * returns details of an dashboard\n     *\n     * @param {any} serviceName\n     * @param {any} dashboardId\n     * @returns promise which will be resolve to dashboard object\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"getDashboard\",\n    value: function getDashboard(serviceName, dashboardId) {\n      var _this5 = this;\n\n      return this.DashboardsApiService.get({\n        serviceName: serviceName,\n        dashboardId: dashboardId\n      }).$promise.catch(function (err) {\n        return _this5.LogsHelperService.handleError('logs_dashboards_get_detail_error', err, {});\n      });\n    }\n    /**\n     * returns details of an dashboard\n     *\n     * @param {any} serviceName\n     * @param {any} dashboardId\n     * @returns promise which will be resolve to dashboard object\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"getAapiDashboard\",\n    value: function getAapiDashboard(serviceName, dashboardId) {\n      var _this6 = this;\n\n      return this.DashboardsAapiService.get({\n        serviceName: serviceName,\n        dashboardId: dashboardId\n      }).$promise.catch(function (err) {\n        return _this6.LogsHelperService.handleError('logs_dashboards_get_detail_error', err, {});\n      });\n    }\n    /**\n     * returns objecy containing total number of dashboards and total number of dashboards used\n     *\n     * @param {any} serviceName\n     * @returns quota object containing max (total number dashboards)\n     *          and configured (number of dashboards used)\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"getQuota\",\n    value: function getQuota(serviceName) {\n      var _this7 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        return {\n          max: me.total.maxNbDashboard,\n          configured: me.total.curNbDashboard,\n          reference: me.total.reference\n        };\n      }).catch(function (err) {\n        return _this7.LogsHelperService.handleError('logs_dashboards_quota_get_error', err, {});\n      });\n    }\n    /**\n     * Retrieves options associated with main offer\n     * @param {string} serviceName\n     */\n\n  }, {\n    key: \"getMainOffer\",\n    value: function getMainOffer(serviceName) {\n      var _this8 = this;\n\n      return this.AccountingAapiService.me({\n        serviceName: serviceName\n      }).$promise.then(function (me) {\n        return {\n          max: me.offer.maxNbDashboard,\n          current: me.offer.curNbDashboard\n        };\n      }).catch(function (err) {\n        return _this8.LogsHelperService.handleError('logs_main_offer_get_error', err, {});\n      });\n    }\n    /**\n     * delete dashboard\n     *\n     * @param {any} serviceName\n     * @param {any} Dashboard, dashboard object to be deleted\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"deleteDashboard\",\n    value: function deleteDashboard(serviceName, dashboard) {\n      var _this9 = this;\n\n      return this.DashboardsApiService.delete({\n        serviceName: serviceName,\n        dashboardId: dashboard.dashboardId\n      }).$promise.then(function (operation) {\n        _this9.resetAllCache();\n\n        return _this9.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_dashboards_delete_success', {\n          dashboardName: dashboard.title\n        });\n      }).catch(function (err) {\n        return _this9.LogsHelperService.handleError('logs_dashboards_delete_error', err, {\n          dashboardName: dashboard.title\n        });\n      });\n    }\n    /**\n     * create new dashboard\n     *\n     * @param {any} serviceName\n     * @param {any} Dashboard, dashboard object to be created\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"createDashboard\",\n    value: function createDashboard(serviceName, dashboard) {\n      var _this10 = this;\n\n      return this.DashboardsApiService.create({\n        serviceName: serviceName\n      }, dashboard).$promise.then(function (operation) {\n        _this10.resetAllCache();\n\n        return _this10.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_dashboards_create_success', {\n          dashboardName: dashboard.title\n        });\n      }).catch(function (err) {\n        return _this10.LogsHelperService.handleError('logs_dashboards_create_error', err, {\n          dashboardName: dashboard.title\n        });\n      });\n    }\n    /**\n     * create new dashboard from another dashboard\n     *\n     * @param {any} serviceName\n     * @param {any} Dashboard, dashboard object to be created\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"duplicateDashboard\",\n    value: function duplicateDashboard(serviceName, dashboard, dashboardId) {\n      var _this11 = this;\n\n      if (!dashboard.streamId) {\n        delete dashboard.streamId;\n      } // eslint-disable-line\n\n\n      return this.DashboardsApiService.duplicate({\n        serviceName: serviceName,\n        dashboardId: dashboardId\n      }, dashboard).$promise.then(function (operation) {\n        _this11.resetAllCache();\n\n        return _this11.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_dashboards_create_success', {\n          dashboardName: dashboard.title\n        });\n      }).catch(function (err) {\n        return _this11.LogsHelperService.handleError('logs_dashboards_create_error', err, {\n          dashboardName: dashboard.title\n        });\n      });\n    }\n    /**\n     * update dashboard\n     *\n     * @param {any} serviceName\n     * @param {any} Dashboard, dashboard object to be updated\n     * @returns promise which will be resolve to operation object\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"updateDashboard\",\n    value: function updateDashboard(serviceName, dashboard) {\n      var _this12 = this;\n\n      return this.DashboardsApiService.update({\n        serviceName: serviceName,\n        DashboardId: dashboard.dashboardId\n      }, dashboard).$promise.then(function (operation) {\n        _this12.resetAllCache();\n\n        return _this12.LogsHelperService.handleOperation(serviceName, operation.data || operation, 'logs_dashboards_update_success', {\n          dashboardName: dashboard.title\n        });\n      }).catch(function (err) {\n        return _this12.LogsHelperService.handleError('logs_dashboards_update_error', err, {\n          dashboardName: dashboard.title\n        });\n      });\n    }\n    /**\n     * creates new dashboard with default values\n     *\n     * @returns dashboard object with default values\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"getSubscribedOptions\",\n\n    /**\n     * retrives all subscribed options of type dashboards\n     * @param {string} serviceName\n     */\n    value: function getSubscribedOptions(serviceName) {\n      return this.LogsOptionsService.getSubscribedOptionsByType(serviceName, this.LogsConstants.DASHBOARD_OPTION_REFERENCE);\n    }\n    /**\n     * extracts graylog URL from dashboard. Shows error message on UI if no graylog URL is found.\n     *\n     * @param {any} dashboard\n     * @returns {string} graylog url, if not found empty string\n     * @memberof LogsDashboardsService\n     */\n\n  }, {\n    key: \"getDashboardGraylogUrl\",\n    value: function getDashboardGraylogUrl(aapiDashboard) {\n      var url = this.UrlHelper.constructor.findUrl(aapiDashboard, this.LogsConstants.GRAYLOG_WEBUI);\n\n      if (!url) {\n        this.LogsHelperService.handleError('logs_dashboards_get_graylog_url_error', {}, {\n          dashboardName: aapiDashboard.info.title\n        });\n      }\n\n      return url;\n    }\n  }, {\n    key: \"resetAllCache\",\n    value: function resetAllCache() {\n      this.AccountingAapiService.resetAllCache();\n      this.DashboardsApiService.resetAllCache();\n      this.DashboardsAapiService.resetAllCache(); // refresh home page last modified dashboard\n\n      this.DetailsAapiService.resetAllCache();\n    }\n  }], [{\n    key: \"getNewDashboard\",\n    value: function getNewDashboard() {\n      return {\n        data: {\n          description: null,\n          title: null\n        },\n        loading: false\n      };\n    }\n  }]);\n\n  return LogsDashboardsService;\n}();\n\nangular.module('managerApp').service('LogsDashboardsService', LogsDashboardsService);",null]}