{"remainingRequest":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js??ref--11-1!/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.controller.js","dependencies":[{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/client/app/iplb/configuration/iplb-configuration.controller.js","mtime":1539717142193},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/.babelrc","mtime":1539717141926},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/babel-loader/lib/index.js","mtime":1539597349061},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/cache-loader/dist/cjs.js","mtime":1539679504371},{"path":"/Users/jleveugle/Documents/Work/github/ovh-ux/ovh-manager-cloud/node_modules/@ovh-ux/manager-webpack-config/loaders/ui-router-translations.js","mtime":1539950864368}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar IpLoadBalancerConfigurationCtrl =\n/*#__PURE__*/\nfunction () {\n  IpLoadBalancerConfigurationCtrl.$inject = [\"$q\", \"$scope\", \"$stateParams\", \"CloudMessage\", \"CloudPoll\", \"ControllerHelper\", \"IpLoadBalancerConfigurationService\", \"ServiceHelper\"];\n\n  function IpLoadBalancerConfigurationCtrl($q, $scope, $stateParams, CloudMessage, CloudPoll, ControllerHelper, IpLoadBalancerConfigurationService, ServiceHelper) {\n    var _this = this;\n\n    _classCallCheck(this, IpLoadBalancerConfigurationCtrl);\n\n    this.$q = $q;\n    this.$scope = $scope;\n    this.$stateParams = $stateParams;\n    this.CloudMessage = CloudMessage;\n    this.CloudPoll = CloudPoll;\n    this.ControllerHelper = ControllerHelper;\n    this.IpLoadBalancerConfigurationService = IpLoadBalancerConfigurationService;\n    this.ServiceHelper = ServiceHelper;\n    this.initLoaders();\n    this.$scope.$on('$destroy', function () {\n      return _this.stopTaskPolling();\n    });\n  }\n\n  _createClass(IpLoadBalancerConfigurationCtrl, [{\n    key: \"initLoaders\",\n    value: function initLoaders() {\n      var _this2 = this;\n\n      this.zones = this.ControllerHelper.request.getHashLoader({\n        loaderFunction: function loaderFunction() {\n          return _this2.IpLoadBalancerConfigurationService.getAllZonesChanges(_this2.$stateParams.serviceName);\n        }\n      });\n    }\n  }, {\n    key: \"$onInit\",\n    value: function $onInit() {\n      var _this3 = this;\n\n      this.zones.load().then(function () {\n        _this3.startPolling();\n      });\n      this.selectedZones = [];\n    }\n  }, {\n    key: \"onSelectionChange\",\n    value: function onSelectionChange(selection) {\n      this.selectedZones = selection;\n    }\n  }, {\n    key: \"applyChanges\",\n    value: function applyChanges(zone) {\n      var _this4 = this;\n\n      var promise = this.$q.resolve([]);\n\n      if (zone) {\n        promise = this.IpLoadBalancerConfigurationService.refresh(this.$stateParams.serviceName, zone);\n      } else if (this.selectedZones.length === this.zones.length) {\n        // All selected, just call the API with no zone.\n        promise = this.IpLoadBalancerConfigurationService.refresh(this.$stateParams.serviceName, null);\n      } else if (this.selectedZones.length) {\n        promise = this.IpLoadBalancerConfigurationService.batchRefresh(this.$stateParams.serviceName, _.map(this.selectedZones, 'id'));\n      }\n\n      promise.then(function () {\n        _this4.startPolling();\n\n        if (_this4.poller) {\n          _this4.poller.$promise.then(function () {\n            // check if at least one change remains\n            if (_.chain(_this4.zones.data).map('changes').sum().value() > 0) {\n              _this4.CloudMessage.flushChildMessage();\n            } else {\n              _this4.CloudMessage.flushMessages();\n            }\n          });\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"startPolling\",\n    value: function startPolling() {\n      var _this5 = this;\n\n      this.stopTaskPolling();\n      this.poller = this.CloudPoll.pollArray({\n        items: this.zones.data,\n        pollFunction: function pollFunction(zone) {\n          return _this5.IpLoadBalancerConfigurationService.getZoneChanges(_this5.$stateParams.serviceName, zone.id);\n        },\n        stopCondition: function stopCondition(zone) {\n          return !zone.task || zone.task && _.includes(['done', 'error'], zone.task.status) && (zone.changes === 0 || zone.task.progress === 100);\n        }\n      });\n    }\n  }, {\n    key: \"stopTaskPolling\",\n    value: function stopTaskPolling() {\n      if (this.poller) {\n        this.poller.kill();\n      }\n    }\n  }], [{\n    key: \"statusTemplate\",\n    value: function statusTemplate() {\n      return \"\\n      <span data-ng-if=\\\"$row.changes === 0\\\" class=\\\"oui-status oui-status_success\\\" data-translate=\\\"iplb_configuration_changes_0\\\"></span>\\n      <span data-ng-if=\\\"$row.changes === 1\\\" class=\\\"oui-status oui-status_warning\\\" data-translate=\\\"iplb_configuration_changes_1\\\"></span>\\n      <span data-ng-if=\\\"$row.changes > 1\\\" class=\\\"oui-status oui-status_warning\\\" data-translate=\\\"iplb_configuration_changes_count\\\" data-translate-values=\\\"{ count: $row.changes }\\\"></span>\\n    \";\n    }\n  }, {\n    key: \"actionTemplate\",\n    value: function actionTemplate() {\n      return \"\\n      <oui-action-menu data-align=\\\"end\\\" data-compact>\\n        <oui-action-menu-item\\n          data-text=\\\"{{'iplb_configuration_action_apply' | translate}}\\\"\\n          data-on-click=\\\"ctrl.applyChanges($row.id)\\\">\\n        </oui-action-menu-item>\\n      </oui-action-menu>\";\n    }\n  }]);\n\n  return IpLoadBalancerConfigurationCtrl;\n}();\n\nangular.module('managerApp').controller('IpLoadBalancerConfigurationCtrl', IpLoadBalancerConfigurationCtrl);",null]}